{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b61\u8fce\u4f86\u5230 FJCU CPC \u8a13\u7df4\u7db2 \u672c\u7db2\u7ad9\u7528\u65bc\u8f14\u4ec1\u5927\u5b78\u6821\u5167\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u57f9\u8a13\u8b1b\u7fa9\u5b58\u653e\u8655\u3002 \u539f\u8b1b\u7fa9 \u7528 Tex \u5beb\uff0c\u5f8c\u611f\u53d7\u5230\u7dad\u8b77\u4e4b\u56f0\u96e3\uff0c\u53c3\u8003\u4e86 OI Wiki \uff0c\u5229\u7528 mkdocs \u5efa\u7acb\u4e00\u500b\u958b\u653e\u81ea\u7531\u7de8\u8f2f\u7684\u7db2\u7ad9\u3002 \u76ee\u524d\u5df2\u5c07\u539f\u8b1b\u7fa9\u5927\u90e8\u5206\u5167\u5bb9\u642c\u81f3\u65bc\u6b64\uff0c\u73fe\u5728\u81f4\u529b\u65bc\u5de5\u5177\u7bc7\u548c\u8a9e\u6cd5\u7bc7\u7684\u64b0\u5beb\u3002 \u672c\u7db2\u7ad9\u53d7\u5230 OI Wiki \u555f\u767c\uff0c\u53c3\u8003\u4e86 github repo \u5efa\u7acb\uff0c\u5728\u6b64\u611f\u8b1d\u3002 \u672c\u7db2\u7ad9\u5167\u5bb9\u591a\u6578\u53c3\u8003\u677f\u4e2d\u8b1b\u7fa9\u3001\u5efa\u4e2d\u8b1b\u7fa9\u3001\u53ca\u6821\u5167\u6691\u8a13\u8b1b\u7fa9\u5167\u5bb9\uff0c\u5728\u6b64\u611f\u8b1d\u3002","title":"\u9996\u9801"},{"location":"#fjcu-cpc","text":"\u672c\u7db2\u7ad9\u7528\u65bc\u8f14\u4ec1\u5927\u5b78\u6821\u5167\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u57f9\u8a13\u8b1b\u7fa9\u5b58\u653e\u8655\u3002 \u539f\u8b1b\u7fa9 \u7528 Tex \u5beb\uff0c\u5f8c\u611f\u53d7\u5230\u7dad\u8b77\u4e4b\u56f0\u96e3\uff0c\u53c3\u8003\u4e86 OI Wiki \uff0c\u5229\u7528 mkdocs \u5efa\u7acb\u4e00\u500b\u958b\u653e\u81ea\u7531\u7de8\u8f2f\u7684\u7db2\u7ad9\u3002 \u76ee\u524d\u5df2\u5c07\u539f\u8b1b\u7fa9\u5927\u90e8\u5206\u5167\u5bb9\u642c\u81f3\u65bc\u6b64\uff0c\u73fe\u5728\u81f4\u529b\u65bc\u5de5\u5177\u7bc7\u548c\u8a9e\u6cd5\u7bc7\u7684\u64b0\u5beb\u3002 \u672c\u7db2\u7ad9\u53d7\u5230 OI Wiki \u555f\u767c\uff0c\u53c3\u8003\u4e86 github repo \u5efa\u7acb\uff0c\u5728\u6b64\u611f\u8b1d\u3002 \u672c\u7db2\u7ad9\u5167\u5bb9\u591a\u6578\u53c3\u8003\u677f\u4e2d\u8b1b\u7fa9\u3001\u5efa\u4e2d\u8b1b\u7fa9\u3001\u53ca\u6821\u5167\u6691\u8a13\u8b1b\u7fa9\u5167\u5bb9\uff0c\u5728\u6b64\u611f\u8b1d\u3002","title":"\u6b61\u8fce\u4f86\u5230 FJCU CPC \u8a13\u7df4\u7db2"},{"location":"algorithm/binarysearch/","text":"\u4e8c\u5206\u641c \u5c0d\u65bc\u4e00\u500b\u51fd\u6578 F(n) \uff0c\u5982\u679c\u5b58\u5728\u4e00\u500b x\uff0c\u5c0d\u65bc\u6240\u6709 \\geq x \u7684 a\uff0c F(a)= true\uff0c\u53cd\u4e4b F(a)= false\uff0c\u57fa\u65bc\u9019\u6a23\u7684\u55ae\u8abf\u6027\uff0c\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 T binary_search () { while ( L < R ) { int M = ( L + R ) >> 1 ; if ( F ( M )) R = M ; else L = M + 1 ; } return L ; } \u6709\u4e9b\u984c\u76ee\u70ba \"\u6700\u591a/\u6700\u5c11\u70ba\u4f55\u6703\u6210\u7acb\"\uff0c\u90a3\u9ebc\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u826f\u597d\u7684\u6642\u9593\u6aa2\u67e5\u51fa \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \"\uff0c\u4e26\u4e14 x \u5177\u6709\u55ae\u8abf\u6027\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u8f49\u63db\u6210 \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \" \u50b3\u63db\u6210 F(x) \uff0c\u5c0d\u7b54\u6848\uff08x\uff09\u9032\u884c\u4e8c\u5206\u641c\u3002 \u4e8c\u5206\u641c\u8981\u6ce8\u610f\u5169\u4ef6\u4e8b\uff0c\u4e00\u500b\u662f\u7121\u9650\u8ff4\u5708\uff0c\u8981\u907f\u514d\u5b83\u53ef\u4ee5\u5728\u8166\u4e2d\u5148\u6a21\u64ec\u4e00\u4e0b\u3002\u4e00\u500b\u662f\u5728\u5be6\u6578\u4e2d\u4e8c\u5206\u641c\uff0c\u56e0\u70ba\u5be6\u6578\u7684\u7a20\u5bc6\u6027\uff0c\u984c\u76ee\u6703\u6709\u8aa4\u5dee\u5bb9\u5fcd\u503c\uff08\u4f8b\u5982 10^{-6} )\uff0c\u53ea\u8981\u5728\u8aa4\u5dee\u5167\u90fd\u662f\u5bb9\u8a31\u7684\u3002 \u6700\u5c0f\u74f6\u9838\u6a39 \u6700\u5c0f\u74f6\u9838\u6a39 \u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u4e00\u9846\u751f\u6210\u6a39\uff0c\u6a39\u7684\u6700\u5927\u908a\u6b0a\u503c\u6700\u5c0f\u3002 \u679a\u8209\u6700\u5927\u908a\u6b0a\u503c w \uff0c\u7528 DFS/BFS \u6aa2\u67e5 \\leq w \u7684\u908a\u662f\u5426\u53ef\u4ee5\u5c07\u6240\u6709\u9ede\u76f8\u9023\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u6700\u5927\u908a\u6b0a\u503c\u6703 \\leq w \uff0c\u5426\u5247\u6703 >w \u3002 \u4e09\u5206\u641c \u5c0d\u65bc U \u578b\u51fd\u6578\uff08\u4f8b\u5982 y=F(x)=x^2 )\uff0c\u6211\u5011\u60f3\u8981\u627e\u5c0b\u5176\u6975\u503c\uff0c\u610f\u8b02\u5176\u5de6\u53f3\u5169\u5074\u7686\u5404\u81ea\u905e\u589e/\u905e\u6e1b\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e09\u5206\u641c\u4f86\u89e3\u6c7a\uff08\u4e8c\u5206\u641c\u53ea\u80fd\u89e3\u6c7a\u5168\u9ad4\u55ae\u8abf\u6027\uff0c\u4e0d\u80fd\u89e3\u6c7a\u6709\u5169\u908a\u7684\uff09\u3002 \u8003\u616e\u4e09\u5206\u5f8c\u5f9e\u5de6\u5230\u53f3\u56db\u500b\u63a1\u6a23\u9ede\u7684\u95dc\u4fc2 S(a) < S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) > S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a S(a) > S(b) > S(c) > S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u9019\u6bb5\u63cf\u6558\u9084\u53ef\u4ee5\u518d\u7c21\u5316\uff1a S(b) < S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(b) > S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u6bcf\u6b21\u8fed\u4ee3\u5148\u6c42\u51fa b,c \u7684\u503c\uff0c\u518d\u5229\u7528\u7c21\u5316\u904e\u7684\u898f\u5247\uff0c\u4f7f\u5340\u9593\u6e1b\u5c11 \\frac{1}{3} \u3002\u4ee4 EPS \u70ba\u8aa4\u5dee\u5bb9\u5fcd\u503c\uff0c\u4e00\u958b\u59cb\u7684\u7bc4\u570d\u70ba [L,R] \uff0c\u8ff4\u5708\u5927\u7d04\u9700\u8fed\u4ee3 \\log_{1.5}\\frac{R-L}{EPS} \u6b21\uff08 \\log_{1.5}10 \u5927\u7d04\u70ba 5.6 )\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 const double EPS = 1 e \u2212 7 ; double trinary_search ( double L , double R ) { while ( R - L > EPS ) { double mL = ( L + L + R ) / 3 , mR = ( L + R + R ) / 3 ; if ( f ( mR ) > f ( mL )) R = mR ; else L = mL ; } return L ; } \u53e6\u5916\u4e00\u7a2e\u505a\u6cd5\uff0c\u6703\u56fa\u5b9a\u8ff4\u5708\u8fed\u4ee3\u6b21\u6578\u3002 1 2 3 4 5 6 7 8 9 10 11 12 double trinary_search ( double L , double R ) { for ( int i = 0 ; i < 300 ; ++ i ) { double mL = ( L + L + R ) / 3 , mR = ( L + R + R ) / 3 ; if ( f ( mR ) > f ( mL )) R = mR ; else L = mL ; } return L ; } \u4f8b\u984c\u7df4\u7fd2 \u6700\u5c0f\u74f6\u9838\u6a39 UVa 01395 - Slim Span \u4e09\u5206\u641c UVa 01476 - Error Curves","title":"\u4e8c\u5206\u641c"},{"location":"algorithm/binarysearch/#_1","text":"\u5c0d\u65bc\u4e00\u500b\u51fd\u6578 F(n) \uff0c\u5982\u679c\u5b58\u5728\u4e00\u500b x\uff0c\u5c0d\u65bc\u6240\u6709 \\geq x \u7684 a\uff0c F(a)= true\uff0c\u53cd\u4e4b F(a)= false\uff0c\u57fa\u65bc\u9019\u6a23\u7684\u55ae\u8abf\u6027\uff0c\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 T binary_search () { while ( L < R ) { int M = ( L + R ) >> 1 ; if ( F ( M )) R = M ; else L = M + 1 ; } return L ; } \u6709\u4e9b\u984c\u76ee\u70ba \"\u6700\u591a/\u6700\u5c11\u70ba\u4f55\u6703\u6210\u7acb\"\uff0c\u90a3\u9ebc\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u826f\u597d\u7684\u6642\u9593\u6aa2\u67e5\u51fa \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \"\uff0c\u4e26\u4e14 x \u5177\u6709\u55ae\u8abf\u6027\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u8f49\u63db\u6210 \" \u5982\u679c\u4ee3\u50f9\u662f x \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \" \u50b3\u63db\u6210 F(x) \uff0c\u5c0d\u7b54\u6848\uff08x\uff09\u9032\u884c\u4e8c\u5206\u641c\u3002 \u4e8c\u5206\u641c\u8981\u6ce8\u610f\u5169\u4ef6\u4e8b\uff0c\u4e00\u500b\u662f\u7121\u9650\u8ff4\u5708\uff0c\u8981\u907f\u514d\u5b83\u53ef\u4ee5\u5728\u8166\u4e2d\u5148\u6a21\u64ec\u4e00\u4e0b\u3002\u4e00\u500b\u662f\u5728\u5be6\u6578\u4e2d\u4e8c\u5206\u641c\uff0c\u56e0\u70ba\u5be6\u6578\u7684\u7a20\u5bc6\u6027\uff0c\u984c\u76ee\u6703\u6709\u8aa4\u5dee\u5bb9\u5fcd\u503c\uff08\u4f8b\u5982 10^{-6} )\uff0c\u53ea\u8981\u5728\u8aa4\u5dee\u5167\u90fd\u662f\u5bb9\u8a31\u7684\u3002","title":"\u4e8c\u5206\u641c"},{"location":"algorithm/binarysearch/#_2","text":"\u6700\u5c0f\u74f6\u9838\u6a39 \u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u4e00\u9846\u751f\u6210\u6a39\uff0c\u6a39\u7684\u6700\u5927\u908a\u6b0a\u503c\u6700\u5c0f\u3002 \u679a\u8209\u6700\u5927\u908a\u6b0a\u503c w \uff0c\u7528 DFS/BFS \u6aa2\u67e5 \\leq w \u7684\u908a\u662f\u5426\u53ef\u4ee5\u5c07\u6240\u6709\u9ede\u76f8\u9023\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u6700\u5927\u908a\u6b0a\u503c\u6703 \\leq w \uff0c\u5426\u5247\u6703 >w \u3002","title":"\u6700\u5c0f\u74f6\u9838\u6a39"},{"location":"algorithm/binarysearch/#_3","text":"\u5c0d\u65bc U \u578b\u51fd\u6578\uff08\u4f8b\u5982 y=F(x)=x^2 )\uff0c\u6211\u5011\u60f3\u8981\u627e\u5c0b\u5176\u6975\u503c\uff0c\u610f\u8b02\u5176\u5de6\u53f3\u5169\u5074\u7686\u5404\u81ea\u905e\u589e/\u905e\u6e1b\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e09\u5206\u641c\u4f86\u89e3\u6c7a\uff08\u4e8c\u5206\u641c\u53ea\u80fd\u89e3\u6c7a\u5168\u9ad4\u55ae\u8abf\u6027\uff0c\u4e0d\u80fd\u89e3\u6c7a\u6709\u5169\u908a\u7684\uff09\u3002 \u8003\u616e\u4e09\u5206\u5f8c\u5f9e\u5de6\u5230\u53f3\u56db\u500b\u63a1\u6a23\u9ede\u7684\u95dc\u4fc2 S(a) < S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) < S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(a) > S(b) > S(c) < S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a S(a) > S(b) > S(c) > S(d) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u9019\u6bb5\u63cf\u6558\u9084\u53ef\u4ee5\u518d\u7c21\u5316\uff1a S(b) < S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a S(b) > S(c) \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a \u6bcf\u6b21\u8fed\u4ee3\u5148\u6c42\u51fa b,c \u7684\u503c\uff0c\u518d\u5229\u7528\u7c21\u5316\u904e\u7684\u898f\u5247\uff0c\u4f7f\u5340\u9593\u6e1b\u5c11 \\frac{1}{3} \u3002\u4ee4 EPS \u70ba\u8aa4\u5dee\u5bb9\u5fcd\u503c\uff0c\u4e00\u958b\u59cb\u7684\u7bc4\u570d\u70ba [L,R] \uff0c\u8ff4\u5708\u5927\u7d04\u9700\u8fed\u4ee3 \\log_{1.5}\\frac{R-L}{EPS} \u6b21\uff08 \\log_{1.5}10 \u5927\u7d04\u70ba 5.6 )\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 const double EPS = 1 e \u2212 7 ; double trinary_search ( double L , double R ) { while ( R - L > EPS ) { double mL = ( L + L + R ) / 3 , mR = ( L + R + R ) / 3 ; if ( f ( mR ) > f ( mL )) R = mR ; else L = mL ; } return L ; } \u53e6\u5916\u4e00\u7a2e\u505a\u6cd5\uff0c\u6703\u56fa\u5b9a\u8ff4\u5708\u8fed\u4ee3\u6b21\u6578\u3002 1 2 3 4 5 6 7 8 9 10 11 12 double trinary_search ( double L , double R ) { for ( int i = 0 ; i < 300 ; ++ i ) { double mL = ( L + L + R ) / 3 , mR = ( L + R + R ) / 3 ; if ( f ( mR ) > f ( mL )) R = mR ; else L = mL ; } return L ; }","title":"\u4e09\u5206\u641c"},{"location":"algorithm/binarysearch/#_4","text":"\u6700\u5c0f\u74f6\u9838\u6a39 UVa 01395 - Slim Span \u4e09\u5206\u641c UVa 01476 - Error Curves","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"algorithm/divideandconquer/","text":"\u5206\u6cbb \u5206\u6cbb\u6cd5\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u5b50\u554f\u984c\uff08\u5206\uff09\uff0c\u89e3\u6c7a\u5b8c\u518d\u5408\u4f75\u56de\u539f\u672c\u7684\u554f\u984c\uff08\u6cbb\uff09\u3002\\\u5206\u6cbb\u5206\u6210\u4ee5\u4e0b\u6b65\u9a5f \u5207\u5272\uff1a\u628a\u4e00\u500b\u554f\u984c\u5207\u6210\u5b50\u554f\u984c\u7136\u5f8c\u905e\u8ff4 \u7d42\u6b62\u689d\u4ef6\uff1a\u505c\u6b62\u5207\u5272\uff0c\u7b97\u51fa\u7b54\u6848\u56de\u50b3\u3002 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5b50\u554f\u984c\u7b97\u51fa\u7b54\u6848\u7136\u5f8c\u56de\u50b3 \u5408\u4f75\u6392\u5e8f\u6cd5 \u5207\u5272\uff1a\u628a\u5e8f\u5217\u5206\u6210\u5169\u534a\u7136\u5f8c\u905e\u8ff4\u3002 \u7d42\u6b62\u689d\u4ef6\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3\u3002 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5169\u5e8f\u5217\uff08\u5de6\u5e8f\u5217\u3001\u53f3\u5e8f\u5217\uff09\u9032\u884c\u6392\u5e8f\u3002\u5408\u4f75\u7684\u65b9\u6cd5\u70ba\u6bd4\u8f03\u5169\u5e8f\u5217\u6700\u5de6\u908a\u7684\u5143\u7d20\uff0c\u8f03\u5c0f\u7684\u5143\u7d20\u6392\u5728\u524d\u982d\uff0c\u8981\u7279\u5225\u6ce8\u610f\u67d0\u500b\u5e8f\u5217\u70ba\u7a7a\u7684\u60c5\u6cc1\u3002 \u5be6\u4f5c\u6642\u9700\u591a\u958b\u4e00\u500b\u9663\u5217\u66ab\u5b58\uff0c\u958b\u5169\u500b\u6574\u6578 L,R \u5206\u5225\u7dad\u8b77\u5de6\u53f3\u5e8f\u5217\u76ee\u524d\u6bd4\u8f03\u7684\u4f4d\u7f6e\u3002 \u5408\u4f75\u6392\u5e8f\u6cd5\u662f\u7a69\u5b9a\u7684\u6f14\u7b97\u6cd5\uff0c\u6703\u905e\u8ff4 \\log N \u5c64\uff0c\u5408\u4f75\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N) \uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 using namespace std ; const int N = 100 ; int arr [ N ], buf [ N ]; void sol ( int L , int R ) { // [L,R) if ( R - L <= 1 ) return ; int M = ( R + L ) / 2 ; sol ( L , M ); sol ( M , R ); int i = L , j = M , k = L ; while ( i < M || j < R ) { if ( i >= M ) buf [ k ] = arr [ j ++ ]; else if ( j >= R ) buf [ k ] = arr [ i ++ ]; else { if ( arr [ i ] <= arr [ j ]) buf [ k ] = arr [ i ++ ]; else { buf [ k ] = arr [ j ++ ]; } } k ++ ; } for ( int k = L ; k < R ; k ++ ) arr [ k ] = buf [ k ]; return ; } \u9006\u5e8f\u6578\u5c0d \u9006\u5e8f\u6578\u5c0d \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u5e8f\u5217\uff0c\u6c42\u6709\u5e7e\u7d44\u6578\u5c0d i,j \u6eff\u8db3 i < j \u4e14 a_i > a_j \u3002 \u9019\u984c\u6211\u5011\u53ef\u4ee5\u8f49\u63db\u6210\uff0c\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 N \uff0c\u5728\u53ea\u80fd\u5c07\u76f8\u9130\u4f4d\u7f6e\u4ea4\u63db\u7684\u60c5\u6cc1\u4e0b\uff0c\u9700\u8981\u63db\u5e7e\u6b21\u624d\u80fd\u5c07\u5e8f\u5217\u5f9e\u5c0f\u6392\u5230\u5927\u3002 \u4ea4\u63db\u6b21\u6578\u53ef\u4ee5\u5728\u5408\u4f75\u6392\u5e8f\u6cd5\u7684\u300c\u5408\u4f75\u300d\u7a0b\u5f0f\u78bc\u4e2d\u8a08\u7b97\uff0c\u53ea\u8981\u53f3\u5e8f\u5217\u6709\u5143\u7d20\u5c0f\u65bc\u524d\u9762\u7684\u5143\u7d20\uff0c\u5c31\u6703\u5f62\u6210\u9006\u5e8f\u6578\u5c0d\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7bc4\u4f8b\u7a0b\u5f0f\u78bc arr[i]>arr[j] \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u6bcf\u4e00\u500b\u5de6\u5e8f\u5217\u5c1a\u672a\u6392\u5e8f\u5b8c\u7562\u7684\u5143\u7d20\uff0c\u90fd\u6703\u548c arr[j] \u5f62\u6210\u9006\u5e8f\u6578\u5c0d\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define L 500010 int arr [ L ], buf [ L ]; long long sol ( int left , int right ) { if ( right - left <= 1 ) return 0 ; int middle = ( right + left ) / 2 ; long long ans = sol ( left , middle ) + sol ( middle , right ); int i = left , j = middle , k = left ; while ( i < middle || j < right ) { if ( i >= middle ) buf [ k ] = arr [ j ++ ]; else if ( j >= right ) buf [ k ] = arr [ i ++ ]; else { if ( arr [ i ] <= arr [ j ]) buf [ k ] = arr [ i ++ ]; else { buf [ k ] = arr [ j ++ ]; ans += middle - i ; } } k ++ ; } for ( int k = left ; k < right ; k ++ ) arr [ k ] = buf [ k ]; return ans ; } int main () { int n ; while ( cin >> n , n ) { memset ( arr , 0 , sizeof ( arr )); memset ( buf , 0 , sizeof ( buf )); for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ]; cout << sol ( 0 , n ) << endl ; } } \u5feb\u901f\u6392\u5e8f\u6cd5 \u5207\u5272\uff1a\u9078\u5b9a\u4e00\u500b\u57fa\u6e96\u9ede x \uff0c\u5c07\u5176\u4ed6\u6578\u5b57\u5206\u6210\u5169\u5806\uff0c < x \u7684\u6578\u5b57\u6392\u5728 x \u524d\u9762\uff0c \\geq x \u7684\u6578\u5b57\u6392\u653e\u5728 x \u7684\u5f8c\u9762\uff0c\u5206\u5806\u5b8c\u6210\uff0c\u518d\u5206\u5225\u905e\u8ff4\u6392\u5e8f\u5169\u5806\u3002 \u7d42\u6b62\u689d\u4ef6\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3\u3002 \u5408\u4f75\uff1a\u5df2\u7d93\u6392\u597d\u9806\u5e8f\uff0c\u4e0d\u9700\u8981\u984d\u5916\u7684\u5408\u4f75\u52d5\u4f5c\u3002 \u5feb\u901f\u6392\u5e8f\u6cd5\u662f\u4e00\u7a2e\u4e0d\u7a69\u5b9a\u7684\u6f14\u7b97\u6cd5\uff0c\u6700\u597d\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \uff0c\u6700\u5dee\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N^2) \u3002 \u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d \u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d \u7d66\u5b9a\u4e8c\u7dad\u5e73\u9762\u4e0a\u7684 N \u500b\u9ede\uff0c\u8981\u627e\u51fa\u8ddd\u96e2\u6700\u8fd1\u7684\u5169\u500b\u9ede\u3002 \u4e00\u958b\u59cb\u5148\u5c07\u9ede\u4f9d x \u5ea7\u6a19\u6392\u5e8f\u3002 \u5207\u5272\uff1a\u5c07\u9ede\u5206\u6210\u4e00\u534a\uff0c\u5206\u5225\u905e\u8ff4\u3002 \u7d42\u6b62\u689d\u4ef6\uff1a\u9ede\u6578 <3 \uff0c\u7528\u5169\u5c64\u8ff4\u5708\u627e\u51fa\u6700\u8fd1\u9ede\u5c0d\u3002 \u5408\u4f75\uff1a \u8a2d\u76ee\u524d\u6700\u5c0f\u7684\u9ede\u5c0d\u8ddd\u96e2\u70ba h \u3002 \u5de6\u908a\u9ede\u96c6 A_L \uff0c\u53f3\u908a\u9ede\u96c6\u70ba A_R \u3002 \u5169\u9ede\u96c6\u7684\u4e2d\u9ede\u70ba p_m(x_m,y_m) \u3002 \u8a2d\u9ede\u96c6 B=\\{p_i||x_i-x_m|< h\\} \u9996\u5148\u627e\u51fa B \uff0c\u56e0\u70ba\u8981\u627e\u5230\u6bd4 h \u627e\u7684\u9ede\u5c0d\u6703\u5728 B \u88e1\uff0c\u63a5\u8457\u628a B \u88e1\u7684\u9ede\u5c0d y \u5ea7\u6a19\u6392\u5e8f\u3002\u63a5\u8457\u5c07\u6bcf\u500b\u9ede\u548c\u6bd4\u81ea\u5df1\u7684 y \u5ea7\u6a19\u5927\u7684\u9ede\u53d6\u8ddd\u96e2\uff0c\u5982\u679c\u6709 < h \u5c31\u66f4\u65b0\u503c\uff0c\u5982\u679c\u9047\u5230\u8ddf\u81ea\u5df1\u7684 y \u5ea7\u6a19\u76f8\u5dee\u8d85\u904e h \u7684\u9ede\u5c31\u505c\u6b62\u6bd4\u8f03\uff08\u4e0d\u53ef\u80fd\u8ddd\u96e2\u6703 \\leq h )\u3002 \u5408\u4f75\u7684\u7b97\u6cd5\u770b\u4f3c\u662f O(N^2) \uff0c\u4f46\u5be6\u969b\u4e0a\u53ea\u6703\u5217\u8209 6 \u500b\u9ede\u5de6\u53f3\uff08\u9019\u65b9\u9762\u5f85\u8b49\u5be6\u6b63\u78ba\u500b\u6578\uff0c\u5728\u6b64\u53ea\u8981\u77e5\u9053\u662f\u4e00\u500b\u5f88\u5c0f\u7684\u6578\uff09\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <algorithm> #include <cmath> #include <iomanip> #include <iostream> using namespace std ; using dvt = double ; const dvt INF = 1e20 ; const int MXN = 1e5 + 5 ; struct dot { dvt x , y ; } p [ MXN ], tmp [ MXN ]; bool cmpX ( dot a , dot b ) { return a . x < b . x ; } bool cmpY ( dot a , dot b ) { return a . y < b . y ; } dvt getDis ( dot a , dot b ) { return sqrt (( a . x - b . x ) * ( a . x - b . x ) + ( a . y - b . y ) * ( a . y - b . y )); } dvt nearestPair ( int L , int R ) { if ( L == R ) { return INF ; } if ( L + 1 == R ) { return getDis ( p [ L ], p [ R ]); } int M = ( L + R ) >> 1 ; dvt d = min ( nearestPair ( L , M ), nearestPair ( M , R )); int k = 0 ; for ( int i = L ; i <= R ; ++ i ) { if ( fabs ( p [ i ]. x - p [ M ]. x ) <= d ) { tmp [ k ++ ] = p [ i ]; } } sort ( tmp , tmp + k , cmpY ); for ( int i = 0 ; i < k ; ++ i ) { for ( int j = i + 1 ; j < k && tmp [ j ]. y - tmp [ i ]. y < d ; ++ j ) { double d2 = getDis ( tmp [ i ], tmp [ j ]); d = min ( d , d2 ); } } return d ; } int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf%lf\" , & p [ i ]. x , & p [ i ]. y ); } sort ( p , p + n , cmpX ); dvt res = nearestPair ( 0 , n - 1 ); printf ( \"%.2lf \\n \" , res ); } UVA 1608\uff1aNon-boring sequences UVA 1608\uff1aNon-boring sequences \u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 A \uff0c\u5224\u65b7\u4f7f\u5426\u6bcf\u4e00\u500b\u9023\u7e8c\u7684\u5b50\u5e8f\u5217\uff0c\u90fd\u6709\u4e00\u500b\u6578\u5b57\uff0c\u53ea\u5728\u8a72\u5b50\u5e8f\u5217\u51fa\u73fe\u4e00\u6b21\u3002 \u53ea\u8981\u5728\u5e8f\u5217 [a_L,a_R] \u4e2d\u627e\u5230\u4e00\u500b\u7b26\u5408\u7684\u6578\u5b57 A_i=x \uff0c\u90a3\u9ebc\u6240\u6709\u5728 a_L \u5230 a_R \u4e4b\u9593\uff0c\u5305\u542b a_i \u7684\u9023\u7e8c\u5b50\u5e8f\u5217\u90fd\u7b26\u5408\uff0c\u63a5\u8457\u518d\u5224\u65b7 [a_L,i-1] \u548c [i+1,a_R] \u5169\u500b\u5b50\u5e8f\u5217\u662f\u5426\u7b26\u5408\u5373\u53ef\u3002 \u6b64\u5916\u5982\u679c A_i \u53ea\u5f9e\u4e00\u7aef\u958b\u59cb\u627e\uff0c\u6700\u5dee\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N^2) \uff0c\u70ba\u4e86\u907f\u514d\u8d85\u6642\uff0c\u5f9e\u5169\u7aef\u958b\u59cb\u627e\uff0c\u6700\u5dee\u7684\u60c5\u6cc1\u5c31\u662f\u6bcf\u6b21\u90fd\u525b\u597d\u5728\u4e2d\u9593\u627e\u5230 A_i \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #include <iostream> #include <map> using namespace std ; const int N = 200005 ; int a [ N ], L [ N ], R [ N ]; bool sol ( int a , int b ) { if ( a >= b ) return 1 ; for ( int i = 0 ; i <= ( b - a ) / 2 ; i ++ ) { if ( L [ a + i ] < a && b < R [ a + i ]) { return sol ( a , a + i - 1 ) && sol ( a + i + 1 , b ); } if ( L [ b - i ] < a && b < R [ b - i ]) { return sol ( a , b - i - 1 ) && sol ( b - i + 1 , b ); } } return 0 ; } int main () { int t , n ; map < int , int > tb ; cin >> t ; while ( t -- ) { cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ]; } tb . clear (); for ( int i = 0 ; i < n ; i ++ ) { if ( tb . find ( a [ i ]) == tb . end ()) { L [ i ] = -1 ; } else { L [ i ] = tb [ a [ i ]]; } tb [ a [ i ]] = i ; } tb . clear (); for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( tb . find ( a [ i ]) == tb . end ()) { R [ i ] = n ; } else { R [ i ] = tb [ a [ i ]]; } tb [ a [ i ]] = i ; } cout << ( sol ( 0 , n - 1 ) ? \"non-boring \\n \" : \"boring \\n \" ); } } \u4f8b\u984c\u7df4\u7fd2 \u5408\u4f75\u6392\u5e8f\u6cd5/\u9006\u5e8f\u6578\u5c0d UVa 10810 - Ultra-QuickSort \u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d UVa 10245 - The Closest Pair Problem \u8a08\u7b97\u5e7e\u4f55 \u5e73\u9762\u6700\u8fd1\u9ede\u5c0d nlogn \u5206\u6cbb\u6f14\u7b97\u6cd5 \u6c42\u5e73\u9762\u4e2d\u8ddd\u96e2\u6700\u8fd1\u7684\u5169\u9ede in IT \u95b1\u8b80 \u21a9 \u5e73\u9762\u6700\u8fd1\u70b9\u5bf9 in OI WiKi \u21a9","title":"\u5206\u6cbb"},{"location":"algorithm/divideandconquer/#_1","text":"\u5206\u6cbb\u6cd5\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u5b50\u554f\u984c\uff08\u5206\uff09\uff0c\u89e3\u6c7a\u5b8c\u518d\u5408\u4f75\u56de\u539f\u672c\u7684\u554f\u984c\uff08\u6cbb\uff09\u3002\\\u5206\u6cbb\u5206\u6210\u4ee5\u4e0b\u6b65\u9a5f \u5207\u5272\uff1a\u628a\u4e00\u500b\u554f\u984c\u5207\u6210\u5b50\u554f\u984c\u7136\u5f8c\u905e\u8ff4 \u7d42\u6b62\u689d\u4ef6\uff1a\u505c\u6b62\u5207\u5272\uff0c\u7b97\u51fa\u7b54\u6848\u56de\u50b3\u3002 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5b50\u554f\u984c\u7b97\u51fa\u7b54\u6848\u7136\u5f8c\u56de\u50b3","title":"\u5206\u6cbb"},{"location":"algorithm/divideandconquer/#_2","text":"\u5207\u5272\uff1a\u628a\u5e8f\u5217\u5206\u6210\u5169\u534a\u7136\u5f8c\u905e\u8ff4\u3002 \u7d42\u6b62\u689d\u4ef6\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3\u3002 \u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5169\u5e8f\u5217\uff08\u5de6\u5e8f\u5217\u3001\u53f3\u5e8f\u5217\uff09\u9032\u884c\u6392\u5e8f\u3002\u5408\u4f75\u7684\u65b9\u6cd5\u70ba\u6bd4\u8f03\u5169\u5e8f\u5217\u6700\u5de6\u908a\u7684\u5143\u7d20\uff0c\u8f03\u5c0f\u7684\u5143\u7d20\u6392\u5728\u524d\u982d\uff0c\u8981\u7279\u5225\u6ce8\u610f\u67d0\u500b\u5e8f\u5217\u70ba\u7a7a\u7684\u60c5\u6cc1\u3002 \u5be6\u4f5c\u6642\u9700\u591a\u958b\u4e00\u500b\u9663\u5217\u66ab\u5b58\uff0c\u958b\u5169\u500b\u6574\u6578 L,R \u5206\u5225\u7dad\u8b77\u5de6\u53f3\u5e8f\u5217\u76ee\u524d\u6bd4\u8f03\u7684\u4f4d\u7f6e\u3002 \u5408\u4f75\u6392\u5e8f\u6cd5\u662f\u7a69\u5b9a\u7684\u6f14\u7b97\u6cd5\uff0c\u6703\u905e\u8ff4 \\log N \u5c64\uff0c\u5408\u4f75\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N) \uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 using namespace std ; const int N = 100 ; int arr [ N ], buf [ N ]; void sol ( int L , int R ) { // [L,R) if ( R - L <= 1 ) return ; int M = ( R + L ) / 2 ; sol ( L , M ); sol ( M , R ); int i = L , j = M , k = L ; while ( i < M || j < R ) { if ( i >= M ) buf [ k ] = arr [ j ++ ]; else if ( j >= R ) buf [ k ] = arr [ i ++ ]; else { if ( arr [ i ] <= arr [ j ]) buf [ k ] = arr [ i ++ ]; else { buf [ k ] = arr [ j ++ ]; } } k ++ ; } for ( int k = L ; k < R ; k ++ ) arr [ k ] = buf [ k ]; return ; }","title":"\u5408\u4f75\u6392\u5e8f\u6cd5"},{"location":"algorithm/divideandconquer/#_3","text":"\u9006\u5e8f\u6578\u5c0d \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u5e8f\u5217\uff0c\u6c42\u6709\u5e7e\u7d44\u6578\u5c0d i,j \u6eff\u8db3 i < j \u4e14 a_i > a_j \u3002 \u9019\u984c\u6211\u5011\u53ef\u4ee5\u8f49\u63db\u6210\uff0c\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 N \uff0c\u5728\u53ea\u80fd\u5c07\u76f8\u9130\u4f4d\u7f6e\u4ea4\u63db\u7684\u60c5\u6cc1\u4e0b\uff0c\u9700\u8981\u63db\u5e7e\u6b21\u624d\u80fd\u5c07\u5e8f\u5217\u5f9e\u5c0f\u6392\u5230\u5927\u3002 \u4ea4\u63db\u6b21\u6578\u53ef\u4ee5\u5728\u5408\u4f75\u6392\u5e8f\u6cd5\u7684\u300c\u5408\u4f75\u300d\u7a0b\u5f0f\u78bc\u4e2d\u8a08\u7b97\uff0c\u53ea\u8981\u53f3\u5e8f\u5217\u6709\u5143\u7d20\u5c0f\u65bc\u524d\u9762\u7684\u5143\u7d20\uff0c\u5c31\u6703\u5f62\u6210\u9006\u5e8f\u6578\u5c0d\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7bc4\u4f8b\u7a0b\u5f0f\u78bc arr[i]>arr[j] \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u6bcf\u4e00\u500b\u5de6\u5e8f\u5217\u5c1a\u672a\u6392\u5e8f\u5b8c\u7562\u7684\u5143\u7d20\uff0c\u90fd\u6703\u548c arr[j] \u5f62\u6210\u9006\u5e8f\u6578\u5c0d\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define L 500010 int arr [ L ], buf [ L ]; long long sol ( int left , int right ) { if ( right - left <= 1 ) return 0 ; int middle = ( right + left ) / 2 ; long long ans = sol ( left , middle ) + sol ( middle , right ); int i = left , j = middle , k = left ; while ( i < middle || j < right ) { if ( i >= middle ) buf [ k ] = arr [ j ++ ]; else if ( j >= right ) buf [ k ] = arr [ i ++ ]; else { if ( arr [ i ] <= arr [ j ]) buf [ k ] = arr [ i ++ ]; else { buf [ k ] = arr [ j ++ ]; ans += middle - i ; } } k ++ ; } for ( int k = left ; k < right ; k ++ ) arr [ k ] = buf [ k ]; return ans ; } int main () { int n ; while ( cin >> n , n ) { memset ( arr , 0 , sizeof ( arr )); memset ( buf , 0 , sizeof ( buf )); for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ]; cout << sol ( 0 , n ) << endl ; } }","title":"\u9006\u5e8f\u6578\u5c0d"},{"location":"algorithm/divideandconquer/#_4","text":"\u5207\u5272\uff1a\u9078\u5b9a\u4e00\u500b\u57fa\u6e96\u9ede x \uff0c\u5c07\u5176\u4ed6\u6578\u5b57\u5206\u6210\u5169\u5806\uff0c < x \u7684\u6578\u5b57\u6392\u5728 x \u524d\u9762\uff0c \\geq x \u7684\u6578\u5b57\u6392\u653e\u5728 x \u7684\u5f8c\u9762\uff0c\u5206\u5806\u5b8c\u6210\uff0c\u518d\u5206\u5225\u905e\u8ff4\u6392\u5e8f\u5169\u5806\u3002 \u7d42\u6b62\u689d\u4ef6\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3\u3002 \u5408\u4f75\uff1a\u5df2\u7d93\u6392\u597d\u9806\u5e8f\uff0c\u4e0d\u9700\u8981\u984d\u5916\u7684\u5408\u4f75\u52d5\u4f5c\u3002 \u5feb\u901f\u6392\u5e8f\u6cd5\u662f\u4e00\u7a2e\u4e0d\u7a69\u5b9a\u7684\u6f14\u7b97\u6cd5\uff0c\u6700\u597d\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \uff0c\u6700\u5dee\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N^2) \u3002","title":"\u5feb\u901f\u6392\u5e8f\u6cd5"},{"location":"algorithm/divideandconquer/#_5","text":"\u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d \u7d66\u5b9a\u4e8c\u7dad\u5e73\u9762\u4e0a\u7684 N \u500b\u9ede\uff0c\u8981\u627e\u51fa\u8ddd\u96e2\u6700\u8fd1\u7684\u5169\u500b\u9ede\u3002 \u4e00\u958b\u59cb\u5148\u5c07\u9ede\u4f9d x \u5ea7\u6a19\u6392\u5e8f\u3002 \u5207\u5272\uff1a\u5c07\u9ede\u5206\u6210\u4e00\u534a\uff0c\u5206\u5225\u905e\u8ff4\u3002 \u7d42\u6b62\u689d\u4ef6\uff1a\u9ede\u6578 <3 \uff0c\u7528\u5169\u5c64\u8ff4\u5708\u627e\u51fa\u6700\u8fd1\u9ede\u5c0d\u3002 \u5408\u4f75\uff1a \u8a2d\u76ee\u524d\u6700\u5c0f\u7684\u9ede\u5c0d\u8ddd\u96e2\u70ba h \u3002 \u5de6\u908a\u9ede\u96c6 A_L \uff0c\u53f3\u908a\u9ede\u96c6\u70ba A_R \u3002 \u5169\u9ede\u96c6\u7684\u4e2d\u9ede\u70ba p_m(x_m,y_m) \u3002 \u8a2d\u9ede\u96c6 B=\\{p_i||x_i-x_m|< h\\} \u9996\u5148\u627e\u51fa B \uff0c\u56e0\u70ba\u8981\u627e\u5230\u6bd4 h \u627e\u7684\u9ede\u5c0d\u6703\u5728 B \u88e1\uff0c\u63a5\u8457\u628a B \u88e1\u7684\u9ede\u5c0d y \u5ea7\u6a19\u6392\u5e8f\u3002\u63a5\u8457\u5c07\u6bcf\u500b\u9ede\u548c\u6bd4\u81ea\u5df1\u7684 y \u5ea7\u6a19\u5927\u7684\u9ede\u53d6\u8ddd\u96e2\uff0c\u5982\u679c\u6709 < h \u5c31\u66f4\u65b0\u503c\uff0c\u5982\u679c\u9047\u5230\u8ddf\u81ea\u5df1\u7684 y \u5ea7\u6a19\u76f8\u5dee\u8d85\u904e h \u7684\u9ede\u5c31\u505c\u6b62\u6bd4\u8f03\uff08\u4e0d\u53ef\u80fd\u8ddd\u96e2\u6703 \\leq h )\u3002 \u5408\u4f75\u7684\u7b97\u6cd5\u770b\u4f3c\u662f O(N^2) \uff0c\u4f46\u5be6\u969b\u4e0a\u53ea\u6703\u5217\u8209 6 \u500b\u9ede\u5de6\u53f3\uff08\u9019\u65b9\u9762\u5f85\u8b49\u5be6\u6b63\u78ba\u500b\u6578\uff0c\u5728\u6b64\u53ea\u8981\u77e5\u9053\u662f\u4e00\u500b\u5f88\u5c0f\u7684\u6578\uff09\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <algorithm> #include <cmath> #include <iomanip> #include <iostream> using namespace std ; using dvt = double ; const dvt INF = 1e20 ; const int MXN = 1e5 + 5 ; struct dot { dvt x , y ; } p [ MXN ], tmp [ MXN ]; bool cmpX ( dot a , dot b ) { return a . x < b . x ; } bool cmpY ( dot a , dot b ) { return a . y < b . y ; } dvt getDis ( dot a , dot b ) { return sqrt (( a . x - b . x ) * ( a . x - b . x ) + ( a . y - b . y ) * ( a . y - b . y )); } dvt nearestPair ( int L , int R ) { if ( L == R ) { return INF ; } if ( L + 1 == R ) { return getDis ( p [ L ], p [ R ]); } int M = ( L + R ) >> 1 ; dvt d = min ( nearestPair ( L , M ), nearestPair ( M , R )); int k = 0 ; for ( int i = L ; i <= R ; ++ i ) { if ( fabs ( p [ i ]. x - p [ M ]. x ) <= d ) { tmp [ k ++ ] = p [ i ]; } } sort ( tmp , tmp + k , cmpY ); for ( int i = 0 ; i < k ; ++ i ) { for ( int j = i + 1 ; j < k && tmp [ j ]. y - tmp [ i ]. y < d ; ++ j ) { double d2 = getDis ( tmp [ i ], tmp [ j ]); d = min ( d , d2 ); } } return d ; } int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf%lf\" , & p [ i ]. x , & p [ i ]. y ); } sort ( p , p + n , cmpX ); dvt res = nearestPair ( 0 , n - 1 ); printf ( \"%.2lf \\n \" , res ); }","title":"\u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d"},{"location":"algorithm/divideandconquer/#uva-1608non-boring-sequences","text":"UVA 1608\uff1aNon-boring sequences \u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 A \uff0c\u5224\u65b7\u4f7f\u5426\u6bcf\u4e00\u500b\u9023\u7e8c\u7684\u5b50\u5e8f\u5217\uff0c\u90fd\u6709\u4e00\u500b\u6578\u5b57\uff0c\u53ea\u5728\u8a72\u5b50\u5e8f\u5217\u51fa\u73fe\u4e00\u6b21\u3002 \u53ea\u8981\u5728\u5e8f\u5217 [a_L,a_R] \u4e2d\u627e\u5230\u4e00\u500b\u7b26\u5408\u7684\u6578\u5b57 A_i=x \uff0c\u90a3\u9ebc\u6240\u6709\u5728 a_L \u5230 a_R \u4e4b\u9593\uff0c\u5305\u542b a_i \u7684\u9023\u7e8c\u5b50\u5e8f\u5217\u90fd\u7b26\u5408\uff0c\u63a5\u8457\u518d\u5224\u65b7 [a_L,i-1] \u548c [i+1,a_R] \u5169\u500b\u5b50\u5e8f\u5217\u662f\u5426\u7b26\u5408\u5373\u53ef\u3002 \u6b64\u5916\u5982\u679c A_i \u53ea\u5f9e\u4e00\u7aef\u958b\u59cb\u627e\uff0c\u6700\u5dee\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N^2) \uff0c\u70ba\u4e86\u907f\u514d\u8d85\u6642\uff0c\u5f9e\u5169\u7aef\u958b\u59cb\u627e\uff0c\u6700\u5dee\u7684\u60c5\u6cc1\u5c31\u662f\u6bcf\u6b21\u90fd\u525b\u597d\u5728\u4e2d\u9593\u627e\u5230 A_i \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #include <iostream> #include <map> using namespace std ; const int N = 200005 ; int a [ N ], L [ N ], R [ N ]; bool sol ( int a , int b ) { if ( a >= b ) return 1 ; for ( int i = 0 ; i <= ( b - a ) / 2 ; i ++ ) { if ( L [ a + i ] < a && b < R [ a + i ]) { return sol ( a , a + i - 1 ) && sol ( a + i + 1 , b ); } if ( L [ b - i ] < a && b < R [ b - i ]) { return sol ( a , b - i - 1 ) && sol ( b - i + 1 , b ); } } return 0 ; } int main () { int t , n ; map < int , int > tb ; cin >> t ; while ( t -- ) { cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ]; } tb . clear (); for ( int i = 0 ; i < n ; i ++ ) { if ( tb . find ( a [ i ]) == tb . end ()) { L [ i ] = -1 ; } else { L [ i ] = tb [ a [ i ]]; } tb [ a [ i ]] = i ; } tb . clear (); for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( tb . find ( a [ i ]) == tb . end ()) { R [ i ] = n ; } else { R [ i ] = tb [ a [ i ]]; } tb [ a [ i ]] = i ; } cout << ( sol ( 0 , n - 1 ) ? \"non-boring \\n \" : \"boring \\n \" ); } }","title":"UVA 1608\uff1aNon-boring sequences"},{"location":"algorithm/divideandconquer/#_6","text":"\u5408\u4f75\u6392\u5e8f\u6cd5/\u9006\u5e8f\u6578\u5c0d UVa 10810 - Ultra-QuickSort \u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d UVa 10245 - The Closest Pair Problem \u8a08\u7b97\u5e7e\u4f55 \u5e73\u9762\u6700\u8fd1\u9ede\u5c0d nlogn \u5206\u6cbb\u6f14\u7b97\u6cd5 \u6c42\u5e73\u9762\u4e2d\u8ddd\u96e2\u6700\u8fd1\u7684\u5169\u9ede in IT \u95b1\u8b80 \u21a9 \u5e73\u9762\u6700\u8fd1\u70b9\u5bf9 in OI WiKi \u21a9","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"algorithm/enumerate/","text":"\u679a\u8209\uff08Enumerate) \u679a\u8209\u662f\u6700\u76f4\u89c0\u7684\u6f14\u7b97\u6cd5\uff0c\u5217\u51fa\u6240\u6709\u53ef\u80fd\u7684\u89e3\uff0c\u4e26\u5224\u65b7\u662f\u5426\u7b26\u5408\u984c\u76ee\u8981\u6c42\u3002\u5bb9\u6613\u5beb\u51fa\uff0c\u4f46\u901a\u5e38\u6642\u9593\u8907\u96dc\u5ea6\u592a\u5927\u7121\u6cd5\u6eff\u8db3\u984c\u76ee\u6642\u9650\u3002 \u901a\u5e38\u5728\u8a2d\u8a08\u679a\u8209\u627e\u51fa\u9700\u8981\u679a\u8209\u7684\u53c3\u6578\uff0c\u4e26\u9078\u64c7\u662f\u8981\u7528\u8ff4\u5708\u6216\u905e\u8ff4\u65b9\u5f0f\u3002\u5982\u679c\u8a55\u4f30\u6642\u9593\u8907\u96dc\u5ea6\u7684\u6642\u5019\u767c\u73fe\u592a\u5927\u6642\uff0c\u53ef\u642d\u914d\u4e00\u4e9b\u6280\u5de7\u4f86\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u3002 \u7279\u6b8a\u679a\u8209\u578b\u614b \u96c6\u5408 \u5982\u679c\u984c\u76ee\u8981\u6c42\u548c\u96c6\u5408\u6709\u95dc\u4fc2\uff0c\u53ef\u5229\u7528\u4e8c\u9032\u4f4d\u8868\u793a\u4e00\u500b\u96c6\u5408\uff0c\u7b2c i \u4f4d\u4ee3\u8868\u7b2c i \u6a23\u7269\u54c1\u9078\u6216\u4e0d\u9078 (0 \u6216 1)\u3002\u6642\u9593\u8907\u96dc\u5ea6 O(2^n) \uff0c\u82e5\u57f7\u884c\u6642\u9650\u70ba 1 \u79d2\uff0c\u679a\u8209\u5927\u5c0f\u6700\u591a\u7d04 30 \u3002 \u9806\u5e8f \u5982\u679c\u984c\u76ee\u8981\u6c42\u548c\u9806\u5e8f\u6709\u95dc\u4fc2\uff0c\u53ef\u5229\u7528 <algorithm> \u5167\u7684 next_permutation \u6216 prev_permutation \u9054\u5230\u679a\u8209\u5143\u7d20\u7684\u5148\u5f8c\u9806\u5e8f\u3002\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N!) \uff0c\u82e5\u57f7\u884c\u6642\u9650\u70ba 1 \u79d2\uff0c\u679a\u8209\u5927\u5c0f\u6700\u591a\u7d04 10 \u3002 \u6280\u5de7 \u6e1b\u5c11\u679a\u8209\u7dad\u5ea6 \u627e\u51fa\u9700\u8981\u679a\u8209\u7684\u53c3\u6578\u5f8c\uff0c\u6709\u4e9b\u53c3\u6578\u53ef\u80fd\u662f\u548c\u7d50\u679c\u7121\u95dc\uff0c\u6216\u662f\u53ef\u7531\u5176\u4ed6\u53c3\u6578\u63a8\u5c0e\u51fa\uff0c\u79fb\u9664\u8a72\u53c3\u6578\u53ef\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u3002 uva10976 - Fractions Again? \u7d66\u5b9a k(0 < k \\leq 100) \uff0c\u8acb\u6c42\u51fa\u6240\u6709\u6b63\u6574\u6578\u89e3 x,y(x \\geq y) \uff0c\u4f7f\u5f97 \\frac{1}{k}=\\frac{1}{x}+\\frac{1}{y} \u6700\u76f4\u89c0\u7684\u89e3\u6cd5\u662f\u679a\u8209\u5169\u500b\u53c3\u6578 x,y \uff0c\u4f46\u5176\u5be6\u53ea\u8981\u77e5\u9053 x,y \u4efb\u610f\u4e00\u9805\u5c31\u53ef\u63a8\u51fa\u53e6\u5916\u4e00\u9805\uff0c\u6709\u6839\u64da\u984c\u76ee\u6211\u5011\u53ef\u4ee5\u5f97\u51fa y \u5728 (k,2k] \u4e4b\u9593\uff08\u7576 x=y \u6642\uff0c x=y=2k )\uff0c\u8981\u679a\u8209\u7684\u7bc4\u570d\u8f03\u5c0f\uff0c\u56e0\u6b64\u6211\u5011\u9078\u64c7\u679a\u8209 y \u7684\u7b97\u6cd5\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(k) \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> using namespace std ; #define N 10005 int main () { int n ; while ( cin >> n ) { int ans [ N ][ 2 ], ar = 0 ; for ( int i = n + 1 ; i <= 2 * n ; i ++ ) { int r = i - n ; if (( i * n ) % r == 0 ) { ans [ ar ][ 1 ] = i ; ans [ ar ][ 0 ] = ( i * n ) / r ; ar ++ ; } } printf ( \"%d \\n \" , ar ); for ( int i = 0 ; i < ar ; i ++ ) printf ( \"1/%d = 1/%d + 1/%d \\n \" , n , ans [ i ][ 0 ], ans [ i ][ 1 ]); } } \u96d9\u6307\u6a19 \u5229\u7528\u5169\u500b\u6307\u6a19\u7dda\u6027\u904d\u6b77\u9663\u5217\uff0c\u5f97\u51fa\u7b54\u6848\u3002\u300c\u96d9\u6307\u6a19\u300d\u53ef\u70ba\u5169\u500b\u6307\u6a19\u6216\u662f\u5169\u500b\u6574\u6578\u578b\u614b\u8b8a\u6578\u7d00\u9304\u4f4d\u7f6e\u3002 Question \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N,(N \\leq 100000) \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u4e00\u7d44 i,j(i>j) \u4f7f\u5f97 a_i-a_j \u6700\u5927 \u9996\u5148\u6703\u76f4\u89c0\u7684\u60f3\u5230\u4e00\u500b O(N^2) \u7684\u7b97\u6cd5\uff1a\u679a\u8209 i,j \u7b97\u51fa\u7d50\u679c\u5f8c\u53d6\u6700\u5927\u503c\u3002 \u63a5\u8457\u53ef\u4ee5\u60f3\u5230\u5c0d\u65bc\u6bcf\u500b\u6578\u5b57 a_i \u53ea\u8981\u548c\u6700\u5c0f\u7684 a_j ( min_j ) \u76f8\u6e1b\u5373\u53ef\uff0c\u53c8 min_j \u5177\u6709\u55ae\u8abf\u6027\uff0c\u5373 min_j \u7684\u4f4d\u7f6e\u6703\u4e0d\u8b8a\u6216\u5411\u53f3\u79fb\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u4e00\u500b\u6307\u6a19\u904d\u6b77\u5e8f\u5217\uff0c\u4e00\u500b\u6307\u6a19\u7d00\u9304\u7576\u524d min_j \u7684\u4f4d\u7f6e\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> #include <vector> using namespace std ; int main () { int n ; vector < int > v ( 100000 ); cin >> n ; for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ]; } int minj = 0 , ans = v [ 1 ] - v [ 0 ]; for ( int i = 1 ; i < n ; ++ i ) { ans = max ( ans , v [ i ] - v [ minj ]); if ( v [ i ] < v [ minj ]) { minj = i ; } } cout << ans << '\\n' ; } 11572 - Unique Snowflakes \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N,(N \\leq 100000) \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u6700\u9577\u5e8f\u5217\uff0c\u7576\u4e2d\u6c92\u6709\u91cd\u8907\u7684\u6578\u5b57 \u6211\u5011\u53ef\u4ee5\u8a2d\u5169\u500b\u6307\u6a19\uff0c\u5de6\u6307\u6a19\u548c\u53f3\u6307\u6a19\uff0c\u6bcf\u6b21\u8fed\u4ee3\u53f3\u6307\u6a19\u5148\u5f80\u524d\u4e00\u500b\u4f4d\u7f6e\uff0c\u5982\u679c\u5de6\u53f3\u6307\u6a19\u4e4b\u9593\u6709\u91cd\u8907\u7684\u6578\u5b57\uff0c\u5c31\u5c07\u5de6\u6307\u6a19\u5f80\u524d\u4e00\u500b\u4f4d\u7f6e\uff0c\u76f4\u5230\u6c92\u6709\u5de6\u53f3\u6307\u6a19\u4e4b\u9593\u6c92\u6709\u91cd\u8907\u7684\u6578\u5b57\u3002\u5229\u7528 set \u4f86\u7dad\u8b77\u662f\u5426\u6709\u91cd\u8907\u6578\u5b57\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N\\log N) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <iostream> #include <set> #include <vector> using namespace std ; int main () { int t , n ; cin >> t ; vector < int > v ( 1000000 ); set < int > st ; while ( t -- ) { st . clear (); cin >> n ; for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ]; } int ans = 0 ; for ( int L = 0 , R = 0 ; R < n ; ++ R ) { while ( st . count ( v [ R ])) { st . erase ( v [ L ++ ]); } st . insert ( v [ R ]); ans = max ( ans , R - L + 1 ); } cout << ans << '\\n' ; } } \u6298\u534a\u679a\u8209 \u6709\u6642\u9047\u5230\u8907\u96dc\u5ea6 O(2^n) \u7684\u7b97\u6cd5\uff0c\u5728\u7121\u6cd5\u7528\u5176\u4ed6\u65b9\u6cd5\u964d\u4f4e\u8907\u96dc\u5ea6\u60c5\u6cc1\u4e0b\uff0c\u53ef\u4ee5\u8a66\u8457\u5c07\u5143\u7d20\u5207\u6210\u5169\u534a\uff0c\u5206\u5225\u7b97\u51fa\u7b54\u6848\uff0c\u518d\u7528\u5176\u4ed6\u7b97\u6cd5\u7d44\u5408\u8d77\u4f86\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u901a\u5e38\u70ba O(2^{\\frac{n}{2}}) \u6216 O(2^{\\frac{n}{2}}\\log 2^{\\frac{n}{2}}) \u7b49\u3002 uva01326 - Jurassic Remains \u7d66\u5b9a N(N\\leq 24) \u4e32\u82f1\u6587\u5b57\u4e32\uff0c\u8acb\u6700\u591a\u53ef\u4ee5\u5305\u542b\u5e7e\u500b\u5b57\u4e32\uff0c\u4f7f\u5f97\u9019\u4e9b\u5b57\u4e32\u5167\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\u3002 \u5148\u628a\u6bcf\u500b\u5b57\u4e32\u8f49\u6210\u4e00\u500b\u4e8c\u9032\u4f4d\uff0c\u7b2c i \u4f4d\u8868\u793a\u5b57\u4e32\u6709\uff080: \u5076\u6578\uff0c1: \u5947\u6578\uff09\u500b\u5b57\u5143 i (0:A, 1:B, ...)\u3002\u5982\u679c\u6709\u4e00\u5806\u5b57\u4e32\u5167\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\uff0c\u90a3\u9ebc\u4ed6\u5011\u7684 xor \u503c =0 \u3002 \u9019\u984c\u95dc\u65bc\u300c\u96c6\u5408\u300d\uff0c\u53ef\u7528\u4e8c\u9032\u4f4d\u679a\u8209\uff0c\u52a0\u4e0a\u5224\u65b7\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N\\times 2^N) \u3002 \u9019\u984c\u66f4\u5feb\u7684\u505a\u6cd5\u662f\u62c6\u534a\u679a\u8209\uff0c\u628a\u524d \\frac{N}{2} \u548c\u5f8c \\frac{N}{2} \u5b57\u4e32\u5206\u5225\u679a\u8209\uff0c\u5206\u5225\u628a\u7d50\u679c\u5b58\u5728\u4e0d\u540c\u7684 map \u88e1\u9762\uff0c\u5982\u679c\u5169\u500b map \u6709\u76f8\u540c\u7684 xor \u503c\uff0c\u4ee3\u8868\u5169\u500b\u96c6\u5408\u7684\u5b57\u4e32\u5408\u8d77\u4f86\uff0c\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\u3002\u9019\u7a2e\u505a\u6cd5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(2^{\\frac{n}{2}}\\log 2^{\\frac{n}{2}}) \u526a\u679d \u5728\u4f7f\u7528\u905e\u8ff4\u679a\u8209\u6642\uff0c\u7576\u641c\u5c0b\u5230\u4e00\u7d44\u89e3\u7b54\uff0c\u767c\u73fe\u8a72\u7d44\u89e3\u548c\u5176\u5ef6\u4f38\u7684\u89e3\uff0c\u7686\u7121\u6cd5\u9054\u5230\u9054\u5230\u9700\u6c42\uff0c\u5c31\u505c\u6b62\u641c\u5c0b\uff0c\u6539\u641c\u5c0b\u5176\u4ed6\u7d44\u89e3\uff0c\u8a72\u6280\u5de7\u53eb\u505a\u300c\u526a\u679d\u300d\u3002 \u660e\u78ba\u5730\u4f86\u8aaa\uff0c\u4ee5\u4e0b\u72c0\u6cc1\u9700\u4f7f\u7528\u300c\u526a\u679d\u300d\uff1a \u767c\u73fe\u89e3\u7b54\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u5728\u6700\u4f73\u5316\u554f\u984c\uff0c\u767c\u73fe\u7121\u6cd5\u6210\u70ba\u6700\u4f73\u89e3\u3002 Qusetion \u7d66\u5b9a\u4e00\u500b\u6578\u5b57 N \uff0c\u8981\u4f60\u6c42\u51fa\u6709\u5e7e\u7d44\u6b63\u6574\u6578\u89e3 x_1,x_2,x_3,...,x_m \uff0c\u4f7f\u5f97 x_1+x_2+x_3+...+x_m = N \u3002\u9806\u5e8f\u4e0d\u540c\u8996\u70ba\u76f8\u540c\u89e3\uff0c\u4f8b\u5982 1+2 \u548c 2+1 \u8996\u70ba\u76f8\u540c\u7d44\u89e3\u3002 \u70ba\u4e86\u907f\u514d\u7b97\u5230\u91cd\u8907\u7d44\u5408\uff0c\u6211\u5011\u8b93 x_1 \\leq x_2 \\leq ... \u3002 \u8a2d\u76ee\u524d\u89e3\u7e3d\u548c\u70ba sum \uff0c\u6700\u5f8c\u4e00\u9805\u70ba max \uff0c\u4e0b\u4e00\u9805 i \u5c31\u5f9e max \u958b\u59cb\u5617\u8a66\uff0c\u7576\u5617\u8a66\u5230 sum + i > N \u6642\uff0c\u5c31\u505c\u6b62\u5617\u8a66\uff08\u526a\u679d\uff09\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> using namespace std ; int ans , tar ; void dfs ( int mx , int sum ) { if ( sum == tar ) { ++ ans ; } for ( int i = mx ;; ++ i ) { if ( sum + i > tar ) { break ; } dfs ( i , sum + i ); } return ; } int main () { while ( cin >> tar ) { ans = 0 ; dfs ( 1 , 0 ); cout << ans << '\\n' ; } }","title":"\u679a\u8209"},{"location":"algorithm/enumerate/#enumerate","text":"\u679a\u8209\u662f\u6700\u76f4\u89c0\u7684\u6f14\u7b97\u6cd5\uff0c\u5217\u51fa\u6240\u6709\u53ef\u80fd\u7684\u89e3\uff0c\u4e26\u5224\u65b7\u662f\u5426\u7b26\u5408\u984c\u76ee\u8981\u6c42\u3002\u5bb9\u6613\u5beb\u51fa\uff0c\u4f46\u901a\u5e38\u6642\u9593\u8907\u96dc\u5ea6\u592a\u5927\u7121\u6cd5\u6eff\u8db3\u984c\u76ee\u6642\u9650\u3002 \u901a\u5e38\u5728\u8a2d\u8a08\u679a\u8209\u627e\u51fa\u9700\u8981\u679a\u8209\u7684\u53c3\u6578\uff0c\u4e26\u9078\u64c7\u662f\u8981\u7528\u8ff4\u5708\u6216\u905e\u8ff4\u65b9\u5f0f\u3002\u5982\u679c\u8a55\u4f30\u6642\u9593\u8907\u96dc\u5ea6\u7684\u6642\u5019\u767c\u73fe\u592a\u5927\u6642\uff0c\u53ef\u642d\u914d\u4e00\u4e9b\u6280\u5de7\u4f86\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u3002","title":"\u679a\u8209\uff08Enumerate)"},{"location":"algorithm/enumerate/#_1","text":"","title":"\u7279\u6b8a\u679a\u8209\u578b\u614b"},{"location":"algorithm/enumerate/#_2","text":"\u5982\u679c\u984c\u76ee\u8981\u6c42\u548c\u96c6\u5408\u6709\u95dc\u4fc2\uff0c\u53ef\u5229\u7528\u4e8c\u9032\u4f4d\u8868\u793a\u4e00\u500b\u96c6\u5408\uff0c\u7b2c i \u4f4d\u4ee3\u8868\u7b2c i \u6a23\u7269\u54c1\u9078\u6216\u4e0d\u9078 (0 \u6216 1)\u3002\u6642\u9593\u8907\u96dc\u5ea6 O(2^n) \uff0c\u82e5\u57f7\u884c\u6642\u9650\u70ba 1 \u79d2\uff0c\u679a\u8209\u5927\u5c0f\u6700\u591a\u7d04 30 \u3002","title":"\u96c6\u5408"},{"location":"algorithm/enumerate/#_3","text":"\u5982\u679c\u984c\u76ee\u8981\u6c42\u548c\u9806\u5e8f\u6709\u95dc\u4fc2\uff0c\u53ef\u5229\u7528 <algorithm> \u5167\u7684 next_permutation \u6216 prev_permutation \u9054\u5230\u679a\u8209\u5143\u7d20\u7684\u5148\u5f8c\u9806\u5e8f\u3002\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N!) \uff0c\u82e5\u57f7\u884c\u6642\u9650\u70ba 1 \u79d2\uff0c\u679a\u8209\u5927\u5c0f\u6700\u591a\u7d04 10 \u3002","title":"\u9806\u5e8f"},{"location":"algorithm/enumerate/#_4","text":"","title":"\u6280\u5de7"},{"location":"algorithm/enumerate/#_5","text":"\u627e\u51fa\u9700\u8981\u679a\u8209\u7684\u53c3\u6578\u5f8c\uff0c\u6709\u4e9b\u53c3\u6578\u53ef\u80fd\u662f\u548c\u7d50\u679c\u7121\u95dc\uff0c\u6216\u662f\u53ef\u7531\u5176\u4ed6\u53c3\u6578\u63a8\u5c0e\u51fa\uff0c\u79fb\u9664\u8a72\u53c3\u6578\u53ef\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u3002 uva10976 - Fractions Again? \u7d66\u5b9a k(0 < k \\leq 100) \uff0c\u8acb\u6c42\u51fa\u6240\u6709\u6b63\u6574\u6578\u89e3 x,y(x \\geq y) \uff0c\u4f7f\u5f97 \\frac{1}{k}=\\frac{1}{x}+\\frac{1}{y} \u6700\u76f4\u89c0\u7684\u89e3\u6cd5\u662f\u679a\u8209\u5169\u500b\u53c3\u6578 x,y \uff0c\u4f46\u5176\u5be6\u53ea\u8981\u77e5\u9053 x,y \u4efb\u610f\u4e00\u9805\u5c31\u53ef\u63a8\u51fa\u53e6\u5916\u4e00\u9805\uff0c\u6709\u6839\u64da\u984c\u76ee\u6211\u5011\u53ef\u4ee5\u5f97\u51fa y \u5728 (k,2k] \u4e4b\u9593\uff08\u7576 x=y \u6642\uff0c x=y=2k )\uff0c\u8981\u679a\u8209\u7684\u7bc4\u570d\u8f03\u5c0f\uff0c\u56e0\u6b64\u6211\u5011\u9078\u64c7\u679a\u8209 y \u7684\u7b97\u6cd5\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(k) \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> using namespace std ; #define N 10005 int main () { int n ; while ( cin >> n ) { int ans [ N ][ 2 ], ar = 0 ; for ( int i = n + 1 ; i <= 2 * n ; i ++ ) { int r = i - n ; if (( i * n ) % r == 0 ) { ans [ ar ][ 1 ] = i ; ans [ ar ][ 0 ] = ( i * n ) / r ; ar ++ ; } } printf ( \"%d \\n \" , ar ); for ( int i = 0 ; i < ar ; i ++ ) printf ( \"1/%d = 1/%d + 1/%d \\n \" , n , ans [ i ][ 0 ], ans [ i ][ 1 ]); } }","title":"\u6e1b\u5c11\u679a\u8209\u7dad\u5ea6"},{"location":"algorithm/enumerate/#_6","text":"\u5229\u7528\u5169\u500b\u6307\u6a19\u7dda\u6027\u904d\u6b77\u9663\u5217\uff0c\u5f97\u51fa\u7b54\u6848\u3002\u300c\u96d9\u6307\u6a19\u300d\u53ef\u70ba\u5169\u500b\u6307\u6a19\u6216\u662f\u5169\u500b\u6574\u6578\u578b\u614b\u8b8a\u6578\u7d00\u9304\u4f4d\u7f6e\u3002 Question \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N,(N \\leq 100000) \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u4e00\u7d44 i,j(i>j) \u4f7f\u5f97 a_i-a_j \u6700\u5927 \u9996\u5148\u6703\u76f4\u89c0\u7684\u60f3\u5230\u4e00\u500b O(N^2) \u7684\u7b97\u6cd5\uff1a\u679a\u8209 i,j \u7b97\u51fa\u7d50\u679c\u5f8c\u53d6\u6700\u5927\u503c\u3002 \u63a5\u8457\u53ef\u4ee5\u60f3\u5230\u5c0d\u65bc\u6bcf\u500b\u6578\u5b57 a_i \u53ea\u8981\u548c\u6700\u5c0f\u7684 a_j ( min_j ) \u76f8\u6e1b\u5373\u53ef\uff0c\u53c8 min_j \u5177\u6709\u55ae\u8abf\u6027\uff0c\u5373 min_j \u7684\u4f4d\u7f6e\u6703\u4e0d\u8b8a\u6216\u5411\u53f3\u79fb\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u4e00\u500b\u6307\u6a19\u904d\u6b77\u5e8f\u5217\uff0c\u4e00\u500b\u6307\u6a19\u7d00\u9304\u7576\u524d min_j \u7684\u4f4d\u7f6e\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> #include <vector> using namespace std ; int main () { int n ; vector < int > v ( 100000 ); cin >> n ; for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ]; } int minj = 0 , ans = v [ 1 ] - v [ 0 ]; for ( int i = 1 ; i < n ; ++ i ) { ans = max ( ans , v [ i ] - v [ minj ]); if ( v [ i ] < v [ minj ]) { minj = i ; } } cout << ans << '\\n' ; } 11572 - Unique Snowflakes \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N,(N \\leq 100000) \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u6700\u9577\u5e8f\u5217\uff0c\u7576\u4e2d\u6c92\u6709\u91cd\u8907\u7684\u6578\u5b57 \u6211\u5011\u53ef\u4ee5\u8a2d\u5169\u500b\u6307\u6a19\uff0c\u5de6\u6307\u6a19\u548c\u53f3\u6307\u6a19\uff0c\u6bcf\u6b21\u8fed\u4ee3\u53f3\u6307\u6a19\u5148\u5f80\u524d\u4e00\u500b\u4f4d\u7f6e\uff0c\u5982\u679c\u5de6\u53f3\u6307\u6a19\u4e4b\u9593\u6709\u91cd\u8907\u7684\u6578\u5b57\uff0c\u5c31\u5c07\u5de6\u6307\u6a19\u5f80\u524d\u4e00\u500b\u4f4d\u7f6e\uff0c\u76f4\u5230\u6c92\u6709\u5de6\u53f3\u6307\u6a19\u4e4b\u9593\u6c92\u6709\u91cd\u8907\u7684\u6578\u5b57\u3002\u5229\u7528 set \u4f86\u7dad\u8b77\u662f\u5426\u6709\u91cd\u8907\u6578\u5b57\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N\\log N) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <iostream> #include <set> #include <vector> using namespace std ; int main () { int t , n ; cin >> t ; vector < int > v ( 1000000 ); set < int > st ; while ( t -- ) { st . clear (); cin >> n ; for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ]; } int ans = 0 ; for ( int L = 0 , R = 0 ; R < n ; ++ R ) { while ( st . count ( v [ R ])) { st . erase ( v [ L ++ ]); } st . insert ( v [ R ]); ans = max ( ans , R - L + 1 ); } cout << ans << '\\n' ; } }","title":"\u96d9\u6307\u6a19"},{"location":"algorithm/enumerate/#_7","text":"\u6709\u6642\u9047\u5230\u8907\u96dc\u5ea6 O(2^n) \u7684\u7b97\u6cd5\uff0c\u5728\u7121\u6cd5\u7528\u5176\u4ed6\u65b9\u6cd5\u964d\u4f4e\u8907\u96dc\u5ea6\u60c5\u6cc1\u4e0b\uff0c\u53ef\u4ee5\u8a66\u8457\u5c07\u5143\u7d20\u5207\u6210\u5169\u534a\uff0c\u5206\u5225\u7b97\u51fa\u7b54\u6848\uff0c\u518d\u7528\u5176\u4ed6\u7b97\u6cd5\u7d44\u5408\u8d77\u4f86\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u901a\u5e38\u70ba O(2^{\\frac{n}{2}}) \u6216 O(2^{\\frac{n}{2}}\\log 2^{\\frac{n}{2}}) \u7b49\u3002 uva01326 - Jurassic Remains \u7d66\u5b9a N(N\\leq 24) \u4e32\u82f1\u6587\u5b57\u4e32\uff0c\u8acb\u6700\u591a\u53ef\u4ee5\u5305\u542b\u5e7e\u500b\u5b57\u4e32\uff0c\u4f7f\u5f97\u9019\u4e9b\u5b57\u4e32\u5167\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\u3002 \u5148\u628a\u6bcf\u500b\u5b57\u4e32\u8f49\u6210\u4e00\u500b\u4e8c\u9032\u4f4d\uff0c\u7b2c i \u4f4d\u8868\u793a\u5b57\u4e32\u6709\uff080: \u5076\u6578\uff0c1: \u5947\u6578\uff09\u500b\u5b57\u5143 i (0:A, 1:B, ...)\u3002\u5982\u679c\u6709\u4e00\u5806\u5b57\u4e32\u5167\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\uff0c\u90a3\u9ebc\u4ed6\u5011\u7684 xor \u503c =0 \u3002 \u9019\u984c\u95dc\u65bc\u300c\u96c6\u5408\u300d\uff0c\u53ef\u7528\u4e8c\u9032\u4f4d\u679a\u8209\uff0c\u52a0\u4e0a\u5224\u65b7\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N\\times 2^N) \u3002 \u9019\u984c\u66f4\u5feb\u7684\u505a\u6cd5\u662f\u62c6\u534a\u679a\u8209\uff0c\u628a\u524d \\frac{N}{2} \u548c\u5f8c \\frac{N}{2} \u5b57\u4e32\u5206\u5225\u679a\u8209\uff0c\u5206\u5225\u628a\u7d50\u679c\u5b58\u5728\u4e0d\u540c\u7684 map \u88e1\u9762\uff0c\u5982\u679c\u5169\u500b map \u6709\u76f8\u540c\u7684 xor \u503c\uff0c\u4ee3\u8868\u5169\u500b\u96c6\u5408\u7684\u5b57\u4e32\u5408\u8d77\u4f86\uff0c\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\u3002\u9019\u7a2e\u505a\u6cd5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(2^{\\frac{n}{2}}\\log 2^{\\frac{n}{2}})","title":"\u6298\u534a\u679a\u8209"},{"location":"algorithm/enumerate/#_8","text":"\u5728\u4f7f\u7528\u905e\u8ff4\u679a\u8209\u6642\uff0c\u7576\u641c\u5c0b\u5230\u4e00\u7d44\u89e3\u7b54\uff0c\u767c\u73fe\u8a72\u7d44\u89e3\u548c\u5176\u5ef6\u4f38\u7684\u89e3\uff0c\u7686\u7121\u6cd5\u9054\u5230\u9054\u5230\u9700\u6c42\uff0c\u5c31\u505c\u6b62\u641c\u5c0b\uff0c\u6539\u641c\u5c0b\u5176\u4ed6\u7d44\u89e3\uff0c\u8a72\u6280\u5de7\u53eb\u505a\u300c\u526a\u679d\u300d\u3002 \u660e\u78ba\u5730\u4f86\u8aaa\uff0c\u4ee5\u4e0b\u72c0\u6cc1\u9700\u4f7f\u7528\u300c\u526a\u679d\u300d\uff1a \u767c\u73fe\u89e3\u7b54\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u5728\u6700\u4f73\u5316\u554f\u984c\uff0c\u767c\u73fe\u7121\u6cd5\u6210\u70ba\u6700\u4f73\u89e3\u3002 Qusetion \u7d66\u5b9a\u4e00\u500b\u6578\u5b57 N \uff0c\u8981\u4f60\u6c42\u51fa\u6709\u5e7e\u7d44\u6b63\u6574\u6578\u89e3 x_1,x_2,x_3,...,x_m \uff0c\u4f7f\u5f97 x_1+x_2+x_3+...+x_m = N \u3002\u9806\u5e8f\u4e0d\u540c\u8996\u70ba\u76f8\u540c\u89e3\uff0c\u4f8b\u5982 1+2 \u548c 2+1 \u8996\u70ba\u76f8\u540c\u7d44\u89e3\u3002 \u70ba\u4e86\u907f\u514d\u7b97\u5230\u91cd\u8907\u7d44\u5408\uff0c\u6211\u5011\u8b93 x_1 \\leq x_2 \\leq ... \u3002 \u8a2d\u76ee\u524d\u89e3\u7e3d\u548c\u70ba sum \uff0c\u6700\u5f8c\u4e00\u9805\u70ba max \uff0c\u4e0b\u4e00\u9805 i \u5c31\u5f9e max \u958b\u59cb\u5617\u8a66\uff0c\u7576\u5617\u8a66\u5230 sum + i > N \u6642\uff0c\u5c31\u505c\u6b62\u5617\u8a66\uff08\u526a\u679d\uff09\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> using namespace std ; int ans , tar ; void dfs ( int mx , int sum ) { if ( sum == tar ) { ++ ans ; } for ( int i = mx ;; ++ i ) { if ( sum + i > tar ) { break ; } dfs ( i , sum + i ); } return ; } int main () { while ( cin >> tar ) { ans = 0 ; dfs ( 1 , 0 ); cout << ans << '\\n' ; } }","title":"\u526a\u679d"},{"location":"algorithm/greedy/","text":"\u8caa\u5fc3 \u5c0d\u65bc\u4e00\u500b\u554f\u984c\uff0c\u59cb\u7d42\u4f7f\u7528\u540c\u4e00\u7a2e\u65b9\u6cd5\uff0c\u63a1\u53d6\u5728\u76ee\u524d\u72c0\u614b\u4e0b\u6700\u597d\u6216\u6700\u4f73\uff08\u5373\u6700\u6709\u5229\uff09\u7684\u9078\u64c7\u3002 \u6709\u7684\u8caa\u5fc3\u5f88\u76f4\u89c0\uff0c\u6709\u7684\u5c31\u9700\u8981\u901a\u9748\u624d\u89e3\u5f97\u51fa\u4f86\uff0c\u5f80\u5f80\u505a\u984c\u76ee\u4e00\u958b\u59cb\u60f3\u5230\u7684\u8fa6\u6cd5\u662f\u932f\u7684\uff0c\u76f4\u5230\u505a\u5230\u4e00\u534a\u624d\u767c\u73fe\u3002\u6240\u4ee5\u6211\u5011\u9700\u8981\u8b49\u660e\u65b9\u6cd5\u662f\u4e0d\u662f\u5c0d\u7684\uff0c\u9019\u5f80\u5f80\u9700\u8981\u6642\u9593\u7df4\u7fd2\uff0c\u624d\u4e0d\u6703\u5230\u6bd4\u8cfd\u9047\u5230\u6642\uff0c\u82b1\u4e86\u5f88\u591a\u6642\u9593\u53bb\u89e3\u984c\u3002 \u8b49\u660e\u7684\u8fa6\u6cd5 \u8a66\u5716\u69cb\u9020\u51fa\u53cd\u4f8b\uff0c\u767c\u73fe\u4ed6\u4e0d\u5b58\u5728\u3002 \u5982\u679c\u5b58\u5728\u66f4\u4f73\u89e3\u7684\u7b54\u6848\u6bd4\u4f60\u505a\u51fa\u4f86\u7684\u9084\u597d\uff0c\u90a3\u9019\u7d44\u89e3\u4e00\u5b9a\u53ef\u4ee5\u518d\u505a\u5f97\u66f4\u597d\uff0c\u9032\u800c\u9054\u5230\u53cd\u8b49\u51fa\u66f4\u4f73\u89e3\u4e0d\u5b58\u5728\u3002 \u4f7f\u7528\u905e\u8ff4\u8b49\u6cd5\uff1a(1) \u8b49\u660e\u57fa\u5e95\u662f\u5c0d\u7684\u3002(2) \u5047\u8a2d\u5c0f\u554f\u984c\u662f\u597d\u7684\u3002(3) \u4f60\u4e00\u5b9a\u53ef\u4ee5\u7528\u6700\u597d\u7684\u65b9\u6cd5\u4f86\u5c07\u554f\u984c\u7c21\u5316\u6210\u525b\u624d\u5047\u8a2d\u662f\u597d\u7684\u5c0f\u554f\u984c\u3002","title":"\u8caa\u5fc3"},{"location":"algorithm/greedy/#_1","text":"\u5c0d\u65bc\u4e00\u500b\u554f\u984c\uff0c\u59cb\u7d42\u4f7f\u7528\u540c\u4e00\u7a2e\u65b9\u6cd5\uff0c\u63a1\u53d6\u5728\u76ee\u524d\u72c0\u614b\u4e0b\u6700\u597d\u6216\u6700\u4f73\uff08\u5373\u6700\u6709\u5229\uff09\u7684\u9078\u64c7\u3002 \u6709\u7684\u8caa\u5fc3\u5f88\u76f4\u89c0\uff0c\u6709\u7684\u5c31\u9700\u8981\u901a\u9748\u624d\u89e3\u5f97\u51fa\u4f86\uff0c\u5f80\u5f80\u505a\u984c\u76ee\u4e00\u958b\u59cb\u60f3\u5230\u7684\u8fa6\u6cd5\u662f\u932f\u7684\uff0c\u76f4\u5230\u505a\u5230\u4e00\u534a\u624d\u767c\u73fe\u3002\u6240\u4ee5\u6211\u5011\u9700\u8981\u8b49\u660e\u65b9\u6cd5\u662f\u4e0d\u662f\u5c0d\u7684\uff0c\u9019\u5f80\u5f80\u9700\u8981\u6642\u9593\u7df4\u7fd2\uff0c\u624d\u4e0d\u6703\u5230\u6bd4\u8cfd\u9047\u5230\u6642\uff0c\u82b1\u4e86\u5f88\u591a\u6642\u9593\u53bb\u89e3\u984c\u3002","title":"\u8caa\u5fc3"},{"location":"algorithm/greedy/#_2","text":"\u8a66\u5716\u69cb\u9020\u51fa\u53cd\u4f8b\uff0c\u767c\u73fe\u4ed6\u4e0d\u5b58\u5728\u3002 \u5982\u679c\u5b58\u5728\u66f4\u4f73\u89e3\u7684\u7b54\u6848\u6bd4\u4f60\u505a\u51fa\u4f86\u7684\u9084\u597d\uff0c\u90a3\u9019\u7d44\u89e3\u4e00\u5b9a\u53ef\u4ee5\u518d\u505a\u5f97\u66f4\u597d\uff0c\u9032\u800c\u9054\u5230\u53cd\u8b49\u51fa\u66f4\u4f73\u89e3\u4e0d\u5b58\u5728\u3002 \u4f7f\u7528\u905e\u8ff4\u8b49\u6cd5\uff1a(1) \u8b49\u660e\u57fa\u5e95\u662f\u5c0d\u7684\u3002(2) \u5047\u8a2d\u5c0f\u554f\u984c\u662f\u597d\u7684\u3002(3) \u4f60\u4e00\u5b9a\u53ef\u4ee5\u7528\u6700\u597d\u7684\u65b9\u6cd5\u4f86\u5c07\u554f\u984c\u7c21\u5316\u6210\u525b\u624d\u5047\u8a2d\u662f\u597d\u7684\u5c0f\u554f\u984c\u3002","title":"\u8b49\u660e\u7684\u8fa6\u6cd5"},{"location":"contest/icpctaiwan2021/","text":"ICPC \u53f0\u7063\u8cfd\u5340 2021 C - Community Service \u984c\u610f\uff1a\u7d66\u5b9a\u5340\u9593 [0,n) \u548c e \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u985e\u578b\u64cd\u4f5c\u3002 1 name L R \uff1a\u5728 [L,R] \u4e4b\u9593\u63d2\u5165 name \u3002 2 L R \uff1a\u67e5\u8a62 [L,R] \u4e4b\u9593\u6700\u665a\u51fa\u73fe\u7684\u540d\u5b57\uff0c\u4e26\u5c07\u5176\u522a\u9664\u3002 \u4f5c\u6cd5\uff1a\u5c07\u6bcf\u500b name \u7de8\u865f\uff0c\u5229\u7528\u7dda\u6bb5\u6a39\u7dad\u8b77\u7de8\u865f\uff0c\u6bcf\u500b\u7bc0\u9ede\u9664\u4e86\u7d00\u9304\u4ee3\u8868\u5340\u9593\u5916\uff0c\u9084\u8981\u8a18\u9304 1) \u6240\u6709\u5b8c\u5168\u8986\u84cb\u8a72\u7bc0\u9ede\u5340\u9593\u7684\u7de8\u865f vector<int> semiStack 2) \u7d00\u9304\u6240\u6709\u5b50\u7bc0\u9ede\u7684 semiStack \u4e2d\u6700\u5927\u7684\u7de8\u865f ( mx )\u3002\u6709\u5169\u7a2e\u4fee\u6539\u64cd\u4f5c update \u548c rePushup \uff0c\u4ed6\u5011\u5169\u500b\u7684\u552f\u4e00\u5dee\u7570\u662f\uff0c\u524d\u8005\u5728 semiStack \u65b0\u589e\u7de8\u865f\uff0c\u5f8c\u8005\u5728 semiStack \u522a\u9664\u7de8\u865f\uff0c\u5169\u7a2e\u64cd\u4f5c\u53ef\u4ee5\u5206\u958b\u5beb\u6210\u5169\u500b\u51fd\u5f0f\uff0c\u6216\u5408\u4f75\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u5982\u679c\u5408\u4f75\u6210\u4e00\u500b\u51fd\u5f0f\u6bd4\u8f03\u597d\u7dad\u8b77\uff0c update/rePushup \u7684 pull \uff0c\u5c07 sumUp \u66f4\u65b0\u6210\u5de6\u53f3\u5b50\u7bc0\u9ede\u7684 sumUp \u548c mx \u3002\u6709\u4e00\u7a2e\u67e5\u8a62\u64cd\u4f5c query \u67e5\u8a62 [L,R] \u4e4b\u9593\u6700\u5927\u7684\u7de8\u865f\uff0c\u67e5\u8a62\u9664\u4e86\u53d6\u6240\u6709\u5b8c\u5168\u8986\u84cb\u8a72\u7bc0\u9ede\u5340\u9593\u7684 sumUp \u548c mx \uff0c\u9084\u8981\u53d6\u6cbf\u8def\u4e0a\u6240\u6709\u62dc\u8a2a\u904e\u9ede\u7684 mx \uff0c\u4f8b\u5982\u4e0b\u5716\u4e2d\u8981\u67e5\u8a62 [2,4] \u7684\u6700\u5927\u503c\uff0c\u9664\u4e86\u8981\u53c3\u8003 [2,3] \u548c [4,4] \u7684 sumUp \u548c mx \uff0c\u9084\u8981\u53c3\u8003 [0,7] \u3001 [0,3] \u3001 [4,7] \u548c [4,5] \u7684 mx \u3002 \u8907\u96dc\u5ea6\u5206\u6790\uff1a\u6240\u6709\u64cd\u4f5c\u7684\u8907\u96dc\u5ea6\u70ba O(log\\ n) \uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(elog\\ n) \u3002 \u5f8c\u8a18\uff1a\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u7528\u6307\u6a19\u5beb\u7684\uff0c\u539f\u672c\u6bd4\u8f03\u559c\u6b61\u6307\u6a19\u7684\u5beb\u6cd5\uff0c\u4f46\u53c3\u8003\u5225\u4eba\u7684\u7a0b\u5f0f\u78bc\u5f8c\uff0c\u767c\u73fe\u9663\u5217\u5beb\u6cd5\u4e5f\u6709\u597d\u8655\uff0c\u4f8b\u5982\u53ef\u4ee5\u4e00\u6b21\u628a\u8a18\u61b6\u9ad4\u958b\u597d\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc ( update \u548c rePushup \u5206\u958b\u5beb) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 2e5 + 5 ; const int MXV = 0 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); struct Node { int sumUp ; Node * lc , * rc ; vector < int > semiStack ; Node () : sumUp ( 0 ), lc ( nullptr ), rc ( nullptr ) {} }; bitset < MXN > isUsed ; int getMax ( Node * node ) { if ( ! node -> semiStack . empty ()) return max ( node -> sumUp , node -> semiStack . back ()); return node -> sumUp ; } int getTop ( Node * node ) { return ( node -> semiStack . size () ? node -> semiStack . back () : 0 ); } Node * update ( Node * node , int L , int R , int qL , int qR , int val ) { if ( ! node -> lc ) node -> lc = new Node (); if ( ! node -> rc ) node -> rc = new Node (); if ( qL <= L && R <= qR ) { if ( val ) node -> semiStack . push_back ( val ); return node ; } int M = ( L + R ) >> 1 ; if ( qL <= M ) node -> lc = update ( node -> lc , L , M , qL , qR , val ); if ( M < qR ) node -> rc = update ( node -> rc , M + 1 , R , qL , qR , val ); node -> sumUp = max ( getMax ( node -> lc ), getMax ( node -> rc )); return node ; } int query ( Node * node , int L , int R , int qL , int qR ) { if ( qL <= L && R <= qR ) { return node -> sumUp ; } int M = ( L + R ) >> 1 , ret ; if ( qR <= M ) ret = max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )); else if ( M < qL ) ret = max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR )); else ret = max ( max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )), max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR ))); return ret ; } Node * rePushUp ( Node * node , int L , int R , int qL , int qR , int val ) { if ( qL <= L && R <= qR ) { while ( ! node -> semiStack . empty () && isUsed [ node -> semiStack . back ()]) node -> semiStack . pop_back (); return node ; } int M = ( L + R ) >> 1 ; if ( qL <= M ) node -> lc = rePushUp ( node -> lc , L , M , qL , qR , val ); if ( M < qR ) node -> rc = rePushUp ( node -> rc , M + 1 , R , qL , qR , val ); node -> sumUp = max ( getMax ( node -> lc ), getMax ( node -> rc )); return node ; } int main () { IOS ; int n , m ; Node * root = new Node (); cin >> n >> m ; vector < string > name ( m + 5 ); vector < int > L ( m + 5 ), R ( m + 5 ); FOR ( i , 0 , n ) root = update ( root , 0 , n - 1 , i , i , 0 ); isUsed . reset (); FOR ( i , 1 , m + 1 ) { int typeID ; cin >> typeID ; if ( typeID == 1 ) { string s ; cin >> name [ i ] >> L [ i ] >> R [ i ]; root = update ( root , 0 , n - 1 , L [ i ], R [ i ], i ); } else { cin >> L [ i ] >> R [ i ]; int res = max ( getTop ( root ), query ( root , 0 , n - 1 , L [ i ], R [ i ])); if ( res ) { isUsed [ res ] = true ; cout << name [ res ] << '\\n' ; root = rePushUp ( root , 0 , n - 1 , L [ res ], R [ res ], res ); } else { cout << \">_< \\n \" ; } } } } \u53c3\u8003\u7a0b\u5f0f\u78bc ( update \u548c rePushup \u5408\u4f75) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 2e5 + 5 ; const int MXV = 0 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); struct Node { int sumUp ; Node * lc , * rc ; vector < int > semiStack ; Node () : sumUp ( 0 ), lc ( nullptr ), rc ( nullptr ) {} }; bitset < MXN > isUsed ; int getMax ( Node * node ) { if ( ! node -> semiStack . empty ()) return max ( node -> sumUp , node -> semiStack . back ()); return node -> sumUp ; } int getTop ( Node * node ) { return ( node -> semiStack . size () ? node -> semiStack . back () : 0 ); } Node * update ( Node * node , int L , int R , int qL , int qR , int val ) { if ( ! node -> lc ) node -> lc = new Node (); if ( ! node -> rc ) node -> rc = new Node (); if ( qL <= L && R <= qR ) { if ( val > 0 ) node -> semiStack . push_back ( val ); else if ( val < 0 ) while ( ! node -> semiStack . empty () && isUsed [ node -> semiStack . back ()]) node -> semiStack . pop_back (); return node ; } int M = ( L + R ) >> 1 ; if ( qL <= M ) node -> lc = update ( node -> lc , L , M , qL , qR , val ); if ( M < qR ) node -> rc = update ( node -> rc , M + 1 , R , qL , qR , val ); node -> sumUp = max ( getMax ( node -> lc ), getMax ( node -> rc )); return node ; } int query ( Node * node , int L , int R , int qL , int qR ) { if ( qL <= L && R <= qR ) { return node -> sumUp ; } int M = ( L + R ) >> 1 , ret ; if ( qR <= M ) ret = max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )); else if ( M < qL ) ret = max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR )); else ret = max ( max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )), max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR ))); return ret ; } int main () { IOS ; int n , m ; Node * root = new Node (); cin >> n >> m ; vector < string > name ( m + 5 ); vector < int > L ( m + 5 ), R ( m + 5 ); FOR ( i , 0 , n ) root = update ( root , 0 , n - 1 , i , i , 0 ); isUsed . reset (); FOR ( i , 1 , m + 1 ) { int typeID ; cin >> typeID ; if ( typeID == 1 ) { string s ; cin >> name [ i ] >> L [ i ] >> R [ i ]; root = update ( root , 0 , n - 1 , L [ i ], R [ i ], i ); } else { cin >> L [ i ] >> R [ i ]; int res = max ( getTop ( root ), query ( root , 0 , n - 1 , L [ i ], R [ i ])); if ( res ) { isUsed [ res ] = true ; cout << name [ res ] << '\\n' ; root = update ( root , 0 , n - 1 , L [ res ], R [ res ], -1 ); } else { cout << \">_< \\n \" ; } } } } D - Largest Remainder \u984c\u610f\uff1a\u7d66\u5b9a D \u500b\u5404\u4f4d\u6578\u5b57\uff0c\u53ef\u4ee5\u96a8\u610f\u6392\u5e8f\uff0c\u6c42\u51fa\u4e00\u500b\u6578\u5b57\uff0c\u5728 mod\\ K \u4e4b\u4e0b\u6709\u6700\u5927\u7684\u503c\uff0c\u5982\u679c\u6709\u591a\u7d44\u6578\u5b57\u7b26\u5408\uff0c\u8f38\u51fa\u6700\u5927\u7684\u503c\u3002 \u89e3\u6cd5\uff1a\u72c0\u614b DP\uff0c dp[s][r] \u4ee3\u8868\u5728\u9078\u53d6\u5b50\u96c6\u5408 s(0\\le s\\le 2^D-1) \u60c5\u6cc1\u4e0b\uff0c\u662f\u5426\u6709 mod\\ K=r \u7684\u6392\u5217\uff0c\u6700\u5927\u7684\u9918\u6578\u662f maxR = max_{0\\le k\\le K}{k|dp[2^D-1][k]=1} \uff0c\u53e6\u5916\u7dad\u8b77 ans[s][r] \u70ba\u5728\u9078\u53d6\u5b50\u96c6\u5408 s(0\\le s\\le 2^D-1) \u60c5\u6cc1\u4e0b\uff0c\u6709 mod\\ K=r \u7684\u6700\u5927\u6578\u5b57\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f ans[2^D-1][maxR] \u3002 \u8907\u96dc\u5ea6\u5206\u6790\uff1a\u6709 2^D\\times K \u500b\u72c0\u614b\uff0c\u6bcf\u500b\u72c0\u614b\u9700\u8981 D \u6b21\u8f49\u79fb\uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(2^D\\times D\\times K) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 0 ; const int MXV = 0 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); int a [ 16 ]; bool dp [( 1 << 16 )][ 205 ]; LL ans [( 1 << 16 )][ 205 ]; int main () { // IOS; int d , k ; cin >> d >> k ; memset ( dp , 0 , sizeof ( dp )); dp [ 0 ][ 0 ] = 1 ; FOR ( i , 0 , d ) cin >> a [ i ]; FOR ( i , 0 , d + 1 ) FOR ( j , 0 , ( 1 << d )) { if ( __builtin_popcount ( j ) != i ) continue ; bitset < 20 > used ( j ); FOR ( s , 0 , d ) if ( used [ s ] == false ) { int nj = ( j + ( 1 << s )); FOR ( r , 0 , k ) { int nr = ( r * 10 + a [ s ]) % k ; if ( dp [ j ][ r ] == false ) continue ; dp [ nj ][ nr ] = true ; LL tmp = ans [ j ][ r ] * 10 + a [ s ]; if ( ans [ nj ][ nr ] < tmp ) ans [ nj ][ nr ] = tmp ; } } } FORD ( i , k - 1 , 0 - 1 ) { if ( dp [( 1 << d ) - 1 ][ i ]) { cout << ans [( 1 << d ) - 1 ][ i ]; break ; } } }","title":"ICPC \u53f0\u7063\u8cfd\u5340 2021"},{"location":"contest/icpctaiwan2021/#icpc-2021","text":"","title":"ICPC \u53f0\u7063\u8cfd\u5340 2021"},{"location":"contest/icpctaiwan2021/#c-community-service","text":"\u984c\u610f\uff1a\u7d66\u5b9a\u5340\u9593 [0,n) \u548c e \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u985e\u578b\u64cd\u4f5c\u3002 1 name L R \uff1a\u5728 [L,R] \u4e4b\u9593\u63d2\u5165 name \u3002 2 L R \uff1a\u67e5\u8a62 [L,R] \u4e4b\u9593\u6700\u665a\u51fa\u73fe\u7684\u540d\u5b57\uff0c\u4e26\u5c07\u5176\u522a\u9664\u3002 \u4f5c\u6cd5\uff1a\u5c07\u6bcf\u500b name \u7de8\u865f\uff0c\u5229\u7528\u7dda\u6bb5\u6a39\u7dad\u8b77\u7de8\u865f\uff0c\u6bcf\u500b\u7bc0\u9ede\u9664\u4e86\u7d00\u9304\u4ee3\u8868\u5340\u9593\u5916\uff0c\u9084\u8981\u8a18\u9304 1) \u6240\u6709\u5b8c\u5168\u8986\u84cb\u8a72\u7bc0\u9ede\u5340\u9593\u7684\u7de8\u865f vector<int> semiStack 2) \u7d00\u9304\u6240\u6709\u5b50\u7bc0\u9ede\u7684 semiStack \u4e2d\u6700\u5927\u7684\u7de8\u865f ( mx )\u3002\u6709\u5169\u7a2e\u4fee\u6539\u64cd\u4f5c update \u548c rePushup \uff0c\u4ed6\u5011\u5169\u500b\u7684\u552f\u4e00\u5dee\u7570\u662f\uff0c\u524d\u8005\u5728 semiStack \u65b0\u589e\u7de8\u865f\uff0c\u5f8c\u8005\u5728 semiStack \u522a\u9664\u7de8\u865f\uff0c\u5169\u7a2e\u64cd\u4f5c\u53ef\u4ee5\u5206\u958b\u5beb\u6210\u5169\u500b\u51fd\u5f0f\uff0c\u6216\u5408\u4f75\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u5982\u679c\u5408\u4f75\u6210\u4e00\u500b\u51fd\u5f0f\u6bd4\u8f03\u597d\u7dad\u8b77\uff0c update/rePushup \u7684 pull \uff0c\u5c07 sumUp \u66f4\u65b0\u6210\u5de6\u53f3\u5b50\u7bc0\u9ede\u7684 sumUp \u548c mx \u3002\u6709\u4e00\u7a2e\u67e5\u8a62\u64cd\u4f5c query \u67e5\u8a62 [L,R] \u4e4b\u9593\u6700\u5927\u7684\u7de8\u865f\uff0c\u67e5\u8a62\u9664\u4e86\u53d6\u6240\u6709\u5b8c\u5168\u8986\u84cb\u8a72\u7bc0\u9ede\u5340\u9593\u7684 sumUp \u548c mx \uff0c\u9084\u8981\u53d6\u6cbf\u8def\u4e0a\u6240\u6709\u62dc\u8a2a\u904e\u9ede\u7684 mx \uff0c\u4f8b\u5982\u4e0b\u5716\u4e2d\u8981\u67e5\u8a62 [2,4] \u7684\u6700\u5927\u503c\uff0c\u9664\u4e86\u8981\u53c3\u8003 [2,3] \u548c [4,4] \u7684 sumUp \u548c mx \uff0c\u9084\u8981\u53c3\u8003 [0,7] \u3001 [0,3] \u3001 [4,7] \u548c [4,5] \u7684 mx \u3002 \u8907\u96dc\u5ea6\u5206\u6790\uff1a\u6240\u6709\u64cd\u4f5c\u7684\u8907\u96dc\u5ea6\u70ba O(log\\ n) \uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(elog\\ n) \u3002 \u5f8c\u8a18\uff1a\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u7528\u6307\u6a19\u5beb\u7684\uff0c\u539f\u672c\u6bd4\u8f03\u559c\u6b61\u6307\u6a19\u7684\u5beb\u6cd5\uff0c\u4f46\u53c3\u8003\u5225\u4eba\u7684\u7a0b\u5f0f\u78bc\u5f8c\uff0c\u767c\u73fe\u9663\u5217\u5beb\u6cd5\u4e5f\u6709\u597d\u8655\uff0c\u4f8b\u5982\u53ef\u4ee5\u4e00\u6b21\u628a\u8a18\u61b6\u9ad4\u958b\u597d\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc ( update \u548c rePushup \u5206\u958b\u5beb) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 2e5 + 5 ; const int MXV = 0 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); struct Node { int sumUp ; Node * lc , * rc ; vector < int > semiStack ; Node () : sumUp ( 0 ), lc ( nullptr ), rc ( nullptr ) {} }; bitset < MXN > isUsed ; int getMax ( Node * node ) { if ( ! node -> semiStack . empty ()) return max ( node -> sumUp , node -> semiStack . back ()); return node -> sumUp ; } int getTop ( Node * node ) { return ( node -> semiStack . size () ? node -> semiStack . back () : 0 ); } Node * update ( Node * node , int L , int R , int qL , int qR , int val ) { if ( ! node -> lc ) node -> lc = new Node (); if ( ! node -> rc ) node -> rc = new Node (); if ( qL <= L && R <= qR ) { if ( val ) node -> semiStack . push_back ( val ); return node ; } int M = ( L + R ) >> 1 ; if ( qL <= M ) node -> lc = update ( node -> lc , L , M , qL , qR , val ); if ( M < qR ) node -> rc = update ( node -> rc , M + 1 , R , qL , qR , val ); node -> sumUp = max ( getMax ( node -> lc ), getMax ( node -> rc )); return node ; } int query ( Node * node , int L , int R , int qL , int qR ) { if ( qL <= L && R <= qR ) { return node -> sumUp ; } int M = ( L + R ) >> 1 , ret ; if ( qR <= M ) ret = max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )); else if ( M < qL ) ret = max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR )); else ret = max ( max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )), max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR ))); return ret ; } Node * rePushUp ( Node * node , int L , int R , int qL , int qR , int val ) { if ( qL <= L && R <= qR ) { while ( ! node -> semiStack . empty () && isUsed [ node -> semiStack . back ()]) node -> semiStack . pop_back (); return node ; } int M = ( L + R ) >> 1 ; if ( qL <= M ) node -> lc = rePushUp ( node -> lc , L , M , qL , qR , val ); if ( M < qR ) node -> rc = rePushUp ( node -> rc , M + 1 , R , qL , qR , val ); node -> sumUp = max ( getMax ( node -> lc ), getMax ( node -> rc )); return node ; } int main () { IOS ; int n , m ; Node * root = new Node (); cin >> n >> m ; vector < string > name ( m + 5 ); vector < int > L ( m + 5 ), R ( m + 5 ); FOR ( i , 0 , n ) root = update ( root , 0 , n - 1 , i , i , 0 ); isUsed . reset (); FOR ( i , 1 , m + 1 ) { int typeID ; cin >> typeID ; if ( typeID == 1 ) { string s ; cin >> name [ i ] >> L [ i ] >> R [ i ]; root = update ( root , 0 , n - 1 , L [ i ], R [ i ], i ); } else { cin >> L [ i ] >> R [ i ]; int res = max ( getTop ( root ), query ( root , 0 , n - 1 , L [ i ], R [ i ])); if ( res ) { isUsed [ res ] = true ; cout << name [ res ] << '\\n' ; root = rePushUp ( root , 0 , n - 1 , L [ res ], R [ res ], res ); } else { cout << \">_< \\n \" ; } } } } \u53c3\u8003\u7a0b\u5f0f\u78bc ( update \u548c rePushup \u5408\u4f75) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 2e5 + 5 ; const int MXV = 0 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); struct Node { int sumUp ; Node * lc , * rc ; vector < int > semiStack ; Node () : sumUp ( 0 ), lc ( nullptr ), rc ( nullptr ) {} }; bitset < MXN > isUsed ; int getMax ( Node * node ) { if ( ! node -> semiStack . empty ()) return max ( node -> sumUp , node -> semiStack . back ()); return node -> sumUp ; } int getTop ( Node * node ) { return ( node -> semiStack . size () ? node -> semiStack . back () : 0 ); } Node * update ( Node * node , int L , int R , int qL , int qR , int val ) { if ( ! node -> lc ) node -> lc = new Node (); if ( ! node -> rc ) node -> rc = new Node (); if ( qL <= L && R <= qR ) { if ( val > 0 ) node -> semiStack . push_back ( val ); else if ( val < 0 ) while ( ! node -> semiStack . empty () && isUsed [ node -> semiStack . back ()]) node -> semiStack . pop_back (); return node ; } int M = ( L + R ) >> 1 ; if ( qL <= M ) node -> lc = update ( node -> lc , L , M , qL , qR , val ); if ( M < qR ) node -> rc = update ( node -> rc , M + 1 , R , qL , qR , val ); node -> sumUp = max ( getMax ( node -> lc ), getMax ( node -> rc )); return node ; } int query ( Node * node , int L , int R , int qL , int qR ) { if ( qL <= L && R <= qR ) { return node -> sumUp ; } int M = ( L + R ) >> 1 , ret ; if ( qR <= M ) ret = max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )); else if ( M < qL ) ret = max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR )); else ret = max ( max ( getTop ( node -> lc ), query ( node -> lc , L , M , qL , qR )), max ( getTop ( node -> rc ), query ( node -> rc , M + 1 , R , qL , qR ))); return ret ; } int main () { IOS ; int n , m ; Node * root = new Node (); cin >> n >> m ; vector < string > name ( m + 5 ); vector < int > L ( m + 5 ), R ( m + 5 ); FOR ( i , 0 , n ) root = update ( root , 0 , n - 1 , i , i , 0 ); isUsed . reset (); FOR ( i , 1 , m + 1 ) { int typeID ; cin >> typeID ; if ( typeID == 1 ) { string s ; cin >> name [ i ] >> L [ i ] >> R [ i ]; root = update ( root , 0 , n - 1 , L [ i ], R [ i ], i ); } else { cin >> L [ i ] >> R [ i ]; int res = max ( getTop ( root ), query ( root , 0 , n - 1 , L [ i ], R [ i ])); if ( res ) { isUsed [ res ] = true ; cout << name [ res ] << '\\n' ; root = update ( root , 0 , n - 1 , L [ res ], R [ res ], -1 ); } else { cout << \">_< \\n \" ; } } } }","title":"C - Community Service"},{"location":"contest/icpctaiwan2021/#d-largest-remainder","text":"\u984c\u610f\uff1a\u7d66\u5b9a D \u500b\u5404\u4f4d\u6578\u5b57\uff0c\u53ef\u4ee5\u96a8\u610f\u6392\u5e8f\uff0c\u6c42\u51fa\u4e00\u500b\u6578\u5b57\uff0c\u5728 mod\\ K \u4e4b\u4e0b\u6709\u6700\u5927\u7684\u503c\uff0c\u5982\u679c\u6709\u591a\u7d44\u6578\u5b57\u7b26\u5408\uff0c\u8f38\u51fa\u6700\u5927\u7684\u503c\u3002 \u89e3\u6cd5\uff1a\u72c0\u614b DP\uff0c dp[s][r] \u4ee3\u8868\u5728\u9078\u53d6\u5b50\u96c6\u5408 s(0\\le s\\le 2^D-1) \u60c5\u6cc1\u4e0b\uff0c\u662f\u5426\u6709 mod\\ K=r \u7684\u6392\u5217\uff0c\u6700\u5927\u7684\u9918\u6578\u662f maxR = max_{0\\le k\\le K}{k|dp[2^D-1][k]=1} \uff0c\u53e6\u5916\u7dad\u8b77 ans[s][r] \u70ba\u5728\u9078\u53d6\u5b50\u96c6\u5408 s(0\\le s\\le 2^D-1) \u60c5\u6cc1\u4e0b\uff0c\u6709 mod\\ K=r \u7684\u6700\u5927\u6578\u5b57\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f ans[2^D-1][maxR] \u3002 \u8907\u96dc\u5ea6\u5206\u6790\uff1a\u6709 2^D\\times K \u500b\u72c0\u614b\uff0c\u6bcf\u500b\u72c0\u614b\u9700\u8981 D \u6b21\u8f49\u79fb\uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(2^D\\times D\\times K) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 0 ; const int MXV = 0 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); int a [ 16 ]; bool dp [( 1 << 16 )][ 205 ]; LL ans [( 1 << 16 )][ 205 ]; int main () { // IOS; int d , k ; cin >> d >> k ; memset ( dp , 0 , sizeof ( dp )); dp [ 0 ][ 0 ] = 1 ; FOR ( i , 0 , d ) cin >> a [ i ]; FOR ( i , 0 , d + 1 ) FOR ( j , 0 , ( 1 << d )) { if ( __builtin_popcount ( j ) != i ) continue ; bitset < 20 > used ( j ); FOR ( s , 0 , d ) if ( used [ s ] == false ) { int nj = ( j + ( 1 << s )); FOR ( r , 0 , k ) { int nr = ( r * 10 + a [ s ]) % k ; if ( dp [ j ][ r ] == false ) continue ; dp [ nj ][ nr ] = true ; LL tmp = ans [ j ][ r ] * 10 + a [ s ]; if ( ans [ nj ][ nr ] < tmp ) ans [ nj ][ nr ] = tmp ; } } } FORD ( i , k - 1 , 0 - 1 ) { if ( dp [( 1 << d ) - 1 ][ i ]) { cout << ans [( 1 << d ) - 1 ][ i ]; break ; } } }","title":"D - Largest Remainder"},{"location":"dataStructure/bst/","text":"\u4e8c\u5143\u5e73\u8861\u6a39 (Balanced Binary Search Tree) \u4e8c\u5143\u641c\u5c0b\u6a39 \u4e8c\u5143\u641c\u5c0b\u6a39\u53ef\u5728 O(\\log N) \u6642\u9593\u5167\u5728\u5927\u5c0f\u70ba N \u7684\u8cc7\u6599\u4e2d\u627e\u5c0b\u5143\u7d20\u7684\u4e8c\u5143\u6a39\u3002 \u5b9a\u7fa9\uff1a \u7bc0\u9ede\u7684\u503c > \u5de6\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u7bc0\u9ede\u7684\u503c<\u53f3\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u5de6\u53f3\u5b50\u6a39\uff0c\u4e5f\u662f\u4e8c\u5143\u641c\u5c0b\u6a39 \u4e8c\u5143\u641c\u5c0b\u6a39\u5169\u500b\u91cd\u8981\u7684\u6307\u4ee4\u70ba\u63d2\u5165\u548c\u641c\u5c0b\u3002 \u63d2\u5165 \u5c0d\u65bc\u6bcf\u500b\u8981\u63d2\u5165\u7684\u503c val \u5f9e\u6839\u7bc0\u9ede\u958b\u59cb \u5982\u679c\u8a72\u7bc0\u9ede\u70ba\u7a7a\uff0c\u958b\u4e00\u500b\u65b0\u7bc0\u9ede\uff0c\u4e26\u5b58\u503c val \u5982\u679c\u8a72\u7bc0\u9928\u7684\u503c > val \uff0c val \u548c\u8a72\u7bc0\u9ede\u7684\u5de6\u5b50\u7bc0\u9ede\u6bd4\u8f03\uff0c\u53cd\u4e4b\u548c\u8a72\u7bc0\u9ede\u7684\u53f3\u5b50\u7bc0\u9ede\u6bd4\u8f03 \u6642\u9593\u8907\u96dc\u5ea6 \u6bcf\u4e00\u6b21\u63d2\u5165\u67e5\u8a62\u7684\u6642\u9593\u548c\u6df1\u5ea6\u6709\u95dc\uff0c\u6df1\u5ea6\u8d8a\u9ad8\uff0c\u6548\u7387\u8d8a\u4f4e\uff0c\u7406\u60f3\u5728\u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u6df1\u5ea6\u70ba O(N\\log N) \uff0c\u4f46\u6700\u5dee\u72c0\u6cc1\u6703\u662f O(N) \u641c\u5c0b \u5f9e\u6839\u7bc0\u9ede\u958b\u59cb\u641c\u5c0b \u6bd4\u8f03\u7bc0\u9ede\u503c\u548c\u641c\u5c0b\u503c \u5982\u679c\u6c92\u7bc0\u9ede\uff0c\u4ee3\u8868\u627e\u4e0d\u5230 \u5982\u679c\u7bc0\u9ede\u503c = \u641c\u5c0b\u503c\uff0c\u4ee3\u8868\u627e\u5230 \u5982\u679c\u7bc0\u9ede\u503c<\u641c\u5c0b\u503c\uff0c\u5411\u53f3\u5b50\u7bc0\u9ede\u8d70\uff0c\u56de\u5230 2. \u5982\u679c\u7bc0\u9ede\u503c > \u641c\u5c0b\u503c\uff0c\u5411\u5de6\u5b50\u7bc0\u9ede\u8d70\uff0c\u56de\u5230 2. \u4e8c\u5143\u5e73\u8861\u6a39 \u4e8c\u5143\u5e73\u8861\u6a39\u6703\u81ea\u52d5\u8abf\u6574\u9ad8\u5ea6\uff0c\u5e38\u898b\u7684\u6709\uff1a\u7d05\u9ed1\u6a39\u3001AVL \u6a39\u7b49\u3002 STL set \u548c map \u7686\u70ba\u7d05\u9ed1\u6a39\u5be6\u4f5c\uff0c\u652f\u63f4\u63d2\u5165\u3001\u522a\u9664\u53ca\u67e5\u8a62\u4e00\u500b\u503c\uff0c\u4e0d\u540c\u7684\u662f\uff0cset \u6703\u56de\u50b3\u9375\u503c\uff0cmap \u5247\u662f\u56de\u50b3\u5c0d\u61c9\u503c\uff0c\u4e5f\u53ef\u4ee5\u8aaa set \u7684\u9375\u503c\u548c\u5c0d\u61c9\u503c\u4e00\u6a23 set \u6a19\u982d\u6a94\uff1a <set> \u5efa\u69cb\u5f0f\uff1a set <T1> s s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) s.clear() \uff1a\u6e05\u9664\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(size) s.insert(T1 a) \uff1a\u52a0\u5165\u5143\u7d20 a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.erase(iterator first,iterator last) \uff1a\u522a\u9664 [first,last) , \u82e5\u6c92\u6709\u6307\u5b9a last \u5247\u53ea\u522a\u9664 first, \u8907\u96dc\u5ea6 O(\\log size) \u8207\u52a0\u4e0a\u5143\u7d20\u500b\u6578\u6709\u95dc\u4fc2\u3002 s.erase(T1 a) \uff1a\u522a\u9664\u9375\u503c a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.find(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u9375\u503c a \u7684\u8fed\u4ee3\u5668\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 s.end (), \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.count(T a) \uff1a\u8a08\u7b97\u6709\u5e7e\u500b\u5143\u7d20 a \u3002 s.lower_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc\u7b49\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 s.upper_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <set> using namespace std ; int main () { set < int > sb ; sb . insert ( 1 ); sb . insert ( 2 ); sb . insert ( 3 ); cout << \"1 : \" << ( sb . find ( 1 ) != sb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"1 : \" << ( sb . count ( 1 ) ? \"find \\n \" : \"not find \\n \" ); sb . erase ( 1 ); cout << \"1 : \" << ( sb . find ( 1 ) != sb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"1 : \" << ( sb . count ( 1 ) ? \"find \\n \" : \"not find \\n \" ); } /* 1 : find 1 : find 1 : not find 1 : not find */ pair \u5c07\u5169\u500b\u8cc7\u6599\u7d81\u5728\u4e00\u8d77 \u5236\u9020 pair \uff1a make_pair insert \u56de\u50b3 pair \u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\uff1afirst \u662f\u6307\u5411\u525b\u63d2\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3001second \u662f true; \u5982\u679c\u5143\u7d20\u5b58\u5728\uff1afirst \u662f\u6307\u5411\u9375\u503c\u70ba k.first \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0csecond \u662f false\u3002 map \u4e0b\u5217\u540c set m.size() m.empty() m.clear() m.count() m.erase(iterator first, iterator last) m.erase(T1 a) m.find(T1 a) m.lower_bound(T1 a) m.upper_bound(T1 a) m[a] \uff1a\u5b58\u53d6\u9375\u503c a \u5c0d\u61c9\u7684\u503c\uff0c\u82e5 a \u6c92\u6709\u5c0d\u61c9\u7684\u503c\uff0c\u6703\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u4f7f a \u5c0d\u61c9\u5230\u9810\u8a2d\u503c\u4e26\u56de\u50b3\u4e4b\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 m.insert(pair<T1,T2> a) \uff1a\u52a0\u5165\u5143\u7d20 a\uff0c\u5305\u542b\u9375\u503c\u548c\u5c0d\u61c9\u503c\uff0c\u8907\u96dc\u5ea6 O(\\log\\ size) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <iostream> #include <map> using namespace std ; int main () { map < string , int > tb ; tb [ \"123\" ] = 1 ; tb [ \"owowowo\" ] = 2 ; tb [ \"omomo\" ] = 3 ; cout << \"tb[ \\\" 123 \\\" ]: \" << tb [ \"123\" ] << '\\n' ; cout << \"tb[ \\\" owowowo \\\" ]: \" << tb [ \"owowowo\" ] << '\\n' ; cout << \"tb[ \\\" omomo \\\" ]: \" << tb [ \"omomo\" ] << '\\n' ; cout << \"123 : \" << ( tb . find ( \"123\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"123 : \" << ( tb . count ( \"123\" ) ? \"find \\n \" : \"not find \\n \" ); tb . clear (); cout << \"123 : \" << ( tb . find ( \"123\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"123 : \" << ( tb . count ( \"123\" ) ? \"find \\n \" : \"not find \\n \" ); cout << \"owo : \" << ( tb . find ( \"owo\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); tb . insert ( make_pair ( \"owo\" , 659 )); cout << \"owo : \" << ( tb . find ( \"owo\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); } /* tb[\"123\"]: 1 tb[\"owowowo\"]: 2 tb[\"omomo\"]: 3 123 : find 123 : find 123 : not find 123 : not find owo : not find owo : find */ multi - \u7cfb\u5217 \u53ef\u63d2\u5165\u91cd\u8907\u5143\u7d20\uff0c\u4ee3\u50f9\u70ba map \u7121\u6cd5\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 equal_range (T1 a)\uff1a\u56de\u50b3 iterator \u7684 pair<lower_bound (a),upper_bound (a)> \uff0c\u70ba a \u6240\u5728\u7bc4\u570d erase (T1 a)\uff1a\u522a\u9664\u6240\u6709\u5143\u7d20 a\uff0c\u5982\u679c\u53ea\u8981\u522a\u9664\u4e00\u500b\uff0c\u7528 s.erase (s.find (a)) unorder - \u7cfb\u5217 \u964d\u4f4e\u5e38\u6578\uff0c\u671f\u671b\u8907\u96dc\u5ea6\u5c11\u4e00\u500b log\uff0c\u4ee3\u50f9\u70ba\u4e0d\u6703\u6392\u5e8f\uff0c\u6c92\u6709 lower_bound/upper_bound \uff0c\u4e5f\u4e0d\u6703\u4f9d\u9375\u503c\u5927\u5c0f\u904d\u6b77\u3002\u8fed\u4ee3\u5668\u70ba\u55ae\u5411\u3002","title":"\u4e8c\u5143\u5e73\u8861\u6a39"},{"location":"dataStructure/bst/#balanced-binary-search-tree","text":"","title":"\u4e8c\u5143\u5e73\u8861\u6a39 (Balanced Binary Search Tree)"},{"location":"dataStructure/bst/#_1","text":"\u4e8c\u5143\u641c\u5c0b\u6a39\u53ef\u5728 O(\\log N) \u6642\u9593\u5167\u5728\u5927\u5c0f\u70ba N \u7684\u8cc7\u6599\u4e2d\u627e\u5c0b\u5143\u7d20\u7684\u4e8c\u5143\u6a39\u3002 \u5b9a\u7fa9\uff1a \u7bc0\u9ede\u7684\u503c > \u5de6\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u7bc0\u9ede\u7684\u503c<\u53f3\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u5de6\u53f3\u5b50\u6a39\uff0c\u4e5f\u662f\u4e8c\u5143\u641c\u5c0b\u6a39 \u4e8c\u5143\u641c\u5c0b\u6a39\u5169\u500b\u91cd\u8981\u7684\u6307\u4ee4\u70ba\u63d2\u5165\u548c\u641c\u5c0b\u3002","title":"\u4e8c\u5143\u641c\u5c0b\u6a39"},{"location":"dataStructure/bst/#_2","text":"\u5c0d\u65bc\u6bcf\u500b\u8981\u63d2\u5165\u7684\u503c val \u5f9e\u6839\u7bc0\u9ede\u958b\u59cb \u5982\u679c\u8a72\u7bc0\u9ede\u70ba\u7a7a\uff0c\u958b\u4e00\u500b\u65b0\u7bc0\u9ede\uff0c\u4e26\u5b58\u503c val \u5982\u679c\u8a72\u7bc0\u9928\u7684\u503c > val \uff0c val \u548c\u8a72\u7bc0\u9ede\u7684\u5de6\u5b50\u7bc0\u9ede\u6bd4\u8f03\uff0c\u53cd\u4e4b\u548c\u8a72\u7bc0\u9ede\u7684\u53f3\u5b50\u7bc0\u9ede\u6bd4\u8f03","title":"\u63d2\u5165"},{"location":"dataStructure/bst/#_3","text":"\u6bcf\u4e00\u6b21\u63d2\u5165\u67e5\u8a62\u7684\u6642\u9593\u548c\u6df1\u5ea6\u6709\u95dc\uff0c\u6df1\u5ea6\u8d8a\u9ad8\uff0c\u6548\u7387\u8d8a\u4f4e\uff0c\u7406\u60f3\u5728\u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u6df1\u5ea6\u70ba O(N\\log N) \uff0c\u4f46\u6700\u5dee\u72c0\u6cc1\u6703\u662f O(N)","title":"\u6642\u9593\u8907\u96dc\u5ea6"},{"location":"dataStructure/bst/#_4","text":"\u5f9e\u6839\u7bc0\u9ede\u958b\u59cb\u641c\u5c0b \u6bd4\u8f03\u7bc0\u9ede\u503c\u548c\u641c\u5c0b\u503c \u5982\u679c\u6c92\u7bc0\u9ede\uff0c\u4ee3\u8868\u627e\u4e0d\u5230 \u5982\u679c\u7bc0\u9ede\u503c = \u641c\u5c0b\u503c\uff0c\u4ee3\u8868\u627e\u5230 \u5982\u679c\u7bc0\u9ede\u503c<\u641c\u5c0b\u503c\uff0c\u5411\u53f3\u5b50\u7bc0\u9ede\u8d70\uff0c\u56de\u5230 2. \u5982\u679c\u7bc0\u9ede\u503c > \u641c\u5c0b\u503c\uff0c\u5411\u5de6\u5b50\u7bc0\u9ede\u8d70\uff0c\u56de\u5230 2.","title":"\u641c\u5c0b"},{"location":"dataStructure/bst/#_5","text":"\u4e8c\u5143\u5e73\u8861\u6a39\u6703\u81ea\u52d5\u8abf\u6574\u9ad8\u5ea6\uff0c\u5e38\u898b\u7684\u6709\uff1a\u7d05\u9ed1\u6a39\u3001AVL \u6a39\u7b49\u3002","title":"\u4e8c\u5143\u5e73\u8861\u6a39"},{"location":"dataStructure/bst/#stl","text":"set \u548c map \u7686\u70ba\u7d05\u9ed1\u6a39\u5be6\u4f5c\uff0c\u652f\u63f4\u63d2\u5165\u3001\u522a\u9664\u53ca\u67e5\u8a62\u4e00\u500b\u503c\uff0c\u4e0d\u540c\u7684\u662f\uff0cset \u6703\u56de\u50b3\u9375\u503c\uff0cmap \u5247\u662f\u56de\u50b3\u5c0d\u61c9\u503c\uff0c\u4e5f\u53ef\u4ee5\u8aaa set \u7684\u9375\u503c\u548c\u5c0d\u61c9\u503c\u4e00\u6a23","title":"STL"},{"location":"dataStructure/bst/#set","text":"\u6a19\u982d\u6a94\uff1a <set> \u5efa\u69cb\u5f0f\uff1a set <T1> s s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) s.clear() \uff1a\u6e05\u9664\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(size) s.insert(T1 a) \uff1a\u52a0\u5165\u5143\u7d20 a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.erase(iterator first,iterator last) \uff1a\u522a\u9664 [first,last) , \u82e5\u6c92\u6709\u6307\u5b9a last \u5247\u53ea\u522a\u9664 first, \u8907\u96dc\u5ea6 O(\\log size) \u8207\u52a0\u4e0a\u5143\u7d20\u500b\u6578\u6709\u95dc\u4fc2\u3002 s.erase(T1 a) \uff1a\u522a\u9664\u9375\u503c a, \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.find(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u9375\u503c a \u7684\u8fed\u4ee3\u5668\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 s.end (), \u8907\u96dc\u5ea6 O(\\log size) \u3002 s.count(T a) \uff1a\u8a08\u7b97\u6709\u5e7e\u500b\u5143\u7d20 a \u3002 s.lower_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc\u7b49\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 s.upper_bound(T1 a) \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> #include <set> using namespace std ; int main () { set < int > sb ; sb . insert ( 1 ); sb . insert ( 2 ); sb . insert ( 3 ); cout << \"1 : \" << ( sb . find ( 1 ) != sb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"1 : \" << ( sb . count ( 1 ) ? \"find \\n \" : \"not find \\n \" ); sb . erase ( 1 ); cout << \"1 : \" << ( sb . find ( 1 ) != sb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"1 : \" << ( sb . count ( 1 ) ? \"find \\n \" : \"not find \\n \" ); } /* 1 : find 1 : find 1 : not find 1 : not find */","title":"set"},{"location":"dataStructure/bst/#pair","text":"\u5c07\u5169\u500b\u8cc7\u6599\u7d81\u5728\u4e00\u8d77 \u5236\u9020 pair \uff1a make_pair","title":"pair"},{"location":"dataStructure/bst/#insert","text":"pair \u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\uff1afirst \u662f\u6307\u5411\u525b\u63d2\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3001second \u662f true; \u5982\u679c\u5143\u7d20\u5b58\u5728\uff1afirst \u662f\u6307\u5411\u9375\u503c\u70ba k.first \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0csecond \u662f false\u3002","title":"insert \u56de\u50b3"},{"location":"dataStructure/bst/#map","text":"\u4e0b\u5217\u540c set m.size() m.empty() m.clear() m.count() m.erase(iterator first, iterator last) m.erase(T1 a) m.find(T1 a) m.lower_bound(T1 a) m.upper_bound(T1 a) m[a] \uff1a\u5b58\u53d6\u9375\u503c a \u5c0d\u61c9\u7684\u503c\uff0c\u82e5 a \u6c92\u6709\u5c0d\u61c9\u7684\u503c\uff0c\u6703\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u4f7f a \u5c0d\u61c9\u5230\u9810\u8a2d\u503c\u4e26\u56de\u50b3\u4e4b\u3002\u8907\u96dc\u5ea6 O(\\log size) \u3002 m.insert(pair<T1,T2> a) \uff1a\u52a0\u5165\u5143\u7d20 a\uff0c\u5305\u542b\u9375\u503c\u548c\u5c0d\u61c9\u503c\uff0c\u8907\u96dc\u5ea6 O(\\log\\ size) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <iostream> #include <map> using namespace std ; int main () { map < string , int > tb ; tb [ \"123\" ] = 1 ; tb [ \"owowowo\" ] = 2 ; tb [ \"omomo\" ] = 3 ; cout << \"tb[ \\\" 123 \\\" ]: \" << tb [ \"123\" ] << '\\n' ; cout << \"tb[ \\\" owowowo \\\" ]: \" << tb [ \"owowowo\" ] << '\\n' ; cout << \"tb[ \\\" omomo \\\" ]: \" << tb [ \"omomo\" ] << '\\n' ; cout << \"123 : \" << ( tb . find ( \"123\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"123 : \" << ( tb . count ( \"123\" ) ? \"find \\n \" : \"not find \\n \" ); tb . clear (); cout << \"123 : \" << ( tb . find ( \"123\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); cout << \"123 : \" << ( tb . count ( \"123\" ) ? \"find \\n \" : \"not find \\n \" ); cout << \"owo : \" << ( tb . find ( \"owo\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); tb . insert ( make_pair ( \"owo\" , 659 )); cout << \"owo : \" << ( tb . find ( \"owo\" ) != tb . end () ? \"find \\n \" : \"not find \\n \" ); } /* tb[\"123\"]: 1 tb[\"owowowo\"]: 2 tb[\"omomo\"]: 3 123 : find 123 : find 123 : not find 123 : not find owo : not find owo : find */","title":"map"},{"location":"dataStructure/bst/#multi-","text":"\u53ef\u63d2\u5165\u91cd\u8907\u5143\u7d20\uff0c\u4ee3\u50f9\u70ba map \u7121\u6cd5\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 equal_range (T1 a)\uff1a\u56de\u50b3 iterator \u7684 pair<lower_bound (a),upper_bound (a)> \uff0c\u70ba a \u6240\u5728\u7bc4\u570d erase (T1 a)\uff1a\u522a\u9664\u6240\u6709\u5143\u7d20 a\uff0c\u5982\u679c\u53ea\u8981\u522a\u9664\u4e00\u500b\uff0c\u7528 s.erase (s.find (a))","title":"multi - \u7cfb\u5217"},{"location":"dataStructure/bst/#unorder-","text":"\u964d\u4f4e\u5e38\u6578\uff0c\u671f\u671b\u8907\u96dc\u5ea6\u5c11\u4e00\u500b log\uff0c\u4ee3\u50f9\u70ba\u4e0d\u6703\u6392\u5e8f\uff0c\u6c92\u6709 lower_bound/upper_bound \uff0c\u4e5f\u4e0d\u6703\u4f9d\u9375\u503c\u5927\u5c0f\u904d\u6b77\u3002\u8fed\u4ee3\u5668\u70ba\u55ae\u5411\u3002","title":"unorder - \u7cfb\u5217"},{"location":"dataStructure/heap/","text":"\u5806 (Heap) \u7c21\u4ecb\uff1a\u5728 O(log N) \u6642\u9593\u7dad\u8b77\u6700\u5927/\u6700\u5c0f\u503c \u7e3d\u985e\uff1a\u914d\u5c0d\u5806\u3001\u4e8c\u5143\u5806\u3001\u5de6\u504f\u6a39\u3001\u4e8c\u9805\u5806\u3001\u8cbb\u6ce2\u90a3\u5951\u5806 \u4e8c\u5143\u5806 \u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 2 \u500b\u5b50\u7bc0\u9ede \u7bc0\u9ede\u7684\u503c > \u5de6\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u7bc0\u9ede\u7684\u503c > \u53f3\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u4e8c\u5143\u5806\u7684\u5de6\u53f3\u5b50\u6a39\uff0c\u4e5f\u662f\u4e8c\u5143\u5806 \u4e8c\u5143\u5806\u4e5f\u662f\u4e00\u9846 Complete Binary Tree \u91cd\u8981\u64cd\u4f5c\u70ba\u63d2\u5165\u548c\u522a\u9664\uff0c\u64cd\u4f5c\u904e\u7a0b\u4e2d\u8981\u4fdd\u6301\u662f\u4e00\u9846 Complete Binary Tree\uff0c\u4e0b\u9762\u8aaa\u660e\u4ee5\u7dad\u8b77\u6700\u5927\u503c\u7684 Heap \u4f86\u8aaa\u660e\uff1a \u63d2\u5165 \u63d2\u5728\u6a39\u7684\u6700\u5f8c\u9762 \u8ddf\u7236\u7bc0\u9ede\u6bd4\u8f03\uff0c\u5982\u679c\u7236\u7bc0\u9ede\u7684\u503c<\u8a72\u7bc0\u9ede\u7684\u503c\u5c31\u4ea4\u63db\uff0c\u4ee5\u6b64\u985e\u63a8 \u522a\u9664 \u522a\u9664\u6839\u7bc0\u9ede\u5f8c\uff0c\u628a\u6700\u5f8c\u4e00\u500b\u7bc0\u9ede\u79fb\u5230\u6700\u4e0a\u982d \u8a72\u7bc0\u9ede\u548c\u5169\u500b\u5b50\u7bc0\u9ede\u6bd4\u8f03\uff0c\u5169\u7bc0\u9ede\u5176\u4e2d\u503c\u8f03\u5927\u7684\u90a3\u4e00\u500b\uff08\u6211\u5011\u7a31\u70ba c_{larger} )\u3002\u5982\u679c\u8a72\u7bc0\u9ede\u7684\u503c\u5c0f\u65bc c_{larger} \u7684\u503c\uff0c\u5c31\u4ea4\u63db\u5169\u7bc0\u9ede\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u985e\u63a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 int heap [ N ], top = 0 ; void push ( int v ) { heap [ ++ top ] = v ; for ( int i = top ; i > 1 ;) { if ( heap [ i ] <= heap [ i / 2 ]) break ; swap ( heap [ i ], heap [ i / 2 ]); i <<= 1 ; } } void pop () { heap [ 1 ] = heap [ top -- ]; for ( int i = 1 ; ( i << 1 ) <= top ;) { if ( heap [ i ] < heap [ i << 1 ]) { swap ( heap [ i ], heap [ i << 1 ]); i <<= 1 ; } else if (( i << 1 ) < top && heap [ i ] < heap [( i << 1 ) + 1 ]) { swap ( heap [ i ], heap [( i << 1 ) + 1 ]); i = ( i << 1 ) + 1 ; } else { break ; } } } STL C++ \u7684 priorty_queue \uff08\u512a\u5148\u968a\u5217\uff09\uff0c\u662f\u4e00\u7a2e Heap \u7684\u5be6\u4f5c\u3002 \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a priorty_queue <T> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq(iterator first, iterator seecond) \u63d2\u5165 [first,second) \u5167\u7684\u6771\u897f pq.push(T a) \uff1a\u63d2\u5165\u5143\u7d20 a \uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) pq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) pq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <queue> using namespace std ; int main () { priority_queue < int > Q ; Q . push ( 2 ); cout << Q . top () << '\\n' ; Q . push ( 5 ); cout << Q . top () << '\\n' ; Q . pop (); cout << Q . top () << '\\n' ; Q . push ( 3 ); cout << Q . top () << '\\n' ; } /* 2 5 2 3 */","title":"\u5806"},{"location":"dataStructure/heap/#heap","text":"\u7c21\u4ecb\uff1a\u5728 O(log N) \u6642\u9593\u7dad\u8b77\u6700\u5927/\u6700\u5c0f\u503c \u7e3d\u985e\uff1a\u914d\u5c0d\u5806\u3001\u4e8c\u5143\u5806\u3001\u5de6\u504f\u6a39\u3001\u4e8c\u9805\u5806\u3001\u8cbb\u6ce2\u90a3\u5951\u5806","title":"\u5806 (Heap)"},{"location":"dataStructure/heap/#_1","text":"\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 2 \u500b\u5b50\u7bc0\u9ede \u7bc0\u9ede\u7684\u503c > \u5de6\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u7bc0\u9ede\u7684\u503c > \u53f3\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c \u4e8c\u5143\u5806\u7684\u5de6\u53f3\u5b50\u6a39\uff0c\u4e5f\u662f\u4e8c\u5143\u5806 \u4e8c\u5143\u5806\u4e5f\u662f\u4e00\u9846 Complete Binary Tree \u91cd\u8981\u64cd\u4f5c\u70ba\u63d2\u5165\u548c\u522a\u9664\uff0c\u64cd\u4f5c\u904e\u7a0b\u4e2d\u8981\u4fdd\u6301\u662f\u4e00\u9846 Complete Binary Tree\uff0c\u4e0b\u9762\u8aaa\u660e\u4ee5\u7dad\u8b77\u6700\u5927\u503c\u7684 Heap \u4f86\u8aaa\u660e\uff1a","title":"\u4e8c\u5143\u5806"},{"location":"dataStructure/heap/#_2","text":"\u63d2\u5728\u6a39\u7684\u6700\u5f8c\u9762 \u8ddf\u7236\u7bc0\u9ede\u6bd4\u8f03\uff0c\u5982\u679c\u7236\u7bc0\u9ede\u7684\u503c<\u8a72\u7bc0\u9ede\u7684\u503c\u5c31\u4ea4\u63db\uff0c\u4ee5\u6b64\u985e\u63a8","title":"\u63d2\u5165"},{"location":"dataStructure/heap/#_3","text":"\u522a\u9664\u6839\u7bc0\u9ede\u5f8c\uff0c\u628a\u6700\u5f8c\u4e00\u500b\u7bc0\u9ede\u79fb\u5230\u6700\u4e0a\u982d \u8a72\u7bc0\u9ede\u548c\u5169\u500b\u5b50\u7bc0\u9ede\u6bd4\u8f03\uff0c\u5169\u7bc0\u9ede\u5176\u4e2d\u503c\u8f03\u5927\u7684\u90a3\u4e00\u500b\uff08\u6211\u5011\u7a31\u70ba c_{larger} )\u3002\u5982\u679c\u8a72\u7bc0\u9ede\u7684\u503c\u5c0f\u65bc c_{larger} \u7684\u503c\uff0c\u5c31\u4ea4\u63db\u5169\u7bc0\u9ede\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u985e\u63a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 int heap [ N ], top = 0 ; void push ( int v ) { heap [ ++ top ] = v ; for ( int i = top ; i > 1 ;) { if ( heap [ i ] <= heap [ i / 2 ]) break ; swap ( heap [ i ], heap [ i / 2 ]); i <<= 1 ; } } void pop () { heap [ 1 ] = heap [ top -- ]; for ( int i = 1 ; ( i << 1 ) <= top ;) { if ( heap [ i ] < heap [ i << 1 ]) { swap ( heap [ i ], heap [ i << 1 ]); i <<= 1 ; } else if (( i << 1 ) < top && heap [ i ] < heap [( i << 1 ) + 1 ]) { swap ( heap [ i ], heap [( i << 1 ) + 1 ]); i = ( i << 1 ) + 1 ; } else { break ; } } }","title":"\u522a\u9664"},{"location":"dataStructure/heap/#stl","text":"C++ \u7684 priorty_queue \uff08\u512a\u5148\u968a\u5217\uff09\uff0c\u662f\u4e00\u7a2e Heap \u7684\u5be6\u4f5c\u3002 \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a priorty_queue <T> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq \u5efa\u69cb\u5f0f\uff1a priorty_queue <T,Con,Cmp> pq(iterator first, iterator seecond) \u63d2\u5165 [first,second) \u5167\u7684\u6771\u897f pq.push(T a) \uff1a\u63d2\u5165\u5143\u7d20 a \uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(\\log size) pq.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) pq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) pq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <queue> using namespace std ; int main () { priority_queue < int > Q ; Q . push ( 2 ); cout << Q . top () << '\\n' ; Q . push ( 5 ); cout << Q . top () << '\\n' ; Q . pop (); cout << Q . top () << '\\n' ; Q . push ( 3 ); cout << Q . top () << '\\n' ; } /* 2 5 2 3 */","title":"STL"},{"location":"dataStructure/list/","text":"List \u9663\u5217\u5982\u679c\u8981\u5f9e\u4e2d\u9593\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u9700\u8981\u5c07\u5176\u5f8c\u9762\u6240\u6709\u5143\u7d20\u642c\u79fb\u4e00\u683c\uff0c\u9700\u8017\u8cbb O(n) \uff0c\u9023\u7d50\u4e32\u5217\uff08 linklist \uff09\u80fd\u53ea\u82b1 O(1) \u5b8c\u6210\u63d2\u5165\u3002 1 2 3 4 5 struct Node { int v ; Node * next = nullptr , * prev = nullptr ; }; \u53ef\u4ee5\u5229\u7528\u9663\u5217\u53d6\u4ee3\u6307\u6a19\u4f86\u5be6\u4f5c linklist \u3002 C++ \u63d0\u4f9b list \u51fd\u5f0f\u5eab\u5be6\u4f5c\u96d9\u5411\u4e32\u5217\u3002 \u6a19\u982d\u6a94\uff1a <list> \u5efa\u69cb\u5f0f\uff1a list <T> L L.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) L.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) L.push_front(T a),L.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.pop_front(),L.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.insert(iterator it,size_type n,T a) \uff1a\u5728 it \u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u63d2\u5165 n \u500b a \u4e26\u56de\u50b3\u6307\u5411 a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(n) \u3002 L.erase(iterator first,iterator last) \uff1a\u628a \\[first,last) \u6307\u5230\u7684\u6771\u897f\u5168\u90e8\u522a\u6389\uff0c\u56de\u50b3 last\u3002\u8907\u96dc\u5ea6\u8207\u780d\u6389\u7684\u6578\u91cf\u5448\u7dda\u6027\u95dc\u4fc2\uff0c\u5982\u679c\u6c92\u6709\u6307\u5b9a last, \u90a3\u6703\u81ea\u52d5\u8996\u70ba\u53ea\u522a\u9664 first \u90a3\u9805\u3002 L.splice(iterator it,list &x,iterator first,iterator last) \uff1afirst \u548c last \u662f x \u7684\u8fed\u4ee3\u5668\u3002\u6b64\u51fd\u5f0f\u6703\u628a [first,last) \u6307\u5230\u7684\u6771\u897f\u5f9e x \u4e2d\u526a\u4e0b\u4e26\u52a0\u5230 it \u6240\u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u3002x \u6703\u56e0\u70ba\u9019\u9805\u51fd\u5f0f\u800c\u6539\u8b8a\u3002\u82e5\u672a\u6307\u5b9a last, \u90a3\u53ea\u6703\u5c07 first \u6240\u6307\u7684\u6771\u897f\u79fb\u5230 it \u524d\u65b9\u3002\u8907\u96dc\u5ea6\u8207\u8f49\u79fb\u500b\u6578\u5448\u7dda\u6027\u95dc\u4fc2\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // adapt from cppreference #include <iostream> #include <list> int main () { std :: list < char > letters { 'o' , 'm' , 'g' , 'w' , 't' , 'f' }; if ( ! letters . empty ()) { cout << letters . front () << '\\n' ; cout << letters . back () << '\\n' ; } } /* o f */","title":"List"},{"location":"dataStructure/list/#list","text":"\u9663\u5217\u5982\u679c\u8981\u5f9e\u4e2d\u9593\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u9700\u8981\u5c07\u5176\u5f8c\u9762\u6240\u6709\u5143\u7d20\u642c\u79fb\u4e00\u683c\uff0c\u9700\u8017\u8cbb O(n) \uff0c\u9023\u7d50\u4e32\u5217\uff08 linklist \uff09\u80fd\u53ea\u82b1 O(1) \u5b8c\u6210\u63d2\u5165\u3002 1 2 3 4 5 struct Node { int v ; Node * next = nullptr , * prev = nullptr ; }; \u53ef\u4ee5\u5229\u7528\u9663\u5217\u53d6\u4ee3\u6307\u6a19\u4f86\u5be6\u4f5c linklist \u3002 C++ \u63d0\u4f9b list \u51fd\u5f0f\u5eab\u5be6\u4f5c\u96d9\u5411\u4e32\u5217\u3002 \u6a19\u982d\u6a94\uff1a <list> \u5efa\u69cb\u5f0f\uff1a list <T> L L.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) L.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) L.push_front(T a),L.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.pop_front(),L.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) L.insert(iterator it,size_type n,T a) \uff1a\u5728 it \u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u63d2\u5165 n \u500b a \u4e26\u56de\u50b3\u6307\u5411 a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6 O(n) \u3002 L.erase(iterator first,iterator last) \uff1a\u628a \\[first,last) \u6307\u5230\u7684\u6771\u897f\u5168\u90e8\u522a\u6389\uff0c\u56de\u50b3 last\u3002\u8907\u96dc\u5ea6\u8207\u780d\u6389\u7684\u6578\u91cf\u5448\u7dda\u6027\u95dc\u4fc2\uff0c\u5982\u679c\u6c92\u6709\u6307\u5b9a last, \u90a3\u6703\u81ea\u52d5\u8996\u70ba\u53ea\u522a\u9664 first \u90a3\u9805\u3002 L.splice(iterator it,list &x,iterator first,iterator last) \uff1afirst \u548c last \u662f x \u7684\u8fed\u4ee3\u5668\u3002\u6b64\u51fd\u5f0f\u6703\u628a [first,last) \u6307\u5230\u7684\u6771\u897f\u5f9e x \u4e2d\u526a\u4e0b\u4e26\u52a0\u5230 it \u6240\u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u3002x \u6703\u56e0\u70ba\u9019\u9805\u51fd\u5f0f\u800c\u6539\u8b8a\u3002\u82e5\u672a\u6307\u5b9a last, \u90a3\u53ea\u6703\u5c07 first \u6240\u6307\u7684\u6771\u897f\u79fb\u5230 it \u524d\u65b9\u3002\u8907\u96dc\u5ea6\u8207\u8f49\u79fb\u500b\u6578\u5448\u7dda\u6027\u95dc\u4fc2\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // adapt from cppreference #include <iostream> #include <list> int main () { std :: list < char > letters { 'o' , 'm' , 'g' , 'w' , 't' , 'f' }; if ( ! letters . empty ()) { cout << letters . front () << '\\n' ; cout << letters . back () << '\\n' ; } } /* o f */","title":"List"},{"location":"dataStructure/queue/","text":"\u4f47\u5217 (Queue) \u6709\u5169\u500b\u7aef\u53e3\uff0c\u4e00\u500b\u8ca0\u8cac\u63d2\u5165\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb 1 2 3 4 5 6 7 8 9 struct Queue { int q [ N ], head , tail ; Queue () : head ( 0 ), tail ( 0 ) {} int size () { return tail - head ; } void push ( int x ) { q [ tail ++ ] = x ; } int front () { return q [ head ]; } void pop () { head ++ ; } } STL \u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a queue <T> q q.push(T a) \uff1a\u63d2\u5165\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.front() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) q.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <queue> using namespace std ; int main () { queue < int > st ; st . push ( 1 ); cout << st . front () << '\\n' ; st . push ( 2 ); cout << st . front () << '\\n' ; st . push ( 3 ); cout << st . front () << '\\n' ; st . pop (); cout << st . front () << '\\n' ; } /* 1 1 1 2 */ deque \u96d9\u5411\u4f47\u5217 \u6709\u5169\u500b\u7aef\u53e3\uff0c\u7686\u8ca0\u8cac\u522a\u9664\u3001\u63d2\u5165\u7684\u8cc7\u6599\u7d50\u69cb \u6a19\u982d\u6a94\uff1a <deque> \u5efa\u69cb\u5f0f\uff1a deque <T> dq dq.push_front(T a),dq.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.pop_front(),dq.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.front(),dq.back() \uff1a\u56de\u50b3\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) dq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1)","title":"\u4f47\u5217"},{"location":"dataStructure/queue/#queue","text":"\u6709\u5169\u500b\u7aef\u53e3\uff0c\u4e00\u500b\u8ca0\u8cac\u63d2\u5165\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb 1 2 3 4 5 6 7 8 9 struct Queue { int q [ N ], head , tail ; Queue () : head ( 0 ), tail ( 0 ) {} int size () { return tail - head ; } void push ( int x ) { q [ tail ++ ] = x ; } int front () { return q [ head ]; } void pop () { head ++ ; } }","title":"\u4f47\u5217 (Queue)"},{"location":"dataStructure/queue/#stl","text":"\u6a19\u982d\u6a94\uff1a <queue> \u5efa\u69cb\u5f0f\uff1a queue <T> q q.push(T a) \uff1a\u63d2\u5165\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.front() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) q.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) q.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <queue> using namespace std ; int main () { queue < int > st ; st . push ( 1 ); cout << st . front () << '\\n' ; st . push ( 2 ); cout << st . front () << '\\n' ; st . push ( 3 ); cout << st . front () << '\\n' ; st . pop (); cout << st . front () << '\\n' ; } /* 1 1 1 2 */","title":"STL"},{"location":"dataStructure/queue/#deque","text":"\u6709\u5169\u500b\u7aef\u53e3\uff0c\u7686\u8ca0\u8cac\u522a\u9664\u3001\u63d2\u5165\u7684\u8cc7\u6599\u7d50\u69cb \u6a19\u982d\u6a94\uff1a <deque> \u5efa\u69cb\u5f0f\uff1a deque <T> dq dq.push_front(T a),dq.push_back(T a) \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.pop_front(),dq.pop_back() \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.front(),dq.back() \uff1a\u56de\u50b3\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) dq.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) dq.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1)","title":"deque \u96d9\u5411\u4f47\u5217"},{"location":"dataStructure/stack/","text":"stack \u5806\u758a \u6709\u5169\u500b\u7aef\u53e3\uff0c\u5176\u4e2d\u4e00\u500b\u5c01\u9589\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u63d2\u5165\u3001\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb 1 2 3 4 5 6 7 8 9 10 11 12 13 struct stack { int st [ N ], top ; Stack () : top ( 0 ) {} int size () { return top ; } void push ( int x ) { st [ ++ top ] = x ; } int top () { assert ( top > 0 ) return st [ top ]; } void pop () { if ( top ) -- top ; } } \u6a19\u982d\u6a94\uff1a <stack> \u5efa\u69cb\u5f0f\uff1a stack <T> s s.push(T a) \uff1a\u63d2\u5165\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <stack> using namespace std ; int main () { stack < int > st ; st . push ( 1 ); cout << st . top () << '\\n' ; st . push ( 2 ); cout << st . top () << '\\n' ; st . push ( 3 ); cout << st . top () << '\\n' ; st . pop (); cout << st . top () << '\\n' ; } /* 1 2 3 2 */","title":"\u5806\u758a"},{"location":"dataStructure/stack/#stack","text":"\u6709\u5169\u500b\u7aef\u53e3\uff0c\u5176\u4e2d\u4e00\u500b\u5c01\u9589\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u63d2\u5165\u3001\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb 1 2 3 4 5 6 7 8 9 10 11 12 13 struct stack { int st [ N ], top ; Stack () : top ( 0 ) {} int size () { return top ; } void push ( int x ) { st [ ++ top ] = x ; } int top () { assert ( top > 0 ) return st [ top ]; } void pop () { if ( top ) -- top ; } } \u6a19\u982d\u6a94\uff1a <stack> \u5efa\u69cb\u5f0f\uff1a stack <T> s s.push(T a) \uff1a\u63d2\u5165\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.pop() \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.top() \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6 O(1) s.size() \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6 O(1) s.empty() \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6 O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <stack> using namespace std ; int main () { stack < int > st ; st . push ( 1 ); cout << st . top () << '\\n' ; st . push ( 2 ); cout << st . top () << '\\n' ; st . push ( 3 ); cout << st . top () << '\\n' ; st . pop (); cout << st . top () << '\\n' ; } /* 1 2 3 2 */","title":"stack \u5806\u758a"},{"location":"dataStructure/stl/","text":"\u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Template Libiary, STL) \u4ec0\u9ebc\u662f STL? C++ \u5167\u5efa\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5c07\u4e00\u4e9b\u5e38\u898b\u5beb\u6210\u6a21\u677f\uff0c\u53ef\u4ee5\u65b9\u4fbf\u4f7f\u7528\u3002 \u578b\u614b\u6a21\u677f <> \u7576\u4f60\u8981\u4f7f\u7528\u5bb9\u5668\u6642\uff0c\u4f60\u5fc5\u9808\u8981\u544a\u8a34 C++ \u8aaa\uff0c\u4f60\u7684\u8cc7\u6599\u578b\u614b\u662f\u4ec0\u9ebc\uff0c\u578b\u614b\u6a21\u677f\u7684\u7528\u9014\u5c31\u662f\u5728\u65bc\u6b64\u3002 \u7528\u6cd5\uff1a C <T> name \u800c\u5bb9\u5668\u5167\u90e8\u6771\u897f\u4e0d\u6703\u53ea\u6709\u4e00\u500b\uff0c\u50cf map \u5c31\u9700\u8981\u5169\u7a2e\u578b\u614b\u3002 map <T1, T2> name \u6709\u6642\u5019\u53c3\u6578\u4e0d\u9808\u5beb\u6eff\uff0c\u4e0d\u5beb\u6eff\u7684\u5730\u65b9\u7684\u503c\u70ba\u9810\u8a2d\u503c\u3002 \u8fed\u4ee3\u5668 (Iterator) \u5982\u679c\u4f60\u60f3\u5728\u5bb9\u5668\u4e2d\u904d\u6b77\uff0c\u4f60\u53ef\u80fd\u60f3\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 [] \uff0c\u4f46\u4e0d\u662f\u6240\u6709\u5bb9\u5668\u90fd\u50cf\u9663\u5217\uff0c\u90fd\u6709\u652f\u63f4\u4e0b\u6a19\u904b\u7b97\u5b50\uff0c\u6240\u4ee5 C++ \u70ba\u6bcf\u500b\u5bb9\u5668\u90fd\u63d0\u4f9b\u4e00\u500b\u8cc7\u6599\u578b\u614b\u53eb \"\u8fed\u4ee3\u5668\"\uff0c\u4f60\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u7576\u6210\u4e00\u7a2e\u6307\u6a19\uff0c\u5047\u8a2d\u6709\u4e00\u500b\u8fed\u4ee3\u5668 it\uff0c\u52a0\u4e0a\u661f\u865f * \u53ef\u4ee5\u5b58\u53d6 IT \u6240\u6307\u5411\u7684\u5167\u5bb9\uff0c\u4f9d\u64da\u8fed\u4ee3\u5668\u7684\u5f37\u5230\u5f31\u53ef\u5206\u70ba\u4e09\u7a2e\uff1a \u96a8\u6a5f\u5b58\u53d6\uff08Random Access)\uff1a\u53ef\u8207\u6574\u6578\u505a +- \u6cd5\u3001\u905e\u589e\u53ca\u905e\u6e1b \u96d9\u5411\uff08Bidirectional\uff09\u8fed\u4ee3\u5668\uff1a\u905e\u589e\u53ca\u905e\u6e1b \u55ae\u5411\uff08Forward\uff09\u8fed\u4ee3\u5668\uff1a\u53ea\u80fd\u905e\u589e \u6839\u64da\u7528\u6cd5\u53ef\u5206\u70ba\u5169\u7a2e\uff1a \u8f38\u5165\uff08Input\uff09\u8fed\u4ee3\u5668\uff1a\u8b80\u53d6\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u5165\u8fed\u4ee3\u5668\u3002 \u8f38\u51fa\uff08Output\uff09\u8fed\u4ee3\u5668\uff1a\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\u6642\uff0c\u9664\u4e86\u5e38\u6578\uff08const\uff09\u8fed\u4ee3\u5668\uff08\u4e5f\u5c31\u662f\u898f\u5b9a\u4e0d\u80fd\u66f4\u52d5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff09\u4ee5\u5916\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u51fa\u8fed\u4ee3\u5668\u3002 C++ \u5728\u8a31\u591a\u5bb9\u5668\u4e2d\u63d0\u4f9b\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u524d\u8005\u7531\u524d\u5f80\u5f8c\uff0c\u5f8c\u8457\u7531\u5f8c\u5f80\u524d\uff0c\u5ba3\u544a\u6642\u5206\u5225\u70ba C::iterator \u53ca C::reverse\\_iterator \uff0c\u6bcf\u7a2e\u8fed\u4ee3\u5668\u5206\u5225\u6709\u4e00\u5c0d\u8fed\u4ee3\u5668\u4ee3\u8868\u982d\u5c3e\uff0c\u5982\u4e0b\u8868\uff0c\u6ce8\u610f end \u7cfb\u5217\u6307\u5411\u8a72\u5bb9\u5668\u6700\u5f8c\u4e00\u9805\u7684\u5f8c\u4e00\u9805\uff0c\u4e0d\u8981\u5c0d\u4ed6\u505a\u4eba\u548c\u53d6\u503c\u6216\u4fee\u6539\u3002 \u6b63\u5411 \u9006\u5411 \u53ef\u6539\u503c C.begin(), C.end() C.rbegin(), C.rend() \u4e0d\u53ef\u6539\u503c C.cbegin(), C.cend() C.crbegin(),C.crend()","title":"\u6a19\u6e96\u51fd\u5f0f\u5eab"},{"location":"dataStructure/stl/#standard-template-libiary-stl","text":"","title":"\u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Template Libiary, STL)"},{"location":"dataStructure/stl/#stl","text":"C++ \u5167\u5efa\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5c07\u4e00\u4e9b\u5e38\u898b\u5beb\u6210\u6a21\u677f\uff0c\u53ef\u4ee5\u65b9\u4fbf\u4f7f\u7528\u3002","title":"\u4ec0\u9ebc\u662f STL?"},{"location":"dataStructure/stl/#_1","text":"\u7576\u4f60\u8981\u4f7f\u7528\u5bb9\u5668\u6642\uff0c\u4f60\u5fc5\u9808\u8981\u544a\u8a34 C++ \u8aaa\uff0c\u4f60\u7684\u8cc7\u6599\u578b\u614b\u662f\u4ec0\u9ebc\uff0c\u578b\u614b\u6a21\u677f\u7684\u7528\u9014\u5c31\u662f\u5728\u65bc\u6b64\u3002 \u7528\u6cd5\uff1a C <T> name \u800c\u5bb9\u5668\u5167\u90e8\u6771\u897f\u4e0d\u6703\u53ea\u6709\u4e00\u500b\uff0c\u50cf map \u5c31\u9700\u8981\u5169\u7a2e\u578b\u614b\u3002 map <T1, T2> name \u6709\u6642\u5019\u53c3\u6578\u4e0d\u9808\u5beb\u6eff\uff0c\u4e0d\u5beb\u6eff\u7684\u5730\u65b9\u7684\u503c\u70ba\u9810\u8a2d\u503c\u3002","title":"\u578b\u614b\u6a21\u677f &lt;&gt;"},{"location":"dataStructure/stl/#iterator","text":"\u5982\u679c\u4f60\u60f3\u5728\u5bb9\u5668\u4e2d\u904d\u6b77\uff0c\u4f60\u53ef\u80fd\u60f3\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 [] \uff0c\u4f46\u4e0d\u662f\u6240\u6709\u5bb9\u5668\u90fd\u50cf\u9663\u5217\uff0c\u90fd\u6709\u652f\u63f4\u4e0b\u6a19\u904b\u7b97\u5b50\uff0c\u6240\u4ee5 C++ \u70ba\u6bcf\u500b\u5bb9\u5668\u90fd\u63d0\u4f9b\u4e00\u500b\u8cc7\u6599\u578b\u614b\u53eb \"\u8fed\u4ee3\u5668\"\uff0c\u4f60\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u7576\u6210\u4e00\u7a2e\u6307\u6a19\uff0c\u5047\u8a2d\u6709\u4e00\u500b\u8fed\u4ee3\u5668 it\uff0c\u52a0\u4e0a\u661f\u865f * \u53ef\u4ee5\u5b58\u53d6 IT \u6240\u6307\u5411\u7684\u5167\u5bb9\uff0c\u4f9d\u64da\u8fed\u4ee3\u5668\u7684\u5f37\u5230\u5f31\u53ef\u5206\u70ba\u4e09\u7a2e\uff1a \u96a8\u6a5f\u5b58\u53d6\uff08Random Access)\uff1a\u53ef\u8207\u6574\u6578\u505a +- \u6cd5\u3001\u905e\u589e\u53ca\u905e\u6e1b \u96d9\u5411\uff08Bidirectional\uff09\u8fed\u4ee3\u5668\uff1a\u905e\u589e\u53ca\u905e\u6e1b \u55ae\u5411\uff08Forward\uff09\u8fed\u4ee3\u5668\uff1a\u53ea\u80fd\u905e\u589e \u6839\u64da\u7528\u6cd5\u53ef\u5206\u70ba\u5169\u7a2e\uff1a \u8f38\u5165\uff08Input\uff09\u8fed\u4ee3\u5668\uff1a\u8b80\u53d6\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u5165\u8fed\u4ee3\u5668\u3002 \u8f38\u51fa\uff08Output\uff09\u8fed\u4ee3\u5668\uff1a\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\u6642\uff0c\u9664\u4e86\u5e38\u6578\uff08const\uff09\u8fed\u4ee3\u5668\uff08\u4e5f\u5c31\u662f\u898f\u5b9a\u4e0d\u80fd\u66f4\u52d5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff09\u4ee5\u5916\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u51fa\u8fed\u4ee3\u5668\u3002 C++ \u5728\u8a31\u591a\u5bb9\u5668\u4e2d\u63d0\u4f9b\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u524d\u8005\u7531\u524d\u5f80\u5f8c\uff0c\u5f8c\u8457\u7531\u5f8c\u5f80\u524d\uff0c\u5ba3\u544a\u6642\u5206\u5225\u70ba C::iterator \u53ca C::reverse\\_iterator \uff0c\u6bcf\u7a2e\u8fed\u4ee3\u5668\u5206\u5225\u6709\u4e00\u5c0d\u8fed\u4ee3\u5668\u4ee3\u8868\u982d\u5c3e\uff0c\u5982\u4e0b\u8868\uff0c\u6ce8\u610f end \u7cfb\u5217\u6307\u5411\u8a72\u5bb9\u5668\u6700\u5f8c\u4e00\u9805\u7684\u5f8c\u4e00\u9805\uff0c\u4e0d\u8981\u5c0d\u4ed6\u505a\u4eba\u548c\u53d6\u503c\u6216\u4fee\u6539\u3002 \u6b63\u5411 \u9006\u5411 \u53ef\u6539\u503c C.begin(), C.end() C.rbegin(), C.rend() \u4e0d\u53ef\u6539\u503c C.cbegin(), C.cend() C.crbegin(),C.crend()","title":"\u8fed\u4ee3\u5668 (Iterator)"},{"location":"dynamicProgramming/basic/","text":"\u57fa\u790e\u984c\u76ee \u8cbb\u5f0f\u6578\u5217 \u8cbb\u5f0f\u6578\u5217 \u8cbb\u5f0f\u6578\u5217\u7684\u5b9a\u7fa9\uff1a f(n)=f(n-1)+f(n-2),f(0)=0,f(1)=1 \u3002 \u7d66\u5b9a i \uff0c\u8acb\u6c42\u51fa f(i) \u3002 \u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a \u72c0\u614b\uff1a f(n) \u4ee3\u8868\u8cbb\u5f0f\u6578\u5217\u7b2c n \u9805\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(n)=n\\ where\\ n\\leq 1 \u3002 \u8f49\u79fb\uff1a f(n)=f(n-1)+f(n-2) \u3002 \u4e0b\u5217\u5c55\u793a\u56db\u7a2e\u8a08\u7b97\u8cbb\u5f0f\u6578\u5217\u7684\u7248\u672c\uff1a \u905e\u8ff4\uff08\u672a\u642d\u914d\u9663\u5217\uff09 1 2 3 4 5 6 7 8 int f ( int n ) { if ( n < 2 ) { return n ; } return f ( n - 1 ) + f ( n - 2 ); } \u9019\u7a2e\u7248\u672c\u7684\u6642\u9593\u8907\u96dc\u5ea6 O(n)=f(n-1) \uff0c f(n) \u662f\u8cbb\u5f0f\u6578\u5217\u7b2c n \u9805\uff0c\u6642\u9593\u6548\u7387\u975e\u5e38\u4f4e\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u9019\u7a2e\u7248\u672c\u5be6\u4f5c DP\u3002 \u905e\u8ff4\uff08\u642d\u914d\u9663\u5217\uff09 \u9019\u7a2e\u7248\u672c\u5efa\u7acb\u4e0a\u500b\u7248\u672c\u7684\u57fa\u790e\uff0c\u589e\u52a0\u4e86\u9663\u5217\u7d00\u9304\u5df2\u8a08\u7b97\u51fa\u7684\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int dp [ 30 ]; int f ( int n ) { if ( dp [ n ] != -1 ) { return dp [ n ]; } return dp [ n ] = f ( n - 1 ) + f ( n - 2 ); } int main () { memset ( dp , -1 , sizeof ( dp )); dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; cout << f ( 25 ) << '\\n' ; } \u4e00\u958b\u59cb\u5c07\u6bcf\u500b dp \u8a2d\u70ba -1 \uff0c\u4ee3\u8868\u8a72\u72c0\u614b\u672a\u88ab\u8a08\u7b97\u3002 \u6280\u5de7\uff1a\u8868\u793a\u672a\u8a08\u7b97\u72c0\u614b \u5c07\u9663\u5217\u7684\u6578\u503c\u521d\u59cb\u5316\u4e00\u500b\u4e0d\u53ef\u80fd\u6210\u70ba\u7b54\u6848\u7684\u6578\u5b57 (\u4f8b\u5982\uff1a -1,0 )\uff0c\u4ee3\u8868\u8a72\u72c0\u614b\u672a\u88ab\u8a08\u7b97\u3002 \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N) \u3002 \u6642\u9593\u8907\u96dc\u5ea6\u8b49\u660e \u9019\u7a2e\u7248\u672c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u6211\u5011\u7528\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u89e3\u91cb\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 int dp [ 30 ]; int f ( int p , int n ) { cout << p << \" call \" << n << '\\n' ; if ( dp [ n ] != -1 ) { return dp [ n ]; } return dp [ n ] = f ( n , n - 1 ) + f ( n , n - 2 ); } int main () { memset ( dp , -1 , sizeof ( dp )); dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; f ( -1 , 5 ); } /* -1 call 5 5 call 4 4 call 3 3 call 2 2 call 1 2 call 0 3 call 1 4 call 2 5 call 3 */ \u7576\u547c\u53eb f(n) \uff0c\u6bcf\u500b f(i), 0\\leq i\\leq n \uff0c\u81f3\u591a\u6703\u88ab\u547c\u53eb\u5169\u6b21\uff0c\u7b2c\u4e00\u6b21 f(i) \u88ab f(i+1) \u547c\u53eb\uff0c\u9019\u6642 f(i) \u9084\u6c92\u88ab\u8a08\u7b97\uff0c\u56e0\u6b64\u6703\u7e7c\u7e8c\u905e\u8ff4\u6c42\u503c\uff1b\u7b2c\u4e8c\u6b21 f(i) \u88ab f(i+2) \u547c\u53eb\uff0c\u9019\u6642 f(i) \u5df2\u88ab\u8a08\u7b97\uff0c\u76f4\u63a5\u56de\u50b3\u7d50\u679c\u3002\u6bcf\u500b f(i) \u6700\u591a\u547c\u53eb\u5169\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(n) \u3002 \u8ff4\u5708\uff08\u5f80\u524d\u770b\uff09 \u7576\u524d\u72c0\u614b\u662f\u5f9e\u90a3\u4e9b\u72c0\u614b\u5f97\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 int main () { int dp [ 30 ]; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < 30 ; ++ i ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ]; } cout << dp [ 5 ] << '\\n' ; } \u8ff4\u5708\uff08\u5f80\u5f8c\u770b\uff09 \u7576\u524d\u72c0\u614b\u6703\u5f71\u97ff\u90a3\u4e9b\u72c0\u614b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int main () { int dp [ 30 ]; memset ( dp , 0 , sizeof ( dp )); dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; for ( int i = 0 ; i < 30 ; ++ i ) { if ( i + 1 < 30 ) { dp [ i + 1 ] += dp [ i ]; } if ( i + 2 < 30 ) { dp [ i + 2 ] += dp [ i ]; } } cout << dp [ 5 ] << '\\n' ; } DP \u5be6\u4f5c\u8fa6\u6cd5 \u905e\u8ff4 \u8ff4\u5708 (\u5411\u524d\u770b) \u8ff4\u5708 (\u5411\u5f8c\u770b) \u9664\u4e86\u8cbb\u5f0f\u6578\u5217\uff0c\u4efb\u4f55\u6578\u5217\u53ef\u4ee5\u5beb\u6210 f(i)=a_1f(i-1)+a_2f(i-2)+...+a_nf(i-n)+k \u7684\u5f62\u5f0f\uff0c\u7686\u53ef\u5229\u7528 DP \u4f86\u89e3\u51fa\u3002 \u5e15\u65af\u5361\u4e09\u89d2\u5f62 (Pascal's triangle) Question \u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c m \u5c64\u7b2c n \u9805 =C_n^m \uff0c\u7d66\u5b9a i,j \uff0c\u8acb\u6c42\u51fa\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c i \u5c64\u7b2c j \u9805\u3002 \u5e15\u65af\u5361\u4e09\u89d2\u5f62\u6709\u4ee5\u4e0b\u6027\u8cea\uff1a C^n_k=C_k^{n-1}+C_{k-1}^{n-1} \uff0c\u6839\u64da\u6027\u8cea\u8a2d\u8a08\u51fa\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a \u72c0\u614b\uff1a f(i,j) \u4ee3\u8868\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c i \u5c64\u7b2c j \u9805\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(i,j)=1, if\\ j==0\\ or\\ j==i \u3002 \u8f49\u79fb\uff1a f(i,j)=f(i-1,j)+f(i-1,j-1) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int main () { int dp [ 30 ][ 30 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < 30 ; ++ i ) { dp [ i ][ 0 ] = dp [ i ][ i ] = 1 ; } for ( int i = 1 ; i < 30 ; ++ i ) { for ( int j = 1 ; j < 30 ; ++ j ) { dp [ i ][ j ] = dp [ i - 1 ][ j ] + dp [ i - 1 ][ j - 1 ]; } } } AtCoder Educational DP Contest A - Frog 1 Frog \u6709\u96bb\u9752\u86d9\u8981\u5f9e\u7b2c 1 \u584a\u77f3\u982d\u8df3\u5230\u7b2c N \u584a\u77f3\u982d\uff0c\u6bcf\u584a\u77f3\u982d\u90fd\u6709\u9ad8\u5ea6 h_i \uff0c\u6bcf\u4e00\u6b21\u53ef\u4ee5\u5f9e\u7b2c i \u584a\u8df3\u5230\u7b2c i+1 \u584a\uff0c\u6210\u672c\u70ba\u5169\u584a\u77f3\u982d\u7684\u9ad8\u4f4e\u5dee\uff0c\u6c42\u6700\u5c0f\u6210\u672c\u3002 \u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a \u72c0\u614b\uff1a f(n) \u4ee3\u8868\u5f9e\u7b2c 1 \u584a\u77f3\u982d\u8df3\u5230\u7b2c n \u584a\u77f3\u982d\u7684\u6700\u5c0f\u6210\u672c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(0)=0 \u3002 \u8f49\u79fb\uff1a f(n)=min(abs(h_{n}-h_{n-1})+f(i-1),abs(h_{n}-h_{n-2})+f(i-2)) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc \u4f5c\u8005\uff1a allem40306 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int main () { int n ; cin >> n ; vector < int > h ( n + 5 ), dp ( n + 5 ); FOR ( i , 0 , n ) { cin >> h [ i ]; } fill ( dp . begin (), dp . end (), INF ); dp [ 0 ] = 0 ; FOR ( i , 1 , n ) FOR ( j , 1 , 3 ) { if ( i - j < 0 ) { break ; } dp [ i ] = min ( dp [ i ], dp [ i - j ] + abs ( h [ i ] - h [ i - j ])); } cout << dp [ n - 1 ] << '\\n' ; } \u6280\u5de7\uff1a dp[i]=1\\to i (\u524d\u7db4\u72c0\u614b) \u4e00\u7dad DP \u5e38\u7528\u72c0\u614b\uff0c\u7d93\u5178\u7684\u4f8b\u5b50\u70ba\u524d\u7db4\u548c\u3002 \u6700\u5927\u9023\u7e8c\u5340\u9593\u548c \u6700\u5927\u9023\u7e8c\u5340\u9593\u548c \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u4e00\u7d44 i,j(i\\leq j) \uff0c\u4f7f\u5f97 \\sum_{x=i}^{j}A[x] \u6700\u5927\u3002 \u65b9\u6cd5 1\uff1a\u679a\u8209 i,j \u70ba\u4e86\u80fd\u5feb\u901f\u7b2c i \u9805\u5230\u7b2c j \u9805\u7684\u548c\uff0c\u9019\u88e1\u5229\u7528\u524d\u7db4\u548c\u52a0\u901f\u8a08\u7b97\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int ans = A [ 1 ]; sum [ 1 ] = A [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { sum [ i ] = A [ i ] + sum [ i - 1 ]; } for ( int i = 2 ; i <= n ; ++ i ) { for ( int j = i ; j < n ; ++ j ) { ans = max ( sum [ j ] - sum [ i - 1 ]); } } \u65b9\u6cd5 2 \u72c0\u614b\uff1a f(i) \u4ee3\u8868\u524d i \u9805\u7684\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(1)=A[1] \u3002 \u8f49\u79fb\uff1a f(n)=max(0,f(n-1))+A[i] \u3002 1 2 3 4 5 6 7 int ans = A [ 1 ], dp [ N ]; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i ] = max ( dp [ i - 1 ], 0 ) + A [ i ]; ans = max ( ans , dp [ i ]); } \u53ea\u6709 dp[i-1] \u7684\u8cc7\u8a0a\u6703\u88ab\u7528\u5230\uff0c\u53c8 dp[i-1] \u53ef\u88ab dp[i] \u8986\u84cb\uff0c\u6545\u53ef\u53ea\u7528\u4e00\u500b\u8b8a\u6578\u7d00\u9304\uff0c\uff08\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff09\u3002 1 2 3 4 5 6 7 int ans = A [ 1 ], mx = A [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { mx = max ( mx , 0 ) + A [ i ]; ans = max ( ans , mx ); } \u65b9\u6cd5 3 \u72c0\u614b\uff1a f(i) \u4ee3\u8868\u524d i \u9805\u7684\u6700\u5c0f\u7684\u524d\u7db4\u548c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(1)=A[1] \u3002 \u8f49\u79fb\uff1a f(n)=min(sum[i],f(n-1)) \u3002 \u7b54\u6848\u70ba max_{i=1}^{n}(sum[i]-f(i-1)) \uff08\u7d50\u5c3e\u70ba\u7b2c i \u9805\u7684\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c\uff09\u3002 1 2 3 4 5 6 7 8 9 int ans = A [ 1 ]; sum [ 1 ] = dp [ 1 ] = A [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { sum [ i ] = A [ i ] + sum [ i - 1 ]; dp [ i ] = min ( dp [ i - 1 ], sum [ i ]); ans = max ( ans , sum [ i ] - dp [ i - 1 ]); } \u52a0\u4e0a\u9577\u5ea6\u9650\u5236 \u6700\u5927\u9023\u7e8c\u5340\u9593\u548c 2 \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u4e00\u7d44 i,j(i\\leq j,j-i<L) \uff0c\u4f7f\u5f97 \\sum_{x=i}^{j}A[x] \u6700\u5927\u3002 \u4e00\u6a23\u5148\u8a08\u7b97\u51fa\u524d\u7db4\u548c\uff0c\u5c0d\u65bc\u6bcf\u500b sum[i] \uff0c\u627e\u51fa min_{max(0,i-L)\\le j< i}sum[j] \uff0c\u76f4\u63a5\u679a\u8209\u7684\u6642\u9593\u8907\u96dc\u5ea6 O(N^2) \u3002 \u89c0\u5bdf\u4ee5\u4e0b\u6027\u8cea\uff1a\u5047\u8a2d i<j \u4e14 sum[i]>sum[j] \uff0c\u7576\u904d\u6b77\u5230 j \uff0c sum[i] \u9019\u9805\u8cc7\u6599\u56e0\u70ba\u4f4d\u7f6e\u548c\u672c\u8eab\u6578\u503c\u5169\u9805\u56e0\u7d20\uff0c\u4e0d\u53ef\u80fd\u6bd4 sum[j] \u9084\u8981\u597d\uff0c\u56e0\u6b64\u4e0d\u518d\u9700\u8981\u8003\u616e sum[i] \u662f\u5426\u70ba\u89e3\u3002 \u6839\u64da\u4ee5\u4e0a\u89c0\u5bdf\uff0c\u53ef\u4ee5\u7528\u8cc7\u6599\u7d50\u69cb\uff08deque\uff09\u7dad\u8b77\u53ef\u80fd\u89e3\uff0c\u7576\u9047\u5230\u4ee5\u4e0b\u60c5\u6cc1\uff0c sum[x] \u518d\u4e5f\u4e0d\u80fd\u6210\u70ba\u6700\u4f73\u89e3\u3002 \u9577\u5ea6\u8d85\u904e L \u53f3\u908a\u51fa\u73fe\u4e00\u500b\u66f4\u597d\u7684\u89e3 \u6bcf\u500b\u89e3\u6700\u591a\u88ab\u63d2\u5165\u548c\u522a\u9664\u4e00\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; int a [ 15 ] = { 0 , 6 , -8 , 4 , -10 , 7 , 9 , -6 , 4 , 5 , -1 }; int sum [ 15 ]; int main () { int L = 3 , ans = 0 ; for ( int i = 1 ; i <= 10 ; ++ i ) { sum [ i ] = a [ i ] + sum [ i - 1 ]; } deque < int > dq ; dq . push_back ( 0 ); for ( int i = 1 ; i <= 10 ; ++ i ) { if ( i - dq . front () > L ) dq . pop_front (); ans = max ( ans , sum [ i ] - sum [ dq . front ()]); while ( ! dq . empty () && sum [ i ] < sum [ dq . back ()]) { dq . pop_back (); } dq . push_back ( i ); } cout << ans << '\\n' ; } \u6280\u5de7\uff1a\u55ae\u8abf\u5c0d\u5217\u512a\u5316 \u5229\u7528\u984c\u76ee\u4e2d\u7684\u300c\u55ae\u8abf\u6027\u300d\uff0c\u5229\u7528\u8cc7\u6599\u7d50\u69cb\u7dad\u8b77\u53ef\u80fd\u7684\u89e3\uff0c\u901a\u5e38\u53ef\u4ee5\u8b93\u6642\u9593\u8907\u96dc\u5ea6\u964d\u4f4e 1 \u500b\u7dad\u5ea6 (e.g. O(N^2)\\to O(N) )\u3002 \u6700\u5927\u77e9\u5f62\u9762\u7a4d \u6700\u5927\u77e9\u5f62\u9762\u7a4d \u7d66\u5b9a N \u689d\u76f8\u9023\u7684\u9577\u689d\u5716\uff0c\u6c42\u5716\u5167\u6700\u5927\u9577\u65b9\u5f62\u9762\u7a4d\u3002 \u5c0d\u65bc\u6bcf\u500b\u9ad8\u5ea6 H[i] \uff0c\u8a08\u7b97\u5de6\u53f3\u908a\u754c L[i],R[i] \uff0c\u9762\u7a4d A[i]=H[i]\\times(R[i]-L[i]+1) L[i]=max\\{j|j<i\\ and\\ H[j]<H[i]\\}+1 R[i]=min\\{j|j>i\\ and\\ H[j]<H[i]\\}-1 \u7528\u8ff4\u5708\u679a\u8209\u627e\u5230\u7b54\u6848\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N^2) \uff0c\u7528\u4e0a\u6587\u63d0\u5230\u7684\u55ae\u8abf\u968a\u5217\u512a\u5316\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N) \u3002 \u8a08\u7b97 L \u70ba\u4f8b\uff0c\u5c0d\u65bc\u6bcf\u500b\u4f4d\u7f6e i \uff0c\u548c\u5806\u758a st \uff0c\u5f9e\u53f3\u5230\u5de6\u904d\u6b77\u5143\u7d20\uff1a \u5982\u679c st \u70ba\u7a7a\uff0c st.push(i) \u5982\u679c H[st.top()]<=H[i] \uff0c st.push(i) \u5982\u679c H[st.top()]>H[i] \uff0c L[st.top()]=i+1 \u3001 st.pop() \u904d\u6b77\u6240\u6709\u5143\u7d20\u5f8c\uff0c\u5982\u679c st \u9084\u6709\u5143\u7d20\uff0c\u5c0d\u65bc\u6bcf\u500b\u5143\u7d20 x \uff0c L[x]=0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> using namespace std ; const int N = 25 ; int main () { int n ; cin >> n ; vector < int > H ( n + 5 ), L ( n + 5 ), R ( n + 5 ); for ( int i = 0 ; i < n ; ++ i ) cin >> H [ i ]; stack < int > st ; // calculate R[] for ( int i = 0 ; i < n ; ++ i ) { while ( ! st . empty () && H [ st . top ()] > H [ i ]) { R [ st . top ()] = i - 1 ; st . pop (); } st . push ( i ); } while ( ! st . empty ()) { R [ st . top ()] = n - 1 ; st . pop (); } // calculate L[] for ( int i = n - 1 ; i >= 0 ; -- i ) { while ( ! st . empty () && H [ st . top ()] > H [ i ]) { L [ st . top ()] = i + 1 ; st . pop (); } st . push ( i ); } while ( ! st . empty ()) { L [ st . top ()] = 0 ; st . pop (); } int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { ans = max ( ans , H [ i ] * ( R [ i ] - L [ i ] + 1 )); cout << i << ' ' << L [ i ] << ' ' << R [ i ] << '\\n' ; } cout << ans << '\\n' ; } \u5ef6\u4f38\u984c\u76ee \u6700\u5927\u77e9\u5f62\u9762\u7a4d 2 \u7d66\u5b9a N\\times M \u7684\u683c\u5b50 A \uff0c\u6bcf\u683c\u683c\u5b50\u53ea\u6709\u6578\u5b57 0 \u6216 1 \uff0c\u8acb\u6c42\u51fa\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u77e9\u5f62\u3002 1 2 3 4 5 0 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 0 \u6211\u5011\u5148\u7b97\u51fa\u4ee5\u4e0b\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a \u72c0\u614b\uff1a S[i][j] \u4ee3\u8868\u7531 A[i][j] \u5f80\u4e0a\u9023\u7e8c\u6709\u5e7e\u500b 1 \u521d\u59cb\u72c0\u614b\uff1a S[i][j]=A[i][j],if\\ i=0 \u8f49\u79fb\uff1a dp[i][j]= \\begin{cases} dp[i-1][j]+1 & A[i][j]=1\\\\ 0 & \\text{else} \\end{cases} \u4ee5\u984c\u76ee\u7bc4\u4f8b\u70ba\u4f8b\u5b50\uff0c S[i][j] \u70ba\uff1a 1 2 3 4 5 0 0 0 0 0 0 1 0 0 1 1 2 1 0 2 2 3 2 1 3 0 0 0 0 0 \u5982\u679c\u55ae\u6c42\u77e9\u5f62\u5e95\u90e8\u843d\u5728\u67d0\u4e00\u689d\u6c34\u5e73\u7dda\u4e0a\u7684\u6700\u5927\u77e9\u5f62\u9762\u7a4d\uff0c\u53ef\u5229\u7528\u4e0a\u6587\u63d0\u904e\u7684\u55ae\u8abf\u968a\u5217\u512a\u5316\u6c42\u5f97\uff1b\u5c0d\u6bcf\u4e00\u689d\u6c34\u5e73\u7dda\u6c42\u4e00\u6b21\u6700\u5927\u77e9\u5f62\u9762\u7a4d\uff0c\u518d\u53d6\u6700\u5927\u503c\uff0c\u5c31\u6703\u662f\u672c\u984c\u7b54\u6848\u3002 DAG DP \u5c07\u9ede\u7576\u6210\u72c0\u614b\uff0c\u908a\u7576\u6210\u8f49\u79fb\u65b9\u5411\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 DAG \u4e0a\u6700\u9577\u8def\u5f91 DAG \u4e0a\u6700\u9577\u8def\u5f91 \u7d66\u5b9a\u4e00\u9846\u6709\u5411\u7121\u74b0\u5716\uff0c\u6c42\u51fa\u5716\u4e0a\u6700\u9577\u7684\u8def\u5f91 \u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a \u72c0\u614b\uff1a f(i) : \u7d42\u9ede\u70ba i \u7684\u60c5\u6cc1\u4e0b\uff0c\u8def\u5f91\u9577\u5ea6\u6700\u9577\u70ba\u4f55\uff1f \u521d\u59cb\u72c0\u614b\uff1a f(i)=0,\\forall i\\ s.t. in[i]=0 \u8f49\u79fb\uff1a dp[j]=max\\{dp[i]|(i,j)\\in E\\}+1 \u7b54\u6848\u70ba max\\{dp[i]|i\\in V\\} \u3002 \u4f8b\u984c\u7df4\u7fd2 \u6578\u5217 UVa 00900 - Brick Wall Patterns Zerojudge d212 - \u6771\u6771\u722c\u968e\u68af \u6a5f\u5668\u4eba\u5f80\u53f3\u4e0b\u8d70\u554f\u984c UVa 00825 - Walking on the Safe Side DAG DP UVA 10000 - Longest Paths AtCoder Educational DP Contest B - Frog 2 AtCoder Educational DP Contest C - Vacation","title":"\u57fa\u790e\u554f\u984c"},{"location":"dynamicProgramming/basic/#_1","text":"","title":"\u57fa\u790e\u984c\u76ee"},{"location":"dynamicProgramming/basic/#_2","text":"\u8cbb\u5f0f\u6578\u5217 \u8cbb\u5f0f\u6578\u5217\u7684\u5b9a\u7fa9\uff1a f(n)=f(n-1)+f(n-2),f(0)=0,f(1)=1 \u3002 \u7d66\u5b9a i \uff0c\u8acb\u6c42\u51fa f(i) \u3002 \u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a \u72c0\u614b\uff1a f(n) \u4ee3\u8868\u8cbb\u5f0f\u6578\u5217\u7b2c n \u9805\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(n)=n\\ where\\ n\\leq 1 \u3002 \u8f49\u79fb\uff1a f(n)=f(n-1)+f(n-2) \u3002 \u4e0b\u5217\u5c55\u793a\u56db\u7a2e\u8a08\u7b97\u8cbb\u5f0f\u6578\u5217\u7684\u7248\u672c\uff1a","title":"\u8cbb\u5f0f\u6578\u5217"},{"location":"dynamicProgramming/basic/#_3","text":"1 2 3 4 5 6 7 8 int f ( int n ) { if ( n < 2 ) { return n ; } return f ( n - 1 ) + f ( n - 2 ); } \u9019\u7a2e\u7248\u672c\u7684\u6642\u9593\u8907\u96dc\u5ea6 O(n)=f(n-1) \uff0c f(n) \u662f\u8cbb\u5f0f\u6578\u5217\u7b2c n \u9805\uff0c\u6642\u9593\u6548\u7387\u975e\u5e38\u4f4e\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u9019\u7a2e\u7248\u672c\u5be6\u4f5c DP\u3002","title":"\u905e\u8ff4\uff08\u672a\u642d\u914d\u9663\u5217\uff09"},{"location":"dynamicProgramming/basic/#_4","text":"\u9019\u7a2e\u7248\u672c\u5efa\u7acb\u4e0a\u500b\u7248\u672c\u7684\u57fa\u790e\uff0c\u589e\u52a0\u4e86\u9663\u5217\u7d00\u9304\u5df2\u8a08\u7b97\u51fa\u7684\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int dp [ 30 ]; int f ( int n ) { if ( dp [ n ] != -1 ) { return dp [ n ]; } return dp [ n ] = f ( n - 1 ) + f ( n - 2 ); } int main () { memset ( dp , -1 , sizeof ( dp )); dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; cout << f ( 25 ) << '\\n' ; } \u4e00\u958b\u59cb\u5c07\u6bcf\u500b dp \u8a2d\u70ba -1 \uff0c\u4ee3\u8868\u8a72\u72c0\u614b\u672a\u88ab\u8a08\u7b97\u3002 \u6280\u5de7\uff1a\u8868\u793a\u672a\u8a08\u7b97\u72c0\u614b \u5c07\u9663\u5217\u7684\u6578\u503c\u521d\u59cb\u5316\u4e00\u500b\u4e0d\u53ef\u80fd\u6210\u70ba\u7b54\u6848\u7684\u6578\u5b57 (\u4f8b\u5982\uff1a -1,0 )\uff0c\u4ee3\u8868\u8a72\u72c0\u614b\u672a\u88ab\u8a08\u7b97\u3002 \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N) \u3002 \u6642\u9593\u8907\u96dc\u5ea6\u8b49\u660e \u9019\u7a2e\u7248\u672c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u6211\u5011\u7528\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u89e3\u91cb\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 int dp [ 30 ]; int f ( int p , int n ) { cout << p << \" call \" << n << '\\n' ; if ( dp [ n ] != -1 ) { return dp [ n ]; } return dp [ n ] = f ( n , n - 1 ) + f ( n , n - 2 ); } int main () { memset ( dp , -1 , sizeof ( dp )); dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; f ( -1 , 5 ); } /* -1 call 5 5 call 4 4 call 3 3 call 2 2 call 1 2 call 0 3 call 1 4 call 2 5 call 3 */ \u7576\u547c\u53eb f(n) \uff0c\u6bcf\u500b f(i), 0\\leq i\\leq n \uff0c\u81f3\u591a\u6703\u88ab\u547c\u53eb\u5169\u6b21\uff0c\u7b2c\u4e00\u6b21 f(i) \u88ab f(i+1) \u547c\u53eb\uff0c\u9019\u6642 f(i) \u9084\u6c92\u88ab\u8a08\u7b97\uff0c\u56e0\u6b64\u6703\u7e7c\u7e8c\u905e\u8ff4\u6c42\u503c\uff1b\u7b2c\u4e8c\u6b21 f(i) \u88ab f(i+2) \u547c\u53eb\uff0c\u9019\u6642 f(i) \u5df2\u88ab\u8a08\u7b97\uff0c\u76f4\u63a5\u56de\u50b3\u7d50\u679c\u3002\u6bcf\u500b f(i) \u6700\u591a\u547c\u53eb\u5169\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(n) \u3002","title":"\u905e\u8ff4\uff08\u642d\u914d\u9663\u5217\uff09"},{"location":"dynamicProgramming/basic/#_5","text":"\u7576\u524d\u72c0\u614b\u662f\u5f9e\u90a3\u4e9b\u72c0\u614b\u5f97\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 int main () { int dp [ 30 ]; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < 30 ; ++ i ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ]; } cout << dp [ 5 ] << '\\n' ; }","title":"\u8ff4\u5708\uff08\u5f80\u524d\u770b\uff09"},{"location":"dynamicProgramming/basic/#_6","text":"\u7576\u524d\u72c0\u614b\u6703\u5f71\u97ff\u90a3\u4e9b\u72c0\u614b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int main () { int dp [ 30 ]; memset ( dp , 0 , sizeof ( dp )); dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; for ( int i = 0 ; i < 30 ; ++ i ) { if ( i + 1 < 30 ) { dp [ i + 1 ] += dp [ i ]; } if ( i + 2 < 30 ) { dp [ i + 2 ] += dp [ i ]; } } cout << dp [ 5 ] << '\\n' ; } DP \u5be6\u4f5c\u8fa6\u6cd5 \u905e\u8ff4 \u8ff4\u5708 (\u5411\u524d\u770b) \u8ff4\u5708 (\u5411\u5f8c\u770b) \u9664\u4e86\u8cbb\u5f0f\u6578\u5217\uff0c\u4efb\u4f55\u6578\u5217\u53ef\u4ee5\u5beb\u6210 f(i)=a_1f(i-1)+a_2f(i-2)+...+a_nf(i-n)+k \u7684\u5f62\u5f0f\uff0c\u7686\u53ef\u5229\u7528 DP \u4f86\u89e3\u51fa\u3002","title":"\u8ff4\u5708\uff08\u5f80\u5f8c\u770b\uff09"},{"location":"dynamicProgramming/basic/#pascals-triangle","text":"Question \u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c m \u5c64\u7b2c n \u9805 =C_n^m \uff0c\u7d66\u5b9a i,j \uff0c\u8acb\u6c42\u51fa\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c i \u5c64\u7b2c j \u9805\u3002 \u5e15\u65af\u5361\u4e09\u89d2\u5f62\u6709\u4ee5\u4e0b\u6027\u8cea\uff1a C^n_k=C_k^{n-1}+C_{k-1}^{n-1} \uff0c\u6839\u64da\u6027\u8cea\u8a2d\u8a08\u51fa\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a \u72c0\u614b\uff1a f(i,j) \u4ee3\u8868\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c i \u5c64\u7b2c j \u9805\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(i,j)=1, if\\ j==0\\ or\\ j==i \u3002 \u8f49\u79fb\uff1a f(i,j)=f(i-1,j)+f(i-1,j-1) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int main () { int dp [ 30 ][ 30 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < 30 ; ++ i ) { dp [ i ][ 0 ] = dp [ i ][ i ] = 1 ; } for ( int i = 1 ; i < 30 ; ++ i ) { for ( int j = 1 ; j < 30 ; ++ j ) { dp [ i ][ j ] = dp [ i - 1 ][ j ] + dp [ i - 1 ][ j - 1 ]; } } }","title":"\u5e15\u65af\u5361\u4e09\u89d2\u5f62 (Pascal's triangle)"},{"location":"dynamicProgramming/basic/#atcoder-educational-dp-contest-a-frog-1","text":"Frog \u6709\u96bb\u9752\u86d9\u8981\u5f9e\u7b2c 1 \u584a\u77f3\u982d\u8df3\u5230\u7b2c N \u584a\u77f3\u982d\uff0c\u6bcf\u584a\u77f3\u982d\u90fd\u6709\u9ad8\u5ea6 h_i \uff0c\u6bcf\u4e00\u6b21\u53ef\u4ee5\u5f9e\u7b2c i \u584a\u8df3\u5230\u7b2c i+1 \u584a\uff0c\u6210\u672c\u70ba\u5169\u584a\u77f3\u982d\u7684\u9ad8\u4f4e\u5dee\uff0c\u6c42\u6700\u5c0f\u6210\u672c\u3002 \u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a \u72c0\u614b\uff1a f(n) \u4ee3\u8868\u5f9e\u7b2c 1 \u584a\u77f3\u982d\u8df3\u5230\u7b2c n \u584a\u77f3\u982d\u7684\u6700\u5c0f\u6210\u672c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(0)=0 \u3002 \u8f49\u79fb\uff1a f(n)=min(abs(h_{n}-h_{n-1})+f(i-1),abs(h_{n}-h_{n-2})+f(i-2)) \u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc \u4f5c\u8005\uff1a allem40306 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int main () { int n ; cin >> n ; vector < int > h ( n + 5 ), dp ( n + 5 ); FOR ( i , 0 , n ) { cin >> h [ i ]; } fill ( dp . begin (), dp . end (), INF ); dp [ 0 ] = 0 ; FOR ( i , 1 , n ) FOR ( j , 1 , 3 ) { if ( i - j < 0 ) { break ; } dp [ i ] = min ( dp [ i ], dp [ i - j ] + abs ( h [ i ] - h [ i - j ])); } cout << dp [ n - 1 ] << '\\n' ; } \u6280\u5de7\uff1a dp[i]=1\\to i (\u524d\u7db4\u72c0\u614b) \u4e00\u7dad DP \u5e38\u7528\u72c0\u614b\uff0c\u7d93\u5178\u7684\u4f8b\u5b50\u70ba\u524d\u7db4\u548c\u3002","title":"AtCoder Educational DP Contest A - Frog 1"},{"location":"dynamicProgramming/basic/#_7","text":"\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u4e00\u7d44 i,j(i\\leq j) \uff0c\u4f7f\u5f97 \\sum_{x=i}^{j}A[x] \u6700\u5927\u3002","title":"\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c"},{"location":"dynamicProgramming/basic/#1-ij","text":"\u70ba\u4e86\u80fd\u5feb\u901f\u7b2c i \u9805\u5230\u7b2c j \u9805\u7684\u548c\uff0c\u9019\u88e1\u5229\u7528\u524d\u7db4\u548c\u52a0\u901f\u8a08\u7b97\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int ans = A [ 1 ]; sum [ 1 ] = A [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { sum [ i ] = A [ i ] + sum [ i - 1 ]; } for ( int i = 2 ; i <= n ; ++ i ) { for ( int j = i ; j < n ; ++ j ) { ans = max ( sum [ j ] - sum [ i - 1 ]); } }","title":"\u65b9\u6cd5 1\uff1a\u679a\u8209 i,j"},{"location":"dynamicProgramming/basic/#2","text":"\u72c0\u614b\uff1a f(i) \u4ee3\u8868\u524d i \u9805\u7684\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(1)=A[1] \u3002 \u8f49\u79fb\uff1a f(n)=max(0,f(n-1))+A[i] \u3002 1 2 3 4 5 6 7 int ans = A [ 1 ], dp [ N ]; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i ] = max ( dp [ i - 1 ], 0 ) + A [ i ]; ans = max ( ans , dp [ i ]); } \u53ea\u6709 dp[i-1] \u7684\u8cc7\u8a0a\u6703\u88ab\u7528\u5230\uff0c\u53c8 dp[i-1] \u53ef\u88ab dp[i] \u8986\u84cb\uff0c\u6545\u53ef\u53ea\u7528\u4e00\u500b\u8b8a\u6578\u7d00\u9304\uff0c\uff08\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff09\u3002 1 2 3 4 5 6 7 int ans = A [ 1 ], mx = A [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { mx = max ( mx , 0 ) + A [ i ]; ans = max ( ans , mx ); }","title":"\u65b9\u6cd5 2"},{"location":"dynamicProgramming/basic/#3","text":"\u72c0\u614b\uff1a f(i) \u4ee3\u8868\u524d i \u9805\u7684\u6700\u5c0f\u7684\u524d\u7db4\u548c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(1)=A[1] \u3002 \u8f49\u79fb\uff1a f(n)=min(sum[i],f(n-1)) \u3002 \u7b54\u6848\u70ba max_{i=1}^{n}(sum[i]-f(i-1)) \uff08\u7d50\u5c3e\u70ba\u7b2c i \u9805\u7684\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c\uff09\u3002 1 2 3 4 5 6 7 8 9 int ans = A [ 1 ]; sum [ 1 ] = dp [ 1 ] = A [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { sum [ i ] = A [ i ] + sum [ i - 1 ]; dp [ i ] = min ( dp [ i - 1 ], sum [ i ]); ans = max ( ans , sum [ i ] - dp [ i - 1 ]); }","title":"\u65b9\u6cd5 3"},{"location":"dynamicProgramming/basic/#_8","text":"\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c 2 \u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u5e8f\u5217 A \uff0c\u6c42\u51fa\u4e00\u7d44 i,j(i\\leq j,j-i<L) \uff0c\u4f7f\u5f97 \\sum_{x=i}^{j}A[x] \u6700\u5927\u3002 \u4e00\u6a23\u5148\u8a08\u7b97\u51fa\u524d\u7db4\u548c\uff0c\u5c0d\u65bc\u6bcf\u500b sum[i] \uff0c\u627e\u51fa min_{max(0,i-L)\\le j< i}sum[j] \uff0c\u76f4\u63a5\u679a\u8209\u7684\u6642\u9593\u8907\u96dc\u5ea6 O(N^2) \u3002 \u89c0\u5bdf\u4ee5\u4e0b\u6027\u8cea\uff1a\u5047\u8a2d i<j \u4e14 sum[i]>sum[j] \uff0c\u7576\u904d\u6b77\u5230 j \uff0c sum[i] \u9019\u9805\u8cc7\u6599\u56e0\u70ba\u4f4d\u7f6e\u548c\u672c\u8eab\u6578\u503c\u5169\u9805\u56e0\u7d20\uff0c\u4e0d\u53ef\u80fd\u6bd4 sum[j] \u9084\u8981\u597d\uff0c\u56e0\u6b64\u4e0d\u518d\u9700\u8981\u8003\u616e sum[i] \u662f\u5426\u70ba\u89e3\u3002 \u6839\u64da\u4ee5\u4e0a\u89c0\u5bdf\uff0c\u53ef\u4ee5\u7528\u8cc7\u6599\u7d50\u69cb\uff08deque\uff09\u7dad\u8b77\u53ef\u80fd\u89e3\uff0c\u7576\u9047\u5230\u4ee5\u4e0b\u60c5\u6cc1\uff0c sum[x] \u518d\u4e5f\u4e0d\u80fd\u6210\u70ba\u6700\u4f73\u89e3\u3002 \u9577\u5ea6\u8d85\u904e L \u53f3\u908a\u51fa\u73fe\u4e00\u500b\u66f4\u597d\u7684\u89e3 \u6bcf\u500b\u89e3\u6700\u591a\u88ab\u63d2\u5165\u548c\u522a\u9664\u4e00\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; int a [ 15 ] = { 0 , 6 , -8 , 4 , -10 , 7 , 9 , -6 , 4 , 5 , -1 }; int sum [ 15 ]; int main () { int L = 3 , ans = 0 ; for ( int i = 1 ; i <= 10 ; ++ i ) { sum [ i ] = a [ i ] + sum [ i - 1 ]; } deque < int > dq ; dq . push_back ( 0 ); for ( int i = 1 ; i <= 10 ; ++ i ) { if ( i - dq . front () > L ) dq . pop_front (); ans = max ( ans , sum [ i ] - sum [ dq . front ()]); while ( ! dq . empty () && sum [ i ] < sum [ dq . back ()]) { dq . pop_back (); } dq . push_back ( i ); } cout << ans << '\\n' ; } \u6280\u5de7\uff1a\u55ae\u8abf\u5c0d\u5217\u512a\u5316 \u5229\u7528\u984c\u76ee\u4e2d\u7684\u300c\u55ae\u8abf\u6027\u300d\uff0c\u5229\u7528\u8cc7\u6599\u7d50\u69cb\u7dad\u8b77\u53ef\u80fd\u7684\u89e3\uff0c\u901a\u5e38\u53ef\u4ee5\u8b93\u6642\u9593\u8907\u96dc\u5ea6\u964d\u4f4e 1 \u500b\u7dad\u5ea6 (e.g. O(N^2)\\to O(N) )\u3002","title":"\u52a0\u4e0a\u9577\u5ea6\u9650\u5236"},{"location":"dynamicProgramming/basic/#_9","text":"\u6700\u5927\u77e9\u5f62\u9762\u7a4d \u7d66\u5b9a N \u689d\u76f8\u9023\u7684\u9577\u689d\u5716\uff0c\u6c42\u5716\u5167\u6700\u5927\u9577\u65b9\u5f62\u9762\u7a4d\u3002 \u5c0d\u65bc\u6bcf\u500b\u9ad8\u5ea6 H[i] \uff0c\u8a08\u7b97\u5de6\u53f3\u908a\u754c L[i],R[i] \uff0c\u9762\u7a4d A[i]=H[i]\\times(R[i]-L[i]+1) L[i]=max\\{j|j<i\\ and\\ H[j]<H[i]\\}+1 R[i]=min\\{j|j>i\\ and\\ H[j]<H[i]\\}-1 \u7528\u8ff4\u5708\u679a\u8209\u627e\u5230\u7b54\u6848\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N^2) \uff0c\u7528\u4e0a\u6587\u63d0\u5230\u7684\u55ae\u8abf\u968a\u5217\u512a\u5316\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(N) \u3002 \u8a08\u7b97 L \u70ba\u4f8b\uff0c\u5c0d\u65bc\u6bcf\u500b\u4f4d\u7f6e i \uff0c\u548c\u5806\u758a st \uff0c\u5f9e\u53f3\u5230\u5de6\u904d\u6b77\u5143\u7d20\uff1a \u5982\u679c st \u70ba\u7a7a\uff0c st.push(i) \u5982\u679c H[st.top()]<=H[i] \uff0c st.push(i) \u5982\u679c H[st.top()]>H[i] \uff0c L[st.top()]=i+1 \u3001 st.pop() \u904d\u6b77\u6240\u6709\u5143\u7d20\u5f8c\uff0c\u5982\u679c st \u9084\u6709\u5143\u7d20\uff0c\u5c0d\u65bc\u6bcf\u500b\u5143\u7d20 x \uff0c L[x]=0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> using namespace std ; const int N = 25 ; int main () { int n ; cin >> n ; vector < int > H ( n + 5 ), L ( n + 5 ), R ( n + 5 ); for ( int i = 0 ; i < n ; ++ i ) cin >> H [ i ]; stack < int > st ; // calculate R[] for ( int i = 0 ; i < n ; ++ i ) { while ( ! st . empty () && H [ st . top ()] > H [ i ]) { R [ st . top ()] = i - 1 ; st . pop (); } st . push ( i ); } while ( ! st . empty ()) { R [ st . top ()] = n - 1 ; st . pop (); } // calculate L[] for ( int i = n - 1 ; i >= 0 ; -- i ) { while ( ! st . empty () && H [ st . top ()] > H [ i ]) { L [ st . top ()] = i + 1 ; st . pop (); } st . push ( i ); } while ( ! st . empty ()) { L [ st . top ()] = 0 ; st . pop (); } int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { ans = max ( ans , H [ i ] * ( R [ i ] - L [ i ] + 1 )); cout << i << ' ' << L [ i ] << ' ' << R [ i ] << '\\n' ; } cout << ans << '\\n' ; }","title":"\u6700\u5927\u77e9\u5f62\u9762\u7a4d"},{"location":"dynamicProgramming/basic/#_10","text":"\u6700\u5927\u77e9\u5f62\u9762\u7a4d 2 \u7d66\u5b9a N\\times M \u7684\u683c\u5b50 A \uff0c\u6bcf\u683c\u683c\u5b50\u53ea\u6709\u6578\u5b57 0 \u6216 1 \uff0c\u8acb\u6c42\u51fa\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u77e9\u5f62\u3002 1 2 3 4 5 0 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 0 \u6211\u5011\u5148\u7b97\u51fa\u4ee5\u4e0b\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a \u72c0\u614b\uff1a S[i][j] \u4ee3\u8868\u7531 A[i][j] \u5f80\u4e0a\u9023\u7e8c\u6709\u5e7e\u500b 1 \u521d\u59cb\u72c0\u614b\uff1a S[i][j]=A[i][j],if\\ i=0 \u8f49\u79fb\uff1a dp[i][j]= \\begin{cases} dp[i-1][j]+1 & A[i][j]=1\\\\ 0 & \\text{else} \\end{cases} \u4ee5\u984c\u76ee\u7bc4\u4f8b\u70ba\u4f8b\u5b50\uff0c S[i][j] \u70ba\uff1a 1 2 3 4 5 0 0 0 0 0 0 1 0 0 1 1 2 1 0 2 2 3 2 1 3 0 0 0 0 0 \u5982\u679c\u55ae\u6c42\u77e9\u5f62\u5e95\u90e8\u843d\u5728\u67d0\u4e00\u689d\u6c34\u5e73\u7dda\u4e0a\u7684\u6700\u5927\u77e9\u5f62\u9762\u7a4d\uff0c\u53ef\u5229\u7528\u4e0a\u6587\u63d0\u904e\u7684\u55ae\u8abf\u968a\u5217\u512a\u5316\u6c42\u5f97\uff1b\u5c0d\u6bcf\u4e00\u689d\u6c34\u5e73\u7dda\u6c42\u4e00\u6b21\u6700\u5927\u77e9\u5f62\u9762\u7a4d\uff0c\u518d\u53d6\u6700\u5927\u503c\uff0c\u5c31\u6703\u662f\u672c\u984c\u7b54\u6848\u3002","title":"\u5ef6\u4f38\u984c\u76ee"},{"location":"dynamicProgramming/basic/#dag-dp","text":"\u5c07\u9ede\u7576\u6210\u72c0\u614b\uff0c\u908a\u7576\u6210\u8f49\u79fb\u65b9\u5411\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002","title":"DAG DP"},{"location":"dynamicProgramming/basic/#dag","text":"DAG \u4e0a\u6700\u9577\u8def\u5f91 \u7d66\u5b9a\u4e00\u9846\u6709\u5411\u7121\u74b0\u5716\uff0c\u6c42\u51fa\u5716\u4e0a\u6700\u9577\u7684\u8def\u5f91 \u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a \u72c0\u614b\uff1a f(i) : \u7d42\u9ede\u70ba i \u7684\u60c5\u6cc1\u4e0b\uff0c\u8def\u5f91\u9577\u5ea6\u6700\u9577\u70ba\u4f55\uff1f \u521d\u59cb\u72c0\u614b\uff1a f(i)=0,\\forall i\\ s.t. in[i]=0 \u8f49\u79fb\uff1a dp[j]=max\\{dp[i]|(i,j)\\in E\\}+1 \u7b54\u6848\u70ba max\\{dp[i]|i\\in V\\} \u3002","title":"DAG \u4e0a\u6700\u9577\u8def\u5f91"},{"location":"dynamicProgramming/basic/#_11","text":"\u6578\u5217 UVa 00900 - Brick Wall Patterns Zerojudge d212 - \u6771\u6771\u722c\u968e\u68af \u6a5f\u5668\u4eba\u5f80\u53f3\u4e0b\u8d70\u554f\u984c UVa 00825 - Walking on the Safe Side DAG DP UVA 10000 - Longest Paths AtCoder Educational DP Contest B - Frog 2 AtCoder Educational DP Contest C - Vacation","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"dynamicProgramming/intro/","text":"\u52d5\u614b\u898f\u5283\u7c21\u4ecb (Dynamic Programming Intro) \u52d5\u614b\u898f\u5283 (Dynamic Programming, DP) \u548c\u5206\u6cbb\u6cd5\u76f8\u4f3c\uff0c\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u82e5\u5e72\u500b\u5b50\u554f\u984c\uff0c\u4e0d\u540c\u7684\u662f\uff0cDP \u7684\u5b50\u554f\u984c\u5f80\u5f80\u90fd\u662f\u4e0d\u7368\u7acb\uff0c\u5b50\u554f\u984c\u9700\u8981\u4f9d\u9760\u5176\u4ed6\u5b50\u554f\u984c\u7684\u89e3\u3002 \u6027\u8cea \u91cd\u8907\u5b50\u554f\u984c\uff1a\u76f8\u540c\u7684\u4e00\u500b\u5b50\u554f\u984c\uff0c\u6703\u88ab\u91cd\u8907\u8a08\u7b97\u591a\u6b21\u3002 \u6700\u4f73\u5b50\u7d50\u69cb\uff1a\u554f\u984c\u7684\u6700\u4f73\u89e3\u5305\u542b\u5b50\u554f\u984c\u7684\u6700\u4f73\u89e3\u3002 \u7121\u5f8c\u6548\u6027\uff1a\u5b50\u554f\u984c\u4e00\u65e6\u78ba\u88ab\u5b9a\u5f8c\uff0c\u5c31\u4e0d\u6703\u88ab\u6539\u8b8a\uff0c\u4e0d\u6703\u88ab\u4e4b\u5f8c\u66f4\u5927\u7684\u554f\u984c\u6240\u5f71\u97ff\u3002 \u6280\u5de7\uff1a\u7a7a\u9593\u63db\u53d6\u6642\u9593(\u8a18\u61b6\u5316\u641c\u7d22) \u70ba\u907f\u514d\u76f8\u540c\u5b50\u554f\u984c\u591a\u6b21\u8a08\u7b97\uff0c\u6703\u4f7f\u7528\u9663\u5217(\u8a18\u61b6\u9ad4)\u8a18\u4f4f\u7b54\u6848\uff0c\u63d0\u9ad8\u8a08\u7b97\u6548\u7387\u3002 \u6b65\u9a5f \u5b9a\u7fa9\u72c0\u614b\uff1a\u8981\u5982\u4f55\u8a18\u9304\u554f\u984c\u7684\u7b54\u6848\u3002\u901a\u5e38\u5b9a\u7fa9 f(p_1,p_2,...) \uff0c\u70ba\u7b97\u51fa\u7b54\u6848\u7684\u51fd\u6578\u3002 \u8a02\u51fa\u521d\u59cb\u72c0\u614b\u3002 \u8a02\u51fa\u8f49\u79fb\u5f0f\uff1a\u5982\u4f55\u5f9e\u5176\u4ed6\u72c0\u614b\u8f49\u79fb\u5230\u7576\u524d\u72c0\u614b\u3002 \u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6\u8a08\u7b97 \u6642\u9593\u8907\u96dc\u5ea6\uff1a\u72c0\u614b\u500b\u6578 \\times \u8f49\u79fb\u8907\u96dc\u5ea6\u3002 \u72c0\u614b\u500b\u6578\u7d55\u5927\u591a\u6578\u53ef\u7531\u958b\u7684\u9663\u5217\u5927\u5c0f\u5f97\u77e5\u3002 \u8f49\u79fb\u8907\u96dc\u5ea6\uff1a\u6700\u591a\u4e00\u500b\u72c0\u614b\u9700\u8981\u82b1\u8cbb\u591a\u5c11\u6642\u9593\u8a08\u7b97\u3002","title":"\u52d5\u614b\u898f\u5283\u7c21\u4ecb"},{"location":"dynamicProgramming/intro/#dynamic-programming-intro","text":"\u52d5\u614b\u898f\u5283 (Dynamic Programming, DP) \u548c\u5206\u6cbb\u6cd5\u76f8\u4f3c\uff0c\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u82e5\u5e72\u500b\u5b50\u554f\u984c\uff0c\u4e0d\u540c\u7684\u662f\uff0cDP \u7684\u5b50\u554f\u984c\u5f80\u5f80\u90fd\u662f\u4e0d\u7368\u7acb\uff0c\u5b50\u554f\u984c\u9700\u8981\u4f9d\u9760\u5176\u4ed6\u5b50\u554f\u984c\u7684\u89e3\u3002","title":"\u52d5\u614b\u898f\u5283\u7c21\u4ecb (Dynamic Programming Intro)"},{"location":"dynamicProgramming/intro/#_1","text":"\u91cd\u8907\u5b50\u554f\u984c\uff1a\u76f8\u540c\u7684\u4e00\u500b\u5b50\u554f\u984c\uff0c\u6703\u88ab\u91cd\u8907\u8a08\u7b97\u591a\u6b21\u3002 \u6700\u4f73\u5b50\u7d50\u69cb\uff1a\u554f\u984c\u7684\u6700\u4f73\u89e3\u5305\u542b\u5b50\u554f\u984c\u7684\u6700\u4f73\u89e3\u3002 \u7121\u5f8c\u6548\u6027\uff1a\u5b50\u554f\u984c\u4e00\u65e6\u78ba\u88ab\u5b9a\u5f8c\uff0c\u5c31\u4e0d\u6703\u88ab\u6539\u8b8a\uff0c\u4e0d\u6703\u88ab\u4e4b\u5f8c\u66f4\u5927\u7684\u554f\u984c\u6240\u5f71\u97ff\u3002 \u6280\u5de7\uff1a\u7a7a\u9593\u63db\u53d6\u6642\u9593(\u8a18\u61b6\u5316\u641c\u7d22) \u70ba\u907f\u514d\u76f8\u540c\u5b50\u554f\u984c\u591a\u6b21\u8a08\u7b97\uff0c\u6703\u4f7f\u7528\u9663\u5217(\u8a18\u61b6\u9ad4)\u8a18\u4f4f\u7b54\u6848\uff0c\u63d0\u9ad8\u8a08\u7b97\u6548\u7387\u3002","title":"\u6027\u8cea"},{"location":"dynamicProgramming/intro/#_2","text":"\u5b9a\u7fa9\u72c0\u614b\uff1a\u8981\u5982\u4f55\u8a18\u9304\u554f\u984c\u7684\u7b54\u6848\u3002\u901a\u5e38\u5b9a\u7fa9 f(p_1,p_2,...) \uff0c\u70ba\u7b97\u51fa\u7b54\u6848\u7684\u51fd\u6578\u3002 \u8a02\u51fa\u521d\u59cb\u72c0\u614b\u3002 \u8a02\u51fa\u8f49\u79fb\u5f0f\uff1a\u5982\u4f55\u5f9e\u5176\u4ed6\u72c0\u614b\u8f49\u79fb\u5230\u7576\u524d\u72c0\u614b\u3002 \u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6\u8a08\u7b97 \u6642\u9593\u8907\u96dc\u5ea6\uff1a\u72c0\u614b\u500b\u6578 \\times \u8f49\u79fb\u8907\u96dc\u5ea6\u3002 \u72c0\u614b\u500b\u6578\u7d55\u5927\u591a\u6578\u53ef\u7531\u958b\u7684\u9663\u5217\u5927\u5c0f\u5f97\u77e5\u3002 \u8f49\u79fb\u8907\u96dc\u5ea6\uff1a\u6700\u591a\u4e00\u500b\u72c0\u614b\u9700\u8981\u82b1\u8cbb\u591a\u5c11\u6642\u9593\u8a08\u7b97\u3002","title":"\u6b65\u9a5f"},{"location":"dynamicProgramming/knapsack/","text":"\u80cc\u5305 DP (Knapsack DP) 0-1 \u80cc\u5305\u554f\u984c 0-1 \u80cc\u5305\u554f\u984c \u7d66\u5b9a N \u500b\u7269\u54c1\u7684\u91cd\u91cf w_i \u548c\u50f9\u503c v_i \uff0c\u548c\u4e00\u500b\u5bb9\u91cf\u70ba W \u7684\u80cc\u5305\u3002\u9078\u53d6\u82e5\u5e72\u4ef6\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u5728\u4e0d\u8d85\u904e\u80cc\u5305\u5bb9\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u80cc\u5305\u5167\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u70ba\u4f55? \u6bcf\u7a2e\u7269\u54c1\u6709\u5169\u500b\u72c0\u614b\u4e0d\u653e\u8207\u653e\uff0c\u53ef\u5c0d\u61c9\u4e8c\u9032\u4f4d\u7684 0 \u548c 1 \uff0c\u6545\u7a31\u70ba\u300c0-1 \u80cc\u5305\u554f\u984c\u300d\u3002 \u984c\u76ee\u6709\u4e09\u9805\u8cc7\u6599\uff0c\u7269\u54c1\u500b\u6578\u3001\u7269\u54c1\u91cd\u91cf\u3001\u7269\u54c1\u50f9\u503c\uff0c\u5229\u7528\u9019\u4e9b\u8cc7\u6599\u8a2d\u8a08\u51fa\u72c0\u614b\u5f0f\uff1a \u72c0\u614b\uff1a f(i,j) \u4ee3\u8868\u524d i \u6a23\u7269\u54c1\u5728\u91cd\u91cf\u7e3d\u548c \\leq j \u7684\u60c5\u6cc1\u4e0b\uff0c\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u503c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(i,j)=0,\\ if\\ i = 0 \u3002 \u7576\u7b97\u597d i-1 \u500b\u7269\u54c1\u7684\u72c0\u614b\uff0c\u5c0d\u65bc\u7b2c i \u500b\u7269\u54c1\u6709\u5169\u7a2e\u9078\u64c7 \u4e0d\u653e\uff1a\u91cd\u91cf\u548c\u50f9\u503c\u4e0d\u8b8a \\to f(i,j)=f(i-1,j) \u3002 \u653e\uff1a\u91cd\u91cf +w_i \uff0c\u50f9\u503c +v_i \\to f(i,j)=f(i-1,j-w_i)+v_i \u3002 \u8f49\u79fb\u5f0f\u5c31\u7531\u4e0a\u9762\u5169\u7a2e\u9078\u64c7\u6b78\u7d0d\u51fa\uff1a f(i,j)=max(f(i-1,j),f(i-1,j-w_i)+v_i) \u3002 \u4ee5\u4e0b\u70ba\u5229\u7528\u4e8c\u7dad\u9663\u5217\u5132\u5b58\u7b54\u6848\u7684\u7bc4\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int dp [ MXN + 1 ][ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 1 ; i <= MXN ; ++ i ) { for ( int j = 0 ; j < w [ i ]; ++ j ) { dp [ i ][ j ] = dp [ i - 1 ][ j ]; } for ( int j = w [ i ]; j <= MXW ; ++ j ) { dp [ i ][ j ] = max ( dp [ i - 1 ][ j \u2212 w [ i ]] + v [ i ], dp [ i - 1 ][ j ]); } } cout << dp [ MXN ][ MXW ] << '\\n' ; \u6efe\u52d5\u9663\u5217 \u7a7a\u9593\u8907\u96dc\u5ea6 O(NW) \uff0c\u63a1\u7528\u300c\u6efe\u52d5\u9663\u5217\u300d\uff0c\u53ef\u4ee5\u964d\u4f4e\u7a7a\u9593\u8907\u96dc\u5ea6 \u7531\u4e0a\u5716\u53ef\u5f97\u77e5\uff0c\u7576\u5728\u8a08\u7b97 f(i,j) \u6642\uff0c\u53ea\u6703\u7528\u5230\u4e0a\u4e00\u5217\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u5011\u7684\u9700\u8981\u9663\u5217\u5927\u5c0f\u964d\u5230 2\\times W \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int dp [ 2 ][ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 0 ; j < w [ i ]; ++ j ) { dp [ i & 1 ][ j ] = dp [( i & 1 ) ^ 1 ][ j ]; } for ( int j = w [ i ]; j <= MXW ; ++ j ) { dp [ i & 1 ][ j ] = max ( dp [( i & 1 ) ^ 1 ][ j \u2212 w [ i ]] + v [ i ], dp [( i & 1 ) ^ 1 ][ j ]); } } \u518d\u4f86\uff0c\u5982\u679c\u6211\u5011\u5c07 f(i,j) \u7576\u4e2d\u7684 j \u7531\u5927\u5230\u5c0f\u8a08\u7b97\u3002 \u6703\u767c\u73fe\u8a08\u7b97 f(i,j) \u6642\uff0c f(i-1,j),f(i-1,j+1),f(i-1,j+2),...,f(i-1,C) \u4e5f\u4e0d\u6703\u7528\u5230\uff0c\u53ef\u4ee5\u5c07 f(i,j),f(i,j+1),f(i,j+2),...,f(i,W) \u8986\u84cb\u5230 f(i-1,j),f(i-1,j+1),f(i-1,j+2),...,f(i-1,W) \u4e0a\u9762\u3002\u6211\u5011\u53ef\u4ee5\u518d\u6b21\u7e2e\u5c0f\u9663\u5217\uff0c\u8b8a\u6210\u5927\u5c0f\u70ba W \u7684\u4e00\u7dad\u9663\u5217\u3002 1 2 3 4 5 6 7 8 9 int dp [ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = MXW ; j >= w [ i ]; -- j ) { dp [ j ] = max ( dp [ j \u2212 w [ i ]] + v [ i ], dp [ j ]); } } \u6efe\u52d5\u9663\u5217 \u8986\u84cb\u4e0d\u6703\u7528\u5230\u7684\u8cc7\u8a0a\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002 0-1 \u80cc\u5305\u554f\u984c\u6642\u9593\u8907\u96dc\u5ea6 O(NW) \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6 O(N) \u3002 \u80cc\u5305\u554f\u984c\u53e6\u4e00\u7a2e\u72c0\u614b\u5f0f AtCoder Educational DP Contest E - Knapsack 2 \u9019\u984c\u7684 W \u7bc4\u570d\u5728 [1,10^9] \uff0c\u7528\u4e0a\u8ff0\u7684\u72c0\u614b\u5f0f\u80af\u5b9a TLE \uff0c\u56e0\u6b64\u6211\u5011\u5c07\u72c0\u614b\u5f0f\u6539\u6210\uff1a \u72c0\u614b\uff1a f(i,j) \u4ee3\u8868\u524d i \u6a23\u7269\u54c1\u5728\u50f9\u503c\u7e3d\u548c\u70ba j \u7684\u60c5\u6cc1\u4e0b\uff0c\u91cd\u91cf\u7e3d\u548c\u6700\u5c0f\u503c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(i,0)=0,\\ where\\ 0\\leq 1< n,else\\ f(i,j)=\\infty \u3002 \u8f49\u79fb\u5f0f\u6539\u6210\uff1a f(i,j)=min(f(i-1,j),f(i-1,j-v_i)+w_i) \u6700\u5f8c\u627e\u51fa\uff1a max\\{i|f(n,i)\\leq w\\} \u6280\u5de7\uff1a\u8868\u793a(\u8ca0)\u7121\u9650\u5927 (\u8ca0)\u7121\u9650\u5927\u53ea\u8981\u8a2d\u6210\u4e00\u500b\u6bd4\u6700\u5927(\u5c0f)\u7b54\u6848\u9084\u8981\u5927(\u5c0f)\u7684\u503c\u5c31\u884c\u4e86\u3002 \u7121\u9650\u80cc\u5305\u554f\u984c \u7121\u9650\u80cc\u5305\u554f\u984c \u7d66\u5b9a n \u7a2e\u7269\u54c1\u7684\u91cd\u91cf w_i \u548c\u50f9\u503c v_i \uff0c\u548c\u4e00\u500b\u5bb9\u91cf\u70ba W \u7684\u80cc\u5305\u3002\u6bcf\u7a2e\u7269\u54c1\u53ef\u9078\u53d6\u4efb\u610f\u500b\u653e\u5165\u80cc\u5305\uff0c\u5728\u4e0d\u8d85\u904e\u80cc\u5305\u5bb9\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u80cc\u5305\u5167\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u70ba\u4f55? \u7121\u9650\u80cc\u5305\u554f\u984c\u548c 0-1 \u80cc\u5305\u554f\u984c\u5dee\u7570\u5728\u65bc\u7121\u9650\u80cc\u5305\u7684\u7269\u54c1\u53ef\u4ee5\u9078\u7121\u9650\u591a\u500b\u3002 \u7121\u9650\u80cc\u5305\u554f\u984c\u548c 0-1 \u80cc\u5305\u554f\u984c\u7684\u72c0\u614b\u5f0f\u76f8\u540c\uff0c\u4ee5\u4e0b\u70ba\u8f49\u79fb\u5f0f\uff1a f(i,j)=max(f(i-1,j-k\\times w_i)+ k\\times v_i), \\forall k\\times w_i\\leq j \u53ef\u4ee5\u7c21\u5316\u6210\uff1a f(i,j)=max(f(i-1,j),f(i-1,j-w_i)+v_i,f(i,j-w_i)+v_i) \u3002 f(i,j)=max(f(i-1,j),max(f(i-1,j-w_i),f(i,j-w_i)+)v_i) \u3002 \u70ba\u4ec0\u9ebc\u53ef\u4ee5\u9019\u6a23\u512a\u5316\uff1f\u662f\u56e0\u70ba\u7576 f(i,j) \u7576\u4e2d\u7684 j \u7531\u5c0f\u5230\u5927\u8a08\u7b97\u6642\uff0c f(i,j-w_i) \u5df2\u88ab f(i,j-2\\times w_i) \u66f4\u65b0\u904e\uff0c\u90a3\u9ebc f(i,j-w_i) \u5c31\u662f\u9078\u64c7\u7b2c i \u7a2e\u7269\u54c1\u6578\u6b21\u7684\u6700\u4f73\u7d50\u679c\u3002 \u63db\u8a00\u4e4b\uff0c\u6211\u5011\u901a\u904e\u5c40\u90e8\u6700\u512a\u5b50\u7d50\u69cb\u7684\u6027\u8cea\u91cd\u8907\u4f7f\u7528\u4e86\u4e4b\u524d\u7684\u679a\u8209\u904e\u7a0b\uff0c\u512a\u5316\u4e86\u679a\u8209\u7684\u8907\u96dc\u5ea6\u3002(from \u80cc\u5305 DP - OI Wiki ) \u4e0b\u9762\u70ba\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff0c\u4e00\u6a23\u6709\u7528\u5230\u6efe\u52d5\u9663\u5217\u7684\u6280\u5de7\uff1a 1 2 3 4 5 6 7 8 9 int dp [ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = w [ i ]; j <= MXW ; ++ j ) { dp [ j ] = max ( dp [ j \u2212 w [ i ]] + v [ i ], dp [ j ]); } } \u7121\u9650\u80cc\u5305\u554f\u984c\u6642\u9593\u8907\u96dc\u5ea6 O(NW) \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6 O(W) \u3002 \u4f8b\u984c\u7df4\u7fd2 0-1 \u80cc\u5305\u554f\u984c UVa 10664 - Luggage UVa 10130 - SuperSale AtCoder Educational DP Contest D - Knapsack 1 \u7121\u9650\u80cc\u5305\u554f\u984c UVa 10465 - Homer Simpson UVa 00825 - Coin Change UVa 00357 - Let Me Count The Ways","title":"\u80cc\u5305 DP"},{"location":"dynamicProgramming/knapsack/#dp-knapsack-dp","text":"","title":"\u80cc\u5305 DP (Knapsack DP)"},{"location":"dynamicProgramming/knapsack/#0-1","text":"0-1 \u80cc\u5305\u554f\u984c \u7d66\u5b9a N \u500b\u7269\u54c1\u7684\u91cd\u91cf w_i \u548c\u50f9\u503c v_i \uff0c\u548c\u4e00\u500b\u5bb9\u91cf\u70ba W \u7684\u80cc\u5305\u3002\u9078\u53d6\u82e5\u5e72\u4ef6\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u5728\u4e0d\u8d85\u904e\u80cc\u5305\u5bb9\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u80cc\u5305\u5167\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u70ba\u4f55? \u6bcf\u7a2e\u7269\u54c1\u6709\u5169\u500b\u72c0\u614b\u4e0d\u653e\u8207\u653e\uff0c\u53ef\u5c0d\u61c9\u4e8c\u9032\u4f4d\u7684 0 \u548c 1 \uff0c\u6545\u7a31\u70ba\u300c0-1 \u80cc\u5305\u554f\u984c\u300d\u3002 \u984c\u76ee\u6709\u4e09\u9805\u8cc7\u6599\uff0c\u7269\u54c1\u500b\u6578\u3001\u7269\u54c1\u91cd\u91cf\u3001\u7269\u54c1\u50f9\u503c\uff0c\u5229\u7528\u9019\u4e9b\u8cc7\u6599\u8a2d\u8a08\u51fa\u72c0\u614b\u5f0f\uff1a \u72c0\u614b\uff1a f(i,j) \u4ee3\u8868\u524d i \u6a23\u7269\u54c1\u5728\u91cd\u91cf\u7e3d\u548c \\leq j \u7684\u60c5\u6cc1\u4e0b\uff0c\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u503c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(i,j)=0,\\ if\\ i = 0 \u3002 \u7576\u7b97\u597d i-1 \u500b\u7269\u54c1\u7684\u72c0\u614b\uff0c\u5c0d\u65bc\u7b2c i \u500b\u7269\u54c1\u6709\u5169\u7a2e\u9078\u64c7 \u4e0d\u653e\uff1a\u91cd\u91cf\u548c\u50f9\u503c\u4e0d\u8b8a \\to f(i,j)=f(i-1,j) \u3002 \u653e\uff1a\u91cd\u91cf +w_i \uff0c\u50f9\u503c +v_i \\to f(i,j)=f(i-1,j-w_i)+v_i \u3002 \u8f49\u79fb\u5f0f\u5c31\u7531\u4e0a\u9762\u5169\u7a2e\u9078\u64c7\u6b78\u7d0d\u51fa\uff1a f(i,j)=max(f(i-1,j),f(i-1,j-w_i)+v_i) \u3002 \u4ee5\u4e0b\u70ba\u5229\u7528\u4e8c\u7dad\u9663\u5217\u5132\u5b58\u7b54\u6848\u7684\u7bc4\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int dp [ MXN + 1 ][ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 1 ; i <= MXN ; ++ i ) { for ( int j = 0 ; j < w [ i ]; ++ j ) { dp [ i ][ j ] = dp [ i - 1 ][ j ]; } for ( int j = w [ i ]; j <= MXW ; ++ j ) { dp [ i ][ j ] = max ( dp [ i - 1 ][ j \u2212 w [ i ]] + v [ i ], dp [ i - 1 ][ j ]); } } cout << dp [ MXN ][ MXW ] << '\\n' ;","title":"0-1 \u80cc\u5305\u554f\u984c"},{"location":"dynamicProgramming/knapsack/#_1","text":"\u7a7a\u9593\u8907\u96dc\u5ea6 O(NW) \uff0c\u63a1\u7528\u300c\u6efe\u52d5\u9663\u5217\u300d\uff0c\u53ef\u4ee5\u964d\u4f4e\u7a7a\u9593\u8907\u96dc\u5ea6 \u7531\u4e0a\u5716\u53ef\u5f97\u77e5\uff0c\u7576\u5728\u8a08\u7b97 f(i,j) \u6642\uff0c\u53ea\u6703\u7528\u5230\u4e0a\u4e00\u5217\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u5011\u7684\u9700\u8981\u9663\u5217\u5927\u5c0f\u964d\u5230 2\\times W \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int dp [ 2 ][ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = 0 ; j < w [ i ]; ++ j ) { dp [ i & 1 ][ j ] = dp [( i & 1 ) ^ 1 ][ j ]; } for ( int j = w [ i ]; j <= MXW ; ++ j ) { dp [ i & 1 ][ j ] = max ( dp [( i & 1 ) ^ 1 ][ j \u2212 w [ i ]] + v [ i ], dp [( i & 1 ) ^ 1 ][ j ]); } } \u518d\u4f86\uff0c\u5982\u679c\u6211\u5011\u5c07 f(i,j) \u7576\u4e2d\u7684 j \u7531\u5927\u5230\u5c0f\u8a08\u7b97\u3002 \u6703\u767c\u73fe\u8a08\u7b97 f(i,j) \u6642\uff0c f(i-1,j),f(i-1,j+1),f(i-1,j+2),...,f(i-1,C) \u4e5f\u4e0d\u6703\u7528\u5230\uff0c\u53ef\u4ee5\u5c07 f(i,j),f(i,j+1),f(i,j+2),...,f(i,W) \u8986\u84cb\u5230 f(i-1,j),f(i-1,j+1),f(i-1,j+2),...,f(i-1,W) \u4e0a\u9762\u3002\u6211\u5011\u53ef\u4ee5\u518d\u6b21\u7e2e\u5c0f\u9663\u5217\uff0c\u8b8a\u6210\u5927\u5c0f\u70ba W \u7684\u4e00\u7dad\u9663\u5217\u3002 1 2 3 4 5 6 7 8 9 int dp [ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = MXW ; j >= w [ i ]; -- j ) { dp [ j ] = max ( dp [ j \u2212 w [ i ]] + v [ i ], dp [ j ]); } } \u6efe\u52d5\u9663\u5217 \u8986\u84cb\u4e0d\u6703\u7528\u5230\u7684\u8cc7\u8a0a\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002 0-1 \u80cc\u5305\u554f\u984c\u6642\u9593\u8907\u96dc\u5ea6 O(NW) \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6 O(N) \u3002","title":"\u6efe\u52d5\u9663\u5217"},{"location":"dynamicProgramming/knapsack/#_2","text":"AtCoder Educational DP Contest E - Knapsack 2 \u9019\u984c\u7684 W \u7bc4\u570d\u5728 [1,10^9] \uff0c\u7528\u4e0a\u8ff0\u7684\u72c0\u614b\u5f0f\u80af\u5b9a TLE \uff0c\u56e0\u6b64\u6211\u5011\u5c07\u72c0\u614b\u5f0f\u6539\u6210\uff1a \u72c0\u614b\uff1a f(i,j) \u4ee3\u8868\u524d i \u6a23\u7269\u54c1\u5728\u50f9\u503c\u7e3d\u548c\u70ba j \u7684\u60c5\u6cc1\u4e0b\uff0c\u91cd\u91cf\u7e3d\u548c\u6700\u5c0f\u503c\u3002 \u521d\u59cb\u72c0\u614b\uff1a f(i,0)=0,\\ where\\ 0\\leq 1< n,else\\ f(i,j)=\\infty \u3002 \u8f49\u79fb\u5f0f\u6539\u6210\uff1a f(i,j)=min(f(i-1,j),f(i-1,j-v_i)+w_i) \u6700\u5f8c\u627e\u51fa\uff1a max\\{i|f(n,i)\\leq w\\} \u6280\u5de7\uff1a\u8868\u793a(\u8ca0)\u7121\u9650\u5927 (\u8ca0)\u7121\u9650\u5927\u53ea\u8981\u8a2d\u6210\u4e00\u500b\u6bd4\u6700\u5927(\u5c0f)\u7b54\u6848\u9084\u8981\u5927(\u5c0f)\u7684\u503c\u5c31\u884c\u4e86\u3002","title":"\u80cc\u5305\u554f\u984c\u53e6\u4e00\u7a2e\u72c0\u614b\u5f0f"},{"location":"dynamicProgramming/knapsack/#_3","text":"\u7121\u9650\u80cc\u5305\u554f\u984c \u7d66\u5b9a n \u7a2e\u7269\u54c1\u7684\u91cd\u91cf w_i \u548c\u50f9\u503c v_i \uff0c\u548c\u4e00\u500b\u5bb9\u91cf\u70ba W \u7684\u80cc\u5305\u3002\u6bcf\u7a2e\u7269\u54c1\u53ef\u9078\u53d6\u4efb\u610f\u500b\u653e\u5165\u80cc\u5305\uff0c\u5728\u4e0d\u8d85\u904e\u80cc\u5305\u5bb9\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u80cc\u5305\u5167\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u70ba\u4f55? \u7121\u9650\u80cc\u5305\u554f\u984c\u548c 0-1 \u80cc\u5305\u554f\u984c\u5dee\u7570\u5728\u65bc\u7121\u9650\u80cc\u5305\u7684\u7269\u54c1\u53ef\u4ee5\u9078\u7121\u9650\u591a\u500b\u3002 \u7121\u9650\u80cc\u5305\u554f\u984c\u548c 0-1 \u80cc\u5305\u554f\u984c\u7684\u72c0\u614b\u5f0f\u76f8\u540c\uff0c\u4ee5\u4e0b\u70ba\u8f49\u79fb\u5f0f\uff1a f(i,j)=max(f(i-1,j-k\\times w_i)+ k\\times v_i), \\forall k\\times w_i\\leq j \u53ef\u4ee5\u7c21\u5316\u6210\uff1a f(i,j)=max(f(i-1,j),f(i-1,j-w_i)+v_i,f(i,j-w_i)+v_i) \u3002 f(i,j)=max(f(i-1,j),max(f(i-1,j-w_i),f(i,j-w_i)+)v_i) \u3002 \u70ba\u4ec0\u9ebc\u53ef\u4ee5\u9019\u6a23\u512a\u5316\uff1f\u662f\u56e0\u70ba\u7576 f(i,j) \u7576\u4e2d\u7684 j \u7531\u5c0f\u5230\u5927\u8a08\u7b97\u6642\uff0c f(i,j-w_i) \u5df2\u88ab f(i,j-2\\times w_i) \u66f4\u65b0\u904e\uff0c\u90a3\u9ebc f(i,j-w_i) \u5c31\u662f\u9078\u64c7\u7b2c i \u7a2e\u7269\u54c1\u6578\u6b21\u7684\u6700\u4f73\u7d50\u679c\u3002 \u63db\u8a00\u4e4b\uff0c\u6211\u5011\u901a\u904e\u5c40\u90e8\u6700\u512a\u5b50\u7d50\u69cb\u7684\u6027\u8cea\u91cd\u8907\u4f7f\u7528\u4e86\u4e4b\u524d\u7684\u679a\u8209\u904e\u7a0b\uff0c\u512a\u5316\u4e86\u679a\u8209\u7684\u8907\u96dc\u5ea6\u3002(from \u80cc\u5305 DP - OI Wiki ) \u4e0b\u9762\u70ba\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff0c\u4e00\u6a23\u6709\u7528\u5230\u6efe\u52d5\u9663\u5217\u7684\u6280\u5de7\uff1a 1 2 3 4 5 6 7 8 9 int dp [ MXW + 1 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < N ; ++ i ) { for ( int j = w [ i ]; j <= MXW ; ++ j ) { dp [ j ] = max ( dp [ j \u2212 w [ i ]] + v [ i ], dp [ j ]); } } \u7121\u9650\u80cc\u5305\u554f\u984c\u6642\u9593\u8907\u96dc\u5ea6 O(NW) \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6 O(W) \u3002","title":"\u7121\u9650\u80cc\u5305\u554f\u984c"},{"location":"dynamicProgramming/knapsack/#_4","text":"0-1 \u80cc\u5305\u554f\u984c UVa 10664 - Luggage UVa 10130 - SuperSale AtCoder Educational DP Contest D - Knapsack 1 \u7121\u9650\u80cc\u5305\u554f\u984c UVa 10465 - Homer Simpson UVa 00825 - Coin Change UVa 00357 - Let Me Count The Ways","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"dynamicProgramming/lcsandlis/","text":"LCS \u548c LIS \u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217 (Longest Common Subsequence) \u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217 \u5b50\u5e8f\u5217\u662f\u6307\u4e00\u500b\u5e8f\u5217\u53bb\u9664\u4efb\u610f\u500b\uff08\u5305\u542b 0\uff09\u5143\u7d20\u5f8c\u6240\u5f62\u6210\u7684\u65b0\u5e8f\u5217\u3002 \u7d66\u5b9a\u5169\u5e8f\u5217 A,B \uff0c\u6c42\u6700\u9577\u7684\u5e8f\u5217 C \uff0c C \u540c\u6642\u70ba A,B \u7684\u5b50\u5e8f\u5217\u3002 \u72c0\u614b\uff1a dp[i][j] \u8868\u793a\u4f7f\u7528 a[1:i] \u548c b[1:j] \u7684 LCS \u9577\u5ea6\u3002 \u521d\u59cb\u72c0\u614b\uff1a dp[i][0]=dp[0][i]=0 when i\\geq 0 \u8f49\u79fb\uff1a dp[i][j]= \\begin{cases} dp[i-1][j-1]+1 & a[i]=b[j]\\\\ max(dp[i-1][j],dp[i][j-1]) & \\text{else} \\end{cases} \u6c42\u51fa LCS \u7684\u6642\u9593\u3001\u7a7a\u9593\u8907\u96dc\u5ea6\u90fd\u662f O(N^2) \uff0c\u4f7f\u7528\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff0c\u53ef\u5c07\u7a7a\u9593\u8907\u96dc\u5ea6\u964d\u81f3 O(N) \u3002 \u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217 (Longest Increasing Subsequence) \u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217 \u7d66\u4f60\u4e00\u500b\u5e8f\u5217 A \uff0c\u6c42\u6700\u9577\u7684\u5e8f\u5217 B \uff0c B \u662f\u4e00\u500b\uff08\u975e\uff09\u56b4\u683c\u905e\u589e\u5e8f\u5217\uff0c\u4e14\u70ba A \u7684\u5b50\u5e8f\u5217\u3002 \u72c0\u614b\uff1a dp[i] \uff1a\u7b2c 1 \u5230 i \u500b\u6578\u5b57\u6240\u5f62\u6210\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217\u7684\u9577\u5ea6 \u8f49\u79fb\uff1a dp[i]=max\\{dp[j]|\\forall j<i\\ and\\ A[j]<A[i]\\}+1 \u521d\u59cb\u5316\uff1a dp[0]=0 \u6c42\u51fa LIS \u7684\u6642\u9593\u8907\u96dc\u5ea6 O(N^2) \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6 O(N) LCS \u548c LIS \u984c\u76ee\u8f49\u63db LIS \u8f49\u6210 LCS A \u70ba\u539f\u5e8f\u5217\uff0c B=sort(A) \u5c0d A,B \u505a LCS LCS \u8f49\u6210 LIS A,B \u70ba\u539f\u672c\u7684\u5169\u5e8f\u5217 \u6700 A \u5e8f\u5217\u4f5c\u7de8\u865f\u8f49\u63db\uff0c\u5c07\u8f49\u63db\u898f\u5247\u5957\u7528\u5728 B \u5c0d B \u505a LIS \u91cd\u8907\u7684\u6578\u5b57\u5728\u7de8\u865f\u8f49\u63db\u6642\u5f8c\u8981\u8b8a\u6210\u4e0d\u540c\u7684\u6578\u5b57\uff0c\u8d8a\u65e9\u51fa\u73fe\u7684\u6578\u5b57\u8981\u8d8a\u5c0f \u5982\u679c\u6709\u6578\u5b57\u5728 B \u88e1\u9762\u800c\u4e0d\u5728 A \u88e1\u9762\uff0c\u76f4\u63a5\u5ffd\u7565\u9019\u500b\u6578\u5b57\u4e0d\u505a\u8f49\u63db\u5373\u53ef LIS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u5f9e O(N^2) \u964d\u81f3 O(N\\log N) LIS \u9084\u6709\u53e6\u4e00\u7a2e\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a \u72c0\u614b\uff1a dp[n][i] \u8868\u793a\u4f7f\u7528\u524d n \u500b\u6578\u5b57\u6e4a\u51fa\u9577\u5ea6 i \u7684 LIS, \u672b\u7aef\u6578\u5b57\u6700\u5c0f\u70ba\u4f55\u3002 \u8f49\u79fb\uff1a dp[i][j]= \\begin{cases} min(dp[n-1][i],a[n]) & a[n]>dp[n-1][i-1]\\\\ dp[n-1][i] & \\text{else} \\end{cases} \u521d\u59cb\u72c0\u614b\uff1a dp[0][0] = -INF, dp[0][i] = INF, dp[i][0]=don't\\ care when i \\geq 1 \u9019\u6a23\u7684\u72c0\u614b\u8f49\u79fb\u5f0f\u6642\u9593\u548c\u7a7a\u9593\u8907\u96dc\u5ea6\u4f9d\u820a\u662f O(N^2) \uff0c\u4e0d\u904e\uff0c\u6709\u5e7e\u9ede\u503c\u5f97\u89c0\u5bdf\uff1a \u4ee4 g[i]=dp[x][i] , where 1\\leq x \\leq N \uff0c\u5ffd\u7565 \\infty \uff0c g \u70ba\u4e00\u500b\u56b4\u683c\u905e\u589e\u5e8f\u5217\uff0c\u7576 x \u6bcf\u6b21 +1 \uff0c g \u6bcf\u6b21\u90fd\u6709\u4e00\u500b\u6578\u5b57\u6539\u8b8a\uff0c\u6539\u8b8a\u7684\u6578\u5b57\u7686\u70ba a[i] \uff0c\u88ab\u6539\u7684\u6578\u5b57\u70ba lower\\_bound(a[i]) \u3002 \u6839\u64da\u4e0a\u8ff0\u6027\u8cea\uff0c\u53ef\u7528\u4e8c\u5206\u641c\u66f4\u65b0 g \uff0c\u85c9\u6b64\u627e\u5230 LIS \u7684\u9577\u5ea6\u3002\u6bcf\u6b21\u4e8c\u5206\u641c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(\\log N) \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int main () { int n ; while ( cin >> n ) { vector < int > v ; for ( int i = 0 , x ; i < n ; i ++ ) { cin >> x ; if ( ! v . size () || x > v . back ()) v . push_back ( x ); else * lower_bound ( v . begin (), v . end (), x ) = x ; } cout << v . size () << '\\n' ; } } \u4f8b\u984c\u7df4\u7fd2 UVa 10405 - Longest Common Subsequence UVa 00481 - What Goes Up","title":"LCS \u548c LIS"},{"location":"dynamicProgramming/lcsandlis/#lcs-lis","text":"","title":"LCS \u548c LIS"},{"location":"dynamicProgramming/lcsandlis/#longest-common-subsequence","text":"\u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217 \u5b50\u5e8f\u5217\u662f\u6307\u4e00\u500b\u5e8f\u5217\u53bb\u9664\u4efb\u610f\u500b\uff08\u5305\u542b 0\uff09\u5143\u7d20\u5f8c\u6240\u5f62\u6210\u7684\u65b0\u5e8f\u5217\u3002 \u7d66\u5b9a\u5169\u5e8f\u5217 A,B \uff0c\u6c42\u6700\u9577\u7684\u5e8f\u5217 C \uff0c C \u540c\u6642\u70ba A,B \u7684\u5b50\u5e8f\u5217\u3002 \u72c0\u614b\uff1a dp[i][j] \u8868\u793a\u4f7f\u7528 a[1:i] \u548c b[1:j] \u7684 LCS \u9577\u5ea6\u3002 \u521d\u59cb\u72c0\u614b\uff1a dp[i][0]=dp[0][i]=0 when i\\geq 0 \u8f49\u79fb\uff1a dp[i][j]= \\begin{cases} dp[i-1][j-1]+1 & a[i]=b[j]\\\\ max(dp[i-1][j],dp[i][j-1]) & \\text{else} \\end{cases} \u6c42\u51fa LCS \u7684\u6642\u9593\u3001\u7a7a\u9593\u8907\u96dc\u5ea6\u90fd\u662f O(N^2) \uff0c\u4f7f\u7528\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff0c\u53ef\u5c07\u7a7a\u9593\u8907\u96dc\u5ea6\u964d\u81f3 O(N) \u3002","title":"\u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217 (Longest Common Subsequence)"},{"location":"dynamicProgramming/lcsandlis/#longest-increasing-subsequence","text":"\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217 \u7d66\u4f60\u4e00\u500b\u5e8f\u5217 A \uff0c\u6c42\u6700\u9577\u7684\u5e8f\u5217 B \uff0c B \u662f\u4e00\u500b\uff08\u975e\uff09\u56b4\u683c\u905e\u589e\u5e8f\u5217\uff0c\u4e14\u70ba A \u7684\u5b50\u5e8f\u5217\u3002 \u72c0\u614b\uff1a dp[i] \uff1a\u7b2c 1 \u5230 i \u500b\u6578\u5b57\u6240\u5f62\u6210\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217\u7684\u9577\u5ea6 \u8f49\u79fb\uff1a dp[i]=max\\{dp[j]|\\forall j<i\\ and\\ A[j]<A[i]\\}+1 \u521d\u59cb\u5316\uff1a dp[0]=0 \u6c42\u51fa LIS \u7684\u6642\u9593\u8907\u96dc\u5ea6 O(N^2) \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6 O(N)","title":"\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217 (Longest Increasing Subsequence)"},{"location":"dynamicProgramming/lcsandlis/#lcs-lis_1","text":"LIS \u8f49\u6210 LCS A \u70ba\u539f\u5e8f\u5217\uff0c B=sort(A) \u5c0d A,B \u505a LCS LCS \u8f49\u6210 LIS A,B \u70ba\u539f\u672c\u7684\u5169\u5e8f\u5217 \u6700 A \u5e8f\u5217\u4f5c\u7de8\u865f\u8f49\u63db\uff0c\u5c07\u8f49\u63db\u898f\u5247\u5957\u7528\u5728 B \u5c0d B \u505a LIS \u91cd\u8907\u7684\u6578\u5b57\u5728\u7de8\u865f\u8f49\u63db\u6642\u5f8c\u8981\u8b8a\u6210\u4e0d\u540c\u7684\u6578\u5b57\uff0c\u8d8a\u65e9\u51fa\u73fe\u7684\u6578\u5b57\u8981\u8d8a\u5c0f \u5982\u679c\u6709\u6578\u5b57\u5728 B \u88e1\u9762\u800c\u4e0d\u5728 A \u88e1\u9762\uff0c\u76f4\u63a5\u5ffd\u7565\u9019\u500b\u6578\u5b57\u4e0d\u505a\u8f49\u63db\u5373\u53ef","title":"LCS \u548c LIS \u984c\u76ee\u8f49\u63db"},{"location":"dynamicProgramming/lcsandlis/#lis-on2-onlog-n","text":"LIS \u9084\u6709\u53e6\u4e00\u7a2e\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a \u72c0\u614b\uff1a dp[n][i] \u8868\u793a\u4f7f\u7528\u524d n \u500b\u6578\u5b57\u6e4a\u51fa\u9577\u5ea6 i \u7684 LIS, \u672b\u7aef\u6578\u5b57\u6700\u5c0f\u70ba\u4f55\u3002 \u8f49\u79fb\uff1a dp[i][j]= \\begin{cases} min(dp[n-1][i],a[n]) & a[n]>dp[n-1][i-1]\\\\ dp[n-1][i] & \\text{else} \\end{cases} \u521d\u59cb\u72c0\u614b\uff1a dp[0][0] = -INF, dp[0][i] = INF, dp[i][0]=don't\\ care when i \\geq 1 \u9019\u6a23\u7684\u72c0\u614b\u8f49\u79fb\u5f0f\u6642\u9593\u548c\u7a7a\u9593\u8907\u96dc\u5ea6\u4f9d\u820a\u662f O(N^2) \uff0c\u4e0d\u904e\uff0c\u6709\u5e7e\u9ede\u503c\u5f97\u89c0\u5bdf\uff1a \u4ee4 g[i]=dp[x][i] , where 1\\leq x \\leq N \uff0c\u5ffd\u7565 \\infty \uff0c g \u70ba\u4e00\u500b\u56b4\u683c\u905e\u589e\u5e8f\u5217\uff0c\u7576 x \u6bcf\u6b21 +1 \uff0c g \u6bcf\u6b21\u90fd\u6709\u4e00\u500b\u6578\u5b57\u6539\u8b8a\uff0c\u6539\u8b8a\u7684\u6578\u5b57\u7686\u70ba a[i] \uff0c\u88ab\u6539\u7684\u6578\u5b57\u70ba lower\\_bound(a[i]) \u3002 \u6839\u64da\u4e0a\u8ff0\u6027\u8cea\uff0c\u53ef\u7528\u4e8c\u5206\u641c\u66f4\u65b0 g \uff0c\u85c9\u6b64\u627e\u5230 LIS \u7684\u9577\u5ea6\u3002\u6bcf\u6b21\u4e8c\u5206\u641c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(\\log N) \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N\\log N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int main () { int n ; while ( cin >> n ) { vector < int > v ; for ( int i = 0 , x ; i < n ; i ++ ) { cin >> x ; if ( ! v . size () || x > v . back ()) v . push_back ( x ); else * lower_bound ( v . begin (), v . end (), x ) = x ; } cout << v . size () << '\\n' ; } }","title":"LIS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u5f9e O(N^2) \u964d\u81f3 O(N\\log N)"},{"location":"dynamicProgramming/lcsandlis/#_1","text":"UVa 10405 - Longest Common Subsequence UVa 00481 - What Goes Up","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"dynamicProgramming/tree/","text":"\u6a39 DP \u5728\u6a39\u4e0a DP\uff0c\u901a\u5e38\u6703\u4f7f\u7528 DFS\uff08\u905e\u8ff4\uff09\uff0c\u5f9e\u7236\u7bc0\u9ede\u905e\u8ff4\u5230\u5b50\u7bc0\u9ede\uff0c\u518d\u5408\u4f75\u5b50\u7bc0\u9ede\u7684\u7b54\u6848\u3002 \u6700\u5c0f\u9ede\u8986\u84cb \u6700\u5c0f\u9ede\u8986\u84cb \u7d66\u5b9a\u4e00\u68f5\u6a39 T \uff0c\u6a39\u4e0a\u6240\u6709\u9ede\u4e00\u958b\u59cb\u70ba\u767d\u8272\uff0c\u8981\u6c42\u5c07\u4e00\u4e9b\u9ede\u5857\u6210\u9ed1\u8272\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u908a\u81f3\u5c11\u8207\u4e00\u500b\u9ed1\u8272\u9ede\u76f8\u9023\uff0c\u6c42\u6700\u5c11\u8981\u5857\u5e7e\u500b\u9ede\uff1f \u72c0\u614b\uff1a dp[u][c] \u4ee3\u8868\u4ee5 u \u70ba\u6839\u7684\u5b50\u6a39\uff0c\u5728\u9ede u \u70ba (0: \u767d\u8272\uff1b1: \u9ed1\u8272\uff09\uff0c\u6700\u5c0f\u9700\u8981\u5e7e\u500b\u9ede\u70ba\u9ed1\u8272\u3002 \u521d\u59cb\u72c0\u614b\uff1a\u5982\u679c u \u662f\u8449\u7bc0\u9ede\uff0c dp[u][0]=0,dp[u][1]=1 \u3002 \u8f49\u79fb \u7576 u \u70ba\u767d\u8272\uff0c u \u7684\u5b50\u7bc0\u9ede\u61c9\u70ba\u9ed1\u8272 \u7576 u \u70ba\u9ed1\u8272\uff0c u \u7684\u5b50\u7bc0\u9ede\u53ef\u70ba\u767d\u8272\u6216\u9ed1\u8272 dp[u][0]=\\Sigma_{(u,v)\\in E}dp[v][1] dp[u][1]=\\Sigma_{(u,v)\\in E}min(dp[v][0],dp[v][1]) \u5176\u4ed6\u984c\u76ee \u6700\u5927\u7368\u7acb\u96c6 \u6700\u5c0f\u652f\u914d\u96c6 \u63db\u6839 DP\uff08\u5168\u65b9\u4f4d\u6a39 DP) \u9032\u884c\u5169\u6b21 DFS\uff0c\u7b2c\u4e00\u6b21\u6c42\u5b50\u7bc0\u9ede\u5c0d\u7576\u524d\u7bc0\u9ede\u7684\u8ca2\u737b\uff08\u6a39 DP)\uff0c\u7b2c\u4e8c\u6b21\uff1a\u6839\u64da\u6c42\u7236\u7bc0\u9ede\u9ede\u5c0d\u7576\u524d\u7bc0\u9ede\u7684\u8ca2\u737b\u3002 \u6a39\u76f4\u5f91 \u6a39\u76f4\u5f91 \u4e00\u68f5\u6a39\u4e2d\uff0c\u6700\u9577\u7684\u8def\u5f91\u7a31\u70ba\u6a39\u76f4\u5f91\u3002\u7d66\u5b9a\u4e00\u9846\u6a39\uff0c\u6c42\u76f4\u5f91\u9577\u5ea6\u3002 \u7b2c\u4e00\u7a2e\u505a\u6cd5\u662f\u679a\u8209\u6240\u6709\u7684\u9ede\u70ba\u6839\uff0c\u6c42\u51fa\u5169\u9846\u6df1\u5ea6\u6700\u6df1\u7684\u5b50\u6a39 h_1,h_2 \uff0c\u627e\u51fa\u6700\u5927\u7684 h_1+h_2+1 \uff0c\u4e00\u6b21 DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6 O(V(V+E)) \u3002 \u7b2c\u4e8c\u7a2e\u505a\u6cd5\u662f\u7528\u63db\u6839 DP\u3002\u7b2c\u4e00\u6b21 DFS \u56fa\u5b9a\u4e00\u9ede\u70ba\u6839\uff0c\u6c42\u51fa\u6bcf\u500b\u9ede\u6700\u6df1\u7684\u5169\u9846\u5b50\u6a39\u9ad8\u5ea6 ( h_1,h_2 )\u3002\u7b2c\u4e8c\u6b21 DFS \u5c0d\u65bc\u6bcf\u500b\u9ede u \uff0c\u6c42\u51fa\u7d93\u904e\u7236\u7bc0\u9ede\u6700\u9577\u7684\u8def\u5f91 ( h_3 )\u3002\u53d6 h_1,h_2,h_3 \u524d\u5169\u5927\u6578\u503c\u548c\u518d\u52a0 1 \u5373\u70ba\u7b54\u6848\u3002\u9019\u7a2e\u4f5c\u6cd5\u4f7f\u7528\u4e86\u5169\u6b21 DFS\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(V+E) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <bits/stdc++.h> using namespace std ; const int MXV = 15 ; vector < int > G [ MXV ]; int high [ MXV ][ 2 ]; int ans [ MXV ], height [ MXV ]; void dfs ( int u ) { height [ u ] = 1 ; for ( int v : G [ u ]) { dfs ( v ); height [ u ] = max ( height [ u ], height [ v ] + 1 ); if ( high [ u ][ 0 ] == 0 || height [ high [ u ][ 0 ]] < height [ v ]) { high [ u ][ 1 ] = high [ u ][ 0 ]; high [ u ][ 0 ] = v ; } else if ( high [ u ][ 1 ] == 0 || height [ high [ u ][ 1 ]] < height [ v ]) { high [ u ][ 1 ] = v ; } } } void dfs2 ( int u , int legnth ) { ans [ u ] = height [ high [ u ][ 0 ]] + max ( height [ high [ u ][ 1 ]], legnth ) + 1 ; for ( int v : G [ u ]) { if ( v == high [ u ][ 0 ]) { dfs2 ( v , max ( height [ high [ u ][ 1 ]], legnth ) + 1 ); } else { dfs2 ( v , max ( height [ high [ u ][ 0 ]], legnth ) + 1 ); } } } int main () { int n ; cin >> n ; for ( int i = 1 ; i < n ; ++ i ) { int x , y ; cin >> x >> y ; G [ x ]. emplace_back ( y ); } dfs ( 1 ); dfs2 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) { cout << ans [ i ] << '\\n' ; } } \u4f8b\u984c\u7df4\u7fd2 \u6700\u5c0f\u9ede\u8986\u84cb UVa 01292 - Strategic game \u63db\u6839 DP AtCoder Educational DP Contest V - Subtree","title":"\u6a39 DP"},{"location":"dynamicProgramming/tree/#dp","text":"\u5728\u6a39\u4e0a DP\uff0c\u901a\u5e38\u6703\u4f7f\u7528 DFS\uff08\u905e\u8ff4\uff09\uff0c\u5f9e\u7236\u7bc0\u9ede\u905e\u8ff4\u5230\u5b50\u7bc0\u9ede\uff0c\u518d\u5408\u4f75\u5b50\u7bc0\u9ede\u7684\u7b54\u6848\u3002","title":"\u6a39 DP"},{"location":"dynamicProgramming/tree/#_1","text":"\u6700\u5c0f\u9ede\u8986\u84cb \u7d66\u5b9a\u4e00\u68f5\u6a39 T \uff0c\u6a39\u4e0a\u6240\u6709\u9ede\u4e00\u958b\u59cb\u70ba\u767d\u8272\uff0c\u8981\u6c42\u5c07\u4e00\u4e9b\u9ede\u5857\u6210\u9ed1\u8272\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u908a\u81f3\u5c11\u8207\u4e00\u500b\u9ed1\u8272\u9ede\u76f8\u9023\uff0c\u6c42\u6700\u5c11\u8981\u5857\u5e7e\u500b\u9ede\uff1f \u72c0\u614b\uff1a dp[u][c] \u4ee3\u8868\u4ee5 u \u70ba\u6839\u7684\u5b50\u6a39\uff0c\u5728\u9ede u \u70ba (0: \u767d\u8272\uff1b1: \u9ed1\u8272\uff09\uff0c\u6700\u5c0f\u9700\u8981\u5e7e\u500b\u9ede\u70ba\u9ed1\u8272\u3002 \u521d\u59cb\u72c0\u614b\uff1a\u5982\u679c u \u662f\u8449\u7bc0\u9ede\uff0c dp[u][0]=0,dp[u][1]=1 \u3002 \u8f49\u79fb \u7576 u \u70ba\u767d\u8272\uff0c u \u7684\u5b50\u7bc0\u9ede\u61c9\u70ba\u9ed1\u8272 \u7576 u \u70ba\u9ed1\u8272\uff0c u \u7684\u5b50\u7bc0\u9ede\u53ef\u70ba\u767d\u8272\u6216\u9ed1\u8272 dp[u][0]=\\Sigma_{(u,v)\\in E}dp[v][1] dp[u][1]=\\Sigma_{(u,v)\\in E}min(dp[v][0],dp[v][1]) \u5176\u4ed6\u984c\u76ee \u6700\u5927\u7368\u7acb\u96c6 \u6700\u5c0f\u652f\u914d\u96c6","title":"\u6700\u5c0f\u9ede\u8986\u84cb"},{"location":"dynamicProgramming/tree/#dp-dp","text":"\u9032\u884c\u5169\u6b21 DFS\uff0c\u7b2c\u4e00\u6b21\u6c42\u5b50\u7bc0\u9ede\u5c0d\u7576\u524d\u7bc0\u9ede\u7684\u8ca2\u737b\uff08\u6a39 DP)\uff0c\u7b2c\u4e8c\u6b21\uff1a\u6839\u64da\u6c42\u7236\u7bc0\u9ede\u9ede\u5c0d\u7576\u524d\u7bc0\u9ede\u7684\u8ca2\u737b\u3002","title":"\u63db\u6839 DP\uff08\u5168\u65b9\u4f4d\u6a39 DP)"},{"location":"dynamicProgramming/tree/#_2","text":"\u6a39\u76f4\u5f91 \u4e00\u68f5\u6a39\u4e2d\uff0c\u6700\u9577\u7684\u8def\u5f91\u7a31\u70ba\u6a39\u76f4\u5f91\u3002\u7d66\u5b9a\u4e00\u9846\u6a39\uff0c\u6c42\u76f4\u5f91\u9577\u5ea6\u3002 \u7b2c\u4e00\u7a2e\u505a\u6cd5\u662f\u679a\u8209\u6240\u6709\u7684\u9ede\u70ba\u6839\uff0c\u6c42\u51fa\u5169\u9846\u6df1\u5ea6\u6700\u6df1\u7684\u5b50\u6a39 h_1,h_2 \uff0c\u627e\u51fa\u6700\u5927\u7684 h_1+h_2+1 \uff0c\u4e00\u6b21 DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6 O(V(V+E)) \u3002 \u7b2c\u4e8c\u7a2e\u505a\u6cd5\u662f\u7528\u63db\u6839 DP\u3002\u7b2c\u4e00\u6b21 DFS \u56fa\u5b9a\u4e00\u9ede\u70ba\u6839\uff0c\u6c42\u51fa\u6bcf\u500b\u9ede\u6700\u6df1\u7684\u5169\u9846\u5b50\u6a39\u9ad8\u5ea6 ( h_1,h_2 )\u3002\u7b2c\u4e8c\u6b21 DFS \u5c0d\u65bc\u6bcf\u500b\u9ede u \uff0c\u6c42\u51fa\u7d93\u904e\u7236\u7bc0\u9ede\u6700\u9577\u7684\u8def\u5f91 ( h_3 )\u3002\u53d6 h_1,h_2,h_3 \u524d\u5169\u5927\u6578\u503c\u548c\u518d\u52a0 1 \u5373\u70ba\u7b54\u6848\u3002\u9019\u7a2e\u4f5c\u6cd5\u4f7f\u7528\u4e86\u5169\u6b21 DFS\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(V+E) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <bits/stdc++.h> using namespace std ; const int MXV = 15 ; vector < int > G [ MXV ]; int high [ MXV ][ 2 ]; int ans [ MXV ], height [ MXV ]; void dfs ( int u ) { height [ u ] = 1 ; for ( int v : G [ u ]) { dfs ( v ); height [ u ] = max ( height [ u ], height [ v ] + 1 ); if ( high [ u ][ 0 ] == 0 || height [ high [ u ][ 0 ]] < height [ v ]) { high [ u ][ 1 ] = high [ u ][ 0 ]; high [ u ][ 0 ] = v ; } else if ( high [ u ][ 1 ] == 0 || height [ high [ u ][ 1 ]] < height [ v ]) { high [ u ][ 1 ] = v ; } } } void dfs2 ( int u , int legnth ) { ans [ u ] = height [ high [ u ][ 0 ]] + max ( height [ high [ u ][ 1 ]], legnth ) + 1 ; for ( int v : G [ u ]) { if ( v == high [ u ][ 0 ]) { dfs2 ( v , max ( height [ high [ u ][ 1 ]], legnth ) + 1 ); } else { dfs2 ( v , max ( height [ high [ u ][ 0 ]], legnth ) + 1 ); } } } int main () { int n ; cin >> n ; for ( int i = 1 ; i < n ; ++ i ) { int x , y ; cin >> x >> y ; G [ x ]. emplace_back ( y ); } dfs ( 1 ); dfs2 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) { cout << ans [ i ] << '\\n' ; } }","title":"\u6a39\u76f4\u5f91"},{"location":"dynamicProgramming/tree/#_3","text":"\u6700\u5c0f\u9ede\u8986\u84cb UVa 01292 - Strategic game \u63db\u6839 DP AtCoder Educational DP Contest V - Subtree","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/bigraph/","text":"\u4e8c\u5206\u5716\uff08Bipartite graph) \u5982\u679c\u4e00\u5f35\u5716\u7684\u9ede\u53ef\u4ee5\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u96c6\u5408\u5167\u7684\u9ede\u5f7c\u6b64\u6c92\u6709\u908a\u76f8\u9023\u3002 \u6027\u8cea \u4e0d\u5b58\u5728\u5947\u74b0\uff0c\u5947\u74b0\u70ba\u908a\u6578\u70ba\u5947\u6578\u7684\u74b0\u3002 \u7528\u5169\u7a2e\u984f\u8272\u5857\u6240\u6709\u7684\u9ede\uff0c\u5b58\u5728\u81f3\u5c11\u4e00\u7a2e\u8fa6\u6cd5\u4f7f\u5f97\u4efb\u5169\u76f8\u9130\u9ede\u5c0d\u984f\u8272\u76f8\u7570\u3002\uff08\u8457\u8272\u554f\u984c\uff09 \u5224\u5225\u4e8c\u5206\u5716 \u8457\u8272\u554f\u984c\u53ef\u4ee5\u7528\u4f86\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u70ba\u4e8c\u5206\u5716\uff0c\u7528 color \u7d00\u9304\u6bcf\u500b\u9ede\u7684\u984f\u8272\uff08\u7121\u8272 -1 \u3001\u767d\u8272 0 \u3001\u9ed1\u8272 1 )\uff0c\u4e00\u958b\u59cb\u6bcf\u500b\u9ede\u7d00\u9304\u70ba\u7121\u8272\u3002\u5229\u7528 BFS \u6216 DFS \u904d\u6b77\u6240\u6709\u9ede\uff0c\u9996\u5148\uff0c\u5224\u65b7\u4e00\u500b\u9ede\u662f\u5426\u6709\u984f\u8272\uff0c\u5982\u679c\u9ede\u70ba\u7121\u8272\uff0c\u5c31\u8b93\u9019\u500b\u9ede\u8b8a\u6210\u767d\u8272\uff0c\u5426\u5247\u7167\u820a\u3002\u63a5\u8457\uff0c\u8b93\u5176\u4ed6\u76f8\u9130\u7684\u9ede\u7684\u984f\u8272\u548c\u9019\u500b\u984f\u8272\u76f8\u7570\uff0c\u5982\u679c\u5728\u904d\u6b77\u9014\u4e2d\u767c\u73fe\u6709\u4efb\u610f\u76f8\u9130\u9ede\u5c0d\u540c\u8272\uff0c\u5247\u8a72\u5716\u4e0d\u662f\u4e8c\u5206\u5716\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <bits/stdc++.h> using namespace std ; const int N = 305 ; int color [ N ]; vector < int > v [ N ]; bool dfs ( int s ) { for ( auto it : v [ s ]) { if ( color [ it ] == -1 ) { color [ it ] = 3 - color [ s ]; if ( ! dfs ( it )) return false ; } if ( color [ s ] == color [ it ]) return false ; } return true ; } void isBipatirate () { bool ok = true ; for ( int i = 1 ; i <= n ; ++ i ) { if ( color [ i ] == -1 ) { color [ i ] = 1 ; ok &= dfs ( i ); } } if ( ok ) { cout << \"YES \\n \" ; } else { cout << \"NO \\n \" ; } } \u5339\u914d \u5339\u914d\uff1a\u5728\u5716\u8ad6\u4e2d\u662f\u6307\u4e00\u500b\u908a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u4efb\u610f\u5169\u689d\u908a\u6c92\u6709\u5171\u540c\u9802\u9ede\u3002 \u5339\u914d\u9ede\u3001\u975e\u5339\u914d\u9ede\u3001\u5339\u914d\u908a\u3001\u975e\u5339\u914d\u908a \u6700\u5927\u5339\u914d\uff08\u6700\u5927\u908a\u7368\u7acb\u96c6\uff09\uff1a\u4e00\u5f35\u5716\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6709\u8457\u6700\u5927\u908a\u6578\u7684\u5339\u914d\u3002 \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u500b\u5339\u914d\u5305\u542b\u6240\u6709\u7684\u9ede\uff0c\u90a3\u9ebc\u8a72\u5339\u914d\u7a31\u70ba\u300c\u5b8c\u7f8e\u5339\u914d\u300d\u3002 \u6700\u5927\u6b0a\u91cd\u5339\u914d\uff1a\u4e00\u5f35\u5716\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6709\u8457\u6700\u5927\u908a\u6b0a\u91cd\u548c\u7684\u5339\u914d\u3002 \u4e8c\u5206\u5716\u6700\u5927\u5339\u914d \u5308\u7259\u5229\u6f14\u7b97\u6cd5 (Hungarian algorithm) \u4ea4\u932f\u8def (Alternating Path) \u53ca\u589e\u5ee3\u8def (Agumenting Path) \u4ea4\u932f\u8def\uff1a\u4f9d\u5e8f\u7d93\u904e\u975e\u5339\u914d\u908a\u3001\u5339\u914d\u908a\u3001\u3002\u3002\u3002\u3001\u975e\u5339\u914d\u908a\u3001\u5339\u914d\u908a\u3001\u975e\u5339\u914d\u908a\u6240\u5f62\u6210\u7684\u8def\u5f91\u3002 \u589e\u5ee3\u8def\uff1a\u5f9e\u975e\u5339\u914d\u9ede\u51fa\u767c\uff0c\u7d93\u904e\u4ea4\u932f\u8def\uff0c\u6700\u5f8c\u7d93\u904e\u53e6\u4e00\u500b\u96c6\u5408\u7684\u975e\u5339\u914d\u9ede\uff0c\u8a72\u8def\u5f91\u7a31\u70ba\u589e\u5ee3\u8def\u3002\u628a\u589e\u5ee3\u8def\u4e0a\u7684\u975e\u5339\u914d\u908a\u548c\u5339\u914d\u908a\u66ff\u63db\uff0c\u5c31\u80fd\u4f7f\u5339\u914d\u6578\u91cf +1 \u3002 Berge's Theorem \u5982\u679c\u4e00\u500b\u5339\u914d M \u627e\u4e0d\u5230\u4efb\u4f55\u589e\u5ee3\u8def\uff0c\u90a3\u9ebc M \u5c31\u662f\u4e00\u500b\u6700\u5927\u5339\u914d\u3002 \u6b64\u5b9a\u7406\u53ef\u5ef6\u4f38\u51fa\uff0c\u5982\u679c\u4e00\u500b\u975e\u5339\u914d\u9ede v \u627e\u4e0d\u5230\u589e\u5ee3\u8def\uff0c\u90a3\u9ebc\u5b58\u5728\u4e0d\u5305\u542b v \u7684\u6700\u5927\u5339\u914d M' \u3002 \u6839\u64da Berge's Theorem\uff0c\u6211\u5011\u5f97\u5230\u4e00\u500b\u7b97\u6cd5\uff1a\u679a\u8209\u96c6\u5408 X \u672a\u5339\u914d\u7684\u9ede s \uff0c\u5982\u679c\u627e\u5230\u589e\u5ee3\u8def\uff0c\u5247\u7ffb\u8f49\u6240\u6709\u908a\uff0c\u5426\u5247\u5c31\u628a s \u79fb\u51fa\u5339\u914d\u3002\u627e\u51fa\u589e\u5ee3\u8def\u7684\u65b9\u5f0f\u70ba\uff0c\u5f9e X \u96c6\u5408\u7684\u6bcf\u500b\u9ede s \u958b\u59cb DFS\uff0c\u53bb\u62dc\u8a2a\u96c6\u5408 Y \u7684\u6bcf\u500b\u548c s \u76f8\u9023\u7684\u9ede t \uff0c\u5982\u679c t \u662f\u672a\u5339\u914d\u9ede\uff0c\u5247\u627e\u5230\u4e00\u689d\u589e\u5ee3\u8def\uff1b\u5982\u679c t \u662f\u5339\u914d\u9ede\uff0c\u5247\u5f9e\u548c t \u5339\u914d\u9ede s' \u958b\u59cb DFS \u5c0b\u627e\u589e\u5ee3\u8def\u3002 s \u96c6\u5408\u500b\u6bcf\u500b\u9ede\u90fd\u5339\u914d\u4e00\u6b21\uff0c\u6700\u591a\u6709 V \u500b\u9ede\uff0c\u6bcf\u6b21 DFS \u7684\u6700\u591a\u627e\u5230\u9577\u5ea6\u70ba E \u7684\u589e\u5ee3\u8def\uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(VE) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int lhs , rhs , Left [ MXV ], G [ MXV ][ MXV ]; bitset < MXV > used ; bool dfs ( int s ) { for ( int i = 1 ; i <= rhs ; i ++ ) { if ( ! G [ s ][ i ] || used [ i ]) { continue ; } used [ i ] = true ; if ( Left [ i ] == -1 || dfs ( Left [ i ])) { Left [ i ] = s ; return true ; } } return false ; } int sol () { int ret = 0 ; memset ( Left , -1 , sizeof ( Left )); for ( int i = 1 ; i <= lhs ; i ++ ) { used . reset (); if ( dfs ( i )) { ret ++ ; } } return ret ; } \u7368\u7acb\u96c6\u548c\u8986\u84cb \u6700\u5927\u908a\u7368\u7acb\u96c6 M \uff08\u6700\u5927\u5339\u914d\uff09\uff1a\u70ba\u5716\u4e0a\u6700\u5927\u7684\u908a\u96c6\u4f7f\u5f97\u6bcf\u500b\u9ede\u81f3\u591a\u548c\u4e00\u689d\u908a\u76f8\u9130\u3002 \u6700\u5927\u9ede\u7368\u7acb\u96c6 I \uff1a\u662f\u4e00\u5f35\u5716\u4e2d\uff0c\u6700\u591a\u6709\u5e7e\u500b\u9ede\u4e92\u4e0d\u76f8\u9130\u7684\u6700\u5927\u96c6\u5408\u3002 \u6700\u5c0f\u9ede\u8986\u84cb C_V \uff1a\u6700\u5c0f\u7684\u9ede\u96c6\u4f7f\u5f97\u5716\u4e0a\u6bcf\u689d\u908a\u90fd\u81f3\u5c11\u8207\u9ede\u96c6\u4e2d\u4e00\u500b\u9ede\u76f8\u9130\u3002 \u6700\u5c0f\u908a\u8986\u84cb C_E \uff1a\u6700\u5c0f\u7684\u908a\u96c6\u4f7f\u5f97\u5716\u4e0a\u6bcf\u500b\u9ede\u90fd\u81f3\u5c11\u8207\u908a\u96c6\u4e2d\u4e00\u689d\u908a\u76f8\u9130\u3002 \u6839\u64da K\u00f6nig\u2019s theorem\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u4e0b\u5217\u4e8b\u9805\uff1a |M|=|C_V| |I|=|C_E|=|V|-|M| \u4e0b\u5217\u8aaa\u660e\uff0c\u5728\u627e\u51fa\u6700\u5927\u5339\u914d\u5f8c\uff0c\u5982\u4f55\u627e\u51fa\u9019\u4e9b\u554f\u984c\u7684\u5176\u4e2d\u4e00\u7d44\u89e3\uff1a \u6700\u5c0f\u9ede\u8986\u84cb\uff1a\u5c0d\u65bc\u6bcf\u500b\u5339\u914d\u908a\u4e0a\u7684\u5169\u9ede\uff0c\u5982\u679c\u6709\u4e00\u500b\u5339\u914d\u9ede\u6709\u9023\u63a5\u5230\u672a\u5339\u914d\u9ede\uff0c\u5c07\u8a72\u9ede\u52a0\u5165\u6700\u5c0f\u9ede\u8986\u84cb\u4e2d\uff0c\u5426\u5247\u4efb\u9078\u4e00\u9ede\u52a0\u5165\u6700\u5c0f\u9ede\u8986\u84cb\u4e2d\u3002 \u6700\u5927\u9ede\u7368\u7acb\u96c6\uff1a\u525b\u597d\u8ddf\u6700\u5c0f\u9ede\u8986\u84cb\u4e92\u88dc\u3002 \u6700\u5c0f\u908a\u8986\u84cb\uff1a\u6700\u5927\u5339\u914d\u7684\u908a\uff0c\u52a0\u4e0a\u6bcf\u500b\u672a\u5339\u914d\u9ede\u6240\u9023\u63a5\u7684\u4efb\u610f\u4e00\u689d\u3002 \u56e0\u6b64\uff0c\u53ea\u8981\u7b97\u51fa\u6700\u5927\u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u5176\u4ed6\u554f\u984c\u3002 \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d Kuhn-Munkres Algorithm KM \u6f14\u7b97\u6cd5 (Kuhn-Munkres Algorithm) \u7528\u65bc\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d\uff0c\u6b64\u6f14\u7b97\u6cd5\u5fc5\u9808\u61c9\u7528\u5230\u5b8c\u7f8e\u5339\u914d\u7684\u60c5\u6cc1\uff0c\u6211\u5011\u8981\u589e\u52a0\u4e00\u4e9b\u9ede\u6216\u908a\u4f86\u6eff\u8db3\uff1a \u5169\u96c6\u5408\u7684\u9ede\u6578\u91cf\u8981\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u6a23\u7684\u8a71\uff0c\u5c11\u7684\u96c6\u5408\u8981\u88dc\u591a\u4e00\u4e9b\u9ede\u3002 \u6bcf\u500b\u9ede\u90fd\u8981\u548c\u53e6\u5916\u4e00\u500b\u96c6\u5408\u7684\u6240\u6709\u9ede\u76f8\u9023\uff0c\u5982\u679c\u908a\u4e0d\u5b58\u5728\uff0c\u8acb\u88dc\u4e0a\u4e00\u689d\u6b0a\u91cd\u70ba 0 \u7684\u908a\u3002 KM \u6f14\u7b97\u6cd5\u76f4\u63a5\u5728\u9ede\u4e0a\u8abf\u6574\u6b0a\u91cd\uff0c\u6bd4\u5728\u908a\u4e0a\u8abf\u6574\u6b0a\u91cd\u7c21\u55ae\uff0c\u4f5c\u6cd5\u662f\u5728\u6bcf\u500b\u9ede\u52a0\u4e0a\u4e00\u500b vertex labeling\uff0c lx,ly \u5206\u5225\u70ba X,Y \u96c6\u5408\u7684 vertex labeling\u3002 lx(i)=max_{i\\le j\\le n}\\{w(i,j)\\},ly(i)=0 lx(i)+ly(j)\\ge w(i,j) \u65bc\u662f\u9019\u500b\u554f\u984c\u5c31\u8b8a\u6210\u6700\u5c0f\u5316 \\Sigma_{i\\in X} lx(i)+\\Sigma_{i\\in Y} ly(i) \uff0c\u6211\u5011\u900f\u904e\u4e0d\u65b7\u8abf\u6574 vertex labeling\uff0c\u627e\u5230\u4e00\u689d\u5339\u914d\u908a\u7686\u6eff\u8db3 Lx(u)+Ly(v)=w(i,j) \u7684\u589e\u5ee3\u8def\uff0c\u6700\u5f8c\u5f97\u51fa\u7684\u5339\u914d\u908a\u5373\u70ba\u7b54\u6848\u3002\u628a\u4e00\u500b\u6700\u5927\u5316\u6240\u6709\u5339\u914d\u908a\u7684\u6b0a\u91cd\u548c\uff0c\u8f49\u63db\u6210\u6700\u5c0f\u5316\u6240\u6709\u9ede\u7684\u6b0a\u91cd\u548c\uff0c\u5728\u7dda\u6027\u898f\u5283\u4e2d\uff0c\u662f primal problem \u548c dual problem \u7684\u8f49\u63db\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 template < typename T > struct KM { int n ; int Left [ N ]; T w [ N ][ N ], Lx [ N ], Ly [ N ]; bitset < N > vx , vy ; void init ( int _n ) { n = _n ; } bool match ( int i ) { vx [ i ] = true ; for ( int j = 1 ; j <= n ; j ++ ) { if (( fabs ( Lx [ i ] + Ly [ j ] - w [ i ][ j ]) < 1e-9 ) && ! vy [ j ]) { vy [ j ] = 1 ; if ( ! Left [ j ] || match ( Left [ j ])) { Left [ j ] = i ; return true ; } } } return false ; } void update () { T a = 1e9 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( vx [ i ]) { for ( int j = 1 ; j <= n ; j ++ ) { if ( ! vy [ j ]) { a = min ( a , Lx [ i ] + Ly [ j ] - w [ i ][ j ]); } } } } for ( int i = 1 ; i <= n ; i ++ ) { if ( vx [ i ]) { Lx [ i ] -= a ; } if ( vy [ i ]) { Ly [ i ] += a ; } } } void hungarian () { for ( int i = 1 ; i <= n ; i ++ ) { Left [ i ] = Lx [ i ] = Ly [ i ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { Lx [ i ] = max ( Lx [ i ], w [ i ][ j ]); } } for ( int i = 1 ; i <= n ; i ++ ) { while ( 1 ) { vx . reset (); vy . reset (); if ( match ( i )) { break ; } update (); } } } }; /* usage KM<int> km; // declare with weight type km.init(n); // initialize with vertex km.hungarian(); // calculate km.w[][]; // weight array km.Left[i] // y_i match x_Left[i] */ \u66f4\u591a\u7684\u53c3\u8003\u7a0b\u5f0f\u78bc\u53ef\u53c3\u8003 \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5b8c\u7f8e\u5339\u914d KM \u7b97\u6cd5 - \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab \u548c \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d - OI Wiki \u3002 \u4f8b\u984c\u7df4\u7fd2 \u4e8c\u5206\u5716\u5224\u5b9a UVa 11396 - Claw Decomposition \u4e8c\u5206\u5716\u6700\u5927\u5339\u914d UVa 12083 - Guardian of Decency \u7368\u7acb\u96c6\u548c\u8986\u84cb UVa 11419 - SAM I AM \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5339\u914d UVa 01349 - Optimal Bus Route Design \u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3001\u5b8c\u7f8e\u5339\u914d\u548c\u5308\u7259\u5229\u7b97\u6cd5 - Renfei Song's Blog \u21a9 Matching - \u6f14\u7b97\u6cd5\u7b46\u8a18 \u21a9 \u4e8c\u5206\u56fe - OI Wiki \u21a9 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d - OI Wiki \u21a9 \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d - OI Wiki \u21a9 \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5b8c\u7f8e\u5339\u914d KM \u7b97\u6cd5 - \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab \u21a9 \u4e00\u822c\u5716\u6700\u5927\u6b0a\u5339\u914d - \u65e5\u6708\u5366\u9577 \u21a9 \u9032\u968e\u5716\u8ad6 - \u677f\u4e2d\u57f9\u8a13\u8b1b\u7fa9 \u21a9","title":"\u4e8c\u5206\u5716"},{"location":"graph/bigraph/#bipartite-graph","text":"\u5982\u679c\u4e00\u5f35\u5716\u7684\u9ede\u53ef\u4ee5\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u96c6\u5408\u5167\u7684\u9ede\u5f7c\u6b64\u6c92\u6709\u908a\u76f8\u9023\u3002","title":"\u4e8c\u5206\u5716\uff08Bipartite graph)"},{"location":"graph/bigraph/#_1","text":"\u4e0d\u5b58\u5728\u5947\u74b0\uff0c\u5947\u74b0\u70ba\u908a\u6578\u70ba\u5947\u6578\u7684\u74b0\u3002 \u7528\u5169\u7a2e\u984f\u8272\u5857\u6240\u6709\u7684\u9ede\uff0c\u5b58\u5728\u81f3\u5c11\u4e00\u7a2e\u8fa6\u6cd5\u4f7f\u5f97\u4efb\u5169\u76f8\u9130\u9ede\u5c0d\u984f\u8272\u76f8\u7570\u3002\uff08\u8457\u8272\u554f\u984c\uff09","title":"\u6027\u8cea"},{"location":"graph/bigraph/#_2","text":"\u8457\u8272\u554f\u984c\u53ef\u4ee5\u7528\u4f86\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u70ba\u4e8c\u5206\u5716\uff0c\u7528 color \u7d00\u9304\u6bcf\u500b\u9ede\u7684\u984f\u8272\uff08\u7121\u8272 -1 \u3001\u767d\u8272 0 \u3001\u9ed1\u8272 1 )\uff0c\u4e00\u958b\u59cb\u6bcf\u500b\u9ede\u7d00\u9304\u70ba\u7121\u8272\u3002\u5229\u7528 BFS \u6216 DFS \u904d\u6b77\u6240\u6709\u9ede\uff0c\u9996\u5148\uff0c\u5224\u65b7\u4e00\u500b\u9ede\u662f\u5426\u6709\u984f\u8272\uff0c\u5982\u679c\u9ede\u70ba\u7121\u8272\uff0c\u5c31\u8b93\u9019\u500b\u9ede\u8b8a\u6210\u767d\u8272\uff0c\u5426\u5247\u7167\u820a\u3002\u63a5\u8457\uff0c\u8b93\u5176\u4ed6\u76f8\u9130\u7684\u9ede\u7684\u984f\u8272\u548c\u9019\u500b\u984f\u8272\u76f8\u7570\uff0c\u5982\u679c\u5728\u904d\u6b77\u9014\u4e2d\u767c\u73fe\u6709\u4efb\u610f\u76f8\u9130\u9ede\u5c0d\u540c\u8272\uff0c\u5247\u8a72\u5716\u4e0d\u662f\u4e8c\u5206\u5716\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <bits/stdc++.h> using namespace std ; const int N = 305 ; int color [ N ]; vector < int > v [ N ]; bool dfs ( int s ) { for ( auto it : v [ s ]) { if ( color [ it ] == -1 ) { color [ it ] = 3 - color [ s ]; if ( ! dfs ( it )) return false ; } if ( color [ s ] == color [ it ]) return false ; } return true ; } void isBipatirate () { bool ok = true ; for ( int i = 1 ; i <= n ; ++ i ) { if ( color [ i ] == -1 ) { color [ i ] = 1 ; ok &= dfs ( i ); } } if ( ok ) { cout << \"YES \\n \" ; } else { cout << \"NO \\n \" ; } }","title":"\u5224\u5225\u4e8c\u5206\u5716"},{"location":"graph/bigraph/#_3","text":"\u5339\u914d\uff1a\u5728\u5716\u8ad6\u4e2d\u662f\u6307\u4e00\u500b\u908a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u4efb\u610f\u5169\u689d\u908a\u6c92\u6709\u5171\u540c\u9802\u9ede\u3002 \u5339\u914d\u9ede\u3001\u975e\u5339\u914d\u9ede\u3001\u5339\u914d\u908a\u3001\u975e\u5339\u914d\u908a \u6700\u5927\u5339\u914d\uff08\u6700\u5927\u908a\u7368\u7acb\u96c6\uff09\uff1a\u4e00\u5f35\u5716\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6709\u8457\u6700\u5927\u908a\u6578\u7684\u5339\u914d\u3002 \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u500b\u5339\u914d\u5305\u542b\u6240\u6709\u7684\u9ede\uff0c\u90a3\u9ebc\u8a72\u5339\u914d\u7a31\u70ba\u300c\u5b8c\u7f8e\u5339\u914d\u300d\u3002 \u6700\u5927\u6b0a\u91cd\u5339\u914d\uff1a\u4e00\u5f35\u5716\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6709\u8457\u6700\u5927\u908a\u6b0a\u91cd\u548c\u7684\u5339\u914d\u3002","title":"\u5339\u914d"},{"location":"graph/bigraph/#_4","text":"","title":"\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d"},{"location":"graph/bigraph/#hungarian-algorithm","text":"\u4ea4\u932f\u8def (Alternating Path) \u53ca\u589e\u5ee3\u8def (Agumenting Path) \u4ea4\u932f\u8def\uff1a\u4f9d\u5e8f\u7d93\u904e\u975e\u5339\u914d\u908a\u3001\u5339\u914d\u908a\u3001\u3002\u3002\u3002\u3001\u975e\u5339\u914d\u908a\u3001\u5339\u914d\u908a\u3001\u975e\u5339\u914d\u908a\u6240\u5f62\u6210\u7684\u8def\u5f91\u3002 \u589e\u5ee3\u8def\uff1a\u5f9e\u975e\u5339\u914d\u9ede\u51fa\u767c\uff0c\u7d93\u904e\u4ea4\u932f\u8def\uff0c\u6700\u5f8c\u7d93\u904e\u53e6\u4e00\u500b\u96c6\u5408\u7684\u975e\u5339\u914d\u9ede\uff0c\u8a72\u8def\u5f91\u7a31\u70ba\u589e\u5ee3\u8def\u3002\u628a\u589e\u5ee3\u8def\u4e0a\u7684\u975e\u5339\u914d\u908a\u548c\u5339\u914d\u908a\u66ff\u63db\uff0c\u5c31\u80fd\u4f7f\u5339\u914d\u6578\u91cf +1 \u3002 Berge's Theorem \u5982\u679c\u4e00\u500b\u5339\u914d M \u627e\u4e0d\u5230\u4efb\u4f55\u589e\u5ee3\u8def\uff0c\u90a3\u9ebc M \u5c31\u662f\u4e00\u500b\u6700\u5927\u5339\u914d\u3002 \u6b64\u5b9a\u7406\u53ef\u5ef6\u4f38\u51fa\uff0c\u5982\u679c\u4e00\u500b\u975e\u5339\u914d\u9ede v \u627e\u4e0d\u5230\u589e\u5ee3\u8def\uff0c\u90a3\u9ebc\u5b58\u5728\u4e0d\u5305\u542b v \u7684\u6700\u5927\u5339\u914d M' \u3002 \u6839\u64da Berge's Theorem\uff0c\u6211\u5011\u5f97\u5230\u4e00\u500b\u7b97\u6cd5\uff1a\u679a\u8209\u96c6\u5408 X \u672a\u5339\u914d\u7684\u9ede s \uff0c\u5982\u679c\u627e\u5230\u589e\u5ee3\u8def\uff0c\u5247\u7ffb\u8f49\u6240\u6709\u908a\uff0c\u5426\u5247\u5c31\u628a s \u79fb\u51fa\u5339\u914d\u3002\u627e\u51fa\u589e\u5ee3\u8def\u7684\u65b9\u5f0f\u70ba\uff0c\u5f9e X \u96c6\u5408\u7684\u6bcf\u500b\u9ede s \u958b\u59cb DFS\uff0c\u53bb\u62dc\u8a2a\u96c6\u5408 Y \u7684\u6bcf\u500b\u548c s \u76f8\u9023\u7684\u9ede t \uff0c\u5982\u679c t \u662f\u672a\u5339\u914d\u9ede\uff0c\u5247\u627e\u5230\u4e00\u689d\u589e\u5ee3\u8def\uff1b\u5982\u679c t \u662f\u5339\u914d\u9ede\uff0c\u5247\u5f9e\u548c t \u5339\u914d\u9ede s' \u958b\u59cb DFS \u5c0b\u627e\u589e\u5ee3\u8def\u3002 s \u96c6\u5408\u500b\u6bcf\u500b\u9ede\u90fd\u5339\u914d\u4e00\u6b21\uff0c\u6700\u591a\u6709 V \u500b\u9ede\uff0c\u6bcf\u6b21 DFS \u7684\u6700\u591a\u627e\u5230\u9577\u5ea6\u70ba E \u7684\u589e\u5ee3\u8def\uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(VE) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int lhs , rhs , Left [ MXV ], G [ MXV ][ MXV ]; bitset < MXV > used ; bool dfs ( int s ) { for ( int i = 1 ; i <= rhs ; i ++ ) { if ( ! G [ s ][ i ] || used [ i ]) { continue ; } used [ i ] = true ; if ( Left [ i ] == -1 || dfs ( Left [ i ])) { Left [ i ] = s ; return true ; } } return false ; } int sol () { int ret = 0 ; memset ( Left , -1 , sizeof ( Left )); for ( int i = 1 ; i <= lhs ; i ++ ) { used . reset (); if ( dfs ( i )) { ret ++ ; } } return ret ; }","title":"\u5308\u7259\u5229\u6f14\u7b97\u6cd5 (Hungarian algorithm)"},{"location":"graph/bigraph/#_5","text":"\u6700\u5927\u908a\u7368\u7acb\u96c6 M \uff08\u6700\u5927\u5339\u914d\uff09\uff1a\u70ba\u5716\u4e0a\u6700\u5927\u7684\u908a\u96c6\u4f7f\u5f97\u6bcf\u500b\u9ede\u81f3\u591a\u548c\u4e00\u689d\u908a\u76f8\u9130\u3002 \u6700\u5927\u9ede\u7368\u7acb\u96c6 I \uff1a\u662f\u4e00\u5f35\u5716\u4e2d\uff0c\u6700\u591a\u6709\u5e7e\u500b\u9ede\u4e92\u4e0d\u76f8\u9130\u7684\u6700\u5927\u96c6\u5408\u3002 \u6700\u5c0f\u9ede\u8986\u84cb C_V \uff1a\u6700\u5c0f\u7684\u9ede\u96c6\u4f7f\u5f97\u5716\u4e0a\u6bcf\u689d\u908a\u90fd\u81f3\u5c11\u8207\u9ede\u96c6\u4e2d\u4e00\u500b\u9ede\u76f8\u9130\u3002 \u6700\u5c0f\u908a\u8986\u84cb C_E \uff1a\u6700\u5c0f\u7684\u908a\u96c6\u4f7f\u5f97\u5716\u4e0a\u6bcf\u500b\u9ede\u90fd\u81f3\u5c11\u8207\u908a\u96c6\u4e2d\u4e00\u689d\u908a\u76f8\u9130\u3002 \u6839\u64da K\u00f6nig\u2019s theorem\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u4e0b\u5217\u4e8b\u9805\uff1a |M|=|C_V| |I|=|C_E|=|V|-|M| \u4e0b\u5217\u8aaa\u660e\uff0c\u5728\u627e\u51fa\u6700\u5927\u5339\u914d\u5f8c\uff0c\u5982\u4f55\u627e\u51fa\u9019\u4e9b\u554f\u984c\u7684\u5176\u4e2d\u4e00\u7d44\u89e3\uff1a \u6700\u5c0f\u9ede\u8986\u84cb\uff1a\u5c0d\u65bc\u6bcf\u500b\u5339\u914d\u908a\u4e0a\u7684\u5169\u9ede\uff0c\u5982\u679c\u6709\u4e00\u500b\u5339\u914d\u9ede\u6709\u9023\u63a5\u5230\u672a\u5339\u914d\u9ede\uff0c\u5c07\u8a72\u9ede\u52a0\u5165\u6700\u5c0f\u9ede\u8986\u84cb\u4e2d\uff0c\u5426\u5247\u4efb\u9078\u4e00\u9ede\u52a0\u5165\u6700\u5c0f\u9ede\u8986\u84cb\u4e2d\u3002 \u6700\u5927\u9ede\u7368\u7acb\u96c6\uff1a\u525b\u597d\u8ddf\u6700\u5c0f\u9ede\u8986\u84cb\u4e92\u88dc\u3002 \u6700\u5c0f\u908a\u8986\u84cb\uff1a\u6700\u5927\u5339\u914d\u7684\u908a\uff0c\u52a0\u4e0a\u6bcf\u500b\u672a\u5339\u914d\u9ede\u6240\u9023\u63a5\u7684\u4efb\u610f\u4e00\u689d\u3002 \u56e0\u6b64\uff0c\u53ea\u8981\u7b97\u51fa\u6700\u5927\u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u5176\u4ed6\u554f\u984c\u3002","title":"\u7368\u7acb\u96c6\u548c\u8986\u84cb"},{"location":"graph/bigraph/#_6","text":"","title":"\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d"},{"location":"graph/bigraph/#kuhn-munkres-algorithm","text":"KM \u6f14\u7b97\u6cd5 (Kuhn-Munkres Algorithm) \u7528\u65bc\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d\uff0c\u6b64\u6f14\u7b97\u6cd5\u5fc5\u9808\u61c9\u7528\u5230\u5b8c\u7f8e\u5339\u914d\u7684\u60c5\u6cc1\uff0c\u6211\u5011\u8981\u589e\u52a0\u4e00\u4e9b\u9ede\u6216\u908a\u4f86\u6eff\u8db3\uff1a \u5169\u96c6\u5408\u7684\u9ede\u6578\u91cf\u8981\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u6a23\u7684\u8a71\uff0c\u5c11\u7684\u96c6\u5408\u8981\u88dc\u591a\u4e00\u4e9b\u9ede\u3002 \u6bcf\u500b\u9ede\u90fd\u8981\u548c\u53e6\u5916\u4e00\u500b\u96c6\u5408\u7684\u6240\u6709\u9ede\u76f8\u9023\uff0c\u5982\u679c\u908a\u4e0d\u5b58\u5728\uff0c\u8acb\u88dc\u4e0a\u4e00\u689d\u6b0a\u91cd\u70ba 0 \u7684\u908a\u3002 KM \u6f14\u7b97\u6cd5\u76f4\u63a5\u5728\u9ede\u4e0a\u8abf\u6574\u6b0a\u91cd\uff0c\u6bd4\u5728\u908a\u4e0a\u8abf\u6574\u6b0a\u91cd\u7c21\u55ae\uff0c\u4f5c\u6cd5\u662f\u5728\u6bcf\u500b\u9ede\u52a0\u4e0a\u4e00\u500b vertex labeling\uff0c lx,ly \u5206\u5225\u70ba X,Y \u96c6\u5408\u7684 vertex labeling\u3002 lx(i)=max_{i\\le j\\le n}\\{w(i,j)\\},ly(i)=0 lx(i)+ly(j)\\ge w(i,j) \u65bc\u662f\u9019\u500b\u554f\u984c\u5c31\u8b8a\u6210\u6700\u5c0f\u5316 \\Sigma_{i\\in X} lx(i)+\\Sigma_{i\\in Y} ly(i) \uff0c\u6211\u5011\u900f\u904e\u4e0d\u65b7\u8abf\u6574 vertex labeling\uff0c\u627e\u5230\u4e00\u689d\u5339\u914d\u908a\u7686\u6eff\u8db3 Lx(u)+Ly(v)=w(i,j) \u7684\u589e\u5ee3\u8def\uff0c\u6700\u5f8c\u5f97\u51fa\u7684\u5339\u914d\u908a\u5373\u70ba\u7b54\u6848\u3002\u628a\u4e00\u500b\u6700\u5927\u5316\u6240\u6709\u5339\u914d\u908a\u7684\u6b0a\u91cd\u548c\uff0c\u8f49\u63db\u6210\u6700\u5c0f\u5316\u6240\u6709\u9ede\u7684\u6b0a\u91cd\u548c\uff0c\u5728\u7dda\u6027\u898f\u5283\u4e2d\uff0c\u662f primal problem \u548c dual problem \u7684\u8f49\u63db\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 template < typename T > struct KM { int n ; int Left [ N ]; T w [ N ][ N ], Lx [ N ], Ly [ N ]; bitset < N > vx , vy ; void init ( int _n ) { n = _n ; } bool match ( int i ) { vx [ i ] = true ; for ( int j = 1 ; j <= n ; j ++ ) { if (( fabs ( Lx [ i ] + Ly [ j ] - w [ i ][ j ]) < 1e-9 ) && ! vy [ j ]) { vy [ j ] = 1 ; if ( ! Left [ j ] || match ( Left [ j ])) { Left [ j ] = i ; return true ; } } } return false ; } void update () { T a = 1e9 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( vx [ i ]) { for ( int j = 1 ; j <= n ; j ++ ) { if ( ! vy [ j ]) { a = min ( a , Lx [ i ] + Ly [ j ] - w [ i ][ j ]); } } } } for ( int i = 1 ; i <= n ; i ++ ) { if ( vx [ i ]) { Lx [ i ] -= a ; } if ( vy [ i ]) { Ly [ i ] += a ; } } } void hungarian () { for ( int i = 1 ; i <= n ; i ++ ) { Left [ i ] = Lx [ i ] = Ly [ i ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { Lx [ i ] = max ( Lx [ i ], w [ i ][ j ]); } } for ( int i = 1 ; i <= n ; i ++ ) { while ( 1 ) { vx . reset (); vy . reset (); if ( match ( i )) { break ; } update (); } } } }; /* usage KM<int> km; // declare with weight type km.init(n); // initialize with vertex km.hungarian(); // calculate km.w[][]; // weight array km.Left[i] // y_i match x_Left[i] */ \u66f4\u591a\u7684\u53c3\u8003\u7a0b\u5f0f\u78bc\u53ef\u53c3\u8003 \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5b8c\u7f8e\u5339\u914d KM \u7b97\u6cd5 - \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab \u548c \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d - OI Wiki \u3002","title":"Kuhn-Munkres Algorithm"},{"location":"graph/bigraph/#_7","text":"\u4e8c\u5206\u5716\u5224\u5b9a UVa 11396 - Claw Decomposition \u4e8c\u5206\u5716\u6700\u5927\u5339\u914d UVa 12083 - Guardian of Decency \u7368\u7acb\u96c6\u548c\u8986\u84cb UVa 11419 - SAM I AM \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5339\u914d UVa 01349 - Optimal Bus Route Design \u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3001\u5b8c\u7f8e\u5339\u914d\u548c\u5308\u7259\u5229\u7b97\u6cd5 - Renfei Song's Blog \u21a9 Matching - \u6f14\u7b97\u6cd5\u7b46\u8a18 \u21a9 \u4e8c\u5206\u56fe - OI Wiki \u21a9 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d - OI Wiki \u21a9 \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d - OI Wiki \u21a9 \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5b8c\u7f8e\u5339\u914d KM \u7b97\u6cd5 - \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab \u21a9 \u4e00\u822c\u5716\u6700\u5927\u6b0a\u5339\u914d - \u65e5\u6708\u5366\u9577 \u21a9 \u9032\u968e\u5716\u8ad6 - \u677f\u4e2d\u57f9\u8a13\u8b1b\u7fa9 \u21a9","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/concept/","text":"\u5716\u8ad6\u6982\u5ff5 \u5716\u662f\u7531\u908a\u96c6\u5408\u548c\u9ede\u96c6\u5408\u6240\u5f62\u6210\u7684\u5716\u5f62\uff0c\u9019\u7a2e\u5716\u5f62\u901a\u5e38\u7528\u4f86\u63cf\u8ff0\u67d0\u4e9b\u4e8b\u7269\u4e4b\u9593\u7684\u67d0\u7a2e\u7279\u5b9a\u95dc\u4fc2\u3002\u9802\u9ede\u7528\u65bc\u4ee3\u8868\u4e8b\u7269\uff0c\u9023\u63a5\u5169\u9802\u9ede\u7684\u908a\u5247\u7528\u65bc\u8868\u793a\u5169\u500b\u4e8b\u7269\u9593\u5177\u6709\u9019\u7a2e\u95dc\u4fc2\u3002 \u6578\u5b78\u5f0f\u70ba G=(V,E) \u3002 G \u4ee3\u8868\u5716\uff08Graph\uff09\uff0c V \u4ee3\u8868\u9ede\uff08vertex\uff09\uff0c E \u4ee3\u8868\u908a\uff08edge\uff09\u3002 \u8853\u8a9e \u7121\u5411\u908a\u3001\u6709\u5411\u908a\uff1a\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u7121\u5411\u908a\u4ee3\u8868\u908a\u6c92\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u7b49\u50f9\uff1b\u6709\u5411\u908a\u5247\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u662f\u4e0d\u540c\u7684\u3002 \u7121\u5411\u5716\u3001\u6709\u5411\u5716\u3001\u6df7\u5408\u5716\uff1a\u7121\u5411\u5716\u662f\u53ea\u6709\u7121\u5411\u908a\u7684\u5716\uff0c\u985e\u4f3c\u5730\uff0c\u6709\u5411\u5716\u662f\u53ea\u6709\u6709\u5411\u908a\u7684\u5716\uff0c\u6df7\u548c\u5716\u5247\u662f\u5305\u542b\u7121\u5411\u908a\u548c\u6709\u5411\u908a\u3002 |V| \uff1a\u9ede\u6578\uff0c\u901a\u5e38\u7528 V \u8868\u793a\u3002 |E| \uff1a\u908a\u6578\uff0c\u901a\u5e38\u7528 E \u8868\u793a\u3002 \u6b0a\u91cd\uff08weight)\uff1a\u5728\u9ede\u6216\u908a\u4e0a\u9644\u5e36\u4e00\u500b\u6578\u5b57\u7a31\u505a\u300c\u6b0a\u91cd\u300d\uff0c\u908a\u4e0a\u6b0a\u91cd\u8f03\u5e38\u898b\uff0c\u6b0a\u91cd\u901a\u5e38\u4ee3\u8868\u4ee3\u50f9\uff0c\u4f8b\u5982\u6240\u9700\u82b1\u8cbb\u6642\u9593\u6216\u91d1\u9322\u3002 \u76f8\u9130 (adjacent)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u5169\u500b\u9ede u , v \u76f8\u9130\u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u6307\u5411 (consecutive)\uff1a\u6709\u5411\u5716\u4e2d\uff0c u \u6307\u5411 v \u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u5ea6\uff08degree)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4e00\u500b\u9ede\u9023\u5230\u7684\u908a\u6578\u7a31\u70ba \"\u5ea6\"\uff0c\u5728\u6709\u5411\u5716\u5206\u70ba\u51fa\u5ea6\uff08out-degree\uff0c\u7c21\u7a31 d_{out} \uff09\u53ca\u5165\u5ea6\uff08in-degree\uff0c\u7c21\u7a31 d_{in} )\uff0c\u5206\u5225\u4ee3\u8868\u8a72\u9ede\u6307\u5411\u5225\u9ede\u53ca\u88ab\u6307\u5411\u7684\u908a\u6578\u3002 \u8def\u5f91\uff08walk)\uff1a\u4e00\u689d\u7531 x \u5230 y \u7684\u8def\u5f91 x=v_1,v_2,v_3...,v_k=y \u3002\u6839\u64da\u9650\u5236\u53ef\u4ee5\u5206\u70ba\u4e0b\u5217\u5e7e\u7a2e\uff1a \u958b\u653e \u5c01\u9589\uff08 v_1=v_k ) \u7121\u9650\u5236 walk closed walk \u4e0d\u91cd\u8907\u908a trail circut\uff08\u8ff4\u8def\uff09 \u4e0d\u91cd\u8907\u9ede path cycle\uff08\u74b0\uff09 \u9023\u901a (connected)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u82e5 u \u548c v \u5b58\u5728\u8def\u5f91\uff0c\u5247 u \u548c v \u9023\u901a\u3002\u82e5\u4e00\u7fa4\u9ede\u5169\u5169\u9023\u901a\uff0c\u5247\u9019\u4e9b\u9ede\u90fd\u9023\u901a\u3002 \u4e0b\u5716\u4e2d\uff0c \u81ea\u74b0 (loop)\uff1a\u4e00\u689d\u908a e_i = (u, v) \u6eff\u8db3 u = v , e_i \u5373\u7a31\u70ba\u81ea\u74b0\u3002 \u91cd\u908a (multiple edge)\uff1a\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5b58\u5728 e_i , e_j \u6eff\u8db3 i != j and e_i = e_j \uff0c\u5247\u7a31\u70ba\u91cd\u908a\u3002 \u7279\u6b8a\u7684\u5716 \u7c21\u55ae\u5716\uff1a\u4e00\u500b\u6c92\u6709\u81ea\u74b0\u3001\u91cd\u908a\u7684\u9023\u901a\u5716\u7a31\u70ba\u7c21\u55ae\u5716\u3002 \u9023\u901a\u5716\uff08connected Graph)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede\u7686\u53ef\u7d93\u904e\u4e00\u4e9b\u908a\u8a2a\u554f\u5f7c\u6b64\uff0c\u9019\u5f35\u5716\u5373\u70ba\u7121\u5411\u5716\u3002 \u8acb\u898b \u6a39 \u7ae0\u7bc0\u3002 \u5b8c\u5168\u5716\uff08Complete Graph)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u5b8c\u5168\u5716\u3002\u4e00\u5f35 n \u500b\u9ede\u7684\u5b8c\u5168\u5716\u7c21\u8a18\u70ba K_n \uff0c\u5728\u96c6\u5408\u4e0a\u66fe\u70ba\u5b8c\u5168\u5716\u70ba \"\u5718\" \u7af6\u8cfd\u5716\uff08Tournament Graph)\uff1a\u6709\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u7af6\u8cfd\u5716\u3002 \u6709\u5411\u7121\u74b0\u5716\uff08Directed acyclic graph, DAG)\uff1a\u6c92\u6709\u74b0\u7684\u7121\u5411\u5716\u3002 \u4e8c\u5206\u5716\uff08Bipartite Graph)\uff1a\u80fd\u5c07\u5716\u4e0a\u7684\u9ede\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u4efb\u610f\u4e00\u689d\u908a e_i = (u, v) \u90fd\u6eff\u8db3\uff0c (u, v) \u5728\u4e0d\u540c\u96c6\u5408\u88e1\uff0c\u8a72\u5716\u7a31\u70ba\u4e8c\u5206\u5716\u3002 \u5e73\u9762\u5716\uff08Planar Graph)\uff1a\u53ef\u756b\u5728\u5e73\u9762\u4e0a\uff0c\u4e14\u4efb\u610f\u5169\u689d\u908a\u7686\u4e0d\u91cd\u758a\u7684\u5716\u3002 \u5716\u7684\u95dc\u4fc2 \u5b50\u5716\uff08subgraph)\uff1a\u5982\u679c G'=(V', E') \u662f G=(V, E) \u7684\u5b50\u5716\uff0c\u5247 V'\\in V \u4e14 E'\\in E \u3002 \u88dc\u5716 (complement graph) graph)\uff1a\u4ee4 G=(V,E) \u662f\u4e00\u500b\u5716\uff0c K \u5305\u542b\u6240\u6709 V \u7684\u4e8c\u5143\u5b50\u96c6 (2-element subset)\u3002\u5247\u5716 H = (V, K\\setminus E) \u662f G \u7684\u88dc\u5716\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u628a\u539f\u672c\u7684\u908a\u79fb\u9664\uff0c\u52a0\u5165\u539f\u672c\u4e0d\u5b58\u5728\u7684\u908a\u5373\u662f\u88dc\u5716\u3002 \u540c\u69cb (isomorphic)\uff1a","title":"\u5716\u8ad6\u6982\u5ff5"},{"location":"graph/concept/#_1","text":"\u5716\u662f\u7531\u908a\u96c6\u5408\u548c\u9ede\u96c6\u5408\u6240\u5f62\u6210\u7684\u5716\u5f62\uff0c\u9019\u7a2e\u5716\u5f62\u901a\u5e38\u7528\u4f86\u63cf\u8ff0\u67d0\u4e9b\u4e8b\u7269\u4e4b\u9593\u7684\u67d0\u7a2e\u7279\u5b9a\u95dc\u4fc2\u3002\u9802\u9ede\u7528\u65bc\u4ee3\u8868\u4e8b\u7269\uff0c\u9023\u63a5\u5169\u9802\u9ede\u7684\u908a\u5247\u7528\u65bc\u8868\u793a\u5169\u500b\u4e8b\u7269\u9593\u5177\u6709\u9019\u7a2e\u95dc\u4fc2\u3002 \u6578\u5b78\u5f0f\u70ba G=(V,E) \u3002 G \u4ee3\u8868\u5716\uff08Graph\uff09\uff0c V \u4ee3\u8868\u9ede\uff08vertex\uff09\uff0c E \u4ee3\u8868\u908a\uff08edge\uff09\u3002","title":"\u5716\u8ad6\u6982\u5ff5"},{"location":"graph/concept/#_2","text":"\u7121\u5411\u908a\u3001\u6709\u5411\u908a\uff1a\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u7121\u5411\u908a\u4ee3\u8868\u908a\u6c92\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u7b49\u50f9\uff1b\u6709\u5411\u908a\u5247\u6709\u6307\u5b9a\u65b9\u5411\uff0c (u,v) \u548c (v,u) \u662f\u4e0d\u540c\u7684\u3002 \u7121\u5411\u5716\u3001\u6709\u5411\u5716\u3001\u6df7\u5408\u5716\uff1a\u7121\u5411\u5716\u662f\u53ea\u6709\u7121\u5411\u908a\u7684\u5716\uff0c\u985e\u4f3c\u5730\uff0c\u6709\u5411\u5716\u662f\u53ea\u6709\u6709\u5411\u908a\u7684\u5716\uff0c\u6df7\u548c\u5716\u5247\u662f\u5305\u542b\u7121\u5411\u908a\u548c\u6709\u5411\u908a\u3002 |V| \uff1a\u9ede\u6578\uff0c\u901a\u5e38\u7528 V \u8868\u793a\u3002 |E| \uff1a\u908a\u6578\uff0c\u901a\u5e38\u7528 E \u8868\u793a\u3002 \u6b0a\u91cd\uff08weight)\uff1a\u5728\u9ede\u6216\u908a\u4e0a\u9644\u5e36\u4e00\u500b\u6578\u5b57\u7a31\u505a\u300c\u6b0a\u91cd\u300d\uff0c\u908a\u4e0a\u6b0a\u91cd\u8f03\u5e38\u898b\uff0c\u6b0a\u91cd\u901a\u5e38\u4ee3\u8868\u4ee3\u50f9\uff0c\u4f8b\u5982\u6240\u9700\u82b1\u8cbb\u6642\u9593\u6216\u91d1\u9322\u3002 \u76f8\u9130 (adjacent)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u5169\u500b\u9ede u , v \u76f8\u9130\u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u6307\u5411 (consecutive)\uff1a\u6709\u5411\u5716\u4e2d\uff0c u \u6307\u5411 v \u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a e_i = (u, v) \u3002 \u5ea6\uff08degree)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4e00\u500b\u9ede\u9023\u5230\u7684\u908a\u6578\u7a31\u70ba \"\u5ea6\"\uff0c\u5728\u6709\u5411\u5716\u5206\u70ba\u51fa\u5ea6\uff08out-degree\uff0c\u7c21\u7a31 d_{out} \uff09\u53ca\u5165\u5ea6\uff08in-degree\uff0c\u7c21\u7a31 d_{in} )\uff0c\u5206\u5225\u4ee3\u8868\u8a72\u9ede\u6307\u5411\u5225\u9ede\u53ca\u88ab\u6307\u5411\u7684\u908a\u6578\u3002 \u8def\u5f91\uff08walk)\uff1a\u4e00\u689d\u7531 x \u5230 y \u7684\u8def\u5f91 x=v_1,v_2,v_3...,v_k=y \u3002\u6839\u64da\u9650\u5236\u53ef\u4ee5\u5206\u70ba\u4e0b\u5217\u5e7e\u7a2e\uff1a \u958b\u653e \u5c01\u9589\uff08 v_1=v_k ) \u7121\u9650\u5236 walk closed walk \u4e0d\u91cd\u8907\u908a trail circut\uff08\u8ff4\u8def\uff09 \u4e0d\u91cd\u8907\u9ede path cycle\uff08\u74b0\uff09 \u9023\u901a (connected)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u82e5 u \u548c v \u5b58\u5728\u8def\u5f91\uff0c\u5247 u \u548c v \u9023\u901a\u3002\u82e5\u4e00\u7fa4\u9ede\u5169\u5169\u9023\u901a\uff0c\u5247\u9019\u4e9b\u9ede\u90fd\u9023\u901a\u3002 \u4e0b\u5716\u4e2d\uff0c \u81ea\u74b0 (loop)\uff1a\u4e00\u689d\u908a e_i = (u, v) \u6eff\u8db3 u = v , e_i \u5373\u7a31\u70ba\u81ea\u74b0\u3002 \u91cd\u908a (multiple edge)\uff1a\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5b58\u5728 e_i , e_j \u6eff\u8db3 i != j and e_i = e_j \uff0c\u5247\u7a31\u70ba\u91cd\u908a\u3002","title":"\u8853\u8a9e"},{"location":"graph/concept/#_3","text":"\u7c21\u55ae\u5716\uff1a\u4e00\u500b\u6c92\u6709\u81ea\u74b0\u3001\u91cd\u908a\u7684\u9023\u901a\u5716\u7a31\u70ba\u7c21\u55ae\u5716\u3002 \u9023\u901a\u5716\uff08connected Graph)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede\u7686\u53ef\u7d93\u904e\u4e00\u4e9b\u908a\u8a2a\u554f\u5f7c\u6b64\uff0c\u9019\u5f35\u5716\u5373\u70ba\u7121\u5411\u5716\u3002 \u8acb\u898b \u6a39 \u7ae0\u7bc0\u3002 \u5b8c\u5168\u5716\uff08Complete Graph)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u5b8c\u5168\u5716\u3002\u4e00\u5f35 n \u500b\u9ede\u7684\u5b8c\u5168\u5716\u7c21\u8a18\u70ba K_n \uff0c\u5728\u96c6\u5408\u4e0a\u66fe\u70ba\u5b8c\u5168\u5716\u70ba \"\u5718\" \u7af6\u8cfd\u5716\uff08Tournament Graph)\uff1a\u6709\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede u, v \u7686\u5b58\u5728\u4e00\u689d\u908a e_i = (u, v) \uff0c\u7a31\u70ba\u7af6\u8cfd\u5716\u3002 \u6709\u5411\u7121\u74b0\u5716\uff08Directed acyclic graph, DAG)\uff1a\u6c92\u6709\u74b0\u7684\u7121\u5411\u5716\u3002 \u4e8c\u5206\u5716\uff08Bipartite Graph)\uff1a\u80fd\u5c07\u5716\u4e0a\u7684\u9ede\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u4efb\u610f\u4e00\u689d\u908a e_i = (u, v) \u90fd\u6eff\u8db3\uff0c (u, v) \u5728\u4e0d\u540c\u96c6\u5408\u88e1\uff0c\u8a72\u5716\u7a31\u70ba\u4e8c\u5206\u5716\u3002 \u5e73\u9762\u5716\uff08Planar Graph)\uff1a\u53ef\u756b\u5728\u5e73\u9762\u4e0a\uff0c\u4e14\u4efb\u610f\u5169\u689d\u908a\u7686\u4e0d\u91cd\u758a\u7684\u5716\u3002","title":"\u7279\u6b8a\u7684\u5716"},{"location":"graph/concept/#_4","text":"\u5b50\u5716\uff08subgraph)\uff1a\u5982\u679c G'=(V', E') \u662f G=(V, E) \u7684\u5b50\u5716\uff0c\u5247 V'\\in V \u4e14 E'\\in E \u3002 \u88dc\u5716 (complement graph) graph)\uff1a\u4ee4 G=(V,E) \u662f\u4e00\u500b\u5716\uff0c K \u5305\u542b\u6240\u6709 V \u7684\u4e8c\u5143\u5b50\u96c6 (2-element subset)\u3002\u5247\u5716 H = (V, K\\setminus E) \u662f G \u7684\u88dc\u5716\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u628a\u539f\u672c\u7684\u908a\u79fb\u9664\uff0c\u52a0\u5165\u539f\u672c\u4e0d\u5b58\u5728\u7684\u908a\u5373\u662f\u88dc\u5716\u3002 \u540c\u69cb (isomorphic)\uff1a","title":"\u5716\u7684\u95dc\u4fc2"},{"location":"graph/connectivity/","text":"\u9023\u901a\u6027 (Connectivity) \u4e00\u5f35\u4efb\u610f\u5169\u9ede\u63a5\u9023\u901a\u7684\u5716\u53eb\u505a\u9023\u901a\u5716\uff0c\u5728\u5be6\u969b\u60c5\u6cc1\uff0c\u4f8b\u5982\u7db2\u8def\u6216\u96fb\u529b\u7684\u67b6\u8a2d\u90fd\u5e0c\u671b\u7dda\u8def\u662f\u9023\u901a\u7684\uff0c\u8981\u662f\u5730\u65b9\u58de\u6389\uff0c\u6211\u5011\u5e0c\u671b\u5f71\u97ff\u80fd\u8d8a\u5c0f\u8d8a\u597d\u3002\u5728\u5716\u8ad6\u4e2d\uff0c\u6709\u7b97\u6cd5\u53ef\u4ee5\u627e\u51fa\u53bb\u6389\u90a3\u4e9b\u90e8\u5206\u6703\u4f7f\u5f97\u5716\u8b8a\u6210\u4e0d\u9023\u901a\u7684\uff0c\u4ee5\u4e0b\u8a73\u7d30\u8aaa\u660e\u3002 DFS \u908a\u5206\u985e \u6839\u64da DFS \u7684\u9806\u5e8f\uff08\u6642\u9593\u6233\u8a18\uff09\uff0c\u5c0d\u908a\u9032\u884c\u5206\u985e\uff0c\u9019\u4e9b\u5206\u985e\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u7528\u5230\u3002 \u540d\u7a31 \u6307\u5411 \u7121\u5411\u5716 \u6709\u5411\u5716 \u6a39\u908a (Tree edge) \u5152\u5b50 \u6709 \u6709 \u56de\u908a (Back edge) \u7956\u5148 \u6709 \u6709 \u524d\u5411\u908a (Forward edge) \u975e\u5152\u5b50\u7684\u5b50\u5b6b \u7121 \u6709 \u4ea4\u932f\u908a (Cross edge) \u65c1\u7cfb\u8840\u89aa \u7121 \u6709 \u7121\u5411\u5716\u7684\u96d9\u9023\u901a \u9ede\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u500b\u9ede\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a\u3002 \u908a\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u689d\u908a\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a\u3002 \u9ede\u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b\u9ede\u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff08\u9ede\u9023\u901a\u5ea6 >1 )\u3002 \u908a\u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b\u908a\u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff08\u908a\u9023\u901a\u5ea6 >1 )\u3002 \u5728\u4e4b\u524d\u63d0\u5230\u7684\u4f8b\u5b50\uff0c\u7db2\u8def\u7684\u67b6\u8a2d\uff0c\u9700\u8981\u7279\u5225\u6ce8\u610f\u96d9\u9023\u901a\u7684\u554f\u984c\uff0c\u842c\u4e00\u6709\u90e8\u5206\u7684\u7dda\u8def\uff08\u908a\uff09\u6216\u662f\u8a2d\u5099\uff08\u9ede\uff09\u640d\u58de\uff0c\u5c31\u6709\u53ef\u80fd\u5c0e\u81f4\u4e00\u90e8\u5206\u7684\u7db2\u8def\u4e0d\u9023\u901a\u3002\u4ee5\u4e0b\u5206\u5225\u5f9e\u9ede\u548c\u908a\u7684\u89d2\u5ea6\u63a2\u8a0e\u96d9\u9023\u901a\u3002 Tarjan \u7b97\u6cd5\uff1a\u627e low \u51fd\u6578 Tarjan \u7b97\u6cd5\uff0c\u53ef\u89e3\u6c7a\u8a31\u591a\u9023\u901a\u6027\u7684\u554f\u984c\uff0c\u6700\u6838\u5fc3\u7684\u662f\u627e\u51fa\u6bcf\u500b\u9ede low \u51fd\u6578\u3002 depth[u] : \u9ede u \u7684\u6df1\u5ea6\u3002 low[u] : u \u5728\u4e0d\u7d93\u904e\u7236\u89aa\u9023\u5230\u81ea\u5df1\u7684 Tree Edge \u7684\u60c5\u6cc1\u4e0b\uff0c\u6240\u80fd\u5230\u9054\u7956\u5148\u7684\u6700\u6dfa\u6df1\u5ea6\u3002 \u5728\u7121\u5411\u5716\u4e2d\uff0c\u53ea\u6703\u9047\u5230 Tree Edge \u548c Back Edge\uff0c\u4ee5\u4e0b\u91dd\u5c0d\u5169\u7a2e\u60c5\u6cc1\u8aaa\u660e\uff1a Edge u\\to v is a tree edge: v \u662f u \u7684\u5152\u5b50\uff0c u \u53ef\u80fd\u7d93\u7531 v \u8d70\u5230\u5176\u4ed6\u7956\u5148\uff0c\u905e\u8ff4\u627e\u5c0b low[v] \uff0c\u518d\u66f4\u65b0 low[u]=min(low[u],low[v]) \u3002 Edge u\\to v is a back edge: v \u662f u \u7684\u7956\u5148\uff0c\u66f4\u65b0 low[u]=min(low[u],depth[v]) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int low [ MXV ], depth [ MXV ]; bool visit [ MXV ]; vector < int > G [ MXV ]; void dfs ( int now , int cur_depth ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; for ( auto i : G [ now ]) { if ( visit [ i ]) { // ancestor low [ now ] = min ( low [ now ], depth [ i ]); } else { // offspring dfs ( i , cur_depth + 1 ); low [ now ] = min ( low [ now ], low [ i ]); } } return ; } \u9ede\u96d9\u9023\u901a\uff1a\u627e\u5272\u9ede \u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u9ede\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u9ede\uff0c\u5982\u679c\u6c92\u6709\u5272\u9ede\uff0c\u5247\u9019\u5f35\u5716\u70ba\u9ede\u96d9\u9023\u901a\u3002 \u5272\u9ede\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u9ede v \u53ca\u9023\u63a5 v \u7684\u908a\u4e4b\u5f8c\uff0c\u5716 G \u4e0d\u518d\u9023\u901a\uff0c\u9ede v \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u9ede\uff08cut-vertex\uff09\u6216\u95dc\u7bc0\u9ede\uff08articulation-vertex, articulation-point)\u3002 \u6839\u64da low \u51fd\u6578\uff0c\u4ee5\u4e0b\u5169\u7a2e\u60c5\u6cc1\u80fd\u5224\u65b7\u4e00\u500b\u9ede\u70ba\u5272\u9ede\uff1a \u975e\u6839\u7bc0\u9ede u \uff1a\u5b58\u5728\u4e00\u500b\u5b69\u5b50 v, low[v]\\leq depth[u] \u3002 \u6839\u7bc0\u9ede root \uff1a\u64c1\u6709 \\geq \u5169\u500b\u5152\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int low [ MXV ], depth [ MXV ]; bool is_cut_vertex [ MXV ], visit [ MXV ]; vector < int > G [ MXV ]; void dfs ( int now , int cur_depth ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; int cut_son = 0 ; for ( auto i : G [ now ]) { if ( visit [ i ]) { // ancestor low [ now ] = min ( low [ now ], depth [ i ]); } else { // offspring dfs ( i , cur_depth + 1 ); cut_son += 1 ; low [ now ] = min ( low [ now ], low [ i ]); if ( low [ i ] >= depth [ now ]) is_cut_vertex [ now ] = true ; } } if ( cur_depth == 0 ) is_cut_vertex [ now ] = ( cut_son != 1 ); return ; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e3b\u8981\u662f\u505a DFS\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u908a\u96d9\u9023\u901a\uff1a\u627e\u5272\u908a \u548c\u9ede\u9023\u901a\u76f8\u4f3c\uff0c\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u908a\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u908a\uff0c\u5982\u679c\u6c92\u6709\u5272\u908a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u908a\u96d9\u9023\u901a\u3002 \u5272\u908a\uff1a\u5272\u908a\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u908a e \uff0c\u5716 G \u4e0d\u518d\u9023\u901a\uff0c\u908a e \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u908a\uff08cut-edge\uff09\u6216\u6a4b\uff08bridge)\u3002 \u6a39\u908a\u624d\u6709\u53ef\u80fd\u662f\u6a4b\uff0c\u5176\u4ed6\u7684\u908a\u62d4\u9664\u4ecd\u7136\u53ef\u4ee5\u85c9\u7531\u6a39\u908a\u9023\u901a\u3002 \u6839\u64da low \u51fd\u6578\uff0c\u4ee5\u4e0b\u60c5\u6cc1\u80fd\u5224\u65b7\u5272\u908a\uff1a \u6a39\u908a u\\to v \uff1a low[v] > depth[u] \u3002 low[v] == depth[u] \u4ee3\u8868\u6709 u,v \u4e4b\u9593\u5b58\u5728\u81f3\u5c11\u5169\u689d\u8def\u5f91\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int low [ MXV ], depth [ MXV ]; bool visit [ MXV ]; vector < int > G [ MXV ]; vector < pair < int , int >> my_cut_edge ; void dfs ( int now , int cur_depth , int parent ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; // int cut_son = 0; for ( auto i : G [ now ]) { if ( i != parent ) continue ; if ( visit [ i ]) { // ancestor low [ now ] = min ( low [ now ], depth [ i ]); } else { // offspring dfs ( i , cur_depth + 1 , now ); // cut_son += 1; low [ now ] = min ( low [ now ], low [ i ]); if ( low [ i ] > depth [ now ]) my_cut_edge . push_bach ({ now , i }); } } return ; } bool is_2_edge_connected ( int n ) { int cut_edge = 0 ; memset ( visit , 0 , sizeof ( visit )); dfs ( 1 , 0 , -1 ); return my_cut_edge . size () == 0 ; } \u548c\u524d\u9762\u9ede\u96d9\u9023\u901a\u76f8\u540c\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u91cd\u908a\u8655\u7406 \u5982\u679c\u4e0d\u8655\u7406\u91cd\u908a\uff0c\u6709\u53ef\u80fd\u8b93\u4e00\u689d\u908a\u5f9e\u975e\u5272\u908a\u5224\u6210\u5272\u908a\u3002 \u8655\u7406\u65b9\u5f0f\u70ba\u7528 set,map \u5b58\u908a\u7684\u5169\u9ede\u7de8\u865f\uff0c\u7576\u9047\u5230\u4e00\u689d\u5f80\u7236\u89aa\u7684\u908a e \uff0c\u5982\u679c\u51fa\u73fe\u904e\u76f8\u540c\u8d77\u59cb\u9ede\u7684\u908a e_1 \uff0c\u90a3\u9ebc e \u4e0d\u662f\u6a39\u908a\uff0c\u53ef\u4ee5\u900f\u904e e \u56de\u5230\u7236\u89aa\u3002 \u96d9\u9023\u901a\u5143\u4ef6 \u9023\u901a\u5143\u4ef6\uff1a\u4e00\u5f35\u5716 G \u6709\u5f88\u591a\u5b50\u5716\uff0c\u5982\u679c\u4e00\u500b\u5b50\u5716 G' \u662f\u9023\u901a\u7684\uff0c\u6211\u5011\u7a31\u4e4b\u70ba\u9023\u901a\u5143\u4ef6\uff08connected component)\uff0c\u5982\u679c\u4e00\u500b\u9023\u901a\u5143\u4ef6\u6eff\u8db3 \"\u52a0\u4e0a\u4efb\u610f\u4e00\u500b\u5176\u4ed6\u7684\u9ede\u5c31\u4e0d\u518d\u9023\u901a\"\uff0c\u5247\u7a31\u9019\u6a23\u7684\u9023\u901a\u5143\u4ef6\u662f \"\u6975\u5927\u7684\"(maximal)\u3002 \u908a\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u908a\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u908a\u9023\u901a\u5143\u5b50\u5716\uff08bi-edge-connected graph\uff09\u6216\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-edge-connected component)\u3002 \u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u9ede\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u9ede\u9023\u901a\u5143\u5b50\u5716\uff08bi-vertex-connected graph\uff09\u6216\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-vertex-connected component)\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u8a0e\u8ad6\u6975\u5927\u7684\u9023\u901a\u5143\u4ef6\uff0c\u4ee5\u4e0b\u6240\u6709\u7684\u9023\u901a\u5143\u4ef6\u90fd\u662f\u6975\u5927\u7684\u3002 \u8981\u6c42\u51fa\u4e00\u5f35\u5716\u7684\u6240\u6709\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u53ea\u8981\u62d4\u6389\u6240\u6709\u6a4b\uff0c\u5269\u4e0b\u7684\u5716\u5c31\u662f\u539f\u5716\u6240\u6709\u7684\u908a\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u9ede\u9023\u901a\u5143\u4ef6\u5c31\u6c92\u90a3\u9ebc\u7c21\u55ae\u4e86\uff0c\u56e0\u70ba\u540c\u4e00\u500b\u5272\u9ede\u6709\u53ef\u80fd\u540c\u6642\u5b58\u5728\u591a\u7684\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u4e26\u4e14\u9ede\u7684\u76f8\u9130\u908a\u4e0d\u4e00\u5b9a\u4e0d\u540c\u7684\u9ede\u9023\u901a\u5143\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u4e0d\u80fd\u76f4\u63a5\u62d4\u9ede\u62d4\u6389\u4f86\u6c42\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u6a23\u7684\u5dee\u7570\uff0c\u662f\u56e0\u70ba\u4e00\u822c\u7684\u5716\u662f\u4ee5\u9ede\u70ba\u4e3b\u984c\uff0c\u908a\u7528\u4f86\u63cf\u6558\u9ede\u548c\u9ede\u4e4b\u9593\u7684\u6771\u897f\u3002\u800c\u9ede\u9023\u901a\u554f\u984c\u5247\u662f\u4ee5\u908a\u70ba\u4e3b\u9ad4\uff0c\u9ede\u7528\u4f86\u63cf\u8ff0\u908a\u548c\u908a\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u5f8c\u8005\u63cf\u8ff0\u7684\u95dc\u4fc2\u4e0d\u662f\u4e8c\u5143\u95dc\u4fc2\uff0c\u6240\u4ee5\u8b93\u554f\u984c\u8b8a\u5f97\u8907\u96dc\u3002 \u90a3\u6211\u5011\u5c31\u4ee5\u908a\u7684\u89d2\u5ea6\u4f86\u601d\u8003\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u5c0d\u65bc\u4e00\u500b\u9ede p \uff0c\u8207\u7236\u89aa\u9ede f \u4e4b\u9593\u6709\u689d\u908a e_f \uff0c\u8207\u5152\u5b50\u9ede c \u4e4b\u9593\u6709\u689d\u908a e_c \uff0c\u5982\u679c low(c)>depth(p) \uff08\u4e0d\u8a08\u7b97\u6a39\u908a\uff09\uff0c\u5247 e_f \u548c e_c \u4e0d\u5728\u540c\u4e00\u500b\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u53cd\u4e4b e_f \u548c e_c \u5728\u540c\u4e00\u500b\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u5167\u3002\u6839\u64da\u4ee5\u4e0a\u6027\u8cea\uff0c\u6211\u5011\u53ef\u4ee5\u5728 DFS \u904e\u7a0b\u4e2d\u7dad\u8b77\u4e00\u500b stack \uff0c\u7d00\u9304\u76ee\u524d\u7d93\u904e\u7684\u908a\uff0c\u7576\u9047\u5230\u5272\u9ede\u6642\uff0c\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 typedef pair < int , int > PII ; int low [ MXV ], depth [ MXV ]; bool is_cut_vertex [ MXV ], visit [ MXV ]; vector < int > G [ MXV ]; vector < PII > BCC [ MXV ]; int bcc_cnt = 0 ; stack < PII > st ; void dfs ( int now , int cur_depth , int f ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; int cut_son = 0 ; for ( auto i : G [ now ]) { if ( i == f ) continue ; if ( visit [ i ]) { // ancestor if ( depth [ i ] < depth [ now ]) { low [ now ] = min ( low [ now ], depth [ i ]); st . push ({ now , i }); } } else { // offspring st . push ({ now , i }); dfs ( i , cur_depth + 1 , now ); cut_son += 1 ; low [ now ] = min ( low [ now ], low [ i ]); if ( low [ i ] >= depth [ now ]) { is_cut_vertex [ now ] = true ; auto t = st . top (); st . pop (); while ( t != make_pair ( now , i )) { BCC [ bcc_cnt ]. push_back ( t ); t = st . top (); st . pop (); } BCC [ bcc_cnt ]. push_back ( t ); ++ bcc_cnt ; } } } if ( cur_depth == 0 ) is_cut_vertex [ now ] = ( cut_son != 1 ); return ; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e00\u6a23\u6709\u505a DFS\uff0c\u4e26\u4e14\u7dad\u8b77\u4e00\u500b stack\uff0c\u6bcf\u689d\u908a\u90fd\u6703\u88ab\u4e1f\u9032\u53bb\u4e00\u6b21\uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 \u6709\u5411\u5716\u7684\u5f37\u9023\u901a \u8ac7\u5b8c\u4e86\u7121\u5411\u5716\uff0c\u5c31\u4f86\u8ac7\u8ad6\u6709\u5411\u5716\uff0c\u6709\u5411\u5716\u7684\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u56e0\u6b64\u6bd4\u7121\u5411\u5716\u66f4\u96e3\u9054\u6210 \"\u9023\u901a\" \u7684\u6027\u8cea\uff0c\u65bc\u662f\u70ba\u4e86\u8ddf\u7121\u5411\u5716\u505a\u5340\u5206\uff0c\u8a02\u4e86\u4e00\u500b\u8853\u8a9e \"\u5f37\u9023\u901a\" \u4f86\u8868\u793a\u6709\u5411\u5716\u7684\u9023\u901a\u6027\u3002 \u5f37\u9023\u901a\uff1a\u5c0d\u65bc\u6709\u5411\u5716\u4e0a\u7684\u5169\u9ede A,B \uff0c\u82e5\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e A \u5230 B \uff0c\u4ee5\u53ca\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e B \u5230 A \uff0c\u5247\u6211\u5011\u7a31 A,B \u5169\u9ede\u5f37\u9023\u901a\uff08strongly connected) \u5f37\u9023\u901a\u5716\uff1a\u5982\u679c\u4e00\u5f35\u6709\u5411\u5716\u4e0a\u4efb\u610f\u5169\u9ede\u7686\u5f37\u9023\u901a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u5f37\u9023\u901a\u5716\uff08strongly connected graph) \u5f37\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u5716\u4e2d\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u5f37\u9023\u901a\u5716\uff0c\u6211\u5011\u7a31\u9019\u500b\u5b50\u5716\u70ba\u5f37\u9023\u901a\u5b50\u5716\uff08strongly connected subgraph)\uff0c\u6216\u662f\u5f37\u9023\u901a\u5143\u4ef6\uff08strongly connected component, SCC) \u5f37\u9023\u901a\u70ba\u6709\u5411\u5716\u4e2d\u5f88\u91cd\u8981\u7684\u6027\u8cea\uff0c\u5982\u679c\u5c07\u5f37\u9023\u901a\u5143\u4ef6\u5404\u81ea\u7e2e\u6210\u4e00\u9ede\uff0c\u65b0\u5716\u662f\u4e00\u5f35\u6709\u5411\u7121\u74b0\u5716\uff08Directed Acyclic Graph, DAG)\uff0cDAG \u6709\u8a31\u591a\u5f37\u529b\u6027\u8cea\uff0c\u53ef\u4ee5\u8b93\u5716\u4e0a\u7684\u554f\u984c\u8b8a\u5f97\u6709\u89e3\uff0c\u6709\u4e9b\u5716\u8ad6\u984c\u76ee\u4e00\u958b\u59cb\u6703\u5148\u627e\u51fa SCC \u4f86\u89e3\u984c\u3002 \u5f37\u9023\u901a\u5143\u4ef6 \u9019\u88e1\u6703\u4ecb\u7d39\u5169\u7a2e\u505a\u6cd5\uff0cTarjan \u548c Kosaraju's algorithm\u3002 Tarjan Tarjan \u7684\u601d\u7dad\u5982\u4e0b\uff1aSCC \u662f\u7531\u4e00\u500b\u6216\u591a\u500b\u74b0\u7d44\u6210\uff0c dep \u6539\u6210\u7dad\u8b77\u7bc0\u9ede\u7684\u6642\u9593\u6233\uff0c\u7576\u4e00\u500b\u7bc0\u9ede\u6df1\u5ea6\u7b49\u65bc low \u51fd\u6578\u6642\uff0c\u4ee3\u8868\u627e\u5230\u4e00\u500b SCC\u3002\u548c\u627e\u96d9\u9023\u901a\u5143\u4ef6\u76f8\u4f3c\uff0c\u958b\u4e00\u500b stack \u7dad\u8b77\u76ee\u524d\u8d70\u904e\u7684\u9ede\u3002 \u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u548c\u4e0a\u8ff0\u76f8\u4f3c\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u4e00\u6b21 DFS \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #include <bits/stdc++.h> using namespace std ; const int MXV = 100005 ; int sccCnt , sccNo [ MXV ]; vector < int > G [ MXV ], dep ( MXV ), low ( MXV ); bitset < MXV > isStack , isRoot ; stack < int > st ; int t ; void init ( int n , int m ) { t = 0 ; fill ( dep . begin (), dep . end (), 0 ); sccCnt = 0 ; memset ( sccNo , 0 , sizeof ( sccNo )); isStack . reset (); isRoot . set (); while ( ! st . empty ()) { st . pop (); } for ( int i = 1 ; i <= n ; ++ i ) { G [ i ]. clear (); } for ( int i = 0 , x , y ; i != m ; ++ i ) { cin >> x >> y ; G [ x ]. push_back ( y ); } } void tarjan ( int u ) { dep [ u ] = low [ u ] = ++ t ; st . push ( u ); isStack [ u ] = true ; for ( auto v : G [ u ]) { if ( dep [ v ] == 0 ) { tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } else if ( isStack [ v ]) { low [ u ] = min ( low [ u ], dep [ v ]); } } if ( low [ u ] == dep [ u ]) { ++ sccCnt ; int tmp ; do { tmp = st . top (); st . pop (); isStack [ tmp ] = false ; sccNo [ tmp ] = sccCnt ; } while ( tmp != u ); } } int main () { init ( n , m ); // |V| = n, |E| = m for ( int i = 1 ; i <= n ; ++ i ) { if ( dep [ i ] == 0 ) { tarjan ( i ); } } } Kosaraju's algorithm Kosaraju's algorithm \u57fa\u65bc\u89c0\u5bdf\u5230\u7684\u5169\u4ef6\u4e8b\u800c\u6210\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u70ba\u5c07\u539f\u5716\u6bcf\u689d\u908a\u90fd\u53cd\u5411\uff0c\u5f97\u5230\u7684\u65b0\u5716\uff0c\u6240\u6709 SCC \u7684\u4f4d\u7f6e\u4f9d\u820a\u76f8\u540c\u3002\u7b2c\u4e8c\u4ef6\u4e8b\u70ba\u5982\u679c\u6211\u5011\u7528 \"\u6b63\u78ba\u7684\" \u9806\u5e8f\u904d\u6b77\u5716\uff0c\u6bcf\u6b21\u904d\u6b77\u5230\u7684\u9ede\u8996\u70ba\u540c\u4e00\u500b SCC\uff0c\u90a3\u9ebc\u662f\u6709\u53ef\u80fd\u53ef\u4ee5\u627e\u51fa\u6b63\u78ba\u7684 SCC \u7684\u3002 \u6211\u5011\u5206\u6210\u4e09\u7a2e\u60c5\u6cc1\u4f86\u8a0e\u8ad6\u90a3\u6a23\u624d\u662f\u6b63\u78ba\u7684\u904d\u6b77\u9806\u5e8f\u3002 A,B \u5728\u540c\u4e00\u500b SCC \u88e1\uff1a\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u53e6\u5916\u4e00\u500b\u9ede\u4e5f\u6703\u88ab\u62dc\u8a2a\u5230 A,B \u4e92\u76f8\u90fd\u4e0d\u80fd\u8d70\u5230\u5c0d\u65b9\uff1a\u9019\u7a2e\u60c5\u6cc1\u4e5f\u662f\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u6beb\u4e0d\u76f8\u5e72 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \uff08\u55ae\u5411\u901a\u884c\uff09\uff1a\u9019\u7a2e\u60c5\u6cc1\u53ea\u80fd\u5148\u8d70 B \u518d\u8d70 A \uff0c\u5426\u5247\u5148\u8d70 A \u7684\u8a71\uff0c B \u6703\u88ab\u8a8d\u70ba\u548c A \u5728\u540c\u4e00\u500b SCC \u5167 \u6240\u4ee5\u53ea\u8981\u7d66\u51fa\u4e00\u500b\u9806\u5e8f\uff0c\u5c0d\u65bc\u6240\u6709\u53ea\u6709 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \u7684\u9ede\u5c0d (A,B) \u90fd\u6eff\u8db3 B \u6703\u6bd4 B \u5148\u88ab\u8d70\u5230\uff0c\u9019\u500b\u6f14\u7b97\u6cd5\u5c31\u884c\u5f97\u901a\u4e86\u3002\u57fa\u65bc\u9019\u500b\u9053\u7406\uff0cKosaraju's algorithm \u5c31\u8a95\u751f\u4e86\uff1a \u5c07\u5716\u4e0a\u6240\u6709\u908a\u53cd\u5411\uff0c\u5f97\u5230\u65b0\u5716 G' \u5728\u5716 G' \u4e0a\u627e\u4e00\u500b\u672a\u62dc\u8a2a\u904e\u7684\u9ede DFS \u4e26\u4e14\u8a18\u9304\u96e2\u958b\u7684\u6642\u9593\u6233\uff0cDFS \u5b8c\u5f8c\uff0c\u5982\u679c\u9084\u6709\u9ede\u672a\u88ab DFS\uff0c\u518d\u9032\u884c\u524d\u8ff0\u52d5\u4f5c\u3002 \u4f9d\u6642\u9593\u6233\u7684\u96e2\u958b\u6233\u8a18\u5c0d\u9ede\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6240\u5f97\u5e8f\u5217\u5373\u70ba\u6240\u6c42\u3002\u518d\u6839\u64da\u9019\u500b\u5e8f\u5217\u5728\u539f\u5716 G \u505a DFS\uff0c\u6bcf\u6b21 DFS \u5230\u7684\u9ede\u5f62\u6210\u4e00\u500b SCC\u3002 \u73fe\u5728\u4f86\u8b49\u660e\u9019\u500b\u5e8f\u5217\u6eff\u8db3\u6211\u5011\u7684\u8981\u6c42\uff1a \u5c0d\u65bc\u5716 G \u4e0a\u4efb\u610f\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d A\\rightarrow B \uff0c\u5728 G' \u4e0a\u6703\u8b8a\u6210\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d B\\rightarrow A \u3002 \u5982\u679c A \u5148\u88ab\u62dc\u8a2a\uff0c\u56e0\u70ba A \u6c92\u8fa6\u6cd5\u505a\u5230 B \uff0c\u6240\u4ee5 A \u6703\u5148\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5982\u679c B \u5148\u88ab\u62dc\u8a2a\uff0c B \u4e00\u5b9a\u6703\u8d70\u5230 A \uff0c A \u62dc\u8a2a\u5b8c\u7562\u6642\uff0c B \u4e00\u5b9a\u9084\u6c92\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u4f9d\u7136\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5f97\u8b49 A \u7684\u96e2\u958b\u6233\u8a18\u4e00\u5b9a\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\uff0c\u5373 B \u5728\u5e8f\u5217\u4e2d\u6703\u5728 A \u524d\u9762\u3002 \u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u5169\u6b21 DFS \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u6548\u7387\u6bd4 Tarjan \u4f4e\u4e00\u4e9b\uff0c\u4f46 Kosaraju's algorithm \u8f03\u5bb9\u6613\u5be6\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 vector < int > G [ MXN ]; vector < int > rev_G [ MXN ]; vector < int > leave ; bitset < MXN > visit ; int at_scc [ MXN ]; void dfs_for_stamp ( int now ) { visit [ now ] = true ; for ( auto i : rev_G [ now ]) { if ( ! visit [ i ]) { dfs_for_stamp ( i ); } } leave . push_back ( now ); } void dfs_for_scc ( int now , int cur_scc ) { visit [ now ] = true ; at_scc [ now ] = cur_scc ; for ( auto i : G [ now ]) { if ( ! visit [ i ]) { dfs_for_scc ( i , cur_scc ); } } } int kosaraju ( int n ) { visit . reset (); leave . clear (); for ( int i = 0 ; i < n ; ++ i ) { if ( ! visit [ i ]) { dfs_for_stamp ( i ); } } visit . reset (); int scc_count = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { if ( ! visit [ leave [ i ]]) { dfs_for_scc ( leave [ i ], scc_count ++ ); } } return scc_count ; } \u4f8b\u984c \u5272\u9ede\u6a21\u677f\u984c UVa 00796 - Critical Links \u5272\u908a\u6a21\u677f\u984c UVa 00315 - Network \u96d9\u9023\u901a\u5143\u4ef6 UVa 10972 - RevolC FaeLoN \u5f37\u9023\u901a\u5143\u4ef6 UVa 11504 - Dominos UVa 11324 - The Largest Clique \u6709\u5411\u5716\u5f37\u9023\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5 in https://byvoid.com/ \u21a9 \u6709\u5411\u5716\u7684\u5f37\u9023\u901a\u5143\u4ef6 Strongly Connected Component in \u5929\u908a\u3002\u4e16\u754c \u21a9","title":"\u9023\u901a\u6027"},{"location":"graph/connectivity/#connectivity","text":"\u4e00\u5f35\u4efb\u610f\u5169\u9ede\u63a5\u9023\u901a\u7684\u5716\u53eb\u505a\u9023\u901a\u5716\uff0c\u5728\u5be6\u969b\u60c5\u6cc1\uff0c\u4f8b\u5982\u7db2\u8def\u6216\u96fb\u529b\u7684\u67b6\u8a2d\u90fd\u5e0c\u671b\u7dda\u8def\u662f\u9023\u901a\u7684\uff0c\u8981\u662f\u5730\u65b9\u58de\u6389\uff0c\u6211\u5011\u5e0c\u671b\u5f71\u97ff\u80fd\u8d8a\u5c0f\u8d8a\u597d\u3002\u5728\u5716\u8ad6\u4e2d\uff0c\u6709\u7b97\u6cd5\u53ef\u4ee5\u627e\u51fa\u53bb\u6389\u90a3\u4e9b\u90e8\u5206\u6703\u4f7f\u5f97\u5716\u8b8a\u6210\u4e0d\u9023\u901a\u7684\uff0c\u4ee5\u4e0b\u8a73\u7d30\u8aaa\u660e\u3002","title":"\u9023\u901a\u6027 (Connectivity)"},{"location":"graph/connectivity/#dfs","text":"\u6839\u64da DFS \u7684\u9806\u5e8f\uff08\u6642\u9593\u6233\u8a18\uff09\uff0c\u5c0d\u908a\u9032\u884c\u5206\u985e\uff0c\u9019\u4e9b\u5206\u985e\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u7528\u5230\u3002 \u540d\u7a31 \u6307\u5411 \u7121\u5411\u5716 \u6709\u5411\u5716 \u6a39\u908a (Tree edge) \u5152\u5b50 \u6709 \u6709 \u56de\u908a (Back edge) \u7956\u5148 \u6709 \u6709 \u524d\u5411\u908a (Forward edge) \u975e\u5152\u5b50\u7684\u5b50\u5b6b \u7121 \u6709 \u4ea4\u932f\u908a (Cross edge) \u65c1\u7cfb\u8840\u89aa \u7121 \u6709","title":"DFS \u908a\u5206\u985e"},{"location":"graph/connectivity/#_1","text":"\u9ede\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u500b\u9ede\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a\u3002 \u908a\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u689d\u908a\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a\u3002 \u9ede\u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b\u9ede\u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff08\u9ede\u9023\u901a\u5ea6 >1 )\u3002 \u908a\u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b\u908a\u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff08\u908a\u9023\u901a\u5ea6 >1 )\u3002 \u5728\u4e4b\u524d\u63d0\u5230\u7684\u4f8b\u5b50\uff0c\u7db2\u8def\u7684\u67b6\u8a2d\uff0c\u9700\u8981\u7279\u5225\u6ce8\u610f\u96d9\u9023\u901a\u7684\u554f\u984c\uff0c\u842c\u4e00\u6709\u90e8\u5206\u7684\u7dda\u8def\uff08\u908a\uff09\u6216\u662f\u8a2d\u5099\uff08\u9ede\uff09\u640d\u58de\uff0c\u5c31\u6709\u53ef\u80fd\u5c0e\u81f4\u4e00\u90e8\u5206\u7684\u7db2\u8def\u4e0d\u9023\u901a\u3002\u4ee5\u4e0b\u5206\u5225\u5f9e\u9ede\u548c\u908a\u7684\u89d2\u5ea6\u63a2\u8a0e\u96d9\u9023\u901a\u3002","title":"\u7121\u5411\u5716\u7684\u96d9\u9023\u901a"},{"location":"graph/connectivity/#tarjan-low","text":"Tarjan \u7b97\u6cd5\uff0c\u53ef\u89e3\u6c7a\u8a31\u591a\u9023\u901a\u6027\u7684\u554f\u984c\uff0c\u6700\u6838\u5fc3\u7684\u662f\u627e\u51fa\u6bcf\u500b\u9ede low \u51fd\u6578\u3002 depth[u] : \u9ede u \u7684\u6df1\u5ea6\u3002 low[u] : u \u5728\u4e0d\u7d93\u904e\u7236\u89aa\u9023\u5230\u81ea\u5df1\u7684 Tree Edge \u7684\u60c5\u6cc1\u4e0b\uff0c\u6240\u80fd\u5230\u9054\u7956\u5148\u7684\u6700\u6dfa\u6df1\u5ea6\u3002 \u5728\u7121\u5411\u5716\u4e2d\uff0c\u53ea\u6703\u9047\u5230 Tree Edge \u548c Back Edge\uff0c\u4ee5\u4e0b\u91dd\u5c0d\u5169\u7a2e\u60c5\u6cc1\u8aaa\u660e\uff1a Edge u\\to v is a tree edge: v \u662f u \u7684\u5152\u5b50\uff0c u \u53ef\u80fd\u7d93\u7531 v \u8d70\u5230\u5176\u4ed6\u7956\u5148\uff0c\u905e\u8ff4\u627e\u5c0b low[v] \uff0c\u518d\u66f4\u65b0 low[u]=min(low[u],low[v]) \u3002 Edge u\\to v is a back edge: v \u662f u \u7684\u7956\u5148\uff0c\u66f4\u65b0 low[u]=min(low[u],depth[v]) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int low [ MXV ], depth [ MXV ]; bool visit [ MXV ]; vector < int > G [ MXV ]; void dfs ( int now , int cur_depth ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; for ( auto i : G [ now ]) { if ( visit [ i ]) { // ancestor low [ now ] = min ( low [ now ], depth [ i ]); } else { // offspring dfs ( i , cur_depth + 1 ); low [ now ] = min ( low [ now ], low [ i ]); } } return ; }","title":"Tarjan \u7b97\u6cd5\uff1a\u627e low \u51fd\u6578"},{"location":"graph/connectivity/#_2","text":"\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u9ede\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u9ede\uff0c\u5982\u679c\u6c92\u6709\u5272\u9ede\uff0c\u5247\u9019\u5f35\u5716\u70ba\u9ede\u96d9\u9023\u901a\u3002 \u5272\u9ede\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u9ede v \u53ca\u9023\u63a5 v \u7684\u908a\u4e4b\u5f8c\uff0c\u5716 G \u4e0d\u518d\u9023\u901a\uff0c\u9ede v \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u9ede\uff08cut-vertex\uff09\u6216\u95dc\u7bc0\u9ede\uff08articulation-vertex, articulation-point)\u3002 \u6839\u64da low \u51fd\u6578\uff0c\u4ee5\u4e0b\u5169\u7a2e\u60c5\u6cc1\u80fd\u5224\u65b7\u4e00\u500b\u9ede\u70ba\u5272\u9ede\uff1a \u975e\u6839\u7bc0\u9ede u \uff1a\u5b58\u5728\u4e00\u500b\u5b69\u5b50 v, low[v]\\leq depth[u] \u3002 \u6839\u7bc0\u9ede root \uff1a\u64c1\u6709 \\geq \u5169\u500b\u5152\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int low [ MXV ], depth [ MXV ]; bool is_cut_vertex [ MXV ], visit [ MXV ]; vector < int > G [ MXV ]; void dfs ( int now , int cur_depth ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; int cut_son = 0 ; for ( auto i : G [ now ]) { if ( visit [ i ]) { // ancestor low [ now ] = min ( low [ now ], depth [ i ]); } else { // offspring dfs ( i , cur_depth + 1 ); cut_son += 1 ; low [ now ] = min ( low [ now ], low [ i ]); if ( low [ i ] >= depth [ now ]) is_cut_vertex [ now ] = true ; } } if ( cur_depth == 0 ) is_cut_vertex [ now ] = ( cut_son != 1 ); return ; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e3b\u8981\u662f\u505a DFS\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E)","title":"\u9ede\u96d9\u9023\u901a\uff1a\u627e\u5272\u9ede"},{"location":"graph/connectivity/#_3","text":"\u548c\u9ede\u9023\u901a\u76f8\u4f3c\uff0c\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u908a\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u908a\uff0c\u5982\u679c\u6c92\u6709\u5272\u908a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u908a\u96d9\u9023\u901a\u3002 \u5272\u908a\uff1a\u5272\u908a\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716 G \uff0c\u5982\u679c\u79fb\u9664\u908a e \uff0c\u5716 G \u4e0d\u518d\u9023\u901a\uff0c\u908a e \u90fd\u88ab\u7a31\u70ba G \u7684\u4e00\u500b\u5272\u908a\uff08cut-edge\uff09\u6216\u6a4b\uff08bridge)\u3002 \u6a39\u908a\u624d\u6709\u53ef\u80fd\u662f\u6a4b\uff0c\u5176\u4ed6\u7684\u908a\u62d4\u9664\u4ecd\u7136\u53ef\u4ee5\u85c9\u7531\u6a39\u908a\u9023\u901a\u3002 \u6839\u64da low \u51fd\u6578\uff0c\u4ee5\u4e0b\u60c5\u6cc1\u80fd\u5224\u65b7\u5272\u908a\uff1a \u6a39\u908a u\\to v \uff1a low[v] > depth[u] \u3002 low[v] == depth[u] \u4ee3\u8868\u6709 u,v \u4e4b\u9593\u5b58\u5728\u81f3\u5c11\u5169\u689d\u8def\u5f91\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int low [ MXV ], depth [ MXV ]; bool visit [ MXV ]; vector < int > G [ MXV ]; vector < pair < int , int >> my_cut_edge ; void dfs ( int now , int cur_depth , int parent ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; // int cut_son = 0; for ( auto i : G [ now ]) { if ( i != parent ) continue ; if ( visit [ i ]) { // ancestor low [ now ] = min ( low [ now ], depth [ i ]); } else { // offspring dfs ( i , cur_depth + 1 , now ); // cut_son += 1; low [ now ] = min ( low [ now ], low [ i ]); if ( low [ i ] > depth [ now ]) my_cut_edge . push_bach ({ now , i }); } } return ; } bool is_2_edge_connected ( int n ) { int cut_edge = 0 ; memset ( visit , 0 , sizeof ( visit )); dfs ( 1 , 0 , -1 ); return my_cut_edge . size () == 0 ; } \u548c\u524d\u9762\u9ede\u96d9\u9023\u901a\u76f8\u540c\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u91cd\u908a\u8655\u7406 \u5982\u679c\u4e0d\u8655\u7406\u91cd\u908a\uff0c\u6709\u53ef\u80fd\u8b93\u4e00\u689d\u908a\u5f9e\u975e\u5272\u908a\u5224\u6210\u5272\u908a\u3002 \u8655\u7406\u65b9\u5f0f\u70ba\u7528 set,map \u5b58\u908a\u7684\u5169\u9ede\u7de8\u865f\uff0c\u7576\u9047\u5230\u4e00\u689d\u5f80\u7236\u89aa\u7684\u908a e \uff0c\u5982\u679c\u51fa\u73fe\u904e\u76f8\u540c\u8d77\u59cb\u9ede\u7684\u908a e_1 \uff0c\u90a3\u9ebc e \u4e0d\u662f\u6a39\u908a\uff0c\u53ef\u4ee5\u900f\u904e e \u56de\u5230\u7236\u89aa\u3002","title":"\u908a\u96d9\u9023\u901a\uff1a\u627e\u5272\u908a"},{"location":"graph/connectivity/#_4","text":"\u9023\u901a\u5143\u4ef6\uff1a\u4e00\u5f35\u5716 G \u6709\u5f88\u591a\u5b50\u5716\uff0c\u5982\u679c\u4e00\u500b\u5b50\u5716 G' \u662f\u9023\u901a\u7684\uff0c\u6211\u5011\u7a31\u4e4b\u70ba\u9023\u901a\u5143\u4ef6\uff08connected component)\uff0c\u5982\u679c\u4e00\u500b\u9023\u901a\u5143\u4ef6\u6eff\u8db3 \"\u52a0\u4e0a\u4efb\u610f\u4e00\u500b\u5176\u4ed6\u7684\u9ede\u5c31\u4e0d\u518d\u9023\u901a\"\uff0c\u5247\u7a31\u9019\u6a23\u7684\u9023\u901a\u5143\u4ef6\u662f \"\u6975\u5927\u7684\"(maximal)\u3002 \u908a\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u908a\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u908a\u9023\u901a\u5143\u5b50\u5716\uff08bi-edge-connected graph\uff09\u6216\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-edge-connected component)\u3002 \u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u9ede\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u9ede\u9023\u901a\u5143\u5b50\u5716\uff08bi-vertex-connected graph\uff09\u6216\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-vertex-connected component)\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u8a0e\u8ad6\u6975\u5927\u7684\u9023\u901a\u5143\u4ef6\uff0c\u4ee5\u4e0b\u6240\u6709\u7684\u9023\u901a\u5143\u4ef6\u90fd\u662f\u6975\u5927\u7684\u3002 \u8981\u6c42\u51fa\u4e00\u5f35\u5716\u7684\u6240\u6709\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u53ea\u8981\u62d4\u6389\u6240\u6709\u6a4b\uff0c\u5269\u4e0b\u7684\u5716\u5c31\u662f\u539f\u5716\u6240\u6709\u7684\u908a\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u9ede\u9023\u901a\u5143\u4ef6\u5c31\u6c92\u90a3\u9ebc\u7c21\u55ae\u4e86\uff0c\u56e0\u70ba\u540c\u4e00\u500b\u5272\u9ede\u6709\u53ef\u80fd\u540c\u6642\u5b58\u5728\u591a\u7684\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u4e26\u4e14\u9ede\u7684\u76f8\u9130\u908a\u4e0d\u4e00\u5b9a\u4e0d\u540c\u7684\u9ede\u9023\u901a\u5143\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u4e0d\u80fd\u76f4\u63a5\u62d4\u9ede\u62d4\u6389\u4f86\u6c42\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 \u81f3\u65bc\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u6a23\u7684\u5dee\u7570\uff0c\u662f\u56e0\u70ba\u4e00\u822c\u7684\u5716\u662f\u4ee5\u9ede\u70ba\u4e3b\u984c\uff0c\u908a\u7528\u4f86\u63cf\u6558\u9ede\u548c\u9ede\u4e4b\u9593\u7684\u6771\u897f\u3002\u800c\u9ede\u9023\u901a\u554f\u984c\u5247\u662f\u4ee5\u908a\u70ba\u4e3b\u9ad4\uff0c\u9ede\u7528\u4f86\u63cf\u8ff0\u908a\u548c\u908a\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u5f8c\u8005\u63cf\u8ff0\u7684\u95dc\u4fc2\u4e0d\u662f\u4e8c\u5143\u95dc\u4fc2\uff0c\u6240\u4ee5\u8b93\u554f\u984c\u8b8a\u5f97\u8907\u96dc\u3002 \u90a3\u6211\u5011\u5c31\u4ee5\u908a\u7684\u89d2\u5ea6\u4f86\u601d\u8003\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u5c0d\u65bc\u4e00\u500b\u9ede p \uff0c\u8207\u7236\u89aa\u9ede f \u4e4b\u9593\u6709\u689d\u908a e_f \uff0c\u8207\u5152\u5b50\u9ede c \u4e4b\u9593\u6709\u689d\u908a e_c \uff0c\u5982\u679c low(c)>depth(p) \uff08\u4e0d\u8a08\u7b97\u6a39\u908a\uff09\uff0c\u5247 e_f \u548c e_c \u4e0d\u5728\u540c\u4e00\u500b\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u53cd\u4e4b e_f \u548c e_c \u5728\u540c\u4e00\u500b\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u5167\u3002\u6839\u64da\u4ee5\u4e0a\u6027\u8cea\uff0c\u6211\u5011\u53ef\u4ee5\u5728 DFS \u904e\u7a0b\u4e2d\u7dad\u8b77\u4e00\u500b stack \uff0c\u7d00\u9304\u76ee\u524d\u7d93\u904e\u7684\u908a\uff0c\u7576\u9047\u5230\u5272\u9ede\u6642\uff0c\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 typedef pair < int , int > PII ; int low [ MXV ], depth [ MXV ]; bool is_cut_vertex [ MXV ], visit [ MXV ]; vector < int > G [ MXV ]; vector < PII > BCC [ MXV ]; int bcc_cnt = 0 ; stack < PII > st ; void dfs ( int now , int cur_depth , int f ) { visit [ now ] = true ; depth [ now ] = low [ now ] = cur_depth ; int cut_son = 0 ; for ( auto i : G [ now ]) { if ( i == f ) continue ; if ( visit [ i ]) { // ancestor if ( depth [ i ] < depth [ now ]) { low [ now ] = min ( low [ now ], depth [ i ]); st . push ({ now , i }); } } else { // offspring st . push ({ now , i }); dfs ( i , cur_depth + 1 , now ); cut_son += 1 ; low [ now ] = min ( low [ now ], low [ i ]); if ( low [ i ] >= depth [ now ]) { is_cut_vertex [ now ] = true ; auto t = st . top (); st . pop (); while ( t != make_pair ( now , i )) { BCC [ bcc_cnt ]. push_back ( t ); t = st . top (); st . pop (); } BCC [ bcc_cnt ]. push_back ( t ); ++ bcc_cnt ; } } } if ( cur_depth == 0 ) is_cut_vertex [ now ] = ( cut_son != 1 ); return ; } \u9019\u500b\u6f14\u7b97\u6cd5\u4e00\u6a23\u6709\u505a DFS\uff0c\u4e26\u4e14\u7dad\u8b77\u4e00\u500b stack\uff0c\u6bcf\u689d\u908a\u90fd\u6703\u88ab\u4e1f\u9032\u53bb\u4e00\u6b21\uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002","title":"\u96d9\u9023\u901a\u5143\u4ef6"},{"location":"graph/connectivity/#_5","text":"\u8ac7\u5b8c\u4e86\u7121\u5411\u5716\uff0c\u5c31\u4f86\u8ac7\u8ad6\u6709\u5411\u5716\uff0c\u6709\u5411\u5716\u7684\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u56e0\u6b64\u6bd4\u7121\u5411\u5716\u66f4\u96e3\u9054\u6210 \"\u9023\u901a\" \u7684\u6027\u8cea\uff0c\u65bc\u662f\u70ba\u4e86\u8ddf\u7121\u5411\u5716\u505a\u5340\u5206\uff0c\u8a02\u4e86\u4e00\u500b\u8853\u8a9e \"\u5f37\u9023\u901a\" \u4f86\u8868\u793a\u6709\u5411\u5716\u7684\u9023\u901a\u6027\u3002 \u5f37\u9023\u901a\uff1a\u5c0d\u65bc\u6709\u5411\u5716\u4e0a\u7684\u5169\u9ede A,B \uff0c\u82e5\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e A \u5230 B \uff0c\u4ee5\u53ca\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e B \u5230 A \uff0c\u5247\u6211\u5011\u7a31 A,B \u5169\u9ede\u5f37\u9023\u901a\uff08strongly connected) \u5f37\u9023\u901a\u5716\uff1a\u5982\u679c\u4e00\u5f35\u6709\u5411\u5716\u4e0a\u4efb\u610f\u5169\u9ede\u7686\u5f37\u9023\u901a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u5f37\u9023\u901a\u5716\uff08strongly connected graph) \u5f37\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u5716\u4e2d\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u5f37\u9023\u901a\u5716\uff0c\u6211\u5011\u7a31\u9019\u500b\u5b50\u5716\u70ba\u5f37\u9023\u901a\u5b50\u5716\uff08strongly connected subgraph)\uff0c\u6216\u662f\u5f37\u9023\u901a\u5143\u4ef6\uff08strongly connected component, SCC) \u5f37\u9023\u901a\u70ba\u6709\u5411\u5716\u4e2d\u5f88\u91cd\u8981\u7684\u6027\u8cea\uff0c\u5982\u679c\u5c07\u5f37\u9023\u901a\u5143\u4ef6\u5404\u81ea\u7e2e\u6210\u4e00\u9ede\uff0c\u65b0\u5716\u662f\u4e00\u5f35\u6709\u5411\u7121\u74b0\u5716\uff08Directed Acyclic Graph, DAG)\uff0cDAG \u6709\u8a31\u591a\u5f37\u529b\u6027\u8cea\uff0c\u53ef\u4ee5\u8b93\u5716\u4e0a\u7684\u554f\u984c\u8b8a\u5f97\u6709\u89e3\uff0c\u6709\u4e9b\u5716\u8ad6\u984c\u76ee\u4e00\u958b\u59cb\u6703\u5148\u627e\u51fa SCC \u4f86\u89e3\u984c\u3002","title":"\u6709\u5411\u5716\u7684\u5f37\u9023\u901a"},{"location":"graph/connectivity/#_6","text":"\u9019\u88e1\u6703\u4ecb\u7d39\u5169\u7a2e\u505a\u6cd5\uff0cTarjan \u548c Kosaraju's algorithm\u3002","title":"\u5f37\u9023\u901a\u5143\u4ef6"},{"location":"graph/connectivity/#tarjan","text":"Tarjan \u7684\u601d\u7dad\u5982\u4e0b\uff1aSCC \u662f\u7531\u4e00\u500b\u6216\u591a\u500b\u74b0\u7d44\u6210\uff0c dep \u6539\u6210\u7dad\u8b77\u7bc0\u9ede\u7684\u6642\u9593\u6233\uff0c\u7576\u4e00\u500b\u7bc0\u9ede\u6df1\u5ea6\u7b49\u65bc low \u51fd\u6578\u6642\uff0c\u4ee3\u8868\u627e\u5230\u4e00\u500b SCC\u3002\u548c\u627e\u96d9\u9023\u901a\u5143\u4ef6\u76f8\u4f3c\uff0c\u958b\u4e00\u500b stack \u7dad\u8b77\u76ee\u524d\u8d70\u904e\u7684\u9ede\u3002 \u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u548c\u4e0a\u8ff0\u76f8\u4f3c\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u4e00\u6b21 DFS \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #include <bits/stdc++.h> using namespace std ; const int MXV = 100005 ; int sccCnt , sccNo [ MXV ]; vector < int > G [ MXV ], dep ( MXV ), low ( MXV ); bitset < MXV > isStack , isRoot ; stack < int > st ; int t ; void init ( int n , int m ) { t = 0 ; fill ( dep . begin (), dep . end (), 0 ); sccCnt = 0 ; memset ( sccNo , 0 , sizeof ( sccNo )); isStack . reset (); isRoot . set (); while ( ! st . empty ()) { st . pop (); } for ( int i = 1 ; i <= n ; ++ i ) { G [ i ]. clear (); } for ( int i = 0 , x , y ; i != m ; ++ i ) { cin >> x >> y ; G [ x ]. push_back ( y ); } } void tarjan ( int u ) { dep [ u ] = low [ u ] = ++ t ; st . push ( u ); isStack [ u ] = true ; for ( auto v : G [ u ]) { if ( dep [ v ] == 0 ) { tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } else if ( isStack [ v ]) { low [ u ] = min ( low [ u ], dep [ v ]); } } if ( low [ u ] == dep [ u ]) { ++ sccCnt ; int tmp ; do { tmp = st . top (); st . pop (); isStack [ tmp ] = false ; sccNo [ tmp ] = sccCnt ; } while ( tmp != u ); } } int main () { init ( n , m ); // |V| = n, |E| = m for ( int i = 1 ; i <= n ; ++ i ) { if ( dep [ i ] == 0 ) { tarjan ( i ); } } }","title":"Tarjan"},{"location":"graph/connectivity/#kosarajus-algorithm","text":"Kosaraju's algorithm \u57fa\u65bc\u89c0\u5bdf\u5230\u7684\u5169\u4ef6\u4e8b\u800c\u6210\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u70ba\u5c07\u539f\u5716\u6bcf\u689d\u908a\u90fd\u53cd\u5411\uff0c\u5f97\u5230\u7684\u65b0\u5716\uff0c\u6240\u6709 SCC \u7684\u4f4d\u7f6e\u4f9d\u820a\u76f8\u540c\u3002\u7b2c\u4e8c\u4ef6\u4e8b\u70ba\u5982\u679c\u6211\u5011\u7528 \"\u6b63\u78ba\u7684\" \u9806\u5e8f\u904d\u6b77\u5716\uff0c\u6bcf\u6b21\u904d\u6b77\u5230\u7684\u9ede\u8996\u70ba\u540c\u4e00\u500b SCC\uff0c\u90a3\u9ebc\u662f\u6709\u53ef\u80fd\u53ef\u4ee5\u627e\u51fa\u6b63\u78ba\u7684 SCC \u7684\u3002 \u6211\u5011\u5206\u6210\u4e09\u7a2e\u60c5\u6cc1\u4f86\u8a0e\u8ad6\u90a3\u6a23\u624d\u662f\u6b63\u78ba\u7684\u904d\u6b77\u9806\u5e8f\u3002 A,B \u5728\u540c\u4e00\u500b SCC \u88e1\uff1a\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u53e6\u5916\u4e00\u500b\u9ede\u4e5f\u6703\u88ab\u62dc\u8a2a\u5230 A,B \u4e92\u76f8\u90fd\u4e0d\u80fd\u8d70\u5230\u5c0d\u65b9\uff1a\u9019\u7a2e\u60c5\u6cc1\u4e5f\u662f\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u6beb\u4e0d\u76f8\u5e72 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \uff08\u55ae\u5411\u901a\u884c\uff09\uff1a\u9019\u7a2e\u60c5\u6cc1\u53ea\u80fd\u5148\u8d70 B \u518d\u8d70 A \uff0c\u5426\u5247\u5148\u8d70 A \u7684\u8a71\uff0c B \u6703\u88ab\u8a8d\u70ba\u548c A \u5728\u540c\u4e00\u500b SCC \u5167 \u6240\u4ee5\u53ea\u8981\u7d66\u51fa\u4e00\u500b\u9806\u5e8f\uff0c\u5c0d\u65bc\u6240\u6709\u53ea\u6709 A \u8d70\u7684\u5230 B \uff0c B \u8d70\u4e0d\u5230 A \u7684\u9ede\u5c0d (A,B) \u90fd\u6eff\u8db3 B \u6703\u6bd4 B \u5148\u88ab\u8d70\u5230\uff0c\u9019\u500b\u6f14\u7b97\u6cd5\u5c31\u884c\u5f97\u901a\u4e86\u3002\u57fa\u65bc\u9019\u500b\u9053\u7406\uff0cKosaraju's algorithm \u5c31\u8a95\u751f\u4e86\uff1a \u5c07\u5716\u4e0a\u6240\u6709\u908a\u53cd\u5411\uff0c\u5f97\u5230\u65b0\u5716 G' \u5728\u5716 G' \u4e0a\u627e\u4e00\u500b\u672a\u62dc\u8a2a\u904e\u7684\u9ede DFS \u4e26\u4e14\u8a18\u9304\u96e2\u958b\u7684\u6642\u9593\u6233\uff0cDFS \u5b8c\u5f8c\uff0c\u5982\u679c\u9084\u6709\u9ede\u672a\u88ab DFS\uff0c\u518d\u9032\u884c\u524d\u8ff0\u52d5\u4f5c\u3002 \u4f9d\u6642\u9593\u6233\u7684\u96e2\u958b\u6233\u8a18\u5c0d\u9ede\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6240\u5f97\u5e8f\u5217\u5373\u70ba\u6240\u6c42\u3002\u518d\u6839\u64da\u9019\u500b\u5e8f\u5217\u5728\u539f\u5716 G \u505a DFS\uff0c\u6bcf\u6b21 DFS \u5230\u7684\u9ede\u5f62\u6210\u4e00\u500b SCC\u3002 \u73fe\u5728\u4f86\u8b49\u660e\u9019\u500b\u5e8f\u5217\u6eff\u8db3\u6211\u5011\u7684\u8981\u6c42\uff1a \u5c0d\u65bc\u5716 G \u4e0a\u4efb\u610f\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d A\\rightarrow B \uff0c\u5728 G' \u4e0a\u6703\u8b8a\u6210\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d B\\rightarrow A \u3002 \u5982\u679c A \u5148\u88ab\u62dc\u8a2a\uff0c\u56e0\u70ba A \u6c92\u8fa6\u6cd5\u505a\u5230 B \uff0c\u6240\u4ee5 A \u6703\u5148\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5982\u679c B \u5148\u88ab\u62dc\u8a2a\uff0c B \u4e00\u5b9a\u6703\u8d70\u5230 A \uff0c A \u62dc\u8a2a\u5b8c\u7562\u6642\uff0c B \u4e00\u5b9a\u9084\u6c92\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64 A \u7684\u96e2\u958b\u6233\u8a18\u4f9d\u7136\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\u3002 \u5f97\u8b49 A \u7684\u96e2\u958b\u6233\u8a18\u4e00\u5b9a\u6703\u5c0f\u65bc B \u7684\u96e2\u958b\u6233\u8a18\uff0c\u5373 B \u5728\u5e8f\u5217\u4e2d\u6703\u5728 A \u524d\u9762\u3002 \u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u5169\u6b21 DFS \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u6548\u7387\u6bd4 Tarjan \u4f4e\u4e00\u4e9b\uff0c\u4f46 Kosaraju's algorithm \u8f03\u5bb9\u6613\u5be6\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 vector < int > G [ MXN ]; vector < int > rev_G [ MXN ]; vector < int > leave ; bitset < MXN > visit ; int at_scc [ MXN ]; void dfs_for_stamp ( int now ) { visit [ now ] = true ; for ( auto i : rev_G [ now ]) { if ( ! visit [ i ]) { dfs_for_stamp ( i ); } } leave . push_back ( now ); } void dfs_for_scc ( int now , int cur_scc ) { visit [ now ] = true ; at_scc [ now ] = cur_scc ; for ( auto i : G [ now ]) { if ( ! visit [ i ]) { dfs_for_scc ( i , cur_scc ); } } } int kosaraju ( int n ) { visit . reset (); leave . clear (); for ( int i = 0 ; i < n ; ++ i ) { if ( ! visit [ i ]) { dfs_for_stamp ( i ); } } visit . reset (); int scc_count = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { if ( ! visit [ leave [ i ]]) { dfs_for_scc ( leave [ i ], scc_count ++ ); } } return scc_count ; }","title":"Kosaraju's algorithm"},{"location":"graph/connectivity/#_7","text":"\u5272\u9ede\u6a21\u677f\u984c UVa 00796 - Critical Links \u5272\u908a\u6a21\u677f\u984c UVa 00315 - Network \u96d9\u9023\u901a\u5143\u4ef6 UVa 10972 - RevolC FaeLoN \u5f37\u9023\u901a\u5143\u4ef6 UVa 11504 - Dominos UVa 11324 - The Largest Clique \u6709\u5411\u5716\u5f37\u9023\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5 in https://byvoid.com/ \u21a9 \u6709\u5411\u5716\u7684\u5f37\u9023\u901a\u5143\u4ef6 Strongly Connected Component in \u5929\u908a\u3002\u4e16\u754c \u21a9","title":"\u4f8b\u984c"},{"location":"graph/directedacyclicgraph/","text":"\u6709\u5411\u7121\u74b0\u5716 (Directed Acyclic Graph, DAG) \u6709\u5411\u7121\u74b0\u5716\u53ef\u4ee5\u4ee3\u8868\u4e8b\u7269\u4e4b\u9593\u7684\u76f8\u4f9d\u95dc\u4fc2\uff0c\u4f8b\u5982\u64cb\u4fee\u6a5f\u5236\uff0c\u6216\u662f\u51fd\u793a\u5eab\u7684\u5957\u4ef6\u5b89\u88dd\u3002 \u6709\u5169\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u6aa2\u67e5\u4e00\u5f35\u5716\u662f\u5426\u70ba\u6709\u5411\u7121\u74b0\u5716\u3002 \u62d3\u8b5c\u6392\u5e8f \u62d3\u6a38\u6392\u5e8f\u662f\u5c0d\u5c07\u6709\u5411\u5716\u8f49\u63db\u6210\u4e00\u500b\u7dda\u6027\u5e8f\u5217\uff0c\u4e5f\u7528\u4f86\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u70ba\u6709\u5411\u7121\u74b0\u5716\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a \u5c07\u5165\u5ea6 = 0 \u7684\u9ede\u52a0\u5165 queue \u5f9e queue \u7576\u4e2d\u62ff\u4e00\u500b\u9ede u \u62d4\u6389\u9ede u \u91cd\u8907\u4e0a\u6558\u6b65\u9a5f\uff0c\u76f4\u5230 queue \u88e1\u9762\u6c92\u6709\u9ede \u505a\u5b8c\u62d3\u8b5c\u6392\u5e8f\u5f8c\uff0c\u5982\u679c\u6240\u6709\u9ede\u90fd\u88ab\u52a0\u5165\u904e queue \u904e\uff0c\u4ee3\u8868\u9019\u5f35\u5716\u662f DAG\uff0c\u53cd\u4e4b\uff0c\u5716\u4e2d\u6709\u74b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int q [ N ], din [ N ]; vector < int > G [ N ]; bool topologicalSort ( int n ) { int head = -1 , tail = -1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( din [ i ] == 0 ) { q [ ++ head ] = 1 ; } } while ( head > tail ) { int s = q [ ++ tail ]; for ( int i : G [ s ]) { if ( -- din [ i ] == 0 ) q [ ++ head ] = i ; } } return head == n ; } \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 \u62d3\u8b5c\u9806\u5e8f \u62d3\u8b5c\u6392\u5e8f\u4e2d\uff0c\u5f9e queue \u62ff\u51fa\u7684\u9806\u5e8f\u7a31\u70ba\u62d3\u8b5c\u9806\u5e8f\uff0c\u62d3\u8b5c\u9806\u5e8f\u4e0d\u552f\u4e00\u3002 DFS + \u6642\u9593\u6233\u8a18 \u53e6\u4e00\u7a2e\u662f\u5229\u7528 DFS + \u6642\u9593\u6233\u8a18\uff0c\u5982\u679c\u767c\u73fe\u6709\u4efb\u4e00\u689d\u908a (u,v) \uff0c tin[u]>tin[v] \uff0c\u90a3\u5c31\u7121\u89e3\uff0c\u5426\u5247\u4f9d\u7167 tout \u7531\u5927\u5230\u5c0f\u5f62\u6210\u62d3\u8b5c\u6392\u5e8f\u3002 \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002 \u4f8b\u984c\u7df4\u7fd2 UVa 10305 - Ordering Tasks","title":"\u6709\u5411\u7121\u74b0\u5716"},{"location":"graph/directedacyclicgraph/#directed-acyclic-graph-dag","text":"\u6709\u5411\u7121\u74b0\u5716\u53ef\u4ee5\u4ee3\u8868\u4e8b\u7269\u4e4b\u9593\u7684\u76f8\u4f9d\u95dc\u4fc2\uff0c\u4f8b\u5982\u64cb\u4fee\u6a5f\u5236\uff0c\u6216\u662f\u51fd\u793a\u5eab\u7684\u5957\u4ef6\u5b89\u88dd\u3002 \u6709\u5169\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u6aa2\u67e5\u4e00\u5f35\u5716\u662f\u5426\u70ba\u6709\u5411\u7121\u74b0\u5716\u3002","title":"\u6709\u5411\u7121\u74b0\u5716 (Directed Acyclic Graph, DAG)"},{"location":"graph/directedacyclicgraph/#_1","text":"\u62d3\u6a38\u6392\u5e8f\u662f\u5c0d\u5c07\u6709\u5411\u5716\u8f49\u63db\u6210\u4e00\u500b\u7dda\u6027\u5e8f\u5217\uff0c\u4e5f\u7528\u4f86\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u70ba\u6709\u5411\u7121\u74b0\u5716\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a \u5c07\u5165\u5ea6 = 0 \u7684\u9ede\u52a0\u5165 queue \u5f9e queue \u7576\u4e2d\u62ff\u4e00\u500b\u9ede u \u62d4\u6389\u9ede u \u91cd\u8907\u4e0a\u6558\u6b65\u9a5f\uff0c\u76f4\u5230 queue \u88e1\u9762\u6c92\u6709\u9ede \u505a\u5b8c\u62d3\u8b5c\u6392\u5e8f\u5f8c\uff0c\u5982\u679c\u6240\u6709\u9ede\u90fd\u88ab\u52a0\u5165\u904e queue \u904e\uff0c\u4ee3\u8868\u9019\u5f35\u5716\u662f DAG\uff0c\u53cd\u4e4b\uff0c\u5716\u4e2d\u6709\u74b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int q [ N ], din [ N ]; vector < int > G [ N ]; bool topologicalSort ( int n ) { int head = -1 , tail = -1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( din [ i ] == 0 ) { q [ ++ head ] = 1 ; } } while ( head > tail ) { int s = q [ ++ tail ]; for ( int i : G [ s ]) { if ( -- din [ i ] == 0 ) q [ ++ head ] = i ; } } return head == n ; } \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002","title":"\u62d3\u8b5c\u6392\u5e8f"},{"location":"graph/directedacyclicgraph/#_2","text":"\u62d3\u8b5c\u6392\u5e8f\u4e2d\uff0c\u5f9e queue \u62ff\u51fa\u7684\u9806\u5e8f\u7a31\u70ba\u62d3\u8b5c\u9806\u5e8f\uff0c\u62d3\u8b5c\u9806\u5e8f\u4e0d\u552f\u4e00\u3002","title":"\u62d3\u8b5c\u9806\u5e8f"},{"location":"graph/directedacyclicgraph/#dfs","text":"\u53e6\u4e00\u7a2e\u662f\u5229\u7528 DFS + \u6642\u9593\u6233\u8a18\uff0c\u5982\u679c\u767c\u73fe\u6709\u4efb\u4e00\u689d\u908a (u,v) \uff0c tin[u]>tin[v] \uff0c\u90a3\u5c31\u7121\u89e3\uff0c\u5426\u5247\u4f9d\u7167 tout \u7531\u5927\u5230\u5c0f\u5f62\u6210\u62d3\u8b5c\u6392\u5e8f\u3002 \u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \u3002","title":"DFS + \u6642\u9593\u6233\u8a18"},{"location":"graph/directedacyclicgraph/#_3","text":"UVa 10305 - Ordering Tasks","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/disjointset/","text":"\u4e26\u67e5\u96c6 \u4e26\u67e5\u96c6\u662f\u4e00\u7a2e\u6a39\u72c0\u7d50\u69cb\uff0c\u4ed6\u652f\u63f4\u5169\u4ef6\u4e8b \u67e5\u8a62\u6240\u96b8\u5c6c\u96c6\u5408 \u5408\u4f75\u5169\u500b\u96c6\u5408 \u6211\u5011\u628a\u96c6\u5408\u8f49\u5316\u6210\u6a39\uff0c\u4e00\u9846\u6a39\u4ee3\u8868\u4e00\u500b\u96c6\u5408\uff0c\u6a39\u6839\u4ee3\u8868\u96c6\u5408\u7684\u8001\u5927\uff0c\u67e5\u8a62\u96b8\u5c6c\u96c6\u5408\u5c31\u56de\u50b3\u6a39\u6839\u662f\u8ab0\uff08\u4e00\u500b\u6a39\u9914\u53ef\u80fd\u6709\u5169\u9846\u6a39\u6839\u5427\uff09\uff0c\u5408\u4f75\u7684\u6642\u4faf\uff0c\u5c31\u628a\u4e00\u9846\u6a39\u7684\u6a39\u6839\u53ea\u5230\u53e6\u4e00\u9846\uff0c\u4ee5\u4e0b\u70ba\u8a73\u7d30\u7684\u63cf\u8ff0\u3002 \u521d\u59cb \u4e00\u958b\u59cb\u7684\u6642\u5019\uff0c\u6bcf\u500b\u9ede\u81ea\u6210\u4e00\u500b\u96c6\u5408\uff0c\u6240\u4ee5\u628a\u6a39\u6839\u90fd\u8a2d\u70ba\u81ea\u5df1\u3002 1 2 3 4 5 6 int Find ( int x ) { if ( x == p [ x ]) return x ; return find ( p [ x ]); } \u72c0\u614b\u58d3\u7e2e\uff1a\u5728\u5408\u4f75\u4e4b\u5f8c\u539f\u672c\u88ab\u6307\u5411\u7684\u6a39\u6839\u5c31\u6c92\u7528\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u4e00\u908a\u505a\u67e5\u8a62\u6642\uff0c\u4e00\u908a\u505a\u66f4\u65b0\u3002 1 2 3 4 5 6 int Find ( int x ) { if ( x == p [ x ]) return x ; return p [ x ] = find ( p [ x ]); } \u67e5\u8a62 \u67e5\u8a62\u7684\u6642\u5019\uff0c\u8981\u67e5\u5230\u6a39\u6839\u70ba\u81ea\u5df1\u7684\u9ede\uff0c\u70ba\u6b62\u5426\u5247\u7684\u8a71\u5c31\u8981\u7e7c\u7e8c\u67e5\u3002 1 2 3 4 5 6 7 8 void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; p [ a ] = b ; } \u555f\u767c\u5f0f\u5408\u4f75\uff1a\u5efa\u7acb\u4e00\u500b h[i] \u4ee3\u8868\u6a39\u7684\u9ad8\u5ea6\uff0c\u4ea6\u662f\u5143\u7d20\u6700\u5927\u905e\u8ff4\u6b21\u6578\uff0c h[i] \u4e00\u958b\u59cb\u70ba 1 \u3002\u518d\u4f86\uff0c\u6211\u5011\u6bcf\u6b21\u90fd\u8b93\u9ad8\u5ea6\u5c0f\u7684\u9ad8\u5ea6\u5927\u7684\u5408\u4f75\uff0c\u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e00\u6a23\u7684\uff0c\u5c31\u8b93\u5408\u4f75\u5225\u4eba\u7684\u6a39\u9ad8\u5ea6\u52a0 1 \u3002\u5982\u679c\u8981\u628a\u9ad8\u5ea6\u8b8a\u70ba x \uff0c\u5247\u81f3\u5c11\u9700\u8981 2^x \u500b\u9ede\uff0c\u7531\u6b64\u63a8\u51fa N \u500b\u9ede\u6240\u5f62\u6210\u6700\u9ad8\u4e4b\u9ad8\u5ea6\u70ba \\log(N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; if ( rank [ a ] < rank [ b ]) p [ a ] = b ; else if ( rank [ a ] > rank [ b ]) p [ b ] = a ; else { p [ a ] = b ; rank [ a ] ++ ; } } \u4e5f\u53ef\u4ee5\u7dad\u8b77\u4e26\u67e5\u96c6\u7684\u500b\u6578\uff0c\u500b\u6578\u5927\u7684\u5408\u4f75\u500b\u6578\u5c0f\u7684\u4e26\u67e5\u96c6\u3002 1 2 3 4 5 6 7 8 9 10 11 void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; if ( sz [ a ] < sz [ b ]) swap ( a , b ); sz [ a ] += sz [ b ]; p [ b ] = a ; } \u5b8c\u6574\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int p [ N ], rank [ N ]; void init () { for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = i ; rnak [ i ] = 1 ; } } int Find ( int x ) { if ( x == p [ x ]) return x ; return p [ x ] = find ( p [ x ]); } void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; if ( rank [ a ] < rank [ b ]) p [ a ] = b ; else if ( rank [ a ] > rank [ b ]) p [ b ] = a ; else { p [ a ] = b ; rank [ a ] ++ ; } } \u4f8b\u984c\u7df4\u7fd2 UVa 00615 - Is It A Tree?","title":"\u4e26\u67e5\u96c6"},{"location":"graph/disjointset/#_1","text":"\u4e26\u67e5\u96c6\u662f\u4e00\u7a2e\u6a39\u72c0\u7d50\u69cb\uff0c\u4ed6\u652f\u63f4\u5169\u4ef6\u4e8b \u67e5\u8a62\u6240\u96b8\u5c6c\u96c6\u5408 \u5408\u4f75\u5169\u500b\u96c6\u5408 \u6211\u5011\u628a\u96c6\u5408\u8f49\u5316\u6210\u6a39\uff0c\u4e00\u9846\u6a39\u4ee3\u8868\u4e00\u500b\u96c6\u5408\uff0c\u6a39\u6839\u4ee3\u8868\u96c6\u5408\u7684\u8001\u5927\uff0c\u67e5\u8a62\u96b8\u5c6c\u96c6\u5408\u5c31\u56de\u50b3\u6a39\u6839\u662f\u8ab0\uff08\u4e00\u500b\u6a39\u9914\u53ef\u80fd\u6709\u5169\u9846\u6a39\u6839\u5427\uff09\uff0c\u5408\u4f75\u7684\u6642\u4faf\uff0c\u5c31\u628a\u4e00\u9846\u6a39\u7684\u6a39\u6839\u53ea\u5230\u53e6\u4e00\u9846\uff0c\u4ee5\u4e0b\u70ba\u8a73\u7d30\u7684\u63cf\u8ff0\u3002","title":"\u4e26\u67e5\u96c6"},{"location":"graph/disjointset/#_2","text":"\u4e00\u958b\u59cb\u7684\u6642\u5019\uff0c\u6bcf\u500b\u9ede\u81ea\u6210\u4e00\u500b\u96c6\u5408\uff0c\u6240\u4ee5\u628a\u6a39\u6839\u90fd\u8a2d\u70ba\u81ea\u5df1\u3002 1 2 3 4 5 6 int Find ( int x ) { if ( x == p [ x ]) return x ; return find ( p [ x ]); } \u72c0\u614b\u58d3\u7e2e\uff1a\u5728\u5408\u4f75\u4e4b\u5f8c\u539f\u672c\u88ab\u6307\u5411\u7684\u6a39\u6839\u5c31\u6c92\u7528\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u4e00\u908a\u505a\u67e5\u8a62\u6642\uff0c\u4e00\u908a\u505a\u66f4\u65b0\u3002 1 2 3 4 5 6 int Find ( int x ) { if ( x == p [ x ]) return x ; return p [ x ] = find ( p [ x ]); }","title":"\u521d\u59cb"},{"location":"graph/disjointset/#_3","text":"\u67e5\u8a62\u7684\u6642\u5019\uff0c\u8981\u67e5\u5230\u6a39\u6839\u70ba\u81ea\u5df1\u7684\u9ede\uff0c\u70ba\u6b62\u5426\u5247\u7684\u8a71\u5c31\u8981\u7e7c\u7e8c\u67e5\u3002 1 2 3 4 5 6 7 8 void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; p [ a ] = b ; } \u555f\u767c\u5f0f\u5408\u4f75\uff1a\u5efa\u7acb\u4e00\u500b h[i] \u4ee3\u8868\u6a39\u7684\u9ad8\u5ea6\uff0c\u4ea6\u662f\u5143\u7d20\u6700\u5927\u905e\u8ff4\u6b21\u6578\uff0c h[i] \u4e00\u958b\u59cb\u70ba 1 \u3002\u518d\u4f86\uff0c\u6211\u5011\u6bcf\u6b21\u90fd\u8b93\u9ad8\u5ea6\u5c0f\u7684\u9ad8\u5ea6\u5927\u7684\u5408\u4f75\uff0c\u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e00\u6a23\u7684\uff0c\u5c31\u8b93\u5408\u4f75\u5225\u4eba\u7684\u6a39\u9ad8\u5ea6\u52a0 1 \u3002\u5982\u679c\u8981\u628a\u9ad8\u5ea6\u8b8a\u70ba x \uff0c\u5247\u81f3\u5c11\u9700\u8981 2^x \u500b\u9ede\uff0c\u7531\u6b64\u63a8\u51fa N \u500b\u9ede\u6240\u5f62\u6210\u6700\u9ad8\u4e4b\u9ad8\u5ea6\u70ba \\log(N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; if ( rank [ a ] < rank [ b ]) p [ a ] = b ; else if ( rank [ a ] > rank [ b ]) p [ b ] = a ; else { p [ a ] = b ; rank [ a ] ++ ; } } \u4e5f\u53ef\u4ee5\u7dad\u8b77\u4e26\u67e5\u96c6\u7684\u500b\u6578\uff0c\u500b\u6578\u5927\u7684\u5408\u4f75\u500b\u6578\u5c0f\u7684\u4e26\u67e5\u96c6\u3002 1 2 3 4 5 6 7 8 9 10 11 void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; if ( sz [ a ] < sz [ b ]) swap ( a , b ); sz [ a ] += sz [ b ]; p [ b ] = a ; }","title":"\u67e5\u8a62"},{"location":"graph/disjointset/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 int p [ N ], rank [ N ]; void init () { for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = i ; rnak [ i ] = 1 ; } } int Find ( int x ) { if ( x == p [ x ]) return x ; return p [ x ] = find ( p [ x ]); } void Union ( int a , int b ) { a = Find ( a ); b = Find ( b ); if ( a == b ) return ; if ( rank [ a ] < rank [ b ]) p [ a ] = b ; else if ( rank [ a ] > rank [ b ]) p [ b ] = a ; else { p [ a ] = b ; rank [ a ] ++ ; } }","title":"\u5b8c\u6574\u7a0b\u5f0f\u78bc"},{"location":"graph/disjointset/#_5","text":"UVa 00615 - Is It A Tree?","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/eulercircuit/","text":"\u6b50\u62c9\u8ff4\u8def \u6b50\u62c9\u8ff4\u8def \u67ef\u5c3c\u65af\u5821\u4e03\u6a4b\u554f\u984c\u53ef\u8aaa\u662f\u5716\u8ad6\u6700\u65e9\u7684\u8d77\u6e90\uff0c\u554f\u984c\u5982\u4e0b\uff08from \u7dad\u57fa\u767e\u79d1\uff09\uff1a\"\u7576\u6642\u6771\u666e\u9b6f\u58eb\u67ef\u5c3c\u65af\u5821\uff08\u4eca\u65e5\u4fc4\u7f85\u65af\u52a0\u91cc\u5be7\u683c\u52d2\uff09\u5e02\u5340\u8de8\u666e\u5217\u6208\u5229\u4e9e\u6cb3\u5169\u5cb8\uff0c\u6cb3\u4e2d\u5fc3\u6709\u5169\u500b\u5c0f\u5cf6\u3002\u5c0f\u5cf6\u8207\u6cb3\u7684\u5169\u5cb8\u6709\u4e03\u689d\u6a4b\u9023\u63a5\u3002\u5728\u6240\u6709\u6a4b\u90fd\u53ea\u80fd\u8d70\u4e00\u904d\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u4f55\u624d\u80fd\u628a\u9019\u500b\u5730\u65b9\u6240\u6709\u7684\u6a4b\u90fd\u8d70\u904d\uff1f\" \u6b50\u62c9\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u5716\u8ad6\u4e5f\u56e0\u6b64\u8a95\u751f\u3002 \u4e03\u6a4b\u554f\u984c\u6839\u64da\u8d77\u9ede\u8207\u7d42\u9ede\u662f\u5426\u76f8\u540c\uff0c\u5206\u6210 Euler path\uff08\u4e0d\u540c\uff09\u53ca Euler circuit\uff08\u76f8\u540c\uff09\u3002 \u5224\u65b7\u6cd5 \u7121\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u5947\u9ede\uff08\u5ea6\u6578\u70ba\u5947\u6578\uff09\u548c\u5076\u9ede\uff08\u5ea6\u6578\u70ba\u5076\u6578\uff09\u3002 Euler path\uff1a\u5947\u9ede\u6578\u70ba 0 \u6216 2 Euler circuit\uff1a\u6c92\u6709\u5947\u9ede \u8b49\u660e from wiki \u5fc5\u8981\u6027\uff1a\u5982\u679c\u4e00\u500b\u5716\u80fd\u4e00\u7b46\u756b\u6210\uff0c\u90a3\u9ebc\u5c0d\u6bcf\u4e00\u500b\u9802\u9ede\uff0c\u8981\u9ebc\u8def\u5f91\u4e2d\u300c\u9032\u5165\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\u7b49\u65bc\u300c\u96e2\u958b\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\uff1a\u9019\u6642\u9ede\u7684\u5ea6\u70ba\u5076\u6578\u3002\u8981\u9ebc\u5169\u8005\u76f8\u5dee\u4e00\uff1a\u9019\u6642\u9019\u500b\u9ede\u5fc5\u7136\u662f\u8d77\u9ede\u6216\u7d42\u9ede\u4e4b\u4e00\u3002\u6ce8\u610f\u5230\u6709\u8d77\u9ede\u5c31\u5fc5\u7136\u6709\u7d42\u9ede\uff0c\u56e0\u6b64\u5947\u9802\u9ede\u7684\u6578\u76ee\u8981\u9ebc\u662f 0\uff0c\u8981\u9ebc\u662f 2\u3002 \u5145\u5206\u6027\uff1a\u5982\u679c\u5716\u4e2d\u6c92\u6709\u5947\u9802\u9ede\uff0c\u90a3\u9ebc\u96a8\u4fbf\u9078\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u9023\u4e00\u500b\u74b0 C_{1} \u3002\u5982\u679c\u9019\u500b\u74b0\u5c31\u662f\u539f\u5716\uff0c\u90a3\u9ebc\u7d50\u675f\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u9ebc\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u7684\uff0c C\\_{1} \u548c\u539f\u5716\u7684\u5176\u5b83\u90e8\u5206\u5fc5\u7136\u6709\u516c\u5171\u9802\u9ede s\\_{1} \u3002\u5f9e\u9019\u4e00\u9ede\u51fa\u767c\uff0c\u5728\u539f\u5716\u7684\u5269\u9918\u90e8\u5206\u4e2d\u91cd\u8907\u4e0a\u8ff0\u6b65\u9a5f\u3002\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u5716\uff0c\u7d93\u904e\u82e5\u5e72\u6b65\u5f8c\uff0c\u5168\u5716\u88ab\u5206\u70ba\u4e00\u4e9b\u74b0\u3002\u7531\u65bc\u5169\u500b\u76f8\u9023\u7684\u74b0\u5c31\u662f\u4e00\u500b\u74b0\uff0c\u539f\u4f86\u7684\u5716\u4e5f\u5c31\u662f\u4e00\u500b\u6b50\u62c9\u74b0\u4e86\u3002\u5982\u679c\u5716\u4e2d\u6709\u5169\u500b\u5947\u9802\u9ede u \u548c v \uff0c\u90a3\u9ebc\u52a0\u591a\u4e00\u689d\u908a\u5c07\u5b83\u5011\u9023\u4e0a\u5f8c\u5f97\u5230\u4e00\u500b\u7121\u5947\u9802\u9ede\u7684\u9023\u901a\u5716\u3002\u7531\u4e0a\u77e5\u9019\u500b\u5716\u662f\u4e00\u500b\u74b0\uff0c\u56e0\u6b64\u53bb\u6389\u65b0\u52a0\u7684\u908a\u5f8c\u6210\u70ba\u4e00\u689d\u8def\u5f91\uff0c\u8d77\u9ede\u548c\u7d42\u9ede\u662f u \u548c v \u3002\u8b49\u7562\u3002 \u6709\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u51fa\u9ede\uff08\u51fa\u5ea6 - \u5165\u5ea6 = 1\uff09\u548c\u5165\u9ede\uff08\u5165\u5ea6 - \u51fa\u5ea6 = 1\uff09\u9084\u6709\u5e73\u8861\u9ede\uff08\u51fa\u5ea6 = \u5165\u5ea6\uff09\u3002 Euler path\uff1a\u51fa\u9ede\u548c\u5165\u9ede\u500b\u6578\u540c\u6642\u70ba 0 \u6216 1\u3002 Euler circuit\uff1a\u53ea\u6709\u5e73\u8861\u9ede\u3002 UVa 10129 - Play on Words \u7d66\u5b9a N \u500b\u5b57\u4e32\uff0c\u5982\u679c\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u5c3e\u548c\u53e6\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u9996\u76f8\u540c\uff0c\u53ef\u4ee5\u628a\u9019\u5169\u500b\u5b57\u4e32\u76f8\u9023\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u5b57\u4e32\u76f8\u9023\u3002 \u628a\u82f1\u6587\u5b57\u6bcd\u7576\u4f5c\u9ede\uff0c\u5c0d\u65bc\u6bcf\u500b\u5b57\u4e32 S \uff0c\u5c07 S \u982d\u5c3e\u5169\u500b\u5b57\u6bcd\u4e4b\u9593\u9023\u4e00\u689d\u6709\u5411\u908a\uff0c\u9019\u984c\u984c\u76ee\u5c31\u8f49\u6210\u5224\u65b7\u4e00\u5f35\u6709\u5411\u5716\u662f\u5426\u5b58\u5728 Euler path (circuit)\uff0c\u6b64\u5916\u8981\u5224\u65b7\u9019\u5f35\u5716\u662f\u5426\u70ba\u4e00\u5f35\u9023\u901a\u5716\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 0 ; const int MXV = 30 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); vector < int > din ( MXV ), dout ( MXV ); vector < int > G [ MXV ]; bitset < MXV > vis ; void init () { fill ( din . begin (), din . end (), 0 ); fill ( dout . begin (), dout . end (), 0 ); FOR ( i , 0 , MXV ) G [ i ]. clear (); vis . reset (); } void dfs ( int u ) { vis [ u ] = true ; for ( int v : G [ u ]) if ( ! vis [ v ]) dfs ( v ); } bool ok ( int st ) { int cnt1 = 0 , cnt2 = 0 ; FOR ( i , 0 , MXV ) { int d = dout [ i ] - din [ i ]; if ( d == 1 ) { ++ cnt1 ; st = i ; } else if ( d == -1 ) ++ cnt2 ; else if ( d != 0 ) return false ; } if ( cnt1 != cnt2 || cnt1 > 1 ) return false ; dfs ( st ); FOR ( i , 0 , MXV ) { if (( din [ i ] || dout [ i ]) && ! vis [ i ]) return false ; } return true ; } int main () { IOS ; int t ; cin >> t ; while ( t -- ) { int n ; string s ; cin >> n ; init (); FOR ( i , 0 , n ) { cin >> s ; int u = s [ 0 ] - 'a' , v = s . back () - 'a' ; ++ dout [ u ]; ++ din [ v ]; G [ u ]. emplace_back ( v ); } if ( ok ( s [ 0 ] - 'a' )) cout << \"Ordering is possible. \\n \" ; else cout << \"The door cannot be opened. \\n \" ; } } \u6c42\u51fa\u4e00\u7d44\u89e3 \u7528 DFS \u904d\u6b77\u6574\u5f35\u5716\uff0c\u8a2d S \u70ba\u96e2\u958b\u7684\u9806\u5e8f\uff0c\u7121\u5411\u5716\u7684\u7b54\u6848\u70ba S \uff0c\u6709\u5411\u5716\u7684\u7b54\u6848\u70ba\u53cd\u5411\u7684 S \u3002 DFS \u8d77\u9ede\u9078\u5b9a\uff1a Euler path\uff1a\u7121\u5411\u5716\u9078\u64c7\u4efb\u610f\u4e00\u500b\u5947\u9ede\uff0c\u6709\u5411\u5716\u9078\u64c7\u51fa\u9ede\u3002 Euler circuit\uff1a\u4efb\u610f\u4e00\u9ede\u3002 UVa 10441 - Catenyms \u7d66\u5b9a N \u500b\u5b57\u4e32\uff0c\u5982\u679c\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u5c3e\u548c\u53e6\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u9996\u76f8\u540c\uff0c\u53ef\u4ee5\u628a\u9019\u5169\u500b\u5b57\u4e32\u76f8\u9023\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u5b57\u4e32\u76f8\u9023\u3002\u5982\u679c\u5b58\u5728\u89e3\uff0c\u8acb\u8f38\u51fa\u64c1\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u89e3\u3002 \u9019\u984c\u5224\u65b7\u662f\u5426\u6709\u89e3\u7684\u505a\u6cd5\u548c\u4e0a\u7684\u4f8b\u984c\u76f8\u4f3c\uff0c\u5dee\u5225\u5728\u65bc\u9019\u88e1\u7528\u4e26\u67e5\u96c6\u5224\u65b7\u662f\u5426\u70ba\u9023\u901a\u5716\u3002\u9019\u984c\u9700\u6c42\u51fa\u64c1\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u89e3\uff0c\u56e0\u6b64\u8981\u628a\u5b57\u4e32\u6392\u5e8f\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 #include <bits/stdc++.h> using namespace std ; const int ALP = 30 ; const int MXN = 1005 ; int n ; int din [ ALP ], dout [ ALP ]; int par [ ALP ]; vector < string > vs [ MXN ], ans ; bitset < MXN > vis , used [ ALP ]; void djsInit () { for ( int i = 0 ; i != ALP ; ++ i ) { par [ i ] = i ; } } int Find ( int x ) { return ( x == par [ x ] ? ( x ) : ( par [ x ] = Find ( par [ x ]))); } void init () { djsInit (); memset ( din , 0 , sizeof ( din )); memset ( dout , 0 , sizeof ( dout )); vis . reset (); for ( int i = 0 ; i != ALP ; ++ i ) { vs [ i ]. clear (); used [ i ]. reset (); } return ; } void dfs ( int u ) { for ( int i = 0 ; i != ( int ) vs [ u ]. size (); ++ i ) { if ( used [ u ][ i ]) { continue ; } used [ u ][ i ] = 1 ; string s = vs [ u ][ i ]; int v = s [ s . size () - 1 ] - 'a' ; dfs ( v ); ans . push_back ( s ); } } bool solve () { int cnt = 1 ; for ( int i = 0 ; i != n ; ++ i ) { string s ; cin >> s ; int from = s [ 0 ] - 'a' , to = s . back () - 'a' ; ++ din [ to ]; ++ dout [ from ]; vs [ from ]. push_back ( s ); vis [ from ] = vis [ to ] = true ; if (( from = Find ( from )) != ( to = Find ( to ))) { par [ from ] = to ; ++ cnt ; } } if (( int ) vis . count () != cnt ) { return false ; } int root , st , pin = 0 , pout = 0 ; for ( int i = ALP - 1 ; i >= 0 ; -- i ) { sort ( vs [ i ]. begin (), vs [ i ]. end ()); if ( vs [ i ]. size ()) root = i ; int d = dout [ i ] - din [ i ]; if ( d == 1 ) { ++ pout ; st = i ; } else if ( d == -1 ) { ++ pin ; } else if ( d != 0 ) { return false ; } } if ( pin != pout || pin > 1 ) { return false ; } ans . clear (); dfs (( pin ? st : root )); return true ; } int main () { int t ; cin >> t ; while ( t -- ) { cin >> n ; init (); if ( ! solve ()) { cout << \"*** \\n \" ; continue ; } for ( int i = ans . size () - 1 ; i >= 0 ; -- i ) { cout << ans [ i ] << \". \\n \" [ i == 0 ]; } } } \u54c8\u5bc6\u9813\u554f\u984c \u8ddf\u6b50\u62c9\u8ff4\u8def\u5f88\u50cf\uff0c\u4e0d\u904e\u9019\u6b21\u4e0d\u80fd\u91cd\u8907\u7684\u662f\u9ede\u3002\u81f3\u65bc\u5224\u65b7\u662f\u5426\u5b58\u5728 Hamilton Circuit\u3001\u627e\u5230\u4e00\u500b Hamilton Circuit \u662f NP-complete \u554f\u984c\uff0c\u627e\u5230\u4e00\u500b\u6b0a\u91cd\u6700\u5c0f\u7684 Hamilton Circuit \u662f NP-hard \u554f\u984c\uff0c\u76ee\u524d\u5c1a\u672a\u51fa\u73fe\u6709\u6548\u7387\u7684\u6f14\u7b97\u6cd5\u3002 \u7528 DP \u53ef\u4ee5\u505a\u5230 O(2^n\\times n^2) \u7684\u8907\u96dc\u5ea6\u3002","title":"\u6b50\u62c9\u56de\u8def"},{"location":"graph/eulercircuit/#_1","text":"\u6b50\u62c9\u8ff4\u8def \u67ef\u5c3c\u65af\u5821\u4e03\u6a4b\u554f\u984c\u53ef\u8aaa\u662f\u5716\u8ad6\u6700\u65e9\u7684\u8d77\u6e90\uff0c\u554f\u984c\u5982\u4e0b\uff08from \u7dad\u57fa\u767e\u79d1\uff09\uff1a\"\u7576\u6642\u6771\u666e\u9b6f\u58eb\u67ef\u5c3c\u65af\u5821\uff08\u4eca\u65e5\u4fc4\u7f85\u65af\u52a0\u91cc\u5be7\u683c\u52d2\uff09\u5e02\u5340\u8de8\u666e\u5217\u6208\u5229\u4e9e\u6cb3\u5169\u5cb8\uff0c\u6cb3\u4e2d\u5fc3\u6709\u5169\u500b\u5c0f\u5cf6\u3002\u5c0f\u5cf6\u8207\u6cb3\u7684\u5169\u5cb8\u6709\u4e03\u689d\u6a4b\u9023\u63a5\u3002\u5728\u6240\u6709\u6a4b\u90fd\u53ea\u80fd\u8d70\u4e00\u904d\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u4f55\u624d\u80fd\u628a\u9019\u500b\u5730\u65b9\u6240\u6709\u7684\u6a4b\u90fd\u8d70\u904d\uff1f\" \u6b50\u62c9\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u5716\u8ad6\u4e5f\u56e0\u6b64\u8a95\u751f\u3002 \u4e03\u6a4b\u554f\u984c\u6839\u64da\u8d77\u9ede\u8207\u7d42\u9ede\u662f\u5426\u76f8\u540c\uff0c\u5206\u6210 Euler path\uff08\u4e0d\u540c\uff09\u53ca Euler circuit\uff08\u76f8\u540c\uff09\u3002","title":"\u6b50\u62c9\u8ff4\u8def"},{"location":"graph/eulercircuit/#_2","text":"\u7121\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u5947\u9ede\uff08\u5ea6\u6578\u70ba\u5947\u6578\uff09\u548c\u5076\u9ede\uff08\u5ea6\u6578\u70ba\u5076\u6578\uff09\u3002 Euler path\uff1a\u5947\u9ede\u6578\u70ba 0 \u6216 2 Euler circuit\uff1a\u6c92\u6709\u5947\u9ede \u8b49\u660e from wiki \u5fc5\u8981\u6027\uff1a\u5982\u679c\u4e00\u500b\u5716\u80fd\u4e00\u7b46\u756b\u6210\uff0c\u90a3\u9ebc\u5c0d\u6bcf\u4e00\u500b\u9802\u9ede\uff0c\u8981\u9ebc\u8def\u5f91\u4e2d\u300c\u9032\u5165\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\u7b49\u65bc\u300c\u96e2\u958b\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\uff1a\u9019\u6642\u9ede\u7684\u5ea6\u70ba\u5076\u6578\u3002\u8981\u9ebc\u5169\u8005\u76f8\u5dee\u4e00\uff1a\u9019\u6642\u9019\u500b\u9ede\u5fc5\u7136\u662f\u8d77\u9ede\u6216\u7d42\u9ede\u4e4b\u4e00\u3002\u6ce8\u610f\u5230\u6709\u8d77\u9ede\u5c31\u5fc5\u7136\u6709\u7d42\u9ede\uff0c\u56e0\u6b64\u5947\u9802\u9ede\u7684\u6578\u76ee\u8981\u9ebc\u662f 0\uff0c\u8981\u9ebc\u662f 2\u3002 \u5145\u5206\u6027\uff1a\u5982\u679c\u5716\u4e2d\u6c92\u6709\u5947\u9802\u9ede\uff0c\u90a3\u9ebc\u96a8\u4fbf\u9078\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u9023\u4e00\u500b\u74b0 C_{1} \u3002\u5982\u679c\u9019\u500b\u74b0\u5c31\u662f\u539f\u5716\uff0c\u90a3\u9ebc\u7d50\u675f\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u9ebc\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u7684\uff0c C\\_{1} \u548c\u539f\u5716\u7684\u5176\u5b83\u90e8\u5206\u5fc5\u7136\u6709\u516c\u5171\u9802\u9ede s\\_{1} \u3002\u5f9e\u9019\u4e00\u9ede\u51fa\u767c\uff0c\u5728\u539f\u5716\u7684\u5269\u9918\u90e8\u5206\u4e2d\u91cd\u8907\u4e0a\u8ff0\u6b65\u9a5f\u3002\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u5716\uff0c\u7d93\u904e\u82e5\u5e72\u6b65\u5f8c\uff0c\u5168\u5716\u88ab\u5206\u70ba\u4e00\u4e9b\u74b0\u3002\u7531\u65bc\u5169\u500b\u76f8\u9023\u7684\u74b0\u5c31\u662f\u4e00\u500b\u74b0\uff0c\u539f\u4f86\u7684\u5716\u4e5f\u5c31\u662f\u4e00\u500b\u6b50\u62c9\u74b0\u4e86\u3002\u5982\u679c\u5716\u4e2d\u6709\u5169\u500b\u5947\u9802\u9ede u \u548c v \uff0c\u90a3\u9ebc\u52a0\u591a\u4e00\u689d\u908a\u5c07\u5b83\u5011\u9023\u4e0a\u5f8c\u5f97\u5230\u4e00\u500b\u7121\u5947\u9802\u9ede\u7684\u9023\u901a\u5716\u3002\u7531\u4e0a\u77e5\u9019\u500b\u5716\u662f\u4e00\u500b\u74b0\uff0c\u56e0\u6b64\u53bb\u6389\u65b0\u52a0\u7684\u908a\u5f8c\u6210\u70ba\u4e00\u689d\u8def\u5f91\uff0c\u8d77\u9ede\u548c\u7d42\u9ede\u662f u \u548c v \u3002\u8b49\u7562\u3002 \u6709\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u51fa\u9ede\uff08\u51fa\u5ea6 - \u5165\u5ea6 = 1\uff09\u548c\u5165\u9ede\uff08\u5165\u5ea6 - \u51fa\u5ea6 = 1\uff09\u9084\u6709\u5e73\u8861\u9ede\uff08\u51fa\u5ea6 = \u5165\u5ea6\uff09\u3002 Euler path\uff1a\u51fa\u9ede\u548c\u5165\u9ede\u500b\u6578\u540c\u6642\u70ba 0 \u6216 1\u3002 Euler circuit\uff1a\u53ea\u6709\u5e73\u8861\u9ede\u3002 UVa 10129 - Play on Words \u7d66\u5b9a N \u500b\u5b57\u4e32\uff0c\u5982\u679c\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u5c3e\u548c\u53e6\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u9996\u76f8\u540c\uff0c\u53ef\u4ee5\u628a\u9019\u5169\u500b\u5b57\u4e32\u76f8\u9023\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u5b57\u4e32\u76f8\u9023\u3002 \u628a\u82f1\u6587\u5b57\u6bcd\u7576\u4f5c\u9ede\uff0c\u5c0d\u65bc\u6bcf\u500b\u5b57\u4e32 S \uff0c\u5c07 S \u982d\u5c3e\u5169\u500b\u5b57\u6bcd\u4e4b\u9593\u9023\u4e00\u689d\u6709\u5411\u908a\uff0c\u9019\u984c\u984c\u76ee\u5c31\u8f49\u6210\u5224\u65b7\u4e00\u5f35\u6709\u5411\u5716\u662f\u5426\u5b58\u5728 Euler path (circuit)\uff0c\u6b64\u5916\u8981\u5224\u65b7\u9019\u5f35\u5716\u662f\u5426\u70ba\u4e00\u5f35\u9023\u901a\u5716\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #pragma GCC optimize(\"O2\") #include <bits/stdc++.h> using namespace std ; using LL = long long ; using ULL = unsigned long long ; using PII = pair < int , int > ; using PLL = pair < LL , LL > ; using VI = vector < int > ; using VVI = vector < vector < int >> ; const int INF = 1e9 ; const int MXN = 0 ; const int MXV = 30 ; const double EPS = 1e-9 ; const int MOD = 1e9 + 7 ; #define MP make_pair #define PB push_back #define F first #define S second #define FOR(i, L, R) for (int i = L; i < (int)R; ++i) #define FORD(i, L, R) for (int i = L; i > (int)R; --i) #define IOS \\ cin.tie(nullptr); \\ cout.tie(nullptr); \\ ios_base::sync_with_stdio(false); vector < int > din ( MXV ), dout ( MXV ); vector < int > G [ MXV ]; bitset < MXV > vis ; void init () { fill ( din . begin (), din . end (), 0 ); fill ( dout . begin (), dout . end (), 0 ); FOR ( i , 0 , MXV ) G [ i ]. clear (); vis . reset (); } void dfs ( int u ) { vis [ u ] = true ; for ( int v : G [ u ]) if ( ! vis [ v ]) dfs ( v ); } bool ok ( int st ) { int cnt1 = 0 , cnt2 = 0 ; FOR ( i , 0 , MXV ) { int d = dout [ i ] - din [ i ]; if ( d == 1 ) { ++ cnt1 ; st = i ; } else if ( d == -1 ) ++ cnt2 ; else if ( d != 0 ) return false ; } if ( cnt1 != cnt2 || cnt1 > 1 ) return false ; dfs ( st ); FOR ( i , 0 , MXV ) { if (( din [ i ] || dout [ i ]) && ! vis [ i ]) return false ; } return true ; } int main () { IOS ; int t ; cin >> t ; while ( t -- ) { int n ; string s ; cin >> n ; init (); FOR ( i , 0 , n ) { cin >> s ; int u = s [ 0 ] - 'a' , v = s . back () - 'a' ; ++ dout [ u ]; ++ din [ v ]; G [ u ]. emplace_back ( v ); } if ( ok ( s [ 0 ] - 'a' )) cout << \"Ordering is possible. \\n \" ; else cout << \"The door cannot be opened. \\n \" ; } }","title":"\u5224\u65b7\u6cd5"},{"location":"graph/eulercircuit/#_3","text":"\u7528 DFS \u904d\u6b77\u6574\u5f35\u5716\uff0c\u8a2d S \u70ba\u96e2\u958b\u7684\u9806\u5e8f\uff0c\u7121\u5411\u5716\u7684\u7b54\u6848\u70ba S \uff0c\u6709\u5411\u5716\u7684\u7b54\u6848\u70ba\u53cd\u5411\u7684 S \u3002 DFS \u8d77\u9ede\u9078\u5b9a\uff1a Euler path\uff1a\u7121\u5411\u5716\u9078\u64c7\u4efb\u610f\u4e00\u500b\u5947\u9ede\uff0c\u6709\u5411\u5716\u9078\u64c7\u51fa\u9ede\u3002 Euler circuit\uff1a\u4efb\u610f\u4e00\u9ede\u3002 UVa 10441 - Catenyms \u7d66\u5b9a N \u500b\u5b57\u4e32\uff0c\u5982\u679c\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u5c3e\u548c\u53e6\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u9996\u76f8\u540c\uff0c\u53ef\u4ee5\u628a\u9019\u5169\u500b\u5b57\u4e32\u76f8\u9023\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u5b57\u4e32\u76f8\u9023\u3002\u5982\u679c\u5b58\u5728\u89e3\uff0c\u8acb\u8f38\u51fa\u64c1\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u89e3\u3002 \u9019\u984c\u5224\u65b7\u662f\u5426\u6709\u89e3\u7684\u505a\u6cd5\u548c\u4e0a\u7684\u4f8b\u984c\u76f8\u4f3c\uff0c\u5dee\u5225\u5728\u65bc\u9019\u88e1\u7528\u4e26\u67e5\u96c6\u5224\u65b7\u662f\u5426\u70ba\u9023\u901a\u5716\u3002\u9019\u984c\u9700\u6c42\u51fa\u64c1\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u89e3\uff0c\u56e0\u6b64\u8981\u628a\u5b57\u4e32\u6392\u5e8f\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 #include <bits/stdc++.h> using namespace std ; const int ALP = 30 ; const int MXN = 1005 ; int n ; int din [ ALP ], dout [ ALP ]; int par [ ALP ]; vector < string > vs [ MXN ], ans ; bitset < MXN > vis , used [ ALP ]; void djsInit () { for ( int i = 0 ; i != ALP ; ++ i ) { par [ i ] = i ; } } int Find ( int x ) { return ( x == par [ x ] ? ( x ) : ( par [ x ] = Find ( par [ x ]))); } void init () { djsInit (); memset ( din , 0 , sizeof ( din )); memset ( dout , 0 , sizeof ( dout )); vis . reset (); for ( int i = 0 ; i != ALP ; ++ i ) { vs [ i ]. clear (); used [ i ]. reset (); } return ; } void dfs ( int u ) { for ( int i = 0 ; i != ( int ) vs [ u ]. size (); ++ i ) { if ( used [ u ][ i ]) { continue ; } used [ u ][ i ] = 1 ; string s = vs [ u ][ i ]; int v = s [ s . size () - 1 ] - 'a' ; dfs ( v ); ans . push_back ( s ); } } bool solve () { int cnt = 1 ; for ( int i = 0 ; i != n ; ++ i ) { string s ; cin >> s ; int from = s [ 0 ] - 'a' , to = s . back () - 'a' ; ++ din [ to ]; ++ dout [ from ]; vs [ from ]. push_back ( s ); vis [ from ] = vis [ to ] = true ; if (( from = Find ( from )) != ( to = Find ( to ))) { par [ from ] = to ; ++ cnt ; } } if (( int ) vis . count () != cnt ) { return false ; } int root , st , pin = 0 , pout = 0 ; for ( int i = ALP - 1 ; i >= 0 ; -- i ) { sort ( vs [ i ]. begin (), vs [ i ]. end ()); if ( vs [ i ]. size ()) root = i ; int d = dout [ i ] - din [ i ]; if ( d == 1 ) { ++ pout ; st = i ; } else if ( d == -1 ) { ++ pin ; } else if ( d != 0 ) { return false ; } } if ( pin != pout || pin > 1 ) { return false ; } ans . clear (); dfs (( pin ? st : root )); return true ; } int main () { int t ; cin >> t ; while ( t -- ) { cin >> n ; init (); if ( ! solve ()) { cout << \"*** \\n \" ; continue ; } for ( int i = ans . size () - 1 ; i >= 0 ; -- i ) { cout << ans [ i ] << \". \\n \" [ i == 0 ]; } } }","title":"\u6c42\u51fa\u4e00\u7d44\u89e3"},{"location":"graph/eulercircuit/#_4","text":"\u8ddf\u6b50\u62c9\u8ff4\u8def\u5f88\u50cf\uff0c\u4e0d\u904e\u9019\u6b21\u4e0d\u80fd\u91cd\u8907\u7684\u662f\u9ede\u3002\u81f3\u65bc\u5224\u65b7\u662f\u5426\u5b58\u5728 Hamilton Circuit\u3001\u627e\u5230\u4e00\u500b Hamilton Circuit \u662f NP-complete \u554f\u984c\uff0c\u627e\u5230\u4e00\u500b\u6b0a\u91cd\u6700\u5c0f\u7684 Hamilton Circuit \u662f NP-hard \u554f\u984c\uff0c\u76ee\u524d\u5c1a\u672a\u51fa\u73fe\u6709\u6548\u7387\u7684\u6f14\u7b97\u6cd5\u3002 \u7528 DP \u53ef\u4ee5\u505a\u5230 O(2^n\\times n^2) \u7684\u8907\u96dc\u5ea6\u3002","title":"\u54c8\u5bc6\u9813\u554f\u984c"},{"location":"graph/lca/","text":"\u6700\u4f4e\u5171\u540c\u7956\u5148 (Lowest Common Ancestor, LCA) \u5728\u6709\u6839\u6a39\u4e0a\u4efb\u610f\u5169\u9ede u,v \uff0c\u5169\u9ede\u7956\u5148\u4ea4\u96c6\u4e2d\uff0c\u6df1\u5ea6\u6700\u6df1\u7684\u4e00\u500b\u9ede\uff0c\u7a31\u70ba\u5169\u9ede\u7684\u6700\u4f4e\u5171\u540c\u7956\u5148 (LCA)\u3002\u5229\u7528 DFS \u5c0b\u627e\u5169\u9ede\u7684 LCA \u82b1 O(V) \u6642\u9593\u3002\u5982\u679c\u4e00\u6b21\u8981\u5c0b\u627e\u591a\u7d44\u9ede\u5c0d\u7684 LCA\uff0c\u9019\u7a2e\u8fa6\u6cd5\u5c31\u5bb9\u6613\u8d85\u6642\u3002 \u53e6\u4e00\u7a2e\u65b9\u6cd5\u662f\u500d\u589e\u6cd5\uff0c\u5148\u7528\u52d5\u614b\u898f\u5283\u5efa\u8868\uff1a \u72c0\u614b\uff1a par[v][i] \u4ee3\u8868 v \u7684\u7b2c 2^i \u5c64\u7956\u5148\u3002 \u521d\u59cb\u72c0\u614b\uff1a par[v][0]=u , u \u70ba v \u7684\u7236\u7bc0\u9ede\u3002 \u8f49\u79fb\uff1a par[v][i]=par[par[v][i-1]][i-1] \u3002 \u7528 DFS \u7d00\u9304\u9032\u5165\u548c\u96e2\u958b\u7684\u6642\u9593\u6233\u8a18\uff0c\u4e26\u4e14\u7d00\u9304\u6bcf\u500b\u9ede\u7684\u7236\u7bc0\u9ede par[v][0] \u3002\u518d\u8dd1\u5169\u5c64\u8ff4\u5708\u6c42\u51fa\u8f49\u79fb\u5f0f\u7684\u7d50\u679c\uff08\u500d\u589e\u6cd5\uff09\uff0c\u5efa\u8868\u5c31\u5b8c\u6210\u4e86\u3002DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u500d\u589e\u6cd5\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V\\log V) \u3002 \u5efa\u8868\u5b8c\u6210\u5f8c\uff0c\u7531\u65bc\u4efb\u610f\u5169\u9ede u,v \u7684\u5171\u540c\u7956\u5148\u6709\u55ae\u8abf\u6027\uff0c u \u9ede\u7684\u6240\u6709\u7956\u5148\uff0c\u5728 LCA(u,v) \uff08\u5305\u542b\uff09\u4e4b\u4e0a\u7684\u7956\u5148\u662f\u5169\u9ede\u7684\u5171\u540c\u7956\u5148\uff0c\u5269\u4e0b\u7684\u53ea\u662f u \u7684\u7956\u5148\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u679a\u8209 p \u5c0b\u627e LCA(u,v) \uff0c\u5728\u4e8c\u5206\u641c\u904e\u7a0b\uff0c\u6642\u9593\u6233\u8a18\u7528\u65bc\u5224\u65b7 p \u662f\u5426\u70ba v \u7684\u7956\u5148\uff0c\u4e00\u6b21\u67e5\u8a62\u64cd\u4f5c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(\\log V) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const int LOG = 20 ; int par [ N ][ LOG ]; int tin [ N ], tout [ N ]; int timer = 0 ; void dfs ( int v , int p ) { tin [ v ] = ++ timer ; par [ v ][ 0 ] = p ; for ( int it : G [ v ]) { if ( it != p ) dfs ( it , v ); } tout [ v ] = ++ timer ; } void Doubling () { for ( int i = 1 ; i < N ; ++ i ) { for ( int j = 1 ; j < LOG ; ++ j ) { par [ i ][ j ] = par [ par [ i ][ j - 1 ]][ j - 1 ]; } } } bool anc ( int v , int u ) { return tin [ v ] <= tin [ u ] && tout [ u ] <= tout [ v ]; } int LCA ( int v , int u ) { if ( anc ( v , u )) return v ; for ( int j = LOG - 1 ; j >= 0 ; -- j ) { if ( ! anc ( par [ v ][ j ], u )) v = par [ v ][ j ]; } return par [ v ][ 0 ]; } \u627e\u51fa\u6700\u4f4e\u5171\u540c\u7956\u5148\u7684\u7b97\u6cd5\uff0c\u53ef\u63a8\u5ee3\u5230\u627e\u5c0b (u,v) \u8def\u5f91\u4e0a\u7684\u8cc7\u8a0a\uff0c\u4f8b\u5982\uff1a \u8def\u5f91\u9577\u5ea6 \u6700\u5c0f\uff08\u5927\uff09\u6b0a\u91cd\u7684\u908a UVa 11354 - Bond UVa 11354 - Bond \u7d66\u5b9a\u4e00\u5f35\u7121\u5411\u5e36\u6b0a\u5716\uff0c\u6709\u591a\u7b46\u8a62\u554f\uff0c\u8a62\u554f (u,v) \u4e4b\u9593\u7684\u8def\u5f91\u6700\u5927\u6b0a\u91cd\u908a\u6b0a\u503c\u6700\u5c0f\u70ba\u4f55\u3002 \u4e5f\u5c31\u662f\u8a62\u554f\u6700\u5c0f\u74f6\u9838\u6a39\u4e2d\uff0c (u,v) \u4e4b\u9593\u7684\u8def\u5f91\u6700\u5927\u908a\u91cd\u6b0a\u70ba\u4f55\u3002 \u9019\u984c\u8981\u5148\u5229\u7528 Krusal \u6c42\u51fa\u6700\u5c0f\u74f6\u9838\u6a39\uff0c\u63a5\u8457\u5229\u7528 LCA \u6c42\u51fa\u6bcf\u500b\u9ede u \u5230\u5b83\u7684\u7b2c 2^i \u5c64\u7956\u5148\u7684\u8def\u5f91\u4e2d\u7684\u6700\u5927\u908a\u91cd\u6b0a\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <bits/stdc++.h> using namespace std ; const int N = 50010 ; const int INF = 1e9 ; const int LOG = 25 ; struct Edge { int s , t , w ; Edge (){}; Edge ( int _s , int _t , int _w ) : s ( _s ), t ( _t ), w ( _w ) {} bool operator < ( const Edge & rhs ) const { return w < rhs . w ; } }; int n , m , djs [ N ], depth [ N ], par [ N ][ LOG ], maxcost [ N ][ LOG ]; vector < Edge > edges ; vector < int > G [ N ]; int query ( int x ) { return ( x == djs [ x ] ? x : djs [ x ] = query ( djs [ x ])); } void init () { memset ( par , -1 , sizeof ( par )); memset ( maxcost , -1 , sizeof ( maxcost )); edges . clear (); for ( int i = 0 ; i < N ; i ++ ) { djs [ i ] = i ; G [ i ]. clear (); } } void MST () { for ( int i = 0 ; i < m ; i ++ ) { int fa = query ( edges [ i ]. s ), fb = query ( edges [ i ]. t ); if ( fa != fb ) { djs [ fa ] = fb ; G [ edges [ i ]. s ]. push_back ( i ); G [ edges [ i ]. t ]. push_back ( i ); } } } void dfs ( int s , int f ) { depth [ s ] = depth [ f ] + 1 ; par [ s ][ 0 ] = f ; for ( auto i : G [ s ]) { int t = edges [ i ]. s ^ edges [ i ]. t ^ s ; if ( t != f ) { maxcost [ t ][ 0 ] = edges [ i ]. w ; dfs ( t , s ); } } } void preprocess () { for ( int i = 1 ; i <= LOG ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( par [ j ][ i - 1 ] == -1 || par [ par [ j ][ i - 1 ]][ i - 1 ] == -1 ) continue ; par [ j ][ i ] = par [ par [ j ][ i - 1 ]][ i - 1 ]; maxcost [ j ][ i ] = max ( maxcost [ j ][ i - 1 ], maxcost [ par [ j ][ i - 1 ]][ i - 1 ]); } } } int solve ( int p , int q ) { if ( depth [ p ] < depth [ q ]) swap ( p , q ); int hibit , ans = - INF ; for ( hibit = 1 ; ( 1 << hibit ) <= depth [ p ]; ++ hibit ) ; for ( int i = hibit - 1 ; i >= 0 ; i -- ) { if ( depth [ p ] - ( 1 << i ) >= depth [ q ]) { ans = max ( ans , maxcost [ p ][ i ]); p = par [ p ][ i ]; } } if ( p == q ) { return ans ; } for ( int i = hibit - 1 ; i >= 0 ; i -- ) { if ( par [ p ][ i ] == -1 || par [ p ][ i ] == par [ q ][ i ]) continue ; ans = max ({ ans , maxcost [ p ][ i ], maxcost [ q ][ i ]}); p = par [ p ][ i ]; q = par [ q ][ i ]; } return max ({ ans , maxcost [ p ][ 0 ], maxcost [ q ][ 0 ]}); } int main () { for ( int ti = 0 ; cin >> n >> m ; ++ ti ) { if ( ti ) cout << '\\n' ; init (); for ( int i = 0 ; i < m ; i ++ ) { int s , t , w ; cin >> s >> t >> w ; edges . emplace_back ( s , t , w ); } sort ( edges . begin (), edges . end ()); MST (); dfs ( 1 , -1 ); preprocess (); int q ; cin >> q ; for ( int i = 0 ; i < q ; i ++ ) { int x , y ; cin >> x >> y ; cout << solve ( x , y ) << '\\n' ; } } }","title":"\u6700\u4f4e\u5171\u540c\u7956\u5148"},{"location":"graph/lca/#lowest-common-ancestor-lca","text":"\u5728\u6709\u6839\u6a39\u4e0a\u4efb\u610f\u5169\u9ede u,v \uff0c\u5169\u9ede\u7956\u5148\u4ea4\u96c6\u4e2d\uff0c\u6df1\u5ea6\u6700\u6df1\u7684\u4e00\u500b\u9ede\uff0c\u7a31\u70ba\u5169\u9ede\u7684\u6700\u4f4e\u5171\u540c\u7956\u5148 (LCA)\u3002\u5229\u7528 DFS \u5c0b\u627e\u5169\u9ede\u7684 LCA \u82b1 O(V) \u6642\u9593\u3002\u5982\u679c\u4e00\u6b21\u8981\u5c0b\u627e\u591a\u7d44\u9ede\u5c0d\u7684 LCA\uff0c\u9019\u7a2e\u8fa6\u6cd5\u5c31\u5bb9\u6613\u8d85\u6642\u3002 \u53e6\u4e00\u7a2e\u65b9\u6cd5\u662f\u500d\u589e\u6cd5\uff0c\u5148\u7528\u52d5\u614b\u898f\u5283\u5efa\u8868\uff1a \u72c0\u614b\uff1a par[v][i] \u4ee3\u8868 v \u7684\u7b2c 2^i \u5c64\u7956\u5148\u3002 \u521d\u59cb\u72c0\u614b\uff1a par[v][0]=u , u \u70ba v \u7684\u7236\u7bc0\u9ede\u3002 \u8f49\u79fb\uff1a par[v][i]=par[par[v][i-1]][i-1] \u3002 \u7528 DFS \u7d00\u9304\u9032\u5165\u548c\u96e2\u958b\u7684\u6642\u9593\u6233\u8a18\uff0c\u4e26\u4e14\u7d00\u9304\u6bcf\u500b\u9ede\u7684\u7236\u7bc0\u9ede par[v][0] \u3002\u518d\u8dd1\u5169\u5c64\u8ff4\u5708\u6c42\u51fa\u8f49\u79fb\u5f0f\u7684\u7d50\u679c\uff08\u500d\u589e\u6cd5\uff09\uff0c\u5efa\u8868\u5c31\u5b8c\u6210\u4e86\u3002DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u500d\u589e\u6cd5\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(V\\log V) \u3002 \u5efa\u8868\u5b8c\u6210\u5f8c\uff0c\u7531\u65bc\u4efb\u610f\u5169\u9ede u,v \u7684\u5171\u540c\u7956\u5148\u6709\u55ae\u8abf\u6027\uff0c u \u9ede\u7684\u6240\u6709\u7956\u5148\uff0c\u5728 LCA(u,v) \uff08\u5305\u542b\uff09\u4e4b\u4e0a\u7684\u7956\u5148\u662f\u5169\u9ede\u7684\u5171\u540c\u7956\u5148\uff0c\u5269\u4e0b\u7684\u53ea\u662f u \u7684\u7956\u5148\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u679a\u8209 p \u5c0b\u627e LCA(u,v) \uff0c\u5728\u4e8c\u5206\u641c\u904e\u7a0b\uff0c\u6642\u9593\u6233\u8a18\u7528\u65bc\u5224\u65b7 p \u662f\u5426\u70ba v \u7684\u7956\u5148\uff0c\u4e00\u6b21\u67e5\u8a62\u64cd\u4f5c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(\\log V) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const int LOG = 20 ; int par [ N ][ LOG ]; int tin [ N ], tout [ N ]; int timer = 0 ; void dfs ( int v , int p ) { tin [ v ] = ++ timer ; par [ v ][ 0 ] = p ; for ( int it : G [ v ]) { if ( it != p ) dfs ( it , v ); } tout [ v ] = ++ timer ; } void Doubling () { for ( int i = 1 ; i < N ; ++ i ) { for ( int j = 1 ; j < LOG ; ++ j ) { par [ i ][ j ] = par [ par [ i ][ j - 1 ]][ j - 1 ]; } } } bool anc ( int v , int u ) { return tin [ v ] <= tin [ u ] && tout [ u ] <= tout [ v ]; } int LCA ( int v , int u ) { if ( anc ( v , u )) return v ; for ( int j = LOG - 1 ; j >= 0 ; -- j ) { if ( ! anc ( par [ v ][ j ], u )) v = par [ v ][ j ]; } return par [ v ][ 0 ]; } \u627e\u51fa\u6700\u4f4e\u5171\u540c\u7956\u5148\u7684\u7b97\u6cd5\uff0c\u53ef\u63a8\u5ee3\u5230\u627e\u5c0b (u,v) \u8def\u5f91\u4e0a\u7684\u8cc7\u8a0a\uff0c\u4f8b\u5982\uff1a \u8def\u5f91\u9577\u5ea6 \u6700\u5c0f\uff08\u5927\uff09\u6b0a\u91cd\u7684\u908a","title":"\u6700\u4f4e\u5171\u540c\u7956\u5148 (Lowest Common Ancestor, LCA)"},{"location":"graph/lca/#uva-11354-bond","text":"UVa 11354 - Bond \u7d66\u5b9a\u4e00\u5f35\u7121\u5411\u5e36\u6b0a\u5716\uff0c\u6709\u591a\u7b46\u8a62\u554f\uff0c\u8a62\u554f (u,v) \u4e4b\u9593\u7684\u8def\u5f91\u6700\u5927\u6b0a\u91cd\u908a\u6b0a\u503c\u6700\u5c0f\u70ba\u4f55\u3002 \u4e5f\u5c31\u662f\u8a62\u554f\u6700\u5c0f\u74f6\u9838\u6a39\u4e2d\uff0c (u,v) \u4e4b\u9593\u7684\u8def\u5f91\u6700\u5927\u908a\u91cd\u6b0a\u70ba\u4f55\u3002 \u9019\u984c\u8981\u5148\u5229\u7528 Krusal \u6c42\u51fa\u6700\u5c0f\u74f6\u9838\u6a39\uff0c\u63a5\u8457\u5229\u7528 LCA \u6c42\u51fa\u6bcf\u500b\u9ede u \u5230\u5b83\u7684\u7b2c 2^i \u5c64\u7956\u5148\u7684\u8def\u5f91\u4e2d\u7684\u6700\u5927\u908a\u91cd\u6b0a\u3002 \u53c3\u8003\u7a0b\u5f0f\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <bits/stdc++.h> using namespace std ; const int N = 50010 ; const int INF = 1e9 ; const int LOG = 25 ; struct Edge { int s , t , w ; Edge (){}; Edge ( int _s , int _t , int _w ) : s ( _s ), t ( _t ), w ( _w ) {} bool operator < ( const Edge & rhs ) const { return w < rhs . w ; } }; int n , m , djs [ N ], depth [ N ], par [ N ][ LOG ], maxcost [ N ][ LOG ]; vector < Edge > edges ; vector < int > G [ N ]; int query ( int x ) { return ( x == djs [ x ] ? x : djs [ x ] = query ( djs [ x ])); } void init () { memset ( par , -1 , sizeof ( par )); memset ( maxcost , -1 , sizeof ( maxcost )); edges . clear (); for ( int i = 0 ; i < N ; i ++ ) { djs [ i ] = i ; G [ i ]. clear (); } } void MST () { for ( int i = 0 ; i < m ; i ++ ) { int fa = query ( edges [ i ]. s ), fb = query ( edges [ i ]. t ); if ( fa != fb ) { djs [ fa ] = fb ; G [ edges [ i ]. s ]. push_back ( i ); G [ edges [ i ]. t ]. push_back ( i ); } } } void dfs ( int s , int f ) { depth [ s ] = depth [ f ] + 1 ; par [ s ][ 0 ] = f ; for ( auto i : G [ s ]) { int t = edges [ i ]. s ^ edges [ i ]. t ^ s ; if ( t != f ) { maxcost [ t ][ 0 ] = edges [ i ]. w ; dfs ( t , s ); } } } void preprocess () { for ( int i = 1 ; i <= LOG ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( par [ j ][ i - 1 ] == -1 || par [ par [ j ][ i - 1 ]][ i - 1 ] == -1 ) continue ; par [ j ][ i ] = par [ par [ j ][ i - 1 ]][ i - 1 ]; maxcost [ j ][ i ] = max ( maxcost [ j ][ i - 1 ], maxcost [ par [ j ][ i - 1 ]][ i - 1 ]); } } } int solve ( int p , int q ) { if ( depth [ p ] < depth [ q ]) swap ( p , q ); int hibit , ans = - INF ; for ( hibit = 1 ; ( 1 << hibit ) <= depth [ p ]; ++ hibit ) ; for ( int i = hibit - 1 ; i >= 0 ; i -- ) { if ( depth [ p ] - ( 1 << i ) >= depth [ q ]) { ans = max ( ans , maxcost [ p ][ i ]); p = par [ p ][ i ]; } } if ( p == q ) { return ans ; } for ( int i = hibit - 1 ; i >= 0 ; i -- ) { if ( par [ p ][ i ] == -1 || par [ p ][ i ] == par [ q ][ i ]) continue ; ans = max ({ ans , maxcost [ p ][ i ], maxcost [ q ][ i ]}); p = par [ p ][ i ]; q = par [ q ][ i ]; } return max ({ ans , maxcost [ p ][ 0 ], maxcost [ q ][ 0 ]}); } int main () { for ( int ti = 0 ; cin >> n >> m ; ++ ti ) { if ( ti ) cout << '\\n' ; init (); for ( int i = 0 ; i < m ; i ++ ) { int s , t , w ; cin >> s >> t >> w ; edges . emplace_back ( s , t , w ); } sort ( edges . begin (), edges . end ()); MST (); dfs ( 1 , -1 ); preprocess (); int q ; cin >> q ; for ( int i = 0 ; i < q ; i ++ ) { int x , y ; cin >> x >> y ; cout << solve ( x , y ) << '\\n' ; } } }","title":"UVa 11354 - Bond"},{"location":"graph/mst/","text":"\u6700\u5c0f\u751f\u6210\u6a39\uff08Minimun Spanning Tree, MST) \u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5982\u679c\u6709\u5b50\u5716\u525b\u597d\u70ba\u4e5f\u70ba\u4e00\u9846\u6a39\uff0c\u6211\u5011\u5c31\u7a31\u8a72\u5b50\u5716\u70ba\u751f\u6210\u6a39\u3002\u73fe\u5728\u6211\u5011\u5728\u5716\u4e0a\u52a0\u4e0a\u6b0a\u91cd\uff0c\u800c\u5728\u6240\u6709\u7684\u751f\u6210\u6a39\u4e2d\uff0c\u6b0a\u91cd\u7e3d\u548c\u6700\u5c0f\u7684\uff0c\u6211\u5011\u7a31\u70ba \"\u6700\u5c0f\u751f\u6210\u6a39\"\uff0c\u6700\u5c0f\u751f\u6210\u6a39\u4e26\u4e0d\u552f\u4e00\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5e7e\u7a2e\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6f14\u7b97\u6cd5\u3002 Kruskal\u2019s algorithm Kruskal\u2019s algorithm \u7684\u6982\u5ff5\u662f\uff0c\u5408\u4f75\u5169\u9846 MST \u7684\u6642\u5019\uff0c\u52a0\u5165\u9023\u63a5\u5169\u9846\u6a39\u4e2d\uff0c\u6700\u5c0f\u6b0a\u91cd\u7684\u908a\u3002\u6240\u4ee5\u6211\u5011\u5c31\u5229\u7528 greedy\uff0c\u5c07\u908a\u4f9d\u6b0a\u91cd\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u908a\u7684\u5169\u908a\u662f\u5728\u4e0d\u540c\u7684 MST\uff0c\u6211\u5011\u5c31\u628a\u5408\u4f75\uff08\u4e26\u67e5\u96c6\u61c9\u7528\u65bc\u6b64\uff09\uff0c\u53cd\u4e4b\u5c31\u8df3\u904e\u3002 \u6392\u5e8f\u9700\u82b1 O(E\\log E) \u7684\u6642\u9593\uff0c\u9078\u908a\u9700\u8981\u82b1 O(E\\alpha(V)) \u7684\u6642\u9593\uff0c\u7e3d\u5171\u6642\u9593\u8907\u96dc\u5ea6 O(E(\\log E+\\alpha(V))) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct Edge { int s , t , w ; bool operaotr < ( const Edge & rhs ) const { return w < rhs . w ; } }; void kruskal () { int cost = 0 ; vector < Edge > E ; init (); for ( auto it : E ) { it . s = Find ( it . s ); it . t = Find ( it . t ); if ( it . s == it . t ) continue ; cost += it . w ; Union ( it . s , it . t ); } } Prim\u2019s algorithm Prim\u2019s algorithm \u7684\u601d\u7dad\u5247\u662f\uff0c\u5c07\u4e00\u68f5 MST \u9023\u51fa\u7684\u908a\u4e2d\uff0c\u52a0\u5165\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff08\u8ddd\u96e2\u6700\u8fd1\u7684\u9ede\uff09\uff0c\u91cd\u8907\u57f7\u884c\u5f8c\u5f97\u51fa\u6700\u5c0f\u7684\u751f\u6210\u6a39\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9996\u5148\u53d6\u4e00\u500b\u9ede\u7576 MST\uff0c\u66f4\u65b0\u6240\u6709\u8207\u5b83\u76f8\u9130\u7684\u9ede\uff0c\u66f4\u65b0\u5f8c\u628a\u8ddd\u96e2\u6700\u5c0f\u7684\u9ede\u52a0\u5165 MST\uff08\u4e0d\u7528\u4e26\u67e5\u96c6\uff09\uff0c\u6301\u7e8c\u57f7\u884c\u66f4\u65b0\u53ca\u52a0\u5165\u9ede\u7684\u52d5\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u5df2\u52a0\u5165 MST\u3002\u7dad\u8b77\u6700\u5c0f\u8ddd\u96e2\u7528 priority_queue \u7dad\u8b77\uff0c\u6bcf\u500b\u9ede\u53ea\u6703\u88ab\u5408\u4f75\u4e00\u6b21\uff0c\u6bcf\u689d\u908a\u90fd\u53ea\u6703\u904d\u6b77\u4e00\u6b21\uff0c\u8907\u96dc\u5ea6 O((V+E)logE) \u3002\u53e6\u5916\u6709\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff08fibonacci heap\uff09\u53ef\u4ee5\u9054\u5230 O(E+V\\log V) \u3002\u4f46\u662f\u56e0\u70ba\u5b83\u5e38\u6578\u6bd4\u8f03\u5927\uff0c\u5be6\u4f5c\u8907\u96dc\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u5b83\u3002\u7e3d\u9ad4\u800c\u8a00\uff0cKruskal \u6bd4 Prim \u597d\u7528\u3002 Bor\u016fvka\u2019s algorithm Bor\u016fvka\u2019s algorithm \u548c Prim \u4e00\u6a23\u90fd\u5728\u52a0\u5165 MST \u548c\u6700\u9130\u8fd1\u7684\u9ede\uff0c\u4e0d\u4e00\u6a23\u7684\u662f\uff0c\u5b83\u8b93\u6240\u6709\u7684 MST \u4e00\u8d77\u505a\u9019\u4ef6\u4e8b\u3002\u6bcf\u6b21\u627e\u51fa\u6bcf\u68f5 MST \u5916\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u52a0\u5165 MST\uff08\u5982\u679c\u6b0a\u91cd\u4e00\u6a23\uff0c\u5c31\u627e\u7d22\u5f15\u503c\u6700\u5c0f\u7684\uff09\uff0c\u6aa2\u67e5\u662f\u5426\u53ea\u5269\u4e00\u68f5 MST\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u91cd\u8907\u6383\u63cf\u7684\u52d5\u4f5c\uff0c\u9019\u88e1\u4e00\u6a23\u7528\u4e26\u67e5\u96c6\u7dad\u8b77\u806f\u901a\u6027\u3002\\\u6700\u5dee\u7684\u60c5\u6cc1\u70ba\u6bcf\u6b21\u90fd\u525b\u597d\u5169\u5169\u6210\u5c0d\u5408\u4f75\uff0c\u9019\u6a23\u6700\u591a\u53ea\u6703\u57f7\u884c \\log V \u6b21\uff0c\u6574\u984c\u8907\u96dc\u5ea6\u70ba O((V+E)\\log V) )\u3002\u671f\u671b\u8907\u96dc\u5ea6\u53ef\u4ee5\u9054\u5230 O((V+E)) \uff08\u56e0\u70ba\u6bcf\u6b21\u4e26\u67e5\u96c6\u90fd\u6703\u88ab\u5408\u4f75 + \u67e5\u8a62\uff0c\u6240\u4ee5 \\alpha \u53ef\u4ee5\u5b8c\u5168\u7701\u7565\uff09\u3002 \u6700\u5c0f\u74f6\u9838\u6a39 \u6700\u5c0f\u74f6\u9838\u6a39 \u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u4e00\u9846\u751f\u6210\u6a39\uff0c\u6a39\u7684\u6700\u5927\u908a\u6b0a\u503c\u6700\u5c0f\u3002 \u6700\u5c0f\u751f\u6210\u6a39\u5fc5\u5b9a\u662f\u4e00\u9846\u6700\u5c0f\u74f6\u9838\u6a39\uff08\u4f46\u6700\u5c0f\u74f6\u9838\u6a39\u4e0d\u4e00\u5b9a\u662f\u4e00\u9846\u6700\u5c0f\u751f\u6210\u6a39\uff09\uff0c\u56e0\u6b64\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6a39\u5373\u70ba\u7b54\u6848\u3002 \u4f8b\u984c\u7df4\u7fd2 UVa 12176 - Bring Your Own Horse UVa 01234 - RACING \u6700\u5c0f\u74f6\u9838\u6a39 UVa 01395 - Slim Span","title":"\u6700\u5c0f\u751f\u6210\u6a39"},{"location":"graph/mst/#minimun-spanning-tree-mst","text":"\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5982\u679c\u6709\u5b50\u5716\u525b\u597d\u70ba\u4e5f\u70ba\u4e00\u9846\u6a39\uff0c\u6211\u5011\u5c31\u7a31\u8a72\u5b50\u5716\u70ba\u751f\u6210\u6a39\u3002\u73fe\u5728\u6211\u5011\u5728\u5716\u4e0a\u52a0\u4e0a\u6b0a\u91cd\uff0c\u800c\u5728\u6240\u6709\u7684\u751f\u6210\u6a39\u4e2d\uff0c\u6b0a\u91cd\u7e3d\u548c\u6700\u5c0f\u7684\uff0c\u6211\u5011\u7a31\u70ba \"\u6700\u5c0f\u751f\u6210\u6a39\"\uff0c\u6700\u5c0f\u751f\u6210\u6a39\u4e26\u4e0d\u552f\u4e00\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5e7e\u7a2e\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6f14\u7b97\u6cd5\u3002","title":"\u6700\u5c0f\u751f\u6210\u6a39\uff08Minimun Spanning Tree, MST)"},{"location":"graph/mst/#kruskals-algorithm","text":"Kruskal\u2019s algorithm \u7684\u6982\u5ff5\u662f\uff0c\u5408\u4f75\u5169\u9846 MST \u7684\u6642\u5019\uff0c\u52a0\u5165\u9023\u63a5\u5169\u9846\u6a39\u4e2d\uff0c\u6700\u5c0f\u6b0a\u91cd\u7684\u908a\u3002\u6240\u4ee5\u6211\u5011\u5c31\u5229\u7528 greedy\uff0c\u5c07\u908a\u4f9d\u6b0a\u91cd\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u908a\u7684\u5169\u908a\u662f\u5728\u4e0d\u540c\u7684 MST\uff0c\u6211\u5011\u5c31\u628a\u5408\u4f75\uff08\u4e26\u67e5\u96c6\u61c9\u7528\u65bc\u6b64\uff09\uff0c\u53cd\u4e4b\u5c31\u8df3\u904e\u3002 \u6392\u5e8f\u9700\u82b1 O(E\\log E) \u7684\u6642\u9593\uff0c\u9078\u908a\u9700\u8981\u82b1 O(E\\alpha(V)) \u7684\u6642\u9593\uff0c\u7e3d\u5171\u6642\u9593\u8907\u96dc\u5ea6 O(E(\\log E+\\alpha(V))) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct Edge { int s , t , w ; bool operaotr < ( const Edge & rhs ) const { return w < rhs . w ; } }; void kruskal () { int cost = 0 ; vector < Edge > E ; init (); for ( auto it : E ) { it . s = Find ( it . s ); it . t = Find ( it . t ); if ( it . s == it . t ) continue ; cost += it . w ; Union ( it . s , it . t ); } }","title":"Kruskal\u2019s algorithm"},{"location":"graph/mst/#prims-algorithm","text":"Prim\u2019s algorithm \u7684\u601d\u7dad\u5247\u662f\uff0c\u5c07\u4e00\u68f5 MST \u9023\u51fa\u7684\u908a\u4e2d\uff0c\u52a0\u5165\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff08\u8ddd\u96e2\u6700\u8fd1\u7684\u9ede\uff09\uff0c\u91cd\u8907\u57f7\u884c\u5f8c\u5f97\u51fa\u6700\u5c0f\u7684\u751f\u6210\u6a39\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9996\u5148\u53d6\u4e00\u500b\u9ede\u7576 MST\uff0c\u66f4\u65b0\u6240\u6709\u8207\u5b83\u76f8\u9130\u7684\u9ede\uff0c\u66f4\u65b0\u5f8c\u628a\u8ddd\u96e2\u6700\u5c0f\u7684\u9ede\u52a0\u5165 MST\uff08\u4e0d\u7528\u4e26\u67e5\u96c6\uff09\uff0c\u6301\u7e8c\u57f7\u884c\u66f4\u65b0\u53ca\u52a0\u5165\u9ede\u7684\u52d5\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u5df2\u52a0\u5165 MST\u3002\u7dad\u8b77\u6700\u5c0f\u8ddd\u96e2\u7528 priority_queue \u7dad\u8b77\uff0c\u6bcf\u500b\u9ede\u53ea\u6703\u88ab\u5408\u4f75\u4e00\u6b21\uff0c\u6bcf\u689d\u908a\u90fd\u53ea\u6703\u904d\u6b77\u4e00\u6b21\uff0c\u8907\u96dc\u5ea6 O((V+E)logE) \u3002\u53e6\u5916\u6709\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff08fibonacci heap\uff09\u53ef\u4ee5\u9054\u5230 O(E+V\\log V) \u3002\u4f46\u662f\u56e0\u70ba\u5b83\u5e38\u6578\u6bd4\u8f03\u5927\uff0c\u5be6\u4f5c\u8907\u96dc\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u5b83\u3002\u7e3d\u9ad4\u800c\u8a00\uff0cKruskal \u6bd4 Prim \u597d\u7528\u3002","title":"Prim\u2019s algorithm"},{"location":"graph/mst/#boruvkas-algorithm","text":"Bor\u016fvka\u2019s algorithm \u548c Prim \u4e00\u6a23\u90fd\u5728\u52a0\u5165 MST \u548c\u6700\u9130\u8fd1\u7684\u9ede\uff0c\u4e0d\u4e00\u6a23\u7684\u662f\uff0c\u5b83\u8b93\u6240\u6709\u7684 MST \u4e00\u8d77\u505a\u9019\u4ef6\u4e8b\u3002\u6bcf\u6b21\u627e\u51fa\u6bcf\u68f5 MST \u5916\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u52a0\u5165 MST\uff08\u5982\u679c\u6b0a\u91cd\u4e00\u6a23\uff0c\u5c31\u627e\u7d22\u5f15\u503c\u6700\u5c0f\u7684\uff09\uff0c\u6aa2\u67e5\u662f\u5426\u53ea\u5269\u4e00\u68f5 MST\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u91cd\u8907\u6383\u63cf\u7684\u52d5\u4f5c\uff0c\u9019\u88e1\u4e00\u6a23\u7528\u4e26\u67e5\u96c6\u7dad\u8b77\u806f\u901a\u6027\u3002\\\u6700\u5dee\u7684\u60c5\u6cc1\u70ba\u6bcf\u6b21\u90fd\u525b\u597d\u5169\u5169\u6210\u5c0d\u5408\u4f75\uff0c\u9019\u6a23\u6700\u591a\u53ea\u6703\u57f7\u884c \\log V \u6b21\uff0c\u6574\u984c\u8907\u96dc\u5ea6\u70ba O((V+E)\\log V) )\u3002\u671f\u671b\u8907\u96dc\u5ea6\u53ef\u4ee5\u9054\u5230 O((V+E)) \uff08\u56e0\u70ba\u6bcf\u6b21\u4e26\u67e5\u96c6\u90fd\u6703\u88ab\u5408\u4f75 + \u67e5\u8a62\uff0c\u6240\u4ee5 \\alpha \u53ef\u4ee5\u5b8c\u5168\u7701\u7565\uff09\u3002","title":"Bor\u016fvka\u2019s algorithm"},{"location":"graph/mst/#_1","text":"\u6700\u5c0f\u74f6\u9838\u6a39 \u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u4e00\u9846\u751f\u6210\u6a39\uff0c\u6a39\u7684\u6700\u5927\u908a\u6b0a\u503c\u6700\u5c0f\u3002 \u6700\u5c0f\u751f\u6210\u6a39\u5fc5\u5b9a\u662f\u4e00\u9846\u6700\u5c0f\u74f6\u9838\u6a39\uff08\u4f46\u6700\u5c0f\u74f6\u9838\u6a39\u4e0d\u4e00\u5b9a\u662f\u4e00\u9846\u6700\u5c0f\u751f\u6210\u6a39\uff09\uff0c\u56e0\u6b64\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6a39\u5373\u70ba\u7b54\u6848\u3002","title":"\u6700\u5c0f\u74f6\u9838\u6a39"},{"location":"graph/mst/#_2","text":"UVa 12176 - Bring Your Own Horse UVa 01234 - RACING \u6700\u5c0f\u74f6\u9838\u6a39 UVa 01395 - Slim Span","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/save/","text":"\u81f3\u65bc\u5716\u8981\u600e\u9ebc\u5b58\u8d77\u4f86\u5462\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5169\u7a2e\u8fa6\u6cd5\u3002 \u76f8\u9130\u77e9\u9663 (Adjacency Matrix) \u958b\u4e00\u500b V\\times V \u7684\u8cc7\u6599\u7d50\u69cb M \uff08\u901a\u5e38\u6703\u7528\u4e8c\u7dad\u9663\u5217\uff09\uff0c M[a][b] \u4ee3\u8868\u7684\u662f\u9ede a \u81f3 b \u7684\u908a\u6578\u6216\u6b0a\u91cd\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V^2) \u3002\u52a0\u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3002 \u76f8\u9130\u4e32\u5217 (Adjacency List) \u958b V \u500b\u53ef\u8b8a\u9577\u5ea6\u7684\u8cc7\u6599\u7d50\u69cb\uff08\u901a\u5e38\u5728 C++ \u7528 vector \u3001\u5728 C \u7528 linked list), \u7b2c i \u500b\u88e1\u9762\u653e\u6240\u6709\u7b2c i \u500b\u9ede\u6307\u5411\u7684\u9ede\u7684\u7de8\u865f\uff08\u548c\u908a\u6b0a\u6216\u5176\u4ed6\u908a\u7684\u8cc7\u8a0a\uff09\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V+E) , \u52a0\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(V) \u3002 \u4f8b\u984c Zerojudge f668 Adjacency Matrix \u548c Adjacency List \u7df4\u7fd2 \u7b2c\u4e00\u884c\u7d66\u5b9a\u5169\u500b\u6578\u5b57 N, M(0\\leq N \\leq 10, 0\\leq M \\leq \\frac{N(N-1)}{2}) \uff0c\u8868\u793a\u6709 N \u500b\u9ede\u548c M \u689d\u908a\uff0c\u7b2c 2 \u5230 M+1 \u884c\uff0c\u6bcf\u884c\u6709\u5169\u500b\u6578\u5b57 s_i, t_i \uff0c\u4ee3\u8868 s_i \u548c t_i \u4e4b\u9593\u6709\u4e00\u689d\u908a\uff0c\u6b64\u5716\u70ba\u7121\u5411\u7c21\u55ae\u5716(\u7c21\u55ae\u5716\uff1a\u7121\u81ea\u74b0\u3001\u7121\u91cd\u908a\u7684\u9023\u901a\u5716) \u8acb\u8f38\u51fa\u6bcf\u500b\u9ede\u7684\u76f8\u9130\u9ede \u53c3\u8003\u7a0b\u5f0f\u78bc \u7bc4\u4f8b1 (Adjacency Matrix) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bitset> #include <iostream> using namespace std ; int adj [ 105 ][ 105 ]; int main () { int n , m ; cin >> n >> m ; for ( int i = 0 ; i < m ; ++ i ) { int x , y ; cin >> x >> y ; adj [ x ][ y ] = adj [ y ][ x ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) { cout << i << ':' ; for ( int j = 1 ; j <= n ; ++ j ) { if ( adj [ i ][ j ]) { cout << ' ' << j ; } } cout << '\\n' ; } } \u7bc4\u4f8b2 (Adjacency List) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <algorithm> #include <iostream> #include <vector> using namespace std ; int main () { int n , m ; vector < int > G [ 105 ]; cin >> n >> m ; for ( int i = 0 ; i < m ; ++ i ) { int x , y ; cin >> x >> y ; G [ x ]. emplace_back ( y ); G [ y ]. emplace_back ( x ); } for ( int i = 1 ; i <= n ; ++ i ) { cout << i << ':' ; sort ( G [ i ]. begin (), G [ i ]. end ()); for ( int j = 0 ; j != ( int ) G [ i ]. size (); ++ j ) { cout << ' ' << G [ i ][ j ]; } cout << '\\n' ; } } 1 2 3 == = \"\u7bc4\u4f8b3 (Adjacency Matrix)\" ```cpp include include include 1 using namespace std; int main() { int n, m; vector G[105]; cin >> n >> m; for (int i = 0; i < m; ++i) { int x, y; cin >> x >> y; G[x].emplace_back(y); G[y].emplace_back(x); } for (int i = 1; i <= n; ++i) { cout << i << ':'; sort(G[i].begin(), G[i].end()); / for(int j = 0; j != (int)G[i].size(); ++j) { int v = G[i][j]; cout << ' ' << v; } / for (auto v : G[i]) { cout << ' ' << v; } cout << '\\n'; } } ``` \u4f7f\u7528\u6642\u6a5f Adjacency Matrix \u5be6\u4f5c\u8f03\u7c21\u55ae\uff0c\u5728\u9ede\u6578\u5c0f\u7684\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\uff08\u5927\u7d04\u5728 1000 \u5de6\u53f3\uff09\u3002\u5176\u9918\u60c5\u6cc1\u9700\u4f7f\u7528 Adjacency List\uff0c\u5426\u5247\u6703\u5c0e\u81f4\u8a18\u61b6\u9ad4\u904e\u5927\u3002","title":"\u5716\u7684\u5132\u5b58"},{"location":"graph/save/#adjacency-matrix","text":"\u958b\u4e00\u500b V\\times V \u7684\u8cc7\u6599\u7d50\u69cb M \uff08\u901a\u5e38\u6703\u7528\u4e8c\u7dad\u9663\u5217\uff09\uff0c M[a][b] \u4ee3\u8868\u7684\u662f\u9ede a \u81f3 b \u7684\u908a\u6578\u6216\u6b0a\u91cd\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V^2) \u3002\u52a0\u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3002","title":"\u76f8\u9130\u77e9\u9663 (Adjacency Matrix)"},{"location":"graph/save/#adjacency-list","text":"\u958b V \u500b\u53ef\u8b8a\u9577\u5ea6\u7684\u8cc7\u6599\u7d50\u69cb\uff08\u901a\u5e38\u5728 C++ \u7528 vector \u3001\u5728 C \u7528 linked list), \u7b2c i \u500b\u88e1\u9762\u653e\u6240\u6709\u7b2c i \u500b\u9ede\u6307\u5411\u7684\u9ede\u7684\u7de8\u865f\uff08\u548c\u908a\u6b0a\u6216\u5176\u4ed6\u908a\u7684\u8cc7\u8a0a\uff09\u3002\u7a7a\u9593\u8907\u96dc\u5ea6 O(V+E) , \u52a0\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(1) \u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6 O(V) \u3002","title":"\u76f8\u9130\u4e32\u5217 (Adjacency List)"},{"location":"graph/save/#_1","text":"Zerojudge f668 Adjacency Matrix \u548c Adjacency List \u7df4\u7fd2 \u7b2c\u4e00\u884c\u7d66\u5b9a\u5169\u500b\u6578\u5b57 N, M(0\\leq N \\leq 10, 0\\leq M \\leq \\frac{N(N-1)}{2}) \uff0c\u8868\u793a\u6709 N \u500b\u9ede\u548c M \u689d\u908a\uff0c\u7b2c 2 \u5230 M+1 \u884c\uff0c\u6bcf\u884c\u6709\u5169\u500b\u6578\u5b57 s_i, t_i \uff0c\u4ee3\u8868 s_i \u548c t_i \u4e4b\u9593\u6709\u4e00\u689d\u908a\uff0c\u6b64\u5716\u70ba\u7121\u5411\u7c21\u55ae\u5716(\u7c21\u55ae\u5716\uff1a\u7121\u81ea\u74b0\u3001\u7121\u91cd\u908a\u7684\u9023\u901a\u5716) \u8acb\u8f38\u51fa\u6bcf\u500b\u9ede\u7684\u76f8\u9130\u9ede \u53c3\u8003\u7a0b\u5f0f\u78bc \u7bc4\u4f8b1 (Adjacency Matrix) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bitset> #include <iostream> using namespace std ; int adj [ 105 ][ 105 ]; int main () { int n , m ; cin >> n >> m ; for ( int i = 0 ; i < m ; ++ i ) { int x , y ; cin >> x >> y ; adj [ x ][ y ] = adj [ y ][ x ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) { cout << i << ':' ; for ( int j = 1 ; j <= n ; ++ j ) { if ( adj [ i ][ j ]) { cout << ' ' << j ; } } cout << '\\n' ; } } \u7bc4\u4f8b2 (Adjacency List) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <algorithm> #include <iostream> #include <vector> using namespace std ; int main () { int n , m ; vector < int > G [ 105 ]; cin >> n >> m ; for ( int i = 0 ; i < m ; ++ i ) { int x , y ; cin >> x >> y ; G [ x ]. emplace_back ( y ); G [ y ]. emplace_back ( x ); } for ( int i = 1 ; i <= n ; ++ i ) { cout << i << ':' ; sort ( G [ i ]. begin (), G [ i ]. end ()); for ( int j = 0 ; j != ( int ) G [ i ]. size (); ++ j ) { cout << ' ' << G [ i ][ j ]; } cout << '\\n' ; } } 1 2 3 == = \"\u7bc4\u4f8b3 (Adjacency Matrix)\" ```cpp","title":"\u4f8b\u984c"},{"location":"graph/save/#include","text":"","title":"include "},{"location":"graph/save/#include_1","text":"","title":"include "},{"location":"graph/save/#include_2","text":"1 using namespace std; int main() { int n, m; vector G[105]; cin >> n >> m; for (int i = 0; i < m; ++i) { int x, y; cin >> x >> y; G[x].emplace_back(y); G[y].emplace_back(x); } for (int i = 1; i <= n; ++i) { cout << i << ':'; sort(G[i].begin(), G[i].end()); / for(int j = 0; j != (int)G[i].size(); ++j) { int v = G[i][j]; cout << ' ' << v; } / for (auto v : G[i]) { cout << ' ' << v; } cout << '\\n'; } } ```","title":"include "},{"location":"graph/save/#_2","text":"Adjacency Matrix \u5be6\u4f5c\u8f03\u7c21\u55ae\uff0c\u5728\u9ede\u6578\u5c0f\u7684\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\uff08\u5927\u7d04\u5728 1000 \u5de6\u53f3\uff09\u3002\u5176\u9918\u60c5\u6cc1\u9700\u4f7f\u7528 Adjacency List\uff0c\u5426\u5247\u6703\u5c0e\u81f4\u8a18\u61b6\u9ad4\u904e\u5927\u3002","title":"\u4f7f\u7528\u6642\u6a5f"},{"location":"graph/shortestpath/","text":"\u6700\u77ed\u8def\u5f91 \u8853\u8a9e \u8ca0\u908a\uff1a\u6b0a\u91cd\u70ba\u8ca0\u7684\u908a \u8ca0\u74b0\uff1a\u6b0a\u91cd\u548c\u70ba\u8ca0\u7684\u74b0 \u9ede\u6e90\uff1a\u6210\u70ba\u8d77\u9ede\u7684\u9ede\uff0c\u5206\u6210\u55ae\u6e90\u982d\u53ca\u591a\u6e90\u982d\u3002 \u9b06\u5f1b\uff1a\u55ae\u6e90\u982d\u6700\u77ed\u8def\u5f91\u4e2d\uff0c\u5c0d\u65bc\u4efb\u610f\u5169\u500b\u9ede u,v \uff0c\u8d77\u9ede s \u5230\u5b83\u5011\u7684\u8ddd\u96e2 d_u,d_v \uff0c\u5982\u679c d_u>d_v+w_{u,v} \uff0c w_{u,v} \u70ba\u908a (u,v) \u7684\u6b0a\u91cd\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 d_u \u66f4\u65b0\u70ba d_v+w_{u,v} \uff0c\u8b93 s \u5230 u \u7684\u8ddd\u96e2\u7e2e\u77ed\uff0c\u9019\u500b\u52d5\u4f5c\u7a31\u70ba \"\u9b06\u5f1b\"\u3002 Floyd-Warshall Algorithm \u70ba\u591a\u6e90\u982d\u6700\u77ed\u8def\u5f91\uff0c\u6c42\u51fa\u6240\u6709\u9ede\u5c0d\u7684\u6700\u77ed\u8def\u5f91\u3002 Floyd-Warshall \u662f\u4e00\u7a2e\u52d5\u614b\u898f\u5283\u554f\u984c\uff0c\u4ee5\u4e0b\u662f\u4ed6\u7684 dp \u5f0f\u3002 \u72c0\u614b\uff1a dp[k][i][j] \u4ee3\u8868\uff0c\u82e5\u53ea\u4ee5\u9ede 1 \u223c k \u7576\u4e2d\u7e7c\u9ede\u7684\u8a71\uff0c i \u5230 j \u7684\u6700\u77ed\u8def\u5f91\u9577\u3002 \u8f49\u79fb\uff1a dp[k][i][j] = min(dp[k \u2212 1][i][k] + dp[k \u2212 1][k][j], dp[k \u2212 1][i][j]) \u57fa\u5e95\uff1a dp[0][i][j] = \\left\\{ \\begin{array}{cc}w[i][j] & if\\ w[i][j]\\ exists\\\\INF & else\\end{array} \\right\\} \u6642/\u7a7a\u9593\u8907\u96dc\u5ea6\u7686\u70ba O(V^3) \uff0c\u5229\u7528\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff0c\u7a7a\u9593\u8907\u96dc\u5ea6\u53ef\u512a\u5316\u81f3 O(V^2) 1 2 3 4 for ( k = 0 ; k < n ; k ++ ) for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) w [ i ][ j ] = w [ j ][ i ] = min ( w [ i ][ j ], max ( w [ i ][ k ], w [ k ][ j ])); \u57f7\u884c\u7684\u6642\u5019\u5982\u679c dp[i][j]\\leq 0 \uff0c\u4ee3\u8868\u5b58\u5728\u8ca0\u74b0\uff0cFloyd-Warshall \u662f\u53ef\u4ee5\u5224\u65b7\u8ca0\u74b0\u3002 \u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91 \u6c42\u51fa\u4e00\u500b\u9ede\u5230\u6240\u6709\u9ede\u7684\u6700\u77ed\u8def\u5f91\uff0c\u5176\u5be6\u5c31\u662f\u4ee5\u8d77\u9ede\u70ba\u6839\uff0c\u6700\u77ed\u8def\u5f91\u662f\u7531\u7236\u7bc0\u9ede\u9b06\u5f1b\u800c\u4f86\u7684\u6700\u77ed\u8def\u5f91\u6a39\u3002\u6211\u5011\u627e\u6700\u77ed\u8def\u5f91\uff0c\u5c31\u662f\u4e00\u76f4\u628a\u9b06\u5f1b\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u4e0d\u80fd\u9b06\u5f1b\uff0c\u6240\u6709\u9ede\u90fd\u7372\u5f97\u6700\u77ed\u8def\u5f91\u4e86\u3002\u8981\u84cb\u51fa\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u53ea\u8981\u628a\u9ede\u6307\u5411\u6700\u5f8c\u4e00\u6b21\u88ab\u8ab0\u9b06\u5f1b\u5c31\u597d\u4e86\u3002 Bellman-Ford Algorithm \u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u8a2d\u8d77\u9ede\u7684\u6700\u77ed\u8def\u5f91\u70ba 0\uff0c\u5176\u4ed6\u9ede\u70ba\u7121\u9650\u5927\uff0c\u6bcf\u6b21\u5c0d\u6240\u6709\u908a\u679a\u8209\uff0c\u56e0\u70ba\u6700\u77ed\u8def\u5f91\u4e0d\u6703\u7d93\u904e\u540c\u6a23\u7684\u908a\u7b2c\u4e8c\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u57f7\u884c V-1 \u8f2a\uff0c\u8907\u96dc\u5ea6\u70ba O(VE) \u3002\u5982\u679c\u57f7\u884c\u7b2c V \u6b21\u6642\u9084\u6709\u908a\u53ef\u4ee5\u9b06\u5f1b\uff0c\u4ee3\u8868\u6709\u8ca0\u74b0\uff0cBellman-Ford \u4e5f\u53ef\u4ee5\u7576\u6210\u8ca0\u74b0\u7684\u5224\u65b7\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void bellman_ford ( int s ) { d [ s ] = 0 ; p [ s ] = s ; for ( int i = 0 ; i < V - 1 ; i ++ ) { for ( int ss = 0 ; ss < V ; ss ++ ) { for ( auto tt : v [ ss ]) { if ( d [ ss ] + w [ ss ][ tt ] < d [ tt ]) { d [ tt ] = d [ ss ] + w [ ss ][ tt ]; p [ tt ] = ss ; } } } } } bool has_negative_cycle () { for ( int i = 0 ; i < V ; i ++ ) { for ( int j = 0 ; j < V ; j ++ ) { if ( d [ i ] + w [ i ][ j ] < d [ j ]) return true ; } } return false ; } \u6b64\u6f14\u7b97\u6cd5\u9084\u6709\u4e00\u500b\u512a\u5316\u7248\u672c\u53eb\u505a Shortest Path Faster Algorithm (SPFA)\uff0c\u4ed6\u7684\u505a\u6cd5\u662f\u679a\u8209\u8d77\u9ede\u662f\u9b06\u5f1b\u904e\u7684\u908a\uff0c\u4ee5\u9b06\u5f1b\u904e\u7684\u9ede\u9664\u975e\u88ab\u91cd\u65b0\u9b06\u5f1b\uff0c\u5426\u5247\u4e0d\u6703\u66f4\u52d5\u3002\u9810\u671f\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u4e0d\u904e\u6700\u5dee\u72c0\u6cc1\u4ecd\u70ba O(VE) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 struct Edge { int t ; long long w ; Edge (){}; Edge ( int _t , long long _w ) : t ( _t ), w ( _w ) {} }; bool SPFA ( int st ) { vector < int > cnt ( n , 0 ); bitset < MXV > inq ( 0 ); queue < int > q ; q . push ( st ); dis [ st ] = 0 ; inq [ st ] = true ; while ( ! q . empty ()) { int cur = q . front (); q . pop (); inq [ cur ] = false ; for ( auto & e : G [ cur ]) { if ( dis [ e . t ] <= dis [ cur ] + e . w ) continue ; dis [ e . t ] = dis [ cur ] + e . w ; if ( inq [ e . t ]) continue ; ++ cnt [ e . t ]; if ( cnt [ e . t ] > n ) return false ; // negtive cycle inq [ e . t ] = true ; q . push ( e . t ); } } return true ; } Dijkstra\u2019s Algorithm \u540c\u6a23\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u4ed6\u7684\u60f3\u6cd5\u548c Prim's Algorithm \u985e\u4f3c\uff0c\u6bcf\u6b21\u628a\u96e2\u6a39\u6839\u6700\u8fd1\u7684\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\u88e1\uff0c\u4e26\u628a\u6240\u6709\u8207\u8a72\u9ede\u76f8\u9023\u7684\u908a\u9b06\u5f1b\uff0c\u5df2\u7d93\u52a0\u5165\u7684\u9ede\u4e0d\u6703\u5728\u88ab\u9b06\u5f1b\u3002 \u4f7f\u7528 priority_queue \u7684\u8907\u96dc\u5ea6\u70ba O((V+E)\\log E) \uff0c\u4f7f\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff0c\u8907\u96dc\u5ea6\u70ba O(E+V\\log V) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 struct edge { int s , t ; LL d ; edge (){}; edge ( int s , int t , LL d ) : s ( s ), t ( t ), d ( d ) {} }; struct heap { LL d ; int p ; // point heap (){}; heap ( LL d , int p ) : d ( d ), p ( p ) {} bool operator < ( const heap & b ) const { return d > b . d ; } }; int d [ N ], p [ N ]; vector < edge > edges ; vector < int > G [ N ]; bitset < N > vis ; void dijkstra ( int ss ) { priority_queue < heap > Q ; for ( int i = 0 ; i < V ; i ++ ) d [ i ] = INF ; d [ ss ] = 0 ; p [ ss ] = -1 ; vis . reset () : Q . push ( heap ( 0 , ss )); heap x ; while ( ! Q . empty ()) { x = Q . top (); Q . pop (); int p = x . p ; if ( vis [ p ]) continue ; vis [ p ] = 1 ; for ( int i = 0 ; i < G [ p ]. size (); i ++ ) { edge & e = edges [ G [ p ][ i ]]; if ( d [ e . t ] > d [ p ] + e . d ) { d [ e . t ] = d [ p ] + e . d ; p [ e . t ] = G [ p ][ i ]; Q . push ( heap ( d [ e . t ], e . t )); } } } } \u800c Dijkstra\u2019s Algorithm \u4e0d\u80fd\u8655\u7406\u8ca0\u908a\uff0c\u539f\u56e0\u662f\u4e00\u65e6\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u4e0d\u6703\u518d\u88ab\u66f4\u65b0\uff0c\u4ee5\u7dad\u6301\u826f\u597d\u8907\u96dc\u5ea6\uff0c\u8ca0\u908a\u6703\u7834\u58de\u6b64\u898f\u5247\u3002 \u6574\u7406 \u6f14\u7b97\u6cd5 Floyd-Warshall Bellman-Ford SPFA Dijkstra \u9ede\u6e90 \u591a\u9ede\u6e90 \u55ae\u9ede\u6e90 \u55ae\u9ede\u6e90 \u55ae\u9ede\u6e90 \u6642\u9593\u8907\u96dc\u5ea6 O(V^3) O(VE) \u671f\u671b\u8907\u96dc\u5ea6 O(V+E) \u4f7f\u7528 priority_queue O(V+E)\\log E) \u5224\u65b7\u8ca0\u74b0 O X X X \u8655\u7406\u8ca0\u908a O X X X \u4f8b\u984c\u7df4\u7fd2 \u5168\u9ede\u6e90 UVa 10803 - Thunder Mountain UVa 10724 - Road Construction \u55ae\u9ede\u6e90 UVa 10917 - A Walk Through the Forest \u5224\u65b7\u8ca0\u74b0 UVa 00558 - Wormholes","title":"\u6700\u77ed\u8def\u5f91"},{"location":"graph/shortestpath/#_1","text":"","title":"\u6700\u77ed\u8def\u5f91"},{"location":"graph/shortestpath/#_2","text":"\u8ca0\u908a\uff1a\u6b0a\u91cd\u70ba\u8ca0\u7684\u908a \u8ca0\u74b0\uff1a\u6b0a\u91cd\u548c\u70ba\u8ca0\u7684\u74b0 \u9ede\u6e90\uff1a\u6210\u70ba\u8d77\u9ede\u7684\u9ede\uff0c\u5206\u6210\u55ae\u6e90\u982d\u53ca\u591a\u6e90\u982d\u3002 \u9b06\u5f1b\uff1a\u55ae\u6e90\u982d\u6700\u77ed\u8def\u5f91\u4e2d\uff0c\u5c0d\u65bc\u4efb\u610f\u5169\u500b\u9ede u,v \uff0c\u8d77\u9ede s \u5230\u5b83\u5011\u7684\u8ddd\u96e2 d_u,d_v \uff0c\u5982\u679c d_u>d_v+w_{u,v} \uff0c w_{u,v} \u70ba\u908a (u,v) \u7684\u6b0a\u91cd\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 d_u \u66f4\u65b0\u70ba d_v+w_{u,v} \uff0c\u8b93 s \u5230 u \u7684\u8ddd\u96e2\u7e2e\u77ed\uff0c\u9019\u500b\u52d5\u4f5c\u7a31\u70ba \"\u9b06\u5f1b\"\u3002","title":"\u8853\u8a9e"},{"location":"graph/shortestpath/#floyd-warshall-algorithm","text":"\u70ba\u591a\u6e90\u982d\u6700\u77ed\u8def\u5f91\uff0c\u6c42\u51fa\u6240\u6709\u9ede\u5c0d\u7684\u6700\u77ed\u8def\u5f91\u3002 Floyd-Warshall \u662f\u4e00\u7a2e\u52d5\u614b\u898f\u5283\u554f\u984c\uff0c\u4ee5\u4e0b\u662f\u4ed6\u7684 dp \u5f0f\u3002 \u72c0\u614b\uff1a dp[k][i][j] \u4ee3\u8868\uff0c\u82e5\u53ea\u4ee5\u9ede 1 \u223c k \u7576\u4e2d\u7e7c\u9ede\u7684\u8a71\uff0c i \u5230 j \u7684\u6700\u77ed\u8def\u5f91\u9577\u3002 \u8f49\u79fb\uff1a dp[k][i][j] = min(dp[k \u2212 1][i][k] + dp[k \u2212 1][k][j], dp[k \u2212 1][i][j]) \u57fa\u5e95\uff1a dp[0][i][j] = \\left\\{ \\begin{array}{cc}w[i][j] & if\\ w[i][j]\\ exists\\\\INF & else\\end{array} \\right\\} \u6642/\u7a7a\u9593\u8907\u96dc\u5ea6\u7686\u70ba O(V^3) \uff0c\u5229\u7528\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff0c\u7a7a\u9593\u8907\u96dc\u5ea6\u53ef\u512a\u5316\u81f3 O(V^2) 1 2 3 4 for ( k = 0 ; k < n ; k ++ ) for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) w [ i ][ j ] = w [ j ][ i ] = min ( w [ i ][ j ], max ( w [ i ][ k ], w [ k ][ j ])); \u57f7\u884c\u7684\u6642\u5019\u5982\u679c dp[i][j]\\leq 0 \uff0c\u4ee3\u8868\u5b58\u5728\u8ca0\u74b0\uff0cFloyd-Warshall \u662f\u53ef\u4ee5\u5224\u65b7\u8ca0\u74b0\u3002","title":"Floyd-Warshall Algorithm"},{"location":"graph/shortestpath/#_3","text":"\u6c42\u51fa\u4e00\u500b\u9ede\u5230\u6240\u6709\u9ede\u7684\u6700\u77ed\u8def\u5f91\uff0c\u5176\u5be6\u5c31\u662f\u4ee5\u8d77\u9ede\u70ba\u6839\uff0c\u6700\u77ed\u8def\u5f91\u662f\u7531\u7236\u7bc0\u9ede\u9b06\u5f1b\u800c\u4f86\u7684\u6700\u77ed\u8def\u5f91\u6a39\u3002\u6211\u5011\u627e\u6700\u77ed\u8def\u5f91\uff0c\u5c31\u662f\u4e00\u76f4\u628a\u9b06\u5f1b\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u4e0d\u80fd\u9b06\u5f1b\uff0c\u6240\u6709\u9ede\u90fd\u7372\u5f97\u6700\u77ed\u8def\u5f91\u4e86\u3002\u8981\u84cb\u51fa\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u53ea\u8981\u628a\u9ede\u6307\u5411\u6700\u5f8c\u4e00\u6b21\u88ab\u8ab0\u9b06\u5f1b\u5c31\u597d\u4e86\u3002","title":"\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91"},{"location":"graph/shortestpath/#bellman-ford-algorithm","text":"\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u8a2d\u8d77\u9ede\u7684\u6700\u77ed\u8def\u5f91\u70ba 0\uff0c\u5176\u4ed6\u9ede\u70ba\u7121\u9650\u5927\uff0c\u6bcf\u6b21\u5c0d\u6240\u6709\u908a\u679a\u8209\uff0c\u56e0\u70ba\u6700\u77ed\u8def\u5f91\u4e0d\u6703\u7d93\u904e\u540c\u6a23\u7684\u908a\u7b2c\u4e8c\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u57f7\u884c V-1 \u8f2a\uff0c\u8907\u96dc\u5ea6\u70ba O(VE) \u3002\u5982\u679c\u57f7\u884c\u7b2c V \u6b21\u6642\u9084\u6709\u908a\u53ef\u4ee5\u9b06\u5f1b\uff0c\u4ee3\u8868\u6709\u8ca0\u74b0\uff0cBellman-Ford \u4e5f\u53ef\u4ee5\u7576\u6210\u8ca0\u74b0\u7684\u5224\u65b7\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void bellman_ford ( int s ) { d [ s ] = 0 ; p [ s ] = s ; for ( int i = 0 ; i < V - 1 ; i ++ ) { for ( int ss = 0 ; ss < V ; ss ++ ) { for ( auto tt : v [ ss ]) { if ( d [ ss ] + w [ ss ][ tt ] < d [ tt ]) { d [ tt ] = d [ ss ] + w [ ss ][ tt ]; p [ tt ] = ss ; } } } } } bool has_negative_cycle () { for ( int i = 0 ; i < V ; i ++ ) { for ( int j = 0 ; j < V ; j ++ ) { if ( d [ i ] + w [ i ][ j ] < d [ j ]) return true ; } } return false ; } \u6b64\u6f14\u7b97\u6cd5\u9084\u6709\u4e00\u500b\u512a\u5316\u7248\u672c\u53eb\u505a Shortest Path Faster Algorithm (SPFA)\uff0c\u4ed6\u7684\u505a\u6cd5\u662f\u679a\u8209\u8d77\u9ede\u662f\u9b06\u5f1b\u904e\u7684\u908a\uff0c\u4ee5\u9b06\u5f1b\u904e\u7684\u9ede\u9664\u975e\u88ab\u91cd\u65b0\u9b06\u5f1b\uff0c\u5426\u5247\u4e0d\u6703\u66f4\u52d5\u3002\u9810\u671f\u8907\u96dc\u5ea6\u70ba O(V+E) \uff0c\u4e0d\u904e\u6700\u5dee\u72c0\u6cc1\u4ecd\u70ba O(VE) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 struct Edge { int t ; long long w ; Edge (){}; Edge ( int _t , long long _w ) : t ( _t ), w ( _w ) {} }; bool SPFA ( int st ) { vector < int > cnt ( n , 0 ); bitset < MXV > inq ( 0 ); queue < int > q ; q . push ( st ); dis [ st ] = 0 ; inq [ st ] = true ; while ( ! q . empty ()) { int cur = q . front (); q . pop (); inq [ cur ] = false ; for ( auto & e : G [ cur ]) { if ( dis [ e . t ] <= dis [ cur ] + e . w ) continue ; dis [ e . t ] = dis [ cur ] + e . w ; if ( inq [ e . t ]) continue ; ++ cnt [ e . t ]; if ( cnt [ e . t ] > n ) return false ; // negtive cycle inq [ e . t ] = true ; q . push ( e . t ); } } return true ; }","title":"Bellman-Ford Algorithm"},{"location":"graph/shortestpath/#dijkstras-algorithm","text":"\u540c\u6a23\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u4ed6\u7684\u60f3\u6cd5\u548c Prim's Algorithm \u985e\u4f3c\uff0c\u6bcf\u6b21\u628a\u96e2\u6a39\u6839\u6700\u8fd1\u7684\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\u88e1\uff0c\u4e26\u628a\u6240\u6709\u8207\u8a72\u9ede\u76f8\u9023\u7684\u908a\u9b06\u5f1b\uff0c\u5df2\u7d93\u52a0\u5165\u7684\u9ede\u4e0d\u6703\u5728\u88ab\u9b06\u5f1b\u3002 \u4f7f\u7528 priority_queue \u7684\u8907\u96dc\u5ea6\u70ba O((V+E)\\log E) \uff0c\u4f7f\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff0c\u8907\u96dc\u5ea6\u70ba O(E+V\\log V) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 struct edge { int s , t ; LL d ; edge (){}; edge ( int s , int t , LL d ) : s ( s ), t ( t ), d ( d ) {} }; struct heap { LL d ; int p ; // point heap (){}; heap ( LL d , int p ) : d ( d ), p ( p ) {} bool operator < ( const heap & b ) const { return d > b . d ; } }; int d [ N ], p [ N ]; vector < edge > edges ; vector < int > G [ N ]; bitset < N > vis ; void dijkstra ( int ss ) { priority_queue < heap > Q ; for ( int i = 0 ; i < V ; i ++ ) d [ i ] = INF ; d [ ss ] = 0 ; p [ ss ] = -1 ; vis . reset () : Q . push ( heap ( 0 , ss )); heap x ; while ( ! Q . empty ()) { x = Q . top (); Q . pop (); int p = x . p ; if ( vis [ p ]) continue ; vis [ p ] = 1 ; for ( int i = 0 ; i < G [ p ]. size (); i ++ ) { edge & e = edges [ G [ p ][ i ]]; if ( d [ e . t ] > d [ p ] + e . d ) { d [ e . t ] = d [ p ] + e . d ; p [ e . t ] = G [ p ][ i ]; Q . push ( heap ( d [ e . t ], e . t )); } } } } \u800c Dijkstra\u2019s Algorithm \u4e0d\u80fd\u8655\u7406\u8ca0\u908a\uff0c\u539f\u56e0\u662f\u4e00\u65e6\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u4e0d\u6703\u518d\u88ab\u66f4\u65b0\uff0c\u4ee5\u7dad\u6301\u826f\u597d\u8907\u96dc\u5ea6\uff0c\u8ca0\u908a\u6703\u7834\u58de\u6b64\u898f\u5247\u3002","title":"Dijkstra\u2019s Algorithm"},{"location":"graph/shortestpath/#_4","text":"\u6f14\u7b97\u6cd5 Floyd-Warshall Bellman-Ford SPFA Dijkstra \u9ede\u6e90 \u591a\u9ede\u6e90 \u55ae\u9ede\u6e90 \u55ae\u9ede\u6e90 \u55ae\u9ede\u6e90 \u6642\u9593\u8907\u96dc\u5ea6 O(V^3) O(VE) \u671f\u671b\u8907\u96dc\u5ea6 O(V+E) \u4f7f\u7528 priority_queue O(V+E)\\log E) \u5224\u65b7\u8ca0\u74b0 O X X X \u8655\u7406\u8ca0\u908a O X X X","title":"\u6574\u7406"},{"location":"graph/shortestpath/#_5","text":"\u5168\u9ede\u6e90 UVa 10803 - Thunder Mountain UVa 10724 - Road Construction \u55ae\u9ede\u6e90 UVa 10917 - A Walk Through the Forest \u5224\u65b7\u8ca0\u74b0 UVa 00558 - Wormholes","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/traverse/","text":"\u6a39\u7684\u904d\u6b77 \u5b58\u597d\u5716\u5f8c\uff0c\u70ba\u4e86\u7372\u5f97\u67d0\u4e9b\u8cc7\u8a0a\uff0c\u9700\u8981\u904d\u6b77\u6216\u641c\u7d22\u5716\u3002 \u865b\u64ec\u78bc 1 2 3 4 5 (1) \u628a\u8d77\u9ede\u653e\u5165\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u4e2d (2) \u7576\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u9084\u6709\u8cc7\u6599\u6642\uff0c\u57f7\u884c\u7b2c (3)\uff0c\u5426\u5247\u96e2\u958b\u7a0b\u5f0f (3) \u5f9e\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u62ff\u4e00\u500b\u9ede\u51fa\u4f86\uff0c\u8a2d\u8a72\u9ede\u70ba u (4) \u4e26\u6240\u6709\u548c u \u76f8\u9023\u4e26\u6c92\u62dc\u8a2a\u904e\u7684\u9ede\u52a0\u5165\u300c\u8cc7\u6599\u7d50\u69cb\u300d (5) \u56de\u5230 (2) \u6839\u64da\u512a\u5148\u9806\u5e8f\u4e0d\u540c\uff0c\u6709\u5169\u7a2e\u505a\u6cd5 \u6df1\u5ea6\u512a\u5148\u641c\u5c0b (Depth First Search, DFS)\uff1a\u6bcf\u6b21\u90fd\u5617\u8a66\u5f80\u66f4\u6df1\u9ede\u8d70\u3002 \u5ee3\u5ea6\u512a\u5148\u641c\u5c0b (Breadth First Search, BFS)\uff1a\u5148\u628a\u540c\u4e00\u5c64\u7684\u9ede\uff08\u76f8\u540c\u8ddd\u96e2\uff09\u8d70\u5b8c\uff0c\u5728\u8d70\u4e0b\u4e00\u5c64\u3002 DFS v.s. BFS \u9078\u7528\u8cc7\u6599\u7d50\u69cb DFS\uff1a\u8d8a\u65e9\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u52a0\u5165\u7684\u9ede\u6703\u8d8a\u5f8c\u9762\u62ff\u51fa\u4f86\uff0c\u56e0\u6b64\u8981\u7528 stack \u3002 BFS\uff1a\u8d8a\u65e9\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u52a0\u5165\u7684\u9ede\u6703\u8d8a\u524d\u9762\u62ff\u51fa\u4f86\uff0c\u56e0\u6b64\u8981\u7528 queue \u3002 \u7bc4\u4f8b\u7a0b\u5f0f\u78bc DFS 1 2 3 4 5 6 7 8 9 10 11 vector < int > G [ N ]; bitset < N > vis ; void dfs ( int s ) { vis [ s ] = 1 ; for ( int t : G [ s ]) { if ( ! vis [ i ]) dfs ( i ); } } BFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 vector < int > G [ N ]; bitset < N > vis ; void bfs ( int s ) { queue < int > q ; q . push ( s ); vis [ s ] = 1 ; while ( ! q . empty ()) { int v = q . front (); q . pop (); for ( int t : G [ v ]) { if ( ! vis [ t ]) { q . push ( t ); vis [ t ] = 1 ; } } } } \u6642\u9593\u6233\u8a18 (Time stamp) \u5728 DFS \u904e\u7a0b\uff0c\u53ef\u4ee5\u8a18\u9304\u6bcf\u500b\u9ede\u9032\u5165\u548c\u96e2\u958b\u7684\u9806\u5e8f\uff0c\u6642\u9593\u6233\u8a18\u53ef\u8868\u793a\u5169\u9ede\u7684\u5148\u5f8c\u95dc\u4fc2\uff0c\u901a\u5e38\u7528\u5728\u4ee5\u4e0b\u5730\u65b9\uff1a \u6700\u4f4e\u5171\u540c\u7956\u5148 \u6a39\u58d3\u5e73 \u6709\u5411\u5716\u7684\u5f37\u9023\u901a\u5143\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 int tin [ N ], tout [ N ]; int timer = 0 ; void dfs ( int v , int p ) { tin [ v ] = ++ timer ; for ( int it : G [ v ]) { if ( it != p ) dfs ( it , v ); } tout [ v ] = ++ timer ; } \u4f8b\u984c\u7df4\u7fd2 UVa 00572 - Oil Deposits UVa 11624 - Fire! UVa 11953 - Battleships Codeforces 598D - Igor In the Museum","title":"\u5716\u7684\u904d\u6b77"},{"location":"graph/traverse/#_1","text":"\u5b58\u597d\u5716\u5f8c\uff0c\u70ba\u4e86\u7372\u5f97\u67d0\u4e9b\u8cc7\u8a0a\uff0c\u9700\u8981\u904d\u6b77\u6216\u641c\u7d22\u5716\u3002 \u865b\u64ec\u78bc 1 2 3 4 5 (1) \u628a\u8d77\u9ede\u653e\u5165\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u4e2d (2) \u7576\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u9084\u6709\u8cc7\u6599\u6642\uff0c\u57f7\u884c\u7b2c (3)\uff0c\u5426\u5247\u96e2\u958b\u7a0b\u5f0f (3) \u5f9e\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u62ff\u4e00\u500b\u9ede\u51fa\u4f86\uff0c\u8a2d\u8a72\u9ede\u70ba u (4) \u4e26\u6240\u6709\u548c u \u76f8\u9023\u4e26\u6c92\u62dc\u8a2a\u904e\u7684\u9ede\u52a0\u5165\u300c\u8cc7\u6599\u7d50\u69cb\u300d (5) \u56de\u5230 (2) \u6839\u64da\u512a\u5148\u9806\u5e8f\u4e0d\u540c\uff0c\u6709\u5169\u7a2e\u505a\u6cd5 \u6df1\u5ea6\u512a\u5148\u641c\u5c0b (Depth First Search, DFS)\uff1a\u6bcf\u6b21\u90fd\u5617\u8a66\u5f80\u66f4\u6df1\u9ede\u8d70\u3002 \u5ee3\u5ea6\u512a\u5148\u641c\u5c0b (Breadth First Search, BFS)\uff1a\u5148\u628a\u540c\u4e00\u5c64\u7684\u9ede\uff08\u76f8\u540c\u8ddd\u96e2\uff09\u8d70\u5b8c\uff0c\u5728\u8d70\u4e0b\u4e00\u5c64\u3002 DFS v.s. BFS \u9078\u7528\u8cc7\u6599\u7d50\u69cb DFS\uff1a\u8d8a\u65e9\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u52a0\u5165\u7684\u9ede\u6703\u8d8a\u5f8c\u9762\u62ff\u51fa\u4f86\uff0c\u56e0\u6b64\u8981\u7528 stack \u3002 BFS\uff1a\u8d8a\u65e9\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u52a0\u5165\u7684\u9ede\u6703\u8d8a\u524d\u9762\u62ff\u51fa\u4f86\uff0c\u56e0\u6b64\u8981\u7528 queue \u3002","title":"\u6a39\u7684\u904d\u6b77"},{"location":"graph/traverse/#_2","text":"DFS 1 2 3 4 5 6 7 8 9 10 11 vector < int > G [ N ]; bitset < N > vis ; void dfs ( int s ) { vis [ s ] = 1 ; for ( int t : G [ s ]) { if ( ! vis [ i ]) dfs ( i ); } } BFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 vector < int > G [ N ]; bitset < N > vis ; void bfs ( int s ) { queue < int > q ; q . push ( s ); vis [ s ] = 1 ; while ( ! q . empty ()) { int v = q . front (); q . pop (); for ( int t : G [ v ]) { if ( ! vis [ t ]) { q . push ( t ); vis [ t ] = 1 ; } } } }","title":"\u7bc4\u4f8b\u7a0b\u5f0f\u78bc"},{"location":"graph/traverse/#time-stamp","text":"\u5728 DFS \u904e\u7a0b\uff0c\u53ef\u4ee5\u8a18\u9304\u6bcf\u500b\u9ede\u9032\u5165\u548c\u96e2\u958b\u7684\u9806\u5e8f\uff0c\u6642\u9593\u6233\u8a18\u53ef\u8868\u793a\u5169\u9ede\u7684\u5148\u5f8c\u95dc\u4fc2\uff0c\u901a\u5e38\u7528\u5728\u4ee5\u4e0b\u5730\u65b9\uff1a \u6700\u4f4e\u5171\u540c\u7956\u5148 \u6a39\u58d3\u5e73 \u6709\u5411\u5716\u7684\u5f37\u9023\u901a\u5143\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 int tin [ N ], tout [ N ]; int timer = 0 ; void dfs ( int v , int p ) { tin [ v ] = ++ timer ; for ( int it : G [ v ]) { if ( it != p ) dfs ( it , v ); } tout [ v ] = ++ timer ; }","title":"\u6642\u9593\u6233\u8a18 (Time stamp)"},{"location":"graph/traverse/#_3","text":"UVa 00572 - Oil Deposits UVa 11624 - Fire! UVa 11953 - Battleships Codeforces 598D - Igor In the Museum","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"graph/tree/","text":"\u6a39 (Tree) \u6a39\u662f\u4e00\u5f35\u6c92\u6709\u74b0\u4e14\u9023\u901a\u7684\u5716\uff0c\u6709\u8a31\u591a\u7b97\u6cd5\u90fd\u662f\u7531\u6a39\u767c\u5c55\u51fa\u4f86\u3002 \u7279\u6027 |V|=|E|+1 \u3002 \u6c92\u6709\u74b0\uff0c\u4f46\u52a0\u4e0a\u4e00\u689d\u908a\u6703\u5f62\u6210\u74b0\u3002 \u4efb\u610f\u5169\u500b\u9ede\u4e4b\u9593\u5b58\u5728\u552f\u4e00\u8def\u5f91\u3002 \u70ba\u9023\u901a\u5716\uff0c\u4f46\u62d4\u6389\u4e00\u689d\u908a\u5373\u70ba\u4e0d\u9023\u901a\u3002 \u8853\u8a9e \u6839 (root)\uff1a\u6a39\u7684\u4e00\u500b\u4ee3\u8868\u6027\u7684\u9ede\uff0c\u901a\u5e38\u6703\u88ab\u7576\u904d\u6b77\u7684\u8d77\u9ede\uff0c\u6709\u7d66\u5b9a\u6839\u9ede\u7684\u6a39\u53eb \u6709\u6839\u6a39\uff0c\u53cd\u4e4b\u70ba\u7121\u6839\u6a39\u3002\u7121\u6839\u6a39\u6709\u6642\u4f9d\u7167\u984c\u76ee\u9700\u6c42\uff0c\u9700\u8981\u96a8\u6a5f\u627e\u4e00\u500b\u9ede\u7576\u6839\u3002 \u8449\u7bc0\u9ede (leaf)\uff1a\u5ea6\u6578 \\leq 1 \u7684\u7bc0\u9ede\u3002 \u8ddd\u96e2 (distance)\uff1a\u70ba\u5169\u500b\u9ede\u6240\u5f62\u6210\u8def\u5f91\u4e4b\u908a\u6578\uff0c\u6216\u662f\u8def\u5f91\u4e0a\u6b0a\u91cd\u4e4b\u548c\u3002 \u7236\u7bc0\u9ede (parent)\u3001\u5b50\u7bc0\u9ede (child\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u5169\u500b\u76f8\u9023\u7684\u7bc0\u9ede\uff0c\u8f03\u63a5\u8fd1\u6a39\u6839\u7684\u70ba\u7236\u7bc0\u9ede\uff0c\u53e6\u4e00\u500b\u70ba\u5b50\u7bc0\u9ede\u3002 \u7956\u5148 (ancestor)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e2d\uff0c\u6240\u6709\u7684\u7bc0\u9ede\u7686\u70ba\u7956\u5148\u3002\u4f9d\u984c\u76ee\u6240\u9700\uff0c\u6709\u6642\u81ea\u5df1\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff08\u5c24\u5176\u662f\u6839\u6700\u5e38\u9019\u6a23\u5b9a\u7fa9\uff09\u3002 \u5144\u5f1f (siblings)\uff1a\u76f8\u540c\u7236\u89aa\u7684\u7bc0\u9ede\u3002 \u5f8c\u4ee3 (descendant)\uff1a\u6240\u6709\u8996\u81ea\u5df1\u70ba\u7956\u5148\u7684\u9ede\uff08\u4e0d\u5305\u542b\u81ea\u5df1\uff09\u3002 \u6df1\u5ea6 (depth)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e4b\u8ddd\u96e2\u3002 \u9ad8\u5ea6 (height)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u8207\u5b83\u8ddd\u96e2\u6700\u5927\u7684\u8449\u7bc0\u9ede\u7684\u8ddd\u96e2\u7a31\u70ba\u9ad8\u5ea6\u3002\u6839\u7684\u9ad8\u5ea6\u7a31\u70ba\u9019\u6574\u9846\u6a39\u7684\u9ad8\u5ea6\u3002 \u5b50\u6a39 (subtree)\uff1a\u5982\u679c T_1 \u70ba T \u7684\u5b50\u6a39\uff0c\u5247 V_1\\in V \uff0c E_1\\in E \u3002 \u68ee\u6797 (Forest)\uff1a\u7531\u7121\u6578\u500b\u4e92\u4e0d\u9023\u901a\u7684\u6a39\u6240\u5f62\u7684\u5716\u70ba\u68ee\u6797\u3002 \u4e8c\u5143\u6a39 N \u5143\u6a39\uff1a\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 N \u500b\u5b50\u7bc0\u9ede\uff0c\u7a31\u70ba N \u5143\u6a39\u3002 \u6700\u5e38\u898b\u662f\u4e8c\u5143\u6a39\uff0c\u4e8c\u5143\u6a39\u5169\u500b\u5b50\u7bc0\u9ede\u5206\u5225\u7a31\u70ba\u5de6\u5b50\u7bc0\u9ede (left node) \u53ca\u53f3\u5b50\u7bc0\u9ede (right node)\uff0c\u8acb\u898b\u8cc7\u6599\u7d50\u69cb\u7684 \u4e8c\u5143\u641c\u5c0b\u6a39 \u548c \u63a8 \u3002 \u7279\u6b8a\u4e8c\u5143\u6a39 Full Binary Tree\uff1a\u9664\u8449\u7bc0\u9ede\u5916\uff0c\u6bcf\u500b\u7bc0\u9ede\u90fd\u6709\u5169\u500b\u5b50\u7bc0\u9ede\u3002 Complete Binary Tree\uff1a\u6bcf\u5c64\u7bc0\u9ede\u5168\u6eff\uff0c\u9664\u4e86\u6700\u5f8c\u4e00\u5c64\uff0c\u6700\u5f8c\u4e00\u5c64\u7bc0\u9ede\u9760\u5de6\u3002 Perfect Binary Tree\uff1a\u6bcf\u5c64\u7bc0\u9ede\u5168\u6eff\uff0cperfect binary tree \u4e5f\u662f full binary tree \u548c complete binary tree\u3002 \u5132\u5b58 \u6a39\u4e5f\u662f\u4e00\u7a2e\u5716\uff0c\u4e5f\u53ef\u4ee5\u7528 Adjacency Matrix \u6216 Adjacency List\uff0c\u6bcf\u500b\u9ede\u8a18\u9304\u81ea\u5df1\u7684\u7236\u7bc0\u9ede\u548c\u5b50\u7bc0\u9ede\uff0c\u4e5f\u53ef\u4ee5\u53ea\u8a18\u9304\u5176\u4e00\uff0c\u53ea\u6709\u7d00\u9304\u7236\u7bc0\u9ede\u7684\u6a39\uff0c\u53ef\u4ee5\u7528\u4e00\u7dad\u9663\u5217\u5132\u5b58\u3002 1 int par [ MXV ]; \u4e8c\u5143\u6a39\u6700\u591a\u53ea\u6709\u5169\u500b\u7bc0\u9ede\uff08\u5de6\u5b50\u7bc0\u9ede\u548c\u53f3\u5b50\u7bc0\u9ede\uff09\uff0c\u53ef\u4ee5\u958b\u4e00\u500b\u9577\u5ea6\u70ba 2\\times V \u7684\u4e8c\u7dad\u9663\u5217\uff0c\u6216\u5169\u500b\u9577\u5ea6\u70ba 2V \u7684\u4e00\u7dad\u9663\u5217\u3002 1 2 3 int Lc [ MXV ], Rc [ MXV ]; // or int chlid [ MXV ][ 2 ]; Complete Binary Tree \u53ef\u7528\u4e00\u7dad\u9663\u5217\u5132\u5b58\uff0c\u5c07 Complete Binary Tree \u7684\u7bc0\u9ede\u5f9e\u4e0a\u5230\u4e0b\uff0c\u5f9e\u5de6\u5230\u53f3\u4f9d\u5e8f\u7de8\u865f\uff0c\u6839\u7bc0\u9ede\u70ba 0 \u6216 1 \uff1a \u7576\u6839\u70ba 0 \u6642\uff0c\u5de6\u5b50\u7bc0\u9ede\u662f 2x+1 \uff0c\u53f3\u5b50\u7bc0\u9ede\u662f 2x+2 \u7576\u6839\u70ba 1 \u6642\uff0c\u5de6\u5b50\u7bc0\u9ede\u662f 2x \uff0c\u53f3\u5b50\u7bc0\u9ede\u662f 2x+1 \u9084\u6709\u4e00\u4e9b\u6a39\u7684\u5132\u5b58\u6d89\u53ca\u6307\u6a19\uff0c\u4ee5\u4e0b\u70ba\u5e38\u898b\u7a2e\u985e\uff0c\u9019\u88e1\u4e0d\u63d0\u5982\u4f55\u5be6\u4f5c\uff1a \u4e8c\u5143\u641c\u5c0b\uff08\u5e73\u8861\uff09\u6a39 \u6a39\u7684\u65cb\u8f49 \u7dda\u6bb5\u6a39\u53ca\u76f8\u95dc\u53ef\u652f\u63f4\u5340\u9593\u67e5\u8a62\u7684\u6a39 \u5340\u9593\u522a\u9664 \u5340\u9593\u642c\u79fb \u4f8b\u984c\u7df4\u7fd2 Codeforces 913B - Christmas Spruce \u6a39\u7684\u524d\u4e2d\u5f8c\u5e8f UVa 00548 - Tree","title":"\u6a39"},{"location":"graph/tree/#tree","text":"\u6a39\u662f\u4e00\u5f35\u6c92\u6709\u74b0\u4e14\u9023\u901a\u7684\u5716\uff0c\u6709\u8a31\u591a\u7b97\u6cd5\u90fd\u662f\u7531\u6a39\u767c\u5c55\u51fa\u4f86\u3002","title":"\u6a39 (Tree)"},{"location":"graph/tree/#_1","text":"|V|=|E|+1 \u3002 \u6c92\u6709\u74b0\uff0c\u4f46\u52a0\u4e0a\u4e00\u689d\u908a\u6703\u5f62\u6210\u74b0\u3002 \u4efb\u610f\u5169\u500b\u9ede\u4e4b\u9593\u5b58\u5728\u552f\u4e00\u8def\u5f91\u3002 \u70ba\u9023\u901a\u5716\uff0c\u4f46\u62d4\u6389\u4e00\u689d\u908a\u5373\u70ba\u4e0d\u9023\u901a\u3002","title":"\u7279\u6027"},{"location":"graph/tree/#_2","text":"\u6839 (root)\uff1a\u6a39\u7684\u4e00\u500b\u4ee3\u8868\u6027\u7684\u9ede\uff0c\u901a\u5e38\u6703\u88ab\u7576\u904d\u6b77\u7684\u8d77\u9ede\uff0c\u6709\u7d66\u5b9a\u6839\u9ede\u7684\u6a39\u53eb \u6709\u6839\u6a39\uff0c\u53cd\u4e4b\u70ba\u7121\u6839\u6a39\u3002\u7121\u6839\u6a39\u6709\u6642\u4f9d\u7167\u984c\u76ee\u9700\u6c42\uff0c\u9700\u8981\u96a8\u6a5f\u627e\u4e00\u500b\u9ede\u7576\u6839\u3002 \u8449\u7bc0\u9ede (leaf)\uff1a\u5ea6\u6578 \\leq 1 \u7684\u7bc0\u9ede\u3002 \u8ddd\u96e2 (distance)\uff1a\u70ba\u5169\u500b\u9ede\u6240\u5f62\u6210\u8def\u5f91\u4e4b\u908a\u6578\uff0c\u6216\u662f\u8def\u5f91\u4e0a\u6b0a\u91cd\u4e4b\u548c\u3002 \u7236\u7bc0\u9ede (parent)\u3001\u5b50\u7bc0\u9ede (child\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u5169\u500b\u76f8\u9023\u7684\u7bc0\u9ede\uff0c\u8f03\u63a5\u8fd1\u6a39\u6839\u7684\u70ba\u7236\u7bc0\u9ede\uff0c\u53e6\u4e00\u500b\u70ba\u5b50\u7bc0\u9ede\u3002 \u7956\u5148 (ancestor)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e2d\uff0c\u6240\u6709\u7684\u7bc0\u9ede\u7686\u70ba\u7956\u5148\u3002\u4f9d\u984c\u76ee\u6240\u9700\uff0c\u6709\u6642\u81ea\u5df1\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff08\u5c24\u5176\u662f\u6839\u6700\u5e38\u9019\u6a23\u5b9a\u7fa9\uff09\u3002 \u5144\u5f1f (siblings)\uff1a\u76f8\u540c\u7236\u89aa\u7684\u7bc0\u9ede\u3002 \u5f8c\u4ee3 (descendant)\uff1a\u6240\u6709\u8996\u81ea\u5df1\u70ba\u7956\u5148\u7684\u9ede\uff08\u4e0d\u5305\u542b\u81ea\u5df1\uff09\u3002 \u6df1\u5ea6 (depth)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e4b\u8ddd\u96e2\u3002 \u9ad8\u5ea6 (height)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u8207\u5b83\u8ddd\u96e2\u6700\u5927\u7684\u8449\u7bc0\u9ede\u7684\u8ddd\u96e2\u7a31\u70ba\u9ad8\u5ea6\u3002\u6839\u7684\u9ad8\u5ea6\u7a31\u70ba\u9019\u6574\u9846\u6a39\u7684\u9ad8\u5ea6\u3002 \u5b50\u6a39 (subtree)\uff1a\u5982\u679c T_1 \u70ba T \u7684\u5b50\u6a39\uff0c\u5247 V_1\\in V \uff0c E_1\\in E \u3002 \u68ee\u6797 (Forest)\uff1a\u7531\u7121\u6578\u500b\u4e92\u4e0d\u9023\u901a\u7684\u6a39\u6240\u5f62\u7684\u5716\u70ba\u68ee\u6797\u3002","title":"\u8853\u8a9e"},{"location":"graph/tree/#_3","text":"N \u5143\u6a39\uff1a\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 N \u500b\u5b50\u7bc0\u9ede\uff0c\u7a31\u70ba N \u5143\u6a39\u3002 \u6700\u5e38\u898b\u662f\u4e8c\u5143\u6a39\uff0c\u4e8c\u5143\u6a39\u5169\u500b\u5b50\u7bc0\u9ede\u5206\u5225\u7a31\u70ba\u5de6\u5b50\u7bc0\u9ede (left node) \u53ca\u53f3\u5b50\u7bc0\u9ede (right node)\uff0c\u8acb\u898b\u8cc7\u6599\u7d50\u69cb\u7684 \u4e8c\u5143\u641c\u5c0b\u6a39 \u548c \u63a8 \u3002 \u7279\u6b8a\u4e8c\u5143\u6a39 Full Binary Tree\uff1a\u9664\u8449\u7bc0\u9ede\u5916\uff0c\u6bcf\u500b\u7bc0\u9ede\u90fd\u6709\u5169\u500b\u5b50\u7bc0\u9ede\u3002 Complete Binary Tree\uff1a\u6bcf\u5c64\u7bc0\u9ede\u5168\u6eff\uff0c\u9664\u4e86\u6700\u5f8c\u4e00\u5c64\uff0c\u6700\u5f8c\u4e00\u5c64\u7bc0\u9ede\u9760\u5de6\u3002 Perfect Binary Tree\uff1a\u6bcf\u5c64\u7bc0\u9ede\u5168\u6eff\uff0cperfect binary tree \u4e5f\u662f full binary tree \u548c complete binary tree\u3002","title":"\u4e8c\u5143\u6a39"},{"location":"graph/tree/#_4","text":"\u6a39\u4e5f\u662f\u4e00\u7a2e\u5716\uff0c\u4e5f\u53ef\u4ee5\u7528 Adjacency Matrix \u6216 Adjacency List\uff0c\u6bcf\u500b\u9ede\u8a18\u9304\u81ea\u5df1\u7684\u7236\u7bc0\u9ede\u548c\u5b50\u7bc0\u9ede\uff0c\u4e5f\u53ef\u4ee5\u53ea\u8a18\u9304\u5176\u4e00\uff0c\u53ea\u6709\u7d00\u9304\u7236\u7bc0\u9ede\u7684\u6a39\uff0c\u53ef\u4ee5\u7528\u4e00\u7dad\u9663\u5217\u5132\u5b58\u3002 1 int par [ MXV ]; \u4e8c\u5143\u6a39\u6700\u591a\u53ea\u6709\u5169\u500b\u7bc0\u9ede\uff08\u5de6\u5b50\u7bc0\u9ede\u548c\u53f3\u5b50\u7bc0\u9ede\uff09\uff0c\u53ef\u4ee5\u958b\u4e00\u500b\u9577\u5ea6\u70ba 2\\times V \u7684\u4e8c\u7dad\u9663\u5217\uff0c\u6216\u5169\u500b\u9577\u5ea6\u70ba 2V \u7684\u4e00\u7dad\u9663\u5217\u3002 1 2 3 int Lc [ MXV ], Rc [ MXV ]; // or int chlid [ MXV ][ 2 ]; Complete Binary Tree \u53ef\u7528\u4e00\u7dad\u9663\u5217\u5132\u5b58\uff0c\u5c07 Complete Binary Tree \u7684\u7bc0\u9ede\u5f9e\u4e0a\u5230\u4e0b\uff0c\u5f9e\u5de6\u5230\u53f3\u4f9d\u5e8f\u7de8\u865f\uff0c\u6839\u7bc0\u9ede\u70ba 0 \u6216 1 \uff1a \u7576\u6839\u70ba 0 \u6642\uff0c\u5de6\u5b50\u7bc0\u9ede\u662f 2x+1 \uff0c\u53f3\u5b50\u7bc0\u9ede\u662f 2x+2 \u7576\u6839\u70ba 1 \u6642\uff0c\u5de6\u5b50\u7bc0\u9ede\u662f 2x \uff0c\u53f3\u5b50\u7bc0\u9ede\u662f 2x+1 \u9084\u6709\u4e00\u4e9b\u6a39\u7684\u5132\u5b58\u6d89\u53ca\u6307\u6a19\uff0c\u4ee5\u4e0b\u70ba\u5e38\u898b\u7a2e\u985e\uff0c\u9019\u88e1\u4e0d\u63d0\u5982\u4f55\u5be6\u4f5c\uff1a \u4e8c\u5143\u641c\u5c0b\uff08\u5e73\u8861\uff09\u6a39 \u6a39\u7684\u65cb\u8f49 \u7dda\u6bb5\u6a39\u53ca\u76f8\u95dc\u53ef\u652f\u63f4\u5340\u9593\u67e5\u8a62\u7684\u6a39 \u5340\u9593\u522a\u9664 \u5340\u9593\u642c\u79fb","title":"\u5132\u5b58"},{"location":"graph/tree/#_5","text":"Codeforces 913B - Christmas Spruce \u6a39\u7684\u524d\u4e2d\u5f8c\u5e8f UVa 00548 - Tree","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"math/euler/","text":"\u6b50\u62c9\u51fd\u6578 \u5b9a\u7fa9 \u6b50\u62c9\u51fd\u6578\u8a08\u7b97\u5c0d\u65bc\u4e00\u500b\u6574\u6578 N\uff0c\u5c0f\u65bc\u7b49\u65bc N \u7684\u6b63\u6574\u6578\u4e2d\uff0c\u6709\u5e7e\u500b\u548c N \u4e92\u8cea\u3002\u901a\u5e38\u7528 \\Phi(n) \u8868\u793a\u3002 \u6027\u8cea \u6b50\u62c9\u51fd\u6578\u662f\u4e00\u500b\u7a4d\u6027\u51fd\u6578\uff1a\u5982\u679c gcd(p,q)=1,\\Phi(p)\\cdot\\Phi(q)=\\Phi(p\\cdot q) \u5982\u679c p \u662f\u8cea\u6578\uff1a \\Phi(p) = p-1 \u5982\u679c p \u662f\u8cea\u6578\uff1a \\Phi(p^k)=p^{k\u22121}\\times (p\u22121) \u8a08\u7b97 \u6839\u64da\u4e0a\u8ff0\u6027\u8cea\uff0c\u53ef\u6574\u7406\u51fa\u4e00\u500b\u516c\u5f0f\uff1a \\Phi(N)=N\\times\\Pi_{p|N}(1-\\frac{1}{p}) \u3002 \u8981\u8a08\u7b97 \\Phi(n) \uff0c\u53ef\u4ee5\u5229\u7528\u8cea\u56e0\u6578\u5206\u89e3\u6c42\u5f97\u3002 1 \u53e6\u4e00\u7a2e\u8fa6\u6cd5\u662f\u5229\u7528\u8cea\u6578\u7be9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void phi_table ( int n ) { phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( phi [ i ]) continue ; for ( int j = i ; j < n ; j += i ) { if ( ! phi [ j ]) phi [ j ] = j ; phi [ j ] = phi [ j ] / i * ( i - 1 ); } } } \u76f8\u95dc\u5b9a\u7406 \u8cbb\u99ac\u5c0f\u5b9a\u7406 \u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \u53ca\u4e00\u500b\u6574\u6578 a \uff0c\u90a3\u9ebc\uff1a a^p \\equiv a (\\mod p) \u5982\u679c gcd(a,p)=1 \uff0c\u5247\uff1a a^{p-1} \\equiv 1 (\\mod p) \u6b50\u62c9\u5b9a\u7406 \u6b50\u62c9\u5b9a\u7406\u662f\u6bd4\u8f03 general \u7248\u672c\u7684\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002\u7d66\u5b9a\u5169\u500b\u6574\u6578 n \u548c a \uff0c\u5982\u679c gcd(a,n)=1 \uff0c\u5247 a^{\\Phi(n)} \\equiv 1 (\\mod n) \u5982\u679c n \u662f\u8cea\u6578\uff0c \\Phi(n)=n-1 \uff0c\u4e5f\u5c31\u662f\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002 Wilson's theorem \u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \uff0c\u5247\uff1a (p-1)!\\equiv -1 (\\mod p) \u4f8b\u984c\u7df4\u7fd2 \u6b50\u62c9\u51fd\u6578 UVa 10820 - Send a Table","title":"\u6b50\u62c9\u51fd\u6578"},{"location":"math/euler/#_1","text":"","title":"\u6b50\u62c9\u51fd\u6578"},{"location":"math/euler/#_2","text":"\u6b50\u62c9\u51fd\u6578\u8a08\u7b97\u5c0d\u65bc\u4e00\u500b\u6574\u6578 N\uff0c\u5c0f\u65bc\u7b49\u65bc N \u7684\u6b63\u6574\u6578\u4e2d\uff0c\u6709\u5e7e\u500b\u548c N \u4e92\u8cea\u3002\u901a\u5e38\u7528 \\Phi(n) \u8868\u793a\u3002","title":"\u5b9a\u7fa9"},{"location":"math/euler/#_3","text":"\u6b50\u62c9\u51fd\u6578\u662f\u4e00\u500b\u7a4d\u6027\u51fd\u6578\uff1a\u5982\u679c gcd(p,q)=1,\\Phi(p)\\cdot\\Phi(q)=\\Phi(p\\cdot q) \u5982\u679c p \u662f\u8cea\u6578\uff1a \\Phi(p) = p-1 \u5982\u679c p \u662f\u8cea\u6578\uff1a \\Phi(p^k)=p^{k\u22121}\\times (p\u22121)","title":"\u6027\u8cea"},{"location":"math/euler/#_4","text":"\u6839\u64da\u4e0a\u8ff0\u6027\u8cea\uff0c\u53ef\u6574\u7406\u51fa\u4e00\u500b\u516c\u5f0f\uff1a \\Phi(N)=N\\times\\Pi_{p|N}(1-\\frac{1}{p}) \u3002 \u8981\u8a08\u7b97 \\Phi(n) \uff0c\u53ef\u4ee5\u5229\u7528\u8cea\u56e0\u6578\u5206\u89e3\u6c42\u5f97\u3002 1 \u53e6\u4e00\u7a2e\u8fa6\u6cd5\u662f\u5229\u7528\u8cea\u6578\u7be9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void phi_table ( int n ) { phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( phi [ i ]) continue ; for ( int j = i ; j < n ; j += i ) { if ( ! phi [ j ]) phi [ j ] = j ; phi [ j ] = phi [ j ] / i * ( i - 1 ); } } }","title":"\u8a08\u7b97"},{"location":"math/euler/#_5","text":"","title":"\u76f8\u95dc\u5b9a\u7406"},{"location":"math/euler/#_6","text":"\u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \u53ca\u4e00\u500b\u6574\u6578 a \uff0c\u90a3\u9ebc\uff1a a^p \\equiv a (\\mod p) \u5982\u679c gcd(a,p)=1 \uff0c\u5247\uff1a a^{p-1} \\equiv 1 (\\mod p)","title":"\u8cbb\u99ac\u5c0f\u5b9a\u7406"},{"location":"math/euler/#_7","text":"\u6b50\u62c9\u5b9a\u7406\u662f\u6bd4\u8f03 general \u7248\u672c\u7684\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002\u7d66\u5b9a\u5169\u500b\u6574\u6578 n \u548c a \uff0c\u5982\u679c gcd(a,n)=1 \uff0c\u5247 a^{\\Phi(n)} \\equiv 1 (\\mod n) \u5982\u679c n \u662f\u8cea\u6578\uff0c \\Phi(n)=n-1 \uff0c\u4e5f\u5c31\u662f\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002","title":"\u6b50\u62c9\u5b9a\u7406"},{"location":"math/euler/#wilsons-theorem","text":"\u7d66\u5b9a\u4e00\u500b\u8cea\u6578 p \uff0c\u5247\uff1a (p-1)!\\equiv -1 (\\mod p)","title":"Wilson's theorem"},{"location":"math/euler/#_8","text":"\u6b50\u62c9\u51fd\u6578 UVa 10820 - Send a Table","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"math/mod/","text":"\u6a21 \u53d6\u9918\u6578\u3002 \u6027\u8cea \u52a0\u6cd5\uff1a (a+b) \\operatorname{mod} p= (a \\operatorname{mod} p +b \\operatorname{mod} p ) \\operatorname{mod} p \u6e1b\u6cd5\uff1a (a-b) \\operatorname{mod} p= (a \\operatorname{mod} p -b \\operatorname{mod} p +p) \\operatorname{mod} p \u4e58\u6cd5\uff1a (a*b) \\operatorname{mod} p= (a \\operatorname{mod} p\\cdot b \\operatorname{mod} p ) \\operatorname{mod} p \u6b21\u65b9\uff1a (a^b) \\operatorname{mod} p= ((a \\operatorname{mod} p )^b) \\operatorname{mod} p \u52a0\u6cd5\u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p+c) \\operatorname{mod} p = (a+(b+c)) \\operatorname{mod} p \u4e58\u6cd5\u7d50\u5408\u5f8b\uff1a ((a\\cdot b) \\operatorname{mod} p\\cdot c) \\operatorname{mod} p = (a\\cdot (b\\cdot c)) \\operatorname{mod} p \u52a0\u6cd5\u4ea4\u63db\u5f8b\uff1a (a+b) \\operatorname{mod} p=(b+a) \\operatorname{mod} p \u4e58\u6cd5\u4ea4\u63db\u5f8b\uff1a (a\\cdot b) \\operatorname{mod} p=(b\\cdot a) \\operatorname{mod} p \u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p\\cdot c)= ((a\\cdot c) \\operatorname{mod} p +(b\\cdot c) \\operatorname{mod} p ) \\operatorname{mod} p \u540c\u9918 \u5982\u679c a\\equiv b (\\operatorname{mod} m) \uff0c\u6211\u5011\u6703\u8aaa a,b \u5728\u6a21 m \u4e0b\u540c\u9918\u3002 \u4ee5\u4e0b\u70ba\u6027\u8cea\uff1a \u6574\u9664\u6027\uff1a a\\equiv b \\quad (\\operatorname{mod} m) \\Rightarrow c \\cdot m = a - b , c \\in \\mathbb{Z}\\\\\\Rightarrow a \\equiv b\\quad ( \\operatorname{mod} m ) \\Rightarrow m \\; | \\; a-b \u905e\u79fb\u6027\uff1a\u82e5 a \\equiv b \\quad (\\operatorname{mod} c) , b \\equiv d \\quad (\\operatorname{mod} c)\\\\ \u5247\\ a \\equiv d (\\operatorname{mod} c) \u4fdd\u6301\u57fa\u672c\u904b\u7b97\uff1a \\left \\{ \\begin{matrix} a \\equiv b (\\operatorname{mod} m)\\\\ c \\equiv d (\\operatorname{mod} m)\\end{matrix}\\right. \\Rightarrow \\left\\{\\begin{matrix}a \\pm c \\equiv b \\pm d (\\operatorname{mod} m)\\\\ a \\cdot c \\equiv b \\cdot d (\\operatorname{mod} m)\\end{matrix}\\right. \u653e\u5927\u7e2e\u5c0f\u6a21\u6578\uff1a k \\in \\mathbb{Z}^+ , a \\equiv b \\quad (\\operatorname{mod} m) \\Leftrightarrow k \\cdot a \\equiv k \\cdot b \\quad (\\operatorname{mod} k \\cdot m) \u5feb\u901f\u51aa \u6211\u5011\u5e38\u5e38\u9047\u5230\u6c42 a^b mod\\ c \u70ba\u591a\u5c11\u7684\u984c\u76ee\uff0c\u6700\u7c21\u55ae\u7684\u4f5c\u6cd5\u662f\u7528\u8ff4\u5708\u82b1 b \u6b21\u7b97\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5728 b \u5f88\u5927\u6642\u5c31\u7121\u6cd5\u5feb\u901f\u7b97\u51fa\u3002\u9019\u6642\u5982\u679c\u62c6\u6210 a^1,a^2,a^4,...,a^{2^x} \uff0c\u5148\u5206\u5225\u8a08\u7b97\u5728\u4e58\u8d77\u4f86\uff0c\u9019\u6a23\u53ea\u8981\u82b1\u8cbb O(\\log b) \u7684\u6642\u9593\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 T pow ( int a , int b , int c ) { // calculate a^b%c T res = 1 , tmp = a ; for (; b ; b >>= 1 ) { if ( b & 1 ) res = res * tmp % c ; tmp = tmp * tmp % c ; } return res ; } \u6a21\u9006\u5143 \u6a21\u9006\u5143\u662f\u53d6\u6a21\u4e0b\u7684\u53cd\u5143\u7d20\uff0c\u5373\u70ba\u627e\u5230 a^{-1} \u4f7f\u5f97 aa^{-1}\\equiv\\ 1\\operatorname{mod} c \u3002 \u6574\u6578 a \u5728 \\operatorname{mod} c \u4e0b\u8981\u6709\u6a21\u53cd\u5143\u7d20\u7684\u5145\u5206\u5fc5\u8981\u689d\u4ef6\u70ba a,c \u4e92\u8cea\u3002 \u6a21\u9006\u5143\u5982\u679c\u5b58\u5728\u6703\u6709\u7121\u9650\u500b\uff0c\u4efb\u610f\u5169\u76f8\u9130\u6a21\u9006\u5143\u76f8\u5dee c \u3002 \u65b9\u6cd5\u4e00\uff1a\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5 \u8c9d\u7956\u5b9a\u7406 \u4ee4 a,c \u70ba\u975e 0 \u6574\u6578\uff0c\u5b58\u5728\u6574\u6578\u89e3 x,y \u4f7f\u5f97 ax+cy=gcd(a,c) \u5f9e\u4e0a\u6587\u53ef\u5f97\u77e5\uff0c\u5982\u679c gcd(a,c)=1 \uff0c\u5247 a \u5728 \\operatorname{mod} c \u4e0b\u6709\u6a21\u53cd\u5143\u7d20\uff0c\u53c8\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\u53ef\u77e5\u5b58\u5728\u6574\u6578 x,y \uff0c\u4f7f\u5f97 ax+cy=gcd(a,c)=1 \uff0c\u9019\u88e1\u7684 x \u5373\u70ba a \u7684\u53cd\u5143\u7d20\u3002\u6211\u5011\u53ef\u4ee5\u4fee\u6539\u627e\u6700\u5927\u516c\u56e0\u6578\u7684\u8fa6\u6cd5\uff0c\u627e\u51fa a \u7684\u6a21\u9006\u5143\uff0c\u9019\u500b\u7b97\u6cd5\u7a31\u70ba\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5\u3002\u9019\u500b\u6f14\u7b97\u6cd5\u53ef\u4ee5\u63a8\u5ee3\u5230 ax+cy=d,d\\in\\mathbb{Z} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // ax+by=c int extgcd ( int a , int b , int c , int & x , int & y ) { int d = a ; if ( b ) { d = extgcd ( b , a % b , c , y , x ); y -= ( a / b ) * x ; } else { x = c ; y = 0 ; } return d ; } \u65b9\u6cd5\u4e8c\uff1a\u5feb\u901f\u51aa \u6839\u64da\u6b50\u62c9\u5b9a\u7406\uff0c\u5982\u679c gcd(a,c)=1 \uff0c\u5247 a^{\\Phi(c)} \\equiv 1 (\\mod c) \uff0c\u5c07\u5f0f\u5b50\u7a0d\u5fae\u6539\u8b8a\u4e00\u4e0b\uff0c\u6211\u5011\u5f97\u51fa aa^{\\Phi(c)-1} \\equiv 1 (\\operatorname{mod} c) \uff0c a^{\\Phi(c)-1} \u662f a \u5728 \\operatorname{mod} c \u4e0b\u7684\u4e00\u500b\u6a21\u9006\u5143\u3002\u53ef\u4ee5\u5229\u7528\u5feb\u901f\u51aa\u8a08\u7b97 a^{\\Phi(c)-1}\\operatorname{mod} c \u7b97\u51fa\u6a21\u9006\u5143\u3002 \u4e2d\u570b\u5269\u9918\u5b9a\u7406 (Chinese Remainder Theorem) \u4e2d\u570b\u5269\u9918\u5b9a\u7406\uff0c\u53c8\u7a31\u4e2d\u570b\u9918\u6578\u5b9a\u7406\uff0c\u662f\u6578\u8ad6\u4e2d\u7684\u4e00\u500b\u95dc\u65bc\u4e00\u5143\u7dda\u6027\u540c\u9918\u65b9\u7a0b\u7d44\u7684\u5b9a\u7406\u3002\u7528\u4f86\u89e3\u6c7a\u50cf\u4e0b\u9762\u9019\u7a2e\u554f\u984c\uff1a \"\u6709\u7269\u4e0d\u77e5\u5176\u6578\uff0c\u4e09\u4e09\u6578\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6578\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6578\u4e4b\u5269\u4e8c\u3002\u554f\u7269\u5e7e\u4f55\uff1f\"\uff0c\u9019\u984c\u7b54\u6848\u70ba 23+105n,n>=0 \u5217\u51fa\u9019\u7a2e\u554f\u984c\u7684\u5f0f\u5b50\uff08\u8a2d m_i \u5169\u5169\u4e92\u8cea\uff09\uff1a \\left \\{ \\begin{matrix} X\\equiv r_1 (\\operatorname{mod} m_1)\\\\ X\\equiv r_2 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ X\\equiv r_n (\\operatorname{mod} m_n)\\end{matrix}\\right. \u89e3\u6c7a\u9019\u985e\u554f\u984c\u6700\u7c21\u55ae\u662f\u7528\u679a\u8209\u4f86\u6c42\u89e3\uff0c\u4e0d\u904e\u5982\u679c\u7bc4\u570d\u592a\u5927\u5c31\u6703\u5403 TLE \u4e86\u3002\u56e0\u6b64\u6211\u5011\u5148\u5217\u51fa n \u500b\u6578\u5b57 ans_1,ans_2,...,ans_n : \\left \\{ \\begin{matrix} ans_1\\equiv r_1 (\\operatorname{mod} m_1)\\\\ ans_1\\equiv 0 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ ans_1\\equiv 0 (\\operatorname{mod} m_n)\\end{matrix}\\right. \\left \\{ \\begin{matrix} ans_2\\equiv 0 (\\operatorname{mod} m_1)\\\\ ans_2\\equiv r_2 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ ans_2\\equiv 0 (\\operatorname{mod} m_n)\\end{matrix}\\right. ... \\left \\{ \\begin{matrix} ans_n\\equiv 0 (\\operatorname{mod} m_1)\\\\ ans_n\\equiv 0 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ ans_n\\equiv r_n (\\operatorname{mod} m_n)\\end{matrix}\\right. \u5206\u5225\u7b97\u51fa\u7b54\u6848\u5f8c\uff0c\u6839\u64da\u52a0\u6cd5\u5728\u6a21\u904b\u7b97\u4e0b\u7684\u6027\u8cea\uff0c n \u500b\u6578\u5b57\u7684\u548c\uff0c\u6b63\u662f\u6211\u5011\u60f3\u8981\u7684\u7b54\u6848\u3002 \u5c07\u984c\u76ee\u5206\u6210 n \u500b\u5f0f\u5b50\u5f8c\uff0c\u96e3\u5ea6\u4e00\u4e0b\u964d\u4f4e\u8a31\u591a\uff0c\u73fe\u5728\u6211\u5011\u53ea\u8981\u6703\u89e3\u958b\u6bcf\u500b\u5f0f\u5b50\u5c31\u884c\u4e86\u3002\u4ee5\u4e0b\u4ee5 ans_1 \u70ba\u4f8b\uff1a ans_1 \u986f\u7136\u6574\u9664 m_2,...,m_n \uff0c\u4ee4 Y_1=\\frac{\\Pi_{i=1}^{n} m_i}{m_1} \uff0c\u53ef\u5217\u51fa\u5f0f\u5b50 ans_1=Y_1Z_1\\equiv r_1 (\\operatorname{mod} m_1) \u3002\u65bc\u662f\u539f\u5f0f\u5c31\u8b8a\u6210\u627e\u6a21\u9006\u5143\u7684\u554f\u984c\u3002 1 2 3 4 5 6 7 8 9 10 LL P = 1 , ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) P *= m [ i ]; for ( int i = 0 ; i < n ; ++ i ) { LL a = P / m [ i ], x , y ; extgcd ( a , m [ i ], x , y ); ans = ( ans + r [ i ] * a * x ) % P ; } cout << ( ans + P ) % P << '\\n' ; \u4f8b\u984c\u7df4\u7fd2 \u5feb\u901f\u51aa UVa 11609 - Teams \u6a21\u9006\u5143 Zerojudge a289: Modular Multiplicative Inverse \u4e2d\u570b\u5269\u9918\u5b9a\u7406 Zerojudge c641: \u6eff\u6eff\u7684\u7cd6\u679c\u5c4b #2 \uff08\u5099\u8a3b\uff1a\u9019\u4e00\u984c\u738b\u8001\u5e2b\u5e36\u7684\u9322\u5fc5\u5b9a\u80fd\u8cb7\u81f3\u5c11\u4e00\u9846\u7cd6\u679c\uff09 Discrete mathematics - Chinese Remainder Theorem \u21a9","title":"\u6a21"},{"location":"math/mod/#_1","text":"\u53d6\u9918\u6578\u3002","title":"\u6a21"},{"location":"math/mod/#_2","text":"\u52a0\u6cd5\uff1a (a+b) \\operatorname{mod} p= (a \\operatorname{mod} p +b \\operatorname{mod} p ) \\operatorname{mod} p \u6e1b\u6cd5\uff1a (a-b) \\operatorname{mod} p= (a \\operatorname{mod} p -b \\operatorname{mod} p +p) \\operatorname{mod} p \u4e58\u6cd5\uff1a (a*b) \\operatorname{mod} p= (a \\operatorname{mod} p\\cdot b \\operatorname{mod} p ) \\operatorname{mod} p \u6b21\u65b9\uff1a (a^b) \\operatorname{mod} p= ((a \\operatorname{mod} p )^b) \\operatorname{mod} p \u52a0\u6cd5\u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p+c) \\operatorname{mod} p = (a+(b+c)) \\operatorname{mod} p \u4e58\u6cd5\u7d50\u5408\u5f8b\uff1a ((a\\cdot b) \\operatorname{mod} p\\cdot c) \\operatorname{mod} p = (a\\cdot (b\\cdot c)) \\operatorname{mod} p \u52a0\u6cd5\u4ea4\u63db\u5f8b\uff1a (a+b) \\operatorname{mod} p=(b+a) \\operatorname{mod} p \u4e58\u6cd5\u4ea4\u63db\u5f8b\uff1a (a\\cdot b) \\operatorname{mod} p=(b\\cdot a) \\operatorname{mod} p \u7d50\u5408\u5f8b\uff1a ((a+b) \\operatorname{mod} p\\cdot c)= ((a\\cdot c) \\operatorname{mod} p +(b\\cdot c) \\operatorname{mod} p ) \\operatorname{mod} p","title":"\u6027\u8cea"},{"location":"math/mod/#_3","text":"\u5982\u679c a\\equiv b (\\operatorname{mod} m) \uff0c\u6211\u5011\u6703\u8aaa a,b \u5728\u6a21 m \u4e0b\u540c\u9918\u3002 \u4ee5\u4e0b\u70ba\u6027\u8cea\uff1a \u6574\u9664\u6027\uff1a a\\equiv b \\quad (\\operatorname{mod} m) \\Rightarrow c \\cdot m = a - b , c \\in \\mathbb{Z}\\\\\\Rightarrow a \\equiv b\\quad ( \\operatorname{mod} m ) \\Rightarrow m \\; | \\; a-b \u905e\u79fb\u6027\uff1a\u82e5 a \\equiv b \\quad (\\operatorname{mod} c) , b \\equiv d \\quad (\\operatorname{mod} c)\\\\ \u5247\\ a \\equiv d (\\operatorname{mod} c) \u4fdd\u6301\u57fa\u672c\u904b\u7b97\uff1a \\left \\{ \\begin{matrix} a \\equiv b (\\operatorname{mod} m)\\\\ c \\equiv d (\\operatorname{mod} m)\\end{matrix}\\right. \\Rightarrow \\left\\{\\begin{matrix}a \\pm c \\equiv b \\pm d (\\operatorname{mod} m)\\\\ a \\cdot c \\equiv b \\cdot d (\\operatorname{mod} m)\\end{matrix}\\right. \u653e\u5927\u7e2e\u5c0f\u6a21\u6578\uff1a k \\in \\mathbb{Z}^+ , a \\equiv b \\quad (\\operatorname{mod} m) \\Leftrightarrow k \\cdot a \\equiv k \\cdot b \\quad (\\operatorname{mod} k \\cdot m)","title":"\u540c\u9918"},{"location":"math/mod/#_4","text":"\u6211\u5011\u5e38\u5e38\u9047\u5230\u6c42 a^b mod\\ c \u70ba\u591a\u5c11\u7684\u984c\u76ee\uff0c\u6700\u7c21\u55ae\u7684\u4f5c\u6cd5\u662f\u7528\u8ff4\u5708\u82b1 b \u6b21\u7b97\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5728 b \u5f88\u5927\u6642\u5c31\u7121\u6cd5\u5feb\u901f\u7b97\u51fa\u3002\u9019\u6642\u5982\u679c\u62c6\u6210 a^1,a^2,a^4,...,a^{2^x} \uff0c\u5148\u5206\u5225\u8a08\u7b97\u5728\u4e58\u8d77\u4f86\uff0c\u9019\u6a23\u53ea\u8981\u82b1\u8cbb O(\\log b) \u7684\u6642\u9593\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 T pow ( int a , int b , int c ) { // calculate a^b%c T res = 1 , tmp = a ; for (; b ; b >>= 1 ) { if ( b & 1 ) res = res * tmp % c ; tmp = tmp * tmp % c ; } return res ; }","title":"\u5feb\u901f\u51aa"},{"location":"math/mod/#_5","text":"\u6a21\u9006\u5143\u662f\u53d6\u6a21\u4e0b\u7684\u53cd\u5143\u7d20\uff0c\u5373\u70ba\u627e\u5230 a^{-1} \u4f7f\u5f97 aa^{-1}\\equiv\\ 1\\operatorname{mod} c \u3002 \u6574\u6578 a \u5728 \\operatorname{mod} c \u4e0b\u8981\u6709\u6a21\u53cd\u5143\u7d20\u7684\u5145\u5206\u5fc5\u8981\u689d\u4ef6\u70ba a,c \u4e92\u8cea\u3002 \u6a21\u9006\u5143\u5982\u679c\u5b58\u5728\u6703\u6709\u7121\u9650\u500b\uff0c\u4efb\u610f\u5169\u76f8\u9130\u6a21\u9006\u5143\u76f8\u5dee c \u3002","title":"\u6a21\u9006\u5143"},{"location":"math/mod/#_6","text":"\u8c9d\u7956\u5b9a\u7406 \u4ee4 a,c \u70ba\u975e 0 \u6574\u6578\uff0c\u5b58\u5728\u6574\u6578\u89e3 x,y \u4f7f\u5f97 ax+cy=gcd(a,c) \u5f9e\u4e0a\u6587\u53ef\u5f97\u77e5\uff0c\u5982\u679c gcd(a,c)=1 \uff0c\u5247 a \u5728 \\operatorname{mod} c \u4e0b\u6709\u6a21\u53cd\u5143\u7d20\uff0c\u53c8\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\u53ef\u77e5\u5b58\u5728\u6574\u6578 x,y \uff0c\u4f7f\u5f97 ax+cy=gcd(a,c)=1 \uff0c\u9019\u88e1\u7684 x \u5373\u70ba a \u7684\u53cd\u5143\u7d20\u3002\u6211\u5011\u53ef\u4ee5\u4fee\u6539\u627e\u6700\u5927\u516c\u56e0\u6578\u7684\u8fa6\u6cd5\uff0c\u627e\u51fa a \u7684\u6a21\u9006\u5143\uff0c\u9019\u500b\u7b97\u6cd5\u7a31\u70ba\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5\u3002\u9019\u500b\u6f14\u7b97\u6cd5\u53ef\u4ee5\u63a8\u5ee3\u5230 ax+cy=d,d\\in\\mathbb{Z} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // ax+by=c int extgcd ( int a , int b , int c , int & x , int & y ) { int d = a ; if ( b ) { d = extgcd ( b , a % b , c , y , x ); y -= ( a / b ) * x ; } else { x = c ; y = 0 ; } return d ; }","title":"\u65b9\u6cd5\u4e00\uff1a\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5"},{"location":"math/mod/#_7","text":"\u6839\u64da\u6b50\u62c9\u5b9a\u7406\uff0c\u5982\u679c gcd(a,c)=1 \uff0c\u5247 a^{\\Phi(c)} \\equiv 1 (\\mod c) \uff0c\u5c07\u5f0f\u5b50\u7a0d\u5fae\u6539\u8b8a\u4e00\u4e0b\uff0c\u6211\u5011\u5f97\u51fa aa^{\\Phi(c)-1} \\equiv 1 (\\operatorname{mod} c) \uff0c a^{\\Phi(c)-1} \u662f a \u5728 \\operatorname{mod} c \u4e0b\u7684\u4e00\u500b\u6a21\u9006\u5143\u3002\u53ef\u4ee5\u5229\u7528\u5feb\u901f\u51aa\u8a08\u7b97 a^{\\Phi(c)-1}\\operatorname{mod} c \u7b97\u51fa\u6a21\u9006\u5143\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u5feb\u901f\u51aa"},{"location":"math/mod/#chinese-remainder-theorem","text":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406\uff0c\u53c8\u7a31\u4e2d\u570b\u9918\u6578\u5b9a\u7406\uff0c\u662f\u6578\u8ad6\u4e2d\u7684\u4e00\u500b\u95dc\u65bc\u4e00\u5143\u7dda\u6027\u540c\u9918\u65b9\u7a0b\u7d44\u7684\u5b9a\u7406\u3002\u7528\u4f86\u89e3\u6c7a\u50cf\u4e0b\u9762\u9019\u7a2e\u554f\u984c\uff1a \"\u6709\u7269\u4e0d\u77e5\u5176\u6578\uff0c\u4e09\u4e09\u6578\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6578\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6578\u4e4b\u5269\u4e8c\u3002\u554f\u7269\u5e7e\u4f55\uff1f\"\uff0c\u9019\u984c\u7b54\u6848\u70ba 23+105n,n>=0 \u5217\u51fa\u9019\u7a2e\u554f\u984c\u7684\u5f0f\u5b50\uff08\u8a2d m_i \u5169\u5169\u4e92\u8cea\uff09\uff1a \\left \\{ \\begin{matrix} X\\equiv r_1 (\\operatorname{mod} m_1)\\\\ X\\equiv r_2 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ X\\equiv r_n (\\operatorname{mod} m_n)\\end{matrix}\\right. \u89e3\u6c7a\u9019\u985e\u554f\u984c\u6700\u7c21\u55ae\u662f\u7528\u679a\u8209\u4f86\u6c42\u89e3\uff0c\u4e0d\u904e\u5982\u679c\u7bc4\u570d\u592a\u5927\u5c31\u6703\u5403 TLE \u4e86\u3002\u56e0\u6b64\u6211\u5011\u5148\u5217\u51fa n \u500b\u6578\u5b57 ans_1,ans_2,...,ans_n : \\left \\{ \\begin{matrix} ans_1\\equiv r_1 (\\operatorname{mod} m_1)\\\\ ans_1\\equiv 0 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ ans_1\\equiv 0 (\\operatorname{mod} m_n)\\end{matrix}\\right. \\left \\{ \\begin{matrix} ans_2\\equiv 0 (\\operatorname{mod} m_1)\\\\ ans_2\\equiv r_2 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ ans_2\\equiv 0 (\\operatorname{mod} m_n)\\end{matrix}\\right. ... \\left \\{ \\begin{matrix} ans_n\\equiv 0 (\\operatorname{mod} m_1)\\\\ ans_n\\equiv 0 (\\operatorname{mod} m_2)\\\\ \\cdot \\\\ \\cdot \\\\ ans_n\\equiv r_n (\\operatorname{mod} m_n)\\end{matrix}\\right. \u5206\u5225\u7b97\u51fa\u7b54\u6848\u5f8c\uff0c\u6839\u64da\u52a0\u6cd5\u5728\u6a21\u904b\u7b97\u4e0b\u7684\u6027\u8cea\uff0c n \u500b\u6578\u5b57\u7684\u548c\uff0c\u6b63\u662f\u6211\u5011\u60f3\u8981\u7684\u7b54\u6848\u3002 \u5c07\u984c\u76ee\u5206\u6210 n \u500b\u5f0f\u5b50\u5f8c\uff0c\u96e3\u5ea6\u4e00\u4e0b\u964d\u4f4e\u8a31\u591a\uff0c\u73fe\u5728\u6211\u5011\u53ea\u8981\u6703\u89e3\u958b\u6bcf\u500b\u5f0f\u5b50\u5c31\u884c\u4e86\u3002\u4ee5\u4e0b\u4ee5 ans_1 \u70ba\u4f8b\uff1a ans_1 \u986f\u7136\u6574\u9664 m_2,...,m_n \uff0c\u4ee4 Y_1=\\frac{\\Pi_{i=1}^{n} m_i}{m_1} \uff0c\u53ef\u5217\u51fa\u5f0f\u5b50 ans_1=Y_1Z_1\\equiv r_1 (\\operatorname{mod} m_1) \u3002\u65bc\u662f\u539f\u5f0f\u5c31\u8b8a\u6210\u627e\u6a21\u9006\u5143\u7684\u554f\u984c\u3002 1 2 3 4 5 6 7 8 9 10 LL P = 1 , ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) P *= m [ i ]; for ( int i = 0 ; i < n ; ++ i ) { LL a = P / m [ i ], x , y ; extgcd ( a , m [ i ], x , y ); ans = ( ans + r [ i ] * a * x ) % P ; } cout << ( ans + P ) % P << '\\n' ;","title":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406 (Chinese Remainder Theorem)"},{"location":"math/mod/#_8","text":"\u5feb\u901f\u51aa UVa 11609 - Teams \u6a21\u9006\u5143 Zerojudge a289: Modular Multiplicative Inverse \u4e2d\u570b\u5269\u9918\u5b9a\u7406 Zerojudge c641: \u6eff\u6eff\u7684\u7cd6\u679c\u5c4b #2 \uff08\u5099\u8a3b\uff1a\u9019\u4e00\u984c\u738b\u8001\u5e2b\u5e36\u7684\u9322\u5fc5\u5b9a\u80fd\u8cb7\u81f3\u5c11\u4e00\u9846\u7cd6\u679c\uff09 Discrete mathematics - Chinese Remainder Theorem \u21a9","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"math/primeandfactor/","text":"\u8cea\u6578\u8207\u56e0\u6578 \u8cea\u6578 \u8cea\u6578\u70ba\u56e0\u6578\u53ea\u6709 1 \u548c\u81ea\u5df1\u7684\u6578\uff0c\u8cea\u6578\u554f\u984c\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u5e38\u5e38\u9047\u5230\uff0c\u901a\u6703\u5efa\u7acb\u8cea\u6578\u8868\u4f86\u67e5\u8a62\u8cea\u6578\u3002 \u4e00\u822c\u7be9\u6cd5 \u6bcf\u627e\u5230\u4e00\u500b\u8cea\u6578 x \uff0c\u5c31\u77e5\u9053 2x, 3x, 4x... \u90fd\u4e0d\u662f\u8cea\u6578\uff0c\u628a\u4ed6\u5011\u5f9e\u5019\u9078\u540d\u55ae\u5243\u9664\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector < int > p ; bitset < MAXN > is_notp ; void PrimeTable ( int n ) { is_notp . reset (); is_notp [ 0 ] = is_notp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( is_notp [ i ]) continue ; p . push_back ( i ); for ( int j = i * i ; j <= n ; j += i ) { is_notp [ j ] = 1 ; } } } \u8907\u96dc\u5ea6\u53ef\u5230 O(N\\log\\log N) \uff0c\u5982\u679c\u4e0d\u5f9e\u5e73\u65b9\u958b\u59cb\u5243\u9664\uff0c\u5247\u6703\u9000\u5316\u81f3 O(N\\log N) \u7dda\u6027\u7be9\u6cd5 \u6bcf\u500b\u5408\u6578\u90fd\u53ea\u88ab\u5176\u6700\u5c0f\u8cea\u56e0\u6578\u5254\u9664\uff0c\u6b64\u7b97\u6cd5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 vector < int > p ; bitset < MAXN > is_notp ; void PrimeTable ( int n ) { is_notp . reset (); is_notp [ 0 ] = is_notp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { if ( ! is_notp [ i ]) p . push_back ( i ); for ( int j = 0 ; j < ( int ) p . size (); ++ j ) { if ( i * p [ j ] > n ) break ; is_notp [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) break ; } } } \u7a0b\u5f0f\u78bc\u95dc\u9375\u5728\u65bc if (i % p[j] == 0) \uff0c\u7531\u65bc p \u88e1\u9762\u7684\u5143\u7d20\u90fd\u662f\u905e\u589e\u7684\uff0c\u7576\u9019\u884c\u6210\u7acb\uff0c\u4ee3\u8868 i \u7684 p[j] \u6700\u5c0f\u8cea\u6578\uff0c i\\cdot p[j+1], i\\cdot p[j+2], ... \u90fd\u662f p[j] \u7684\u500d\u6578\uff0c\u90fd\u5df2\u7d93\u88ab p[j] \u5254\u9664\uff08\u4f8b\u5982\uff1a 9 \u7684\u6700\u5c0f\u8cea\u56e0\u6578\u70ba 3 \uff0c 9\\cdot 5,9\\cdot 7 \u90fd\u662f 3 \u7684\u500d\u6578\uff0c\u4ed6\u5011\u6703\u88ab 3 \u5254\u9664\uff09\uff0c\u56e0\u6b64\u4e0d\u5fc5\u518d\u7be9\u4e0b\u53bb\u3002 \u56e0\u6578 \u6211\u5011\u80fd\u5c07\u4efb\u610f\u4e00\u500b\u6b63\u6574\u6578\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u5f62\u5f0f\u70ba N=P_{1}^{x_{1}}P_{2}^{x_{2}}P_{3}^{x_{3}}...=\\Pi P_{i}^{x_{i}} \uff0c\u6839\u64da\u6b64\u5f62\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u6c42\u51fa\u4efb\u4e00\u6b63\u6574\u6578\u7684\u56e0\u6578\u500b\u6578\u53ca\u56e0\u6578\u7e3d\u548c \u56e0\u6578\u500b\u6578\uff1a (x_{1}+1)(x_{2}+1)(x_{3}+1)...=\\Pi (x_{i}+1) \u56e0\u6578\u7e3d\u548c\uff1a (P_{1}^{0}+P_{1}^{1}+...+P_{1}^{x_{1}})(P_{2}^{0}+P_{2}^{1}+...+P_{2}^{x_{2}})...=\\Pi\\Sigma_{j=0}^{x_{i}}(P_{i}^{j}) \u6700\u5927\u516c\u56e0\u6578 \u6700\u5927\u516c\u56e0\u6578 (Greatest Common Divisor, GCD)\uff0c\u53ef\u4ee5\u7528\u8f3e\u8f49\u76f8\u9664\u6cd5\u6c42\u5f97\u3002 1 2 3 4 5 6 int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ); } \u8907\u96dc\u5ea6\u70ba O(\\log(min(a,b))) \uff0c\u6700\u6158\u72c0\u6cc1\u767c\u751f\u5728\u5169\u6578\u70ba\u8cbb\u5f0f\u6578\u5217\u76f8\u9130\u9805\u6642\uff0c C++<algorithm> \u6709\u5167\u5efa\u7684 __gcd \u53ef\u4ee5\u7528\u3002 \u6700\u5c0f\u516c\u500d\u6578 (Least Common Multiple,LCM)\uff0c\u5247\u70ba\u5169\u6578\u76f8\u4e58\u518d\u9664\u4ee5\u4ed6\u5011\u7684 GCD\uff0c\u70ba\u907f\u514d\u6ea2\u4f4d\u72c0\u6cc1\uff0c\u53ef\u5148\u5c07\u4e00\u6578\u9664\u4ee5 GCD\uff0c\u518d\u4e58\u4ee5\u53e6\u5916\u4e00\u6578\u3002 \u8cea\u56e0\u6578\u5206\u89e3 \u8cea\u56e0\u6578\u5206\u89e3 \u7d66\u5b9a\u4e00\u500b\u6578\u5b57 N \uff0c\u8acb\u5217\u51fa\u4ed6\u7684\u6240\u6709\u8cea\u6578\u3002 \u8cea\u56e0\u6578\u662f\u4e00\u9053\u5e38\u898b\u7684\u984c\u76ee\uff0c\u4ee5\u4e0b\u6709\u5e7e\u500b\u8981\u9ede\uff1a \u53ea\u8981\u679a\u8209\u6240\u6709 \\leq\\sqrt{N} \u7684\u8cea\u6578\u3002 N \u5728\u8cea\u56e0\u6578\u5206\u89e3\u7684\u904e\u7a0b\u4e2d\u6703\u4e00\u76f4\u88ab\u66f4\u65b0\uff0c\u7576\u627e\u5230 N \u7684\u4e00\u500b\u8cea\u6578 p \uff0c\u8acb\u5c07 N \u9664\u4ee5 p \u5f97\u5230\u65b0\u7684 N \uff0c\u7e2e\u5c0f\u641c\u5c0b\u7bc4\u570d\uff0c\u82e5\u662f\u65b0\u7684 N \u9084\u53ef\u88ab p \u6574\u9664\uff0c\u91cd\u8907\u4e0a\u8ff0\u52d5\u4f5c\uff0c\u76f4\u5230 N \u7121\u6cd5\u88ab p \u6574\u9664\u3002 \u6700\u5f8c\u518d\u6aa2\u67e5 N \u662f\u5426\u70ba 1 \uff0c\u82e5\u4e0d\u662f\uff0c\u5247 N \u4e5f\u662f\u8cea\u6578\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void primeFactorization ( int n ) { for ( int i = 0 ; i < ( int ) p . size (); ++ i ) { if ( p [ i ] * p [ i ] > n ) break ; if ( n % p [ i ]) continue ; cout << p [ i ] << ' ' ; while ( n % p [ i ] == 0 ) { n /= p [ i ]; } } if ( n != 1 ) { cout << n << ' ' ; } cout << '\\n' ; } \u4f8b\u984c\u7df4\u7fd2 \u8cea\u6578\u7be9\u6cd5 UVa 406 - Prime Cuts \u53ea\u8981\u5148\u6c42\u51fa\u6700\u5927\u6578\u7684\u5e73\u65b9\u6839\u5167\u7684\u8cea\u6578\uff1a UVa 10140 - Prime Distance \u8cea\u56e0\u6578\u5206\u89e3 Zerojudge a010: \u56e0\u6578\u5206\u89e3","title":"\u8cea\u6578\u548c\u56e0\u6578"},{"location":"math/primeandfactor/#_1","text":"","title":"\u8cea\u6578\u8207\u56e0\u6578"},{"location":"math/primeandfactor/#_2","text":"\u8cea\u6578\u70ba\u56e0\u6578\u53ea\u6709 1 \u548c\u81ea\u5df1\u7684\u6578\uff0c\u8cea\u6578\u554f\u984c\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u5e38\u5e38\u9047\u5230\uff0c\u901a\u6703\u5efa\u7acb\u8cea\u6578\u8868\u4f86\u67e5\u8a62\u8cea\u6578\u3002","title":"\u8cea\u6578"},{"location":"math/primeandfactor/#_3","text":"\u6bcf\u627e\u5230\u4e00\u500b\u8cea\u6578 x \uff0c\u5c31\u77e5\u9053 2x, 3x, 4x... \u90fd\u4e0d\u662f\u8cea\u6578\uff0c\u628a\u4ed6\u5011\u5f9e\u5019\u9078\u540d\u55ae\u5243\u9664\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector < int > p ; bitset < MAXN > is_notp ; void PrimeTable ( int n ) { is_notp . reset (); is_notp [ 0 ] = is_notp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( is_notp [ i ]) continue ; p . push_back ( i ); for ( int j = i * i ; j <= n ; j += i ) { is_notp [ j ] = 1 ; } } } \u8907\u96dc\u5ea6\u53ef\u5230 O(N\\log\\log N) \uff0c\u5982\u679c\u4e0d\u5f9e\u5e73\u65b9\u958b\u59cb\u5243\u9664\uff0c\u5247\u6703\u9000\u5316\u81f3 O(N\\log N)","title":"\u4e00\u822c\u7be9\u6cd5"},{"location":"math/primeandfactor/#_4","text":"\u6bcf\u500b\u5408\u6578\u90fd\u53ea\u88ab\u5176\u6700\u5c0f\u8cea\u56e0\u6578\u5254\u9664\uff0c\u6b64\u7b97\u6cd5\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(N) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 vector < int > p ; bitset < MAXN > is_notp ; void PrimeTable ( int n ) { is_notp . reset (); is_notp [ 0 ] = is_notp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { if ( ! is_notp [ i ]) p . push_back ( i ); for ( int j = 0 ; j < ( int ) p . size (); ++ j ) { if ( i * p [ j ] > n ) break ; is_notp [ i * p [ j ]] = 1 ; if ( i % p [ j ] == 0 ) break ; } } } \u7a0b\u5f0f\u78bc\u95dc\u9375\u5728\u65bc if (i % p[j] == 0) \uff0c\u7531\u65bc p \u88e1\u9762\u7684\u5143\u7d20\u90fd\u662f\u905e\u589e\u7684\uff0c\u7576\u9019\u884c\u6210\u7acb\uff0c\u4ee3\u8868 i \u7684 p[j] \u6700\u5c0f\u8cea\u6578\uff0c i\\cdot p[j+1], i\\cdot p[j+2], ... \u90fd\u662f p[j] \u7684\u500d\u6578\uff0c\u90fd\u5df2\u7d93\u88ab p[j] \u5254\u9664\uff08\u4f8b\u5982\uff1a 9 \u7684\u6700\u5c0f\u8cea\u56e0\u6578\u70ba 3 \uff0c 9\\cdot 5,9\\cdot 7 \u90fd\u662f 3 \u7684\u500d\u6578\uff0c\u4ed6\u5011\u6703\u88ab 3 \u5254\u9664\uff09\uff0c\u56e0\u6b64\u4e0d\u5fc5\u518d\u7be9\u4e0b\u53bb\u3002","title":"\u7dda\u6027\u7be9\u6cd5"},{"location":"math/primeandfactor/#_5","text":"\u6211\u5011\u80fd\u5c07\u4efb\u610f\u4e00\u500b\u6b63\u6574\u6578\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u5f62\u5f0f\u70ba N=P_{1}^{x_{1}}P_{2}^{x_{2}}P_{3}^{x_{3}}...=\\Pi P_{i}^{x_{i}} \uff0c\u6839\u64da\u6b64\u5f62\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u6c42\u51fa\u4efb\u4e00\u6b63\u6574\u6578\u7684\u56e0\u6578\u500b\u6578\u53ca\u56e0\u6578\u7e3d\u548c \u56e0\u6578\u500b\u6578\uff1a (x_{1}+1)(x_{2}+1)(x_{3}+1)...=\\Pi (x_{i}+1) \u56e0\u6578\u7e3d\u548c\uff1a (P_{1}^{0}+P_{1}^{1}+...+P_{1}^{x_{1}})(P_{2}^{0}+P_{2}^{1}+...+P_{2}^{x_{2}})...=\\Pi\\Sigma_{j=0}^{x_{i}}(P_{i}^{j})","title":"\u56e0\u6578"},{"location":"math/primeandfactor/#_6","text":"\u6700\u5927\u516c\u56e0\u6578 (Greatest Common Divisor, GCD)\uff0c\u53ef\u4ee5\u7528\u8f3e\u8f49\u76f8\u9664\u6cd5\u6c42\u5f97\u3002 1 2 3 4 5 6 int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ); } \u8907\u96dc\u5ea6\u70ba O(\\log(min(a,b))) \uff0c\u6700\u6158\u72c0\u6cc1\u767c\u751f\u5728\u5169\u6578\u70ba\u8cbb\u5f0f\u6578\u5217\u76f8\u9130\u9805\u6642\uff0c C++<algorithm> \u6709\u5167\u5efa\u7684 __gcd \u53ef\u4ee5\u7528\u3002 \u6700\u5c0f\u516c\u500d\u6578 (Least Common Multiple,LCM)\uff0c\u5247\u70ba\u5169\u6578\u76f8\u4e58\u518d\u9664\u4ee5\u4ed6\u5011\u7684 GCD\uff0c\u70ba\u907f\u514d\u6ea2\u4f4d\u72c0\u6cc1\uff0c\u53ef\u5148\u5c07\u4e00\u6578\u9664\u4ee5 GCD\uff0c\u518d\u4e58\u4ee5\u53e6\u5916\u4e00\u6578\u3002","title":"\u6700\u5927\u516c\u56e0\u6578"},{"location":"math/primeandfactor/#_7","text":"\u8cea\u56e0\u6578\u5206\u89e3 \u7d66\u5b9a\u4e00\u500b\u6578\u5b57 N \uff0c\u8acb\u5217\u51fa\u4ed6\u7684\u6240\u6709\u8cea\u6578\u3002 \u8cea\u56e0\u6578\u662f\u4e00\u9053\u5e38\u898b\u7684\u984c\u76ee\uff0c\u4ee5\u4e0b\u6709\u5e7e\u500b\u8981\u9ede\uff1a \u53ea\u8981\u679a\u8209\u6240\u6709 \\leq\\sqrt{N} \u7684\u8cea\u6578\u3002 N \u5728\u8cea\u56e0\u6578\u5206\u89e3\u7684\u904e\u7a0b\u4e2d\u6703\u4e00\u76f4\u88ab\u66f4\u65b0\uff0c\u7576\u627e\u5230 N \u7684\u4e00\u500b\u8cea\u6578 p \uff0c\u8acb\u5c07 N \u9664\u4ee5 p \u5f97\u5230\u65b0\u7684 N \uff0c\u7e2e\u5c0f\u641c\u5c0b\u7bc4\u570d\uff0c\u82e5\u662f\u65b0\u7684 N \u9084\u53ef\u88ab p \u6574\u9664\uff0c\u91cd\u8907\u4e0a\u8ff0\u52d5\u4f5c\uff0c\u76f4\u5230 N \u7121\u6cd5\u88ab p \u6574\u9664\u3002 \u6700\u5f8c\u518d\u6aa2\u67e5 N \u662f\u5426\u70ba 1 \uff0c\u82e5\u4e0d\u662f\uff0c\u5247 N \u4e5f\u662f\u8cea\u6578\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void primeFactorization ( int n ) { for ( int i = 0 ; i < ( int ) p . size (); ++ i ) { if ( p [ i ] * p [ i ] > n ) break ; if ( n % p [ i ]) continue ; cout << p [ i ] << ' ' ; while ( n % p [ i ] == 0 ) { n /= p [ i ]; } } if ( n != 1 ) { cout << n << ' ' ; } cout << '\\n' ; }","title":"\u8cea\u56e0\u6578\u5206\u89e3"},{"location":"math/primeandfactor/#_8","text":"\u8cea\u6578\u7be9\u6cd5 UVa 406 - Prime Cuts \u53ea\u8981\u5148\u6c42\u51fa\u6700\u5927\u6578\u7684\u5e73\u65b9\u6839\u5167\u7684\u8cea\u6578\uff1a UVa 10140 - Prime Distance \u8cea\u56e0\u6578\u5206\u89e3 Zerojudge a010: \u56e0\u6578\u5206\u89e3","title":"\u4f8b\u984c\u7df4\u7fd2"},{"location":"other/complexity/","text":"\u8907\u96dc\u5ea6 \u8907\u96dc\u5ea6\u662f\u5b9a\u6027\u63cf\u8ff0\u8a72\u6f14\u7b97\u6cd5\u57f7\u884c\u6210\u672c\uff08\u6642\u9593/\u7a7a\u9593\uff09\u51fd\u5f0f\uff0c\u7528\u4f86\u5206\u6790\u8cc7\u6599\u7d50\u69cb\u548c\u6f14\u7b97\u6cd5\uff08DSA)\u3002 \u5e38\u7528\u51fd\u6578 Big O \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0a\u754c\uff0c\u5b9a\u7fa9\u70ba f(n)\\in O(g(n))\\ iff\\ \\exists\\ c,N\\in R^{+},\\forall n \\geq N \u6709 |f(n)| \\leq |cg(n)| \uff0c\u4f8b\u5982 f(n)=5n^2+4n+1 \uff0c\u6211\u5011\u6703\u6ce8\u91cd\u6700\u9ad8\u9805 5n^2 \uff0c\u4e14\u6211\u5011\u6703 5 \u662f\u5e38\u6578\uff0c\u5f97\u51fa f(n)\\in O(n^2) Big \\Omega \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0b\u754c\uff0c\u5c0d\u65bc\u4efb\u610f\u7684 f(n) \\in O(g(n)) , \u90fd\u6709 g(n) \\in \\Omega (f(n)) \u3002 Big \\Theta \u8981\u540c\u6642\u6eff\u8db3 Big O \u548c Big \\Omega Big O \u662f\u6211\u5011\u6bd4\u8f03\u5e38\u7528\u7684\uff0c\u5176\u4ed6\u5169\u500b\u53ef\u80fd\u518d\u4e00\u4e9b\u5730\u65b9\u6703\u7528\u5230 \u5e38\u898b\u8907\u96dc\u5ea6 O(1) < O(\\log n) < O(n) < O(n\\log n) < O(n^2) < O(n^3) < O(2^n) < O(n!) \u53e6\u5916\u9084\u6709\u4e00\u500b\u5728\u4e26\u67e5\u96c6\u5e38\u898b\uff0c\u5373 O(\\alpha(n)) \uff0c\u8fd1\u4f3c\u65bc O(1) \uff0c\u53ef\u76f4\u63a5\u7576\u4f5c O(1) \u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6 \u6642\u9593\u8907\u96dc\u5ea6\uff1a\u548c\u904b\u7b97\u6709\u95dc\uff0c *% \u6703\u6bd4 +- \u9084\u8981\u4e45\uff0c\u800c\u8907\u96dc\u5ea6\u5f97\u9805\u6b21\u6703\u8ddf\u8ff4\u5708\u6709\u95dc\uff0c\u521d\u968e\u7af6\u8cfd\u53ea\u6703\u5728\u610f\u4f60\u7684\u9805\u6b21\uff0c\u53ea\u8981\u4e0d\u8981\u592a\u5927\u57fa\u672c\u90fd\u6703\u904e\uff0c\u9032\u968e\u4e9b\u6bd4\u8cfd\uff0c\u6709\u53ef\u80fd\u51fa\u73fe\u5e38\u6578\u904e\u5927\uff0c\u5c0e\u81f4\u8907\u96dc\u5ea6\u5408\u7406\u537b\u9084\u662f\u5403 TLE \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u9700\u8981\u5229\u7528 \"\u58d3\u5e38\u6578\" \u6280\u5de7\uff0c\u964d\u4f4e\u6642\u9593\uff0c\u8b93\u7a0b\u5f0f AC\u3002 \u7a7a\u9593\u8907\u96dc\u5ea6\uff1a\u5247\u662f\u8ddf\u4f60\u5ba3\u544a\u7684\u8b8a\u6578\u8a18\u61b6\u9ad4\u7e3d\u548c\u6709\u95dc\uff0c\u6bd4\u6642\u9593\u8907\u96dc\u5ea6\u5bb9\u6613\u4f30\u8a08\uff0c\u5728\u6a39\u72c0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5f80\u5f80\u9700\u8981\u642d\u914d\u52d5\u614b\u8a18\u61b6\u9ad4\uff0c\u624d\u4e0d\u6703\u56e0\u70ba\u958b\u592a\u591a\u7a7a\u9593\u800c\u5403\u4e86 MLE\u3002 \u984c\u5916\u8a71\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684 array \u4e0d\u662f\u958b\u5728\u5168\u57df\u5167\uff0c\u958b\u4e86 10 \u7684 5,6 \u6b21\uff0c\u5728\u57f7\u884c\u6642\u8dd1\u51fa RE\uff0c\u90a3\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u89e3\u6c7a\u65b9\u5f0f \u628a array \u79fb\u81f3\u5168\u57df \u52a0\u4e0a static\uff0c\u8868\u793a\u975c\u614b\u8b8a\u6578","title":"\u8907\u96dc\u5ea6"},{"location":"other/complexity/#_1","text":"\u8907\u96dc\u5ea6\u662f\u5b9a\u6027\u63cf\u8ff0\u8a72\u6f14\u7b97\u6cd5\u57f7\u884c\u6210\u672c\uff08\u6642\u9593/\u7a7a\u9593\uff09\u51fd\u5f0f\uff0c\u7528\u4f86\u5206\u6790\u8cc7\u6599\u7d50\u69cb\u548c\u6f14\u7b97\u6cd5\uff08DSA)\u3002","title":"\u8907\u96dc\u5ea6"},{"location":"other/complexity/#_2","text":"Big O \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0a\u754c\uff0c\u5b9a\u7fa9\u70ba f(n)\\in O(g(n))\\ iff\\ \\exists\\ c,N\\in R^{+},\\forall n \\geq N \u6709 |f(n)| \\leq |cg(n)| \uff0c\u4f8b\u5982 f(n)=5n^2+4n+1 \uff0c\u6211\u5011\u6703\u6ce8\u91cd\u6700\u9ad8\u9805 5n^2 \uff0c\u4e14\u6211\u5011\u6703 5 \u662f\u5e38\u6578\uff0c\u5f97\u51fa f(n)\\in O(n^2) Big \\Omega \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0b\u754c\uff0c\u5c0d\u65bc\u4efb\u610f\u7684 f(n) \\in O(g(n)) , \u90fd\u6709 g(n) \\in \\Omega (f(n)) \u3002 Big \\Theta \u8981\u540c\u6642\u6eff\u8db3 Big O \u548c Big \\Omega Big O \u662f\u6211\u5011\u6bd4\u8f03\u5e38\u7528\u7684\uff0c\u5176\u4ed6\u5169\u500b\u53ef\u80fd\u518d\u4e00\u4e9b\u5730\u65b9\u6703\u7528\u5230","title":"\u5e38\u7528\u51fd\u6578"},{"location":"other/complexity/#_3","text":"O(1) < O(\\log n) < O(n) < O(n\\log n) < O(n^2) < O(n^3) < O(2^n) < O(n!) \u53e6\u5916\u9084\u6709\u4e00\u500b\u5728\u4e26\u67e5\u96c6\u5e38\u898b\uff0c\u5373 O(\\alpha(n)) \uff0c\u8fd1\u4f3c\u65bc O(1) \uff0c\u53ef\u76f4\u63a5\u7576\u4f5c O(1)","title":"\u5e38\u898b\u8907\u96dc\u5ea6"},{"location":"other/complexity/#_4","text":"\u6642\u9593\u8907\u96dc\u5ea6\uff1a\u548c\u904b\u7b97\u6709\u95dc\uff0c *% \u6703\u6bd4 +- \u9084\u8981\u4e45\uff0c\u800c\u8907\u96dc\u5ea6\u5f97\u9805\u6b21\u6703\u8ddf\u8ff4\u5708\u6709\u95dc\uff0c\u521d\u968e\u7af6\u8cfd\u53ea\u6703\u5728\u610f\u4f60\u7684\u9805\u6b21\uff0c\u53ea\u8981\u4e0d\u8981\u592a\u5927\u57fa\u672c\u90fd\u6703\u904e\uff0c\u9032\u968e\u4e9b\u6bd4\u8cfd\uff0c\u6709\u53ef\u80fd\u51fa\u73fe\u5e38\u6578\u904e\u5927\uff0c\u5c0e\u81f4\u8907\u96dc\u5ea6\u5408\u7406\u537b\u9084\u662f\u5403 TLE \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u9700\u8981\u5229\u7528 \"\u58d3\u5e38\u6578\" \u6280\u5de7\uff0c\u964d\u4f4e\u6642\u9593\uff0c\u8b93\u7a0b\u5f0f AC\u3002 \u7a7a\u9593\u8907\u96dc\u5ea6\uff1a\u5247\u662f\u8ddf\u4f60\u5ba3\u544a\u7684\u8b8a\u6578\u8a18\u61b6\u9ad4\u7e3d\u548c\u6709\u95dc\uff0c\u6bd4\u6642\u9593\u8907\u96dc\u5ea6\u5bb9\u6613\u4f30\u8a08\uff0c\u5728\u6a39\u72c0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5f80\u5f80\u9700\u8981\u642d\u914d\u52d5\u614b\u8a18\u61b6\u9ad4\uff0c\u624d\u4e0d\u6703\u56e0\u70ba\u958b\u592a\u591a\u7a7a\u9593\u800c\u5403\u4e86 MLE\u3002 \u984c\u5916\u8a71\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684 array \u4e0d\u662f\u958b\u5728\u5168\u57df\u5167\uff0c\u958b\u4e86 10 \u7684 5,6 \u6b21\uff0c\u5728\u57f7\u884c\u6642\u8dd1\u51fa RE\uff0c\u90a3\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u89e3\u6c7a\u65b9\u5f0f \u628a array \u79fb\u81f3\u5168\u57df \u52a0\u4e0a static\uff0c\u8868\u793a\u975c\u614b\u8b8a\u6578","title":"\u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6"},{"location":"other/define/","text":"","title":"define"},{"location":"syntax/algorithm/","text":"algorithm \u51fd\u5f0f\u5eab C++ \u7684 algorithm \u51fd\u5f0f\u5eab\u63d0\u4f9b\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u5c24\u5176\u662f\u5340\u9593\uff08\u5e8f\u5217\u7684\u4e00\u6bb5\u7bc4\u570d\uff09\u64cd\u4f5c\uff0c\u5305\u542b\u6700\u5927\u6700\u5c0f\u503c\uff0c\u6392\u5e8f\u3002 \u5f15\u5165 C++ : algorithm min \uff1a\u53d6\u6700\u5c0f\u503c\u3002 min(a, b) min(list) max \uff1a\u53d6\u6700\u5927\u503c\u3002 max(a, b) max(list) min_element \uff1a\u627e\u5c0b\u6700\u5c0f\u5143\u7d20 min_element(first, last) max_element \uff1a\u627e\u5c0b\u6700\u5927\u5143\u7d20 max_element(first, last) sort \uff1a\u6392\u5e8f\uff0c\u9810\u8a2d\u7531\u5c0f\u6392\u5230\u5927\u3002 sort(first, last) sort(first, last, comp) \uff1a\u53ef\u81ea\u884c\u5b9a\u7fa9\u6bd4\u8f03\u904b\u7b97\u5b50 Comp \u3002 find \uff1a\u5c0b\u627e\u5143\u7d20\u3002 find(first, last, val) lower_bound \uff1a\u5c0b\u627e\u7b2c\u4e00\u500b \\gq x \u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5247\u56de\u50b3 last \u3002 lower_bound(first, last, val) upper_bound \uff1a\u5c0b\u627e\u7b2c\u4e00\u500b > x \u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5247\u56de\u50b3 last \u3002 upper_bound(first, last, val) next_permutation \uff1a\u5c07\u5e8f\u5217\u9806\u5e8f\u8f49\u63db\u6210\u4e0b\u4e00\u500b\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u56de\u50b3 true \uff0c\u53cd\u4e4b\u56de\u50b3 false \u3002 next_permutation(first, last) prev_permutation \uff1a\u5c07\u5e8f\u5217\u9806\u5e8f\u8f49\u63db\u6210\u4e0a\u4e00\u500b\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u56de\u50b3 true \uff0c\u53cd\u4e4b\u56de\u50b3 false \u3002 prev_permutation(first, last) \u7bc4\u4f8b \u6700\u5c0f\uff08\u5927\uff09\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int main () { printf ( \"Min(1,2): %d \\n \" , min ( 1 , 2 )); printf ( \"max(1,2): %d \\n \" , max ( 1 , 2 )); printf ( \"Min({2,7,5}): %d \\n \" , min ({ 2 , 7 , 5 })); printf ( \"max({2,7,5}): %d \\n \" , max ({ 2 , 7 , 5 })); vector < int > a = { 4 , 6 , 9 , 3 }; printf ( \"Min_element(a): %d \\n \" , * min_element ( a . begin (), a . end ())); printf ( \"max_element(a): %d \\n \" , * max_element ( a . begin (), a . end ())); } /* Min(1,2): 1 max(1,2): 2 Min({2,7,5}): 2 max({2,7,5}): 7 Min_element(a): 3 max_element(a): 9 */ \u6392\u5e8f\u5143\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int cmp ( int a , int b ) { return a > b ; } int main () { int arr [ 5 ] = { 2 , 9 , 6 , 5 , 7 }; printf ( \"Before sorting: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } printf ( \" \\n \" ); sort ( arr , arr + 5 ); printf ( \"After sorting: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } printf ( \" \\n \" ); sort ( arr , arr + 5 , cmp ); printf ( \"After sorting with user-defined function: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } printf ( \" \\n \" ); } /* Before sorting: 2 9 6 5 7 After sorting: 2 5 6 7 9 After sorting with user-defined function: 9 7 6 5 2 */ \u5c0b\u627e\u5143\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int main () { vector < int > a = { 4 , 6 , 9 , 3 }; for ( int i = 0 ; i < 5 ; ++ i ) { if ( find ( a . begin (), a . end (), i ) != a . end ()) { printf ( \"%d is find at %d \\n \" , i , ( int )( find ( a . begin (), a . end (), i ) - a . begin ())); } } sort ( a . begin (), a . end ()); printf ( \"The lower_bound of %d is at %d \\n \" , 5 , ( int )( lower_bound ( a . begin (), a . end (), 5 ) - a . begin ())); printf ( \"The upper_bound of %d is at %d \\n \" , 5 , ( int )( upper_bound ( a . begin (), a . end (), 5 ) - a . begin ())); } /* 3 is find at 3 4 is find at 0 The lower_bound of 5 is at 2 The upper_bound of 5 is at 2 */ \u4e0b\uff08\u4e0a\uff09\u4e00\u500b\u5b57\u5178\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int main () { vector < int > a1 = { 4 , 2 , 7 , 5 }; vector < int > a2 ( a1 ); if ( next_permutation ( a1 . begin (), a1 . end ())) { for ( int i = 0 ; i < ( int ) a1 . size (); ++ i ) { printf ( \"%d%c\" , a1 [ i ], \" \\n \" [ i == ( int ) a1 . size () - 1 ]); } } if ( prev_permutation ( a2 . begin (), a2 . end ())) { for ( int i = 0 ; i < ( int ) a2 . size (); ++ i ) { printf ( \"%d%c\" , a2 [ i ], \" \\n \" [ i == ( int ) a2 . size () - 1 ]); } } } /* 4 5 2 7 4 2 5 7 */ algoruthm \u51fd\u5f0f\u5eab in cplusplus \u21a9","title":"algorithm"},{"location":"syntax/algorithm/#algorithm","text":"C++ \u7684 algorithm \u51fd\u5f0f\u5eab\u63d0\u4f9b\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u5c24\u5176\u662f\u5340\u9593\uff08\u5e8f\u5217\u7684\u4e00\u6bb5\u7bc4\u570d\uff09\u64cd\u4f5c\uff0c\u5305\u542b\u6700\u5927\u6700\u5c0f\u503c\uff0c\u6392\u5e8f\u3002 \u5f15\u5165 C++ : algorithm min \uff1a\u53d6\u6700\u5c0f\u503c\u3002 min(a, b) min(list) max \uff1a\u53d6\u6700\u5927\u503c\u3002 max(a, b) max(list) min_element \uff1a\u627e\u5c0b\u6700\u5c0f\u5143\u7d20 min_element(first, last) max_element \uff1a\u627e\u5c0b\u6700\u5927\u5143\u7d20 max_element(first, last) sort \uff1a\u6392\u5e8f\uff0c\u9810\u8a2d\u7531\u5c0f\u6392\u5230\u5927\u3002 sort(first, last) sort(first, last, comp) \uff1a\u53ef\u81ea\u884c\u5b9a\u7fa9\u6bd4\u8f03\u904b\u7b97\u5b50 Comp \u3002 find \uff1a\u5c0b\u627e\u5143\u7d20\u3002 find(first, last, val) lower_bound \uff1a\u5c0b\u627e\u7b2c\u4e00\u500b \\gq x \u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5247\u56de\u50b3 last \u3002 lower_bound(first, last, val) upper_bound \uff1a\u5c0b\u627e\u7b2c\u4e00\u500b > x \u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5247\u56de\u50b3 last \u3002 upper_bound(first, last, val) next_permutation \uff1a\u5c07\u5e8f\u5217\u9806\u5e8f\u8f49\u63db\u6210\u4e0b\u4e00\u500b\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u56de\u50b3 true \uff0c\u53cd\u4e4b\u56de\u50b3 false \u3002 next_permutation(first, last) prev_permutation \uff1a\u5c07\u5e8f\u5217\u9806\u5e8f\u8f49\u63db\u6210\u4e0a\u4e00\u500b\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u56de\u50b3 true \uff0c\u53cd\u4e4b\u56de\u50b3 false \u3002 prev_permutation(first, last)","title":"algorithm \u51fd\u5f0f\u5eab"},{"location":"syntax/algorithm/#_1","text":"\u6700\u5c0f\uff08\u5927\uff09\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int main () { printf ( \"Min(1,2): %d \\n \" , min ( 1 , 2 )); printf ( \"max(1,2): %d \\n \" , max ( 1 , 2 )); printf ( \"Min({2,7,5}): %d \\n \" , min ({ 2 , 7 , 5 })); printf ( \"max({2,7,5}): %d \\n \" , max ({ 2 , 7 , 5 })); vector < int > a = { 4 , 6 , 9 , 3 }; printf ( \"Min_element(a): %d \\n \" , * min_element ( a . begin (), a . end ())); printf ( \"max_element(a): %d \\n \" , * max_element ( a . begin (), a . end ())); } /* Min(1,2): 1 max(1,2): 2 Min({2,7,5}): 2 max({2,7,5}): 7 Min_element(a): 3 max_element(a): 9 */ \u6392\u5e8f\u5143\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 int cmp ( int a , int b ) { return a > b ; } int main () { int arr [ 5 ] = { 2 , 9 , 6 , 5 , 7 }; printf ( \"Before sorting: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } printf ( \" \\n \" ); sort ( arr , arr + 5 ); printf ( \"After sorting: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } printf ( \" \\n \" ); sort ( arr , arr + 5 , cmp ); printf ( \"After sorting with user-defined function: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } printf ( \" \\n \" ); } /* Before sorting: 2 9 6 5 7 After sorting: 2 5 6 7 9 After sorting with user-defined function: 9 7 6 5 2 */ \u5c0b\u627e\u5143\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int main () { vector < int > a = { 4 , 6 , 9 , 3 }; for ( int i = 0 ; i < 5 ; ++ i ) { if ( find ( a . begin (), a . end (), i ) != a . end ()) { printf ( \"%d is find at %d \\n \" , i , ( int )( find ( a . begin (), a . end (), i ) - a . begin ())); } } sort ( a . begin (), a . end ()); printf ( \"The lower_bound of %d is at %d \\n \" , 5 , ( int )( lower_bound ( a . begin (), a . end (), 5 ) - a . begin ())); printf ( \"The upper_bound of %d is at %d \\n \" , 5 , ( int )( upper_bound ( a . begin (), a . end (), 5 ) - a . begin ())); } /* 3 is find at 3 4 is find at 0 The lower_bound of 5 is at 2 The upper_bound of 5 is at 2 */ \u4e0b\uff08\u4e0a\uff09\u4e00\u500b\u5b57\u5178\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int main () { vector < int > a1 = { 4 , 2 , 7 , 5 }; vector < int > a2 ( a1 ); if ( next_permutation ( a1 . begin (), a1 . end ())) { for ( int i = 0 ; i < ( int ) a1 . size (); ++ i ) { printf ( \"%d%c\" , a1 [ i ], \" \\n \" [ i == ( int ) a1 . size () - 1 ]); } } if ( prev_permutation ( a2 . begin (), a2 . end ())) { for ( int i = 0 ; i < ( int ) a2 . size (); ++ i ) { printf ( \"%d%c\" , a2 [ i ], \" \\n \" [ i == ( int ) a2 . size () - 1 ]); } } } /* 4 5 2 7 4 2 5 7 */ algoruthm \u51fd\u5f0f\u5eab in cplusplus \u21a9","title":"\u7bc4\u4f8b"},{"location":"syntax/array/","text":"\u9663\u5217 (Array) \u8003\u616e\u4ee5\u4e0b\u60c5\u6cc1\uff1a\u9700\u8981\u5ba3\u544a\u5b58\u653e 20 \u9846\u6a39\u7684\u9ad8\u5ea6\uff0c\u4e00\u7a2e\u65b9\u5f0f\u70ba\u5ba3\u544a 20 \u500b\u8b8a\u6578\uff0c\u9019\u7a2e\u65b9 C/C++ \u652f\u63f4\u9663\u5217\uff0c\u53ef\u4ee5\u5c07\u540c\u6027\u8cea\u7684\u8b8a\u6578\uff0c\u5229\u7528\u7d22\u5f15\u503c\u9032\u884c\u5b58\u53d6\u3002 \u5ba3\u544a\u548c\u521d\u59cb\u5316 \u5ba3\u544a\u8a9e\u6cd5\u70ba type var[size] type\uff1a\u8cc7\u6599\u7684\u578b\u614b\uff0c\u53ef\u70ba C/C++ \u63d0\u4f9b\u7684 \u57fa\u790e\u8cc7\u6599\u578b\u614b \u6216\u662f \u81ea\u5b9a\u7fa9\u7684\u7d50\u69cb \u3002 var\uff1a\u8b8a\u6578\u540d\u7a31 size\uff1a\u9663\u5217\u5927\u5c0f\uff0c\u5fc5\u9808\u662f\u6578\u5b57\u6216\u5e38\u6578\uff08 C++ \u7684 const )\uff0c\u4e0d\u53ef\u662f\u8b8a\u6578\uff0c\u5426\u5247\u6703\u5728\u57f7\u884c\u6642\u767c\u751f\u932f\u8aa4\u3002 \u5728\u5ba3\u544a\u6642\u671f\uff0c\u9663\u5217\u5167\u7684\u5143\u7d20\u662f\u672a\u88ab\u521d\u59cb\u5316\u7684\uff0c\u5728\u5ba3\u544a\u7684\u968e\u6bb5\uff0c\u53ef\u4ee5\u5229\u7528 initializer_list \u521d\u59cb\u5316\uff0c initializer_list \u7684\u683c\u5f0f\u70ba {val1, val2, val3, ...} \u3002\u4f7f\u7528\u9019\u7a2e\u65b9\u5f0f\uff0c\u4e00\u958b\u59cb\u6240\u6709\u5143\u7d20\u7684\u503c\u90fd\u6703\u5148\u8a2d\u70ba 0 \uff0c\u518d\u5c07 initializer_list \u7684\u503c\u4f9d\u5e8f\u653e\u5165\u9663\u5217\uff0c initializer_list \u7684\u5143\u7d20\u53ef\u4ee5\u5c0f\u65bc\u9663\u5217\u9577\u5ea6\uff0c\u672a\u88ab\u66f4\u52d5\u7684\u5143\u7d20\u6703\u4fdd\u6301\u70ba 0 \u3002 initializer_list \u53ea\u53ef\u4ee5\u7528\u5728\u5ba3\u544a\u6642\uff0c\u4e0d\u53ef\u5728\u5ba3\u544a\u5f8c\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 const int SIZE = 100 ; int num ; int arr1 [ 100 ]; // OK int arr2 [ SIZE ]; // OK int arr3 [ num ]; // \u932f\u8aa4\uff0c\u4e0d\u53ef\u4f7f\u7528\u8b8a\u6578\u8a2d\u5b9a\u5927\u5c0f\u3002 int arr4 [ 10 ] = { 1 , 2 , 3 }; // \u4f7f\u7528 initializer_list\u3002 arr1 = { 1 , 2 , 3 }; // \u932f\u8aa4\uff0c\u53ea\u53ef\u5728\u5ba3\u544a\u6642\u4f7f\u7528 initializer_list\u3002 \u5b58\u53d6 \u9663\u5217\u5b58\u53d6\u9808\u5229\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 [] \uff0c [] \u9700\u653e\u7d22\u5f15\u503c\uff08Index)\uff0c\u7d22\u5f15\u503c\u70ba\u6574\u6578\uff0c\u5f9e 0 \u958b\u59cb\uff0c\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u9663\u5217\uff0c\u5b83\u7684\u7d22\u5f15\u503c\u662f\u5f9e 0 \u5230 N-1 ( [0,N) )\u3002\u5982\u679c\u7d22\u5f15\u503c\u8d85\u904e\u7bc4\u570d\uff0c\u6703\u767c\u751f\u932f\u8aa4\u6216\u610f\u60f3\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\u8a18\u61b6\u9ad4\u5340\u6bb5\u932f\u8aa4 (Segmentation fault)\uff0c\u4fee\u6539\u5230\u5176\u4ed6\u8b8a\u6578\u3002 1 2 3 4 5 int arr [ 100 ]; for ( int i = 0 ; i < 100 ; ++ i ) { arr [ i ] = i ; } \u591a\u7dad\u9663\u5217 C/C++ \u652f\u6301\u591a\u7dad\u9663\u5217\uff0c\u5373\u9663\u5217\u88e1\u6709\u9663\u5217\uff0c\u4ee5\u4e8c\u7dad\u9663\u5217\u70ba\u4f8b\uff1a 1 2 3 4 5 6 7 8 int arr [ 10 ][ 10 ]; // \u5ba3\u544a for ( int i = 0 ; i < 10 ; ++ i ) // i \u4ee3\u8868\u7b2c\u4e00\u7dad\u7684\u7d22\u5f15\u503c { for ( int j = 0 ; j < 10 ; ++ j ) // j \u4ee3\u8868\u7b2c\u4e8c\u7dad\u7684\u7d22\u5f15\u503c { arr [ i ][ j ] = i * 10 + j ; } } \u9663\u5217\u5e38\u898b\u554f\u984c\uff1a\u8a18\u61b6\u9ad4\u904e\u5927 C/C++ \u6703\u9047\u5230\u9663\u5217\u958b\u5728 main \u88e1\u9762\u8a18\u61b6\u9ad4\u6703\u904e\u5927\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u7121\u6cd5\u60c5\u5f62\uff0c\u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u89e3\u6c7a\uff1a \u5c07\u9663\u5217\u958b\u5728\u5168\u57df \u5728\u8b8a\u6578\u524d\u52a0\u5165 static \u95dc\u9375\u5b57 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int arr1 [ 100000 ]; // OK\uff0c\u958b\u5728\u5168\u57df int main () { int arr2 [ 100000 ]; // \u932f\u8aa4\uff0c\u8a18\u61b6\u9ad4\u904e\u5927 static int arr3 [ 100000 ]; // OK\uff0c\u52a0\u4e0a static \u95dc\u9375\u5b57 }","title":"\u9663\u5217"},{"location":"syntax/array/#array","text":"\u8003\u616e\u4ee5\u4e0b\u60c5\u6cc1\uff1a\u9700\u8981\u5ba3\u544a\u5b58\u653e 20 \u9846\u6a39\u7684\u9ad8\u5ea6\uff0c\u4e00\u7a2e\u65b9\u5f0f\u70ba\u5ba3\u544a 20 \u500b\u8b8a\u6578\uff0c\u9019\u7a2e\u65b9 C/C++ \u652f\u63f4\u9663\u5217\uff0c\u53ef\u4ee5\u5c07\u540c\u6027\u8cea\u7684\u8b8a\u6578\uff0c\u5229\u7528\u7d22\u5f15\u503c\u9032\u884c\u5b58\u53d6\u3002","title":"\u9663\u5217 (Array)"},{"location":"syntax/array/#_1","text":"\u5ba3\u544a\u8a9e\u6cd5\u70ba type var[size] type\uff1a\u8cc7\u6599\u7684\u578b\u614b\uff0c\u53ef\u70ba C/C++ \u63d0\u4f9b\u7684 \u57fa\u790e\u8cc7\u6599\u578b\u614b \u6216\u662f \u81ea\u5b9a\u7fa9\u7684\u7d50\u69cb \u3002 var\uff1a\u8b8a\u6578\u540d\u7a31 size\uff1a\u9663\u5217\u5927\u5c0f\uff0c\u5fc5\u9808\u662f\u6578\u5b57\u6216\u5e38\u6578\uff08 C++ \u7684 const )\uff0c\u4e0d\u53ef\u662f\u8b8a\u6578\uff0c\u5426\u5247\u6703\u5728\u57f7\u884c\u6642\u767c\u751f\u932f\u8aa4\u3002 \u5728\u5ba3\u544a\u6642\u671f\uff0c\u9663\u5217\u5167\u7684\u5143\u7d20\u662f\u672a\u88ab\u521d\u59cb\u5316\u7684\uff0c\u5728\u5ba3\u544a\u7684\u968e\u6bb5\uff0c\u53ef\u4ee5\u5229\u7528 initializer_list \u521d\u59cb\u5316\uff0c initializer_list \u7684\u683c\u5f0f\u70ba {val1, val2, val3, ...} \u3002\u4f7f\u7528\u9019\u7a2e\u65b9\u5f0f\uff0c\u4e00\u958b\u59cb\u6240\u6709\u5143\u7d20\u7684\u503c\u90fd\u6703\u5148\u8a2d\u70ba 0 \uff0c\u518d\u5c07 initializer_list \u7684\u503c\u4f9d\u5e8f\u653e\u5165\u9663\u5217\uff0c initializer_list \u7684\u5143\u7d20\u53ef\u4ee5\u5c0f\u65bc\u9663\u5217\u9577\u5ea6\uff0c\u672a\u88ab\u66f4\u52d5\u7684\u5143\u7d20\u6703\u4fdd\u6301\u70ba 0 \u3002 initializer_list \u53ea\u53ef\u4ee5\u7528\u5728\u5ba3\u544a\u6642\uff0c\u4e0d\u53ef\u5728\u5ba3\u544a\u5f8c\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 const int SIZE = 100 ; int num ; int arr1 [ 100 ]; // OK int arr2 [ SIZE ]; // OK int arr3 [ num ]; // \u932f\u8aa4\uff0c\u4e0d\u53ef\u4f7f\u7528\u8b8a\u6578\u8a2d\u5b9a\u5927\u5c0f\u3002 int arr4 [ 10 ] = { 1 , 2 , 3 }; // \u4f7f\u7528 initializer_list\u3002 arr1 = { 1 , 2 , 3 }; // \u932f\u8aa4\uff0c\u53ea\u53ef\u5728\u5ba3\u544a\u6642\u4f7f\u7528 initializer_list\u3002","title":"\u5ba3\u544a\u548c\u521d\u59cb\u5316"},{"location":"syntax/array/#_2","text":"\u9663\u5217\u5b58\u53d6\u9808\u5229\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 [] \uff0c [] \u9700\u653e\u7d22\u5f15\u503c\uff08Index)\uff0c\u7d22\u5f15\u503c\u70ba\u6574\u6578\uff0c\u5f9e 0 \u958b\u59cb\uff0c\u4e00\u500b\u9577\u5ea6\u70ba N \u7684\u9663\u5217\uff0c\u5b83\u7684\u7d22\u5f15\u503c\u662f\u5f9e 0 \u5230 N-1 ( [0,N) )\u3002\u5982\u679c\u7d22\u5f15\u503c\u8d85\u904e\u7bc4\u570d\uff0c\u6703\u767c\u751f\u932f\u8aa4\u6216\u610f\u60f3\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\u8a18\u61b6\u9ad4\u5340\u6bb5\u932f\u8aa4 (Segmentation fault)\uff0c\u4fee\u6539\u5230\u5176\u4ed6\u8b8a\u6578\u3002 1 2 3 4 5 int arr [ 100 ]; for ( int i = 0 ; i < 100 ; ++ i ) { arr [ i ] = i ; }","title":"\u5b58\u53d6"},{"location":"syntax/array/#_3","text":"C/C++ \u652f\u6301\u591a\u7dad\u9663\u5217\uff0c\u5373\u9663\u5217\u88e1\u6709\u9663\u5217\uff0c\u4ee5\u4e8c\u7dad\u9663\u5217\u70ba\u4f8b\uff1a 1 2 3 4 5 6 7 8 int arr [ 10 ][ 10 ]; // \u5ba3\u544a for ( int i = 0 ; i < 10 ; ++ i ) // i \u4ee3\u8868\u7b2c\u4e00\u7dad\u7684\u7d22\u5f15\u503c { for ( int j = 0 ; j < 10 ; ++ j ) // j \u4ee3\u8868\u7b2c\u4e8c\u7dad\u7684\u7d22\u5f15\u503c { arr [ i ][ j ] = i * 10 + j ; } }","title":"\u591a\u7dad\u9663\u5217"},{"location":"syntax/array/#_4","text":"C/C++ \u6703\u9047\u5230\u9663\u5217\u958b\u5728 main \u88e1\u9762\u8a18\u61b6\u9ad4\u6703\u904e\u5927\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u7121\u6cd5\u60c5\u5f62\uff0c\u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u89e3\u6c7a\uff1a \u5c07\u9663\u5217\u958b\u5728\u5168\u57df \u5728\u8b8a\u6578\u524d\u52a0\u5165 static \u95dc\u9375\u5b57 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int arr1 [ 100000 ]; // OK\uff0c\u958b\u5728\u5168\u57df int main () { int arr2 [ 100000 ]; // \u932f\u8aa4\uff0c\u8a18\u61b6\u9ad4\u904e\u5927 static int arr3 [ 100000 ]; // OK\uff0c\u52a0\u4e0a static \u95dc\u9375\u5b57 }","title":"\u9663\u5217\u5e38\u898b\u554f\u984c\uff1a\u8a18\u61b6\u9ad4\u904e\u5927"},{"location":"syntax/cctype/","text":"cctype \u51fd\u5f0f\u5eab cctype \u51fd\u5f0f\u5eab\u662f C \u7684\u51fd\u5f0f\u5eab\uff0c\u4e3b\u8981\u662f\u7528\u4f86\u5224\u65b7\u5b57\u5143\u7a2e\u985e\u548c\u8f49\u63db\u5b57\u5143\uff0c\u4ee5\u4e0b\u6558\u8ff0\u70ba\u7af6\u8cfd\u5e38\u7528\u7684\u51fd\u5f0f\uff1a \u5f15\u5165 C : ctype.h C++ : cctype isalnum : \u5224\u65b7\u662f\u5426\u70ba\u6578\u5b57\u6216\u82f1\u6587\u3002 isalnum(int c) isalpha : \u5224\u65b7\u662f\u5426\u70ba\u82f1\u6587\u3002 isalpha(int c) isdigit : \u5224\u65b7\u662f\u5426\u70ba\u6578\u5b57\u3002 isdigit(int c) islower : \u5224\u65b7\u662f\u5426\u70ba\u5c0f\u5beb\u5b57\u6bcd\u3002 islower(int c) isupper : \u5224\u65b7\u662f\u5426\u70ba\u5927\u5beb\u5b57\u6bcd\u3002 isupper(int c) tolower : \u5c07\u5b57\u6bcd\u8f49\u4e58\u5c0f\u5beb\u5b57\u6bcd islower(int c) toupper : \u5c07\u5b57\u6bcd\u8f49\u4e58\u5927\u5beb\u5b57\u6bcd toupper(int c) \u5be6\u4f8b \u5c07\u6240\u6709\u82f1\u6587\u5b57\u6bcd\u8f49\u6210\u5c0f\u5beb\u5b57\u6bcd\u5f8c\u8f38\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 char str [] = \"Cats Like Chatching The Mouses.\" ; for ( int i = 0 ; i != ( int ) strlen ( str ); ++ i ) { if ( isalpha ( str [ i ])) { str [ i ] = tolower ( str [ i ]); } } printf ( \"%s \\n \" , str ); /* cats like chatching the mouses. */ cctype \u51fd\u5f0f\u5eab in cplusplus \u21a9","title":"cctype"},{"location":"syntax/cctype/#cctype","text":"cctype \u51fd\u5f0f\u5eab\u662f C \u7684\u51fd\u5f0f\u5eab\uff0c\u4e3b\u8981\u662f\u7528\u4f86\u5224\u65b7\u5b57\u5143\u7a2e\u985e\u548c\u8f49\u63db\u5b57\u5143\uff0c\u4ee5\u4e0b\u6558\u8ff0\u70ba\u7af6\u8cfd\u5e38\u7528\u7684\u51fd\u5f0f\uff1a \u5f15\u5165 C : ctype.h C++ : cctype isalnum : \u5224\u65b7\u662f\u5426\u70ba\u6578\u5b57\u6216\u82f1\u6587\u3002 isalnum(int c) isalpha : \u5224\u65b7\u662f\u5426\u70ba\u82f1\u6587\u3002 isalpha(int c) isdigit : \u5224\u65b7\u662f\u5426\u70ba\u6578\u5b57\u3002 isdigit(int c) islower : \u5224\u65b7\u662f\u5426\u70ba\u5c0f\u5beb\u5b57\u6bcd\u3002 islower(int c) isupper : \u5224\u65b7\u662f\u5426\u70ba\u5927\u5beb\u5b57\u6bcd\u3002 isupper(int c) tolower : \u5c07\u5b57\u6bcd\u8f49\u4e58\u5c0f\u5beb\u5b57\u6bcd islower(int c) toupper : \u5c07\u5b57\u6bcd\u8f49\u4e58\u5927\u5beb\u5b57\u6bcd toupper(int c)","title":"cctype \u51fd\u5f0f\u5eab"},{"location":"syntax/cctype/#_1","text":"\u5c07\u6240\u6709\u82f1\u6587\u5b57\u6bcd\u8f49\u6210\u5c0f\u5beb\u5b57\u6bcd\u5f8c\u8f38\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 char str [] = \"Cats Like Chatching The Mouses.\" ; for ( int i = 0 ; i != ( int ) strlen ( str ); ++ i ) { if ( isalpha ( str [ i ])) { str [ i ] = tolower ( str [ i ]); } } printf ( \"%s \\n \" , str ); /* cats like chatching the mouses. */ cctype \u51fd\u5f0f\u5eab in cplusplus \u21a9","title":"\u5be6\u4f8b"},{"location":"syntax/conditionandloop/","text":"\u689d\u4ef6\u5224\u65b7 (Condition) \u8207\u8ff4\u5708 (Loop) if \u689d\u4ef6\u5224\u65b7 \u70ba\u4e86\u61c9\u4ed8\u4e0d\u540c\u689d\u4ef6\u4e0b\u80fd\u505a\u51fa\u4e0d\u540c\u6307\u4ee4\uff0c C/C++ \u63d0\u4f9b\u4e86 if \u689d\u4ef6\u53e5\u5224\u65b7\u3002 \u689d\u4ef6\u53e5\u9700\u8981\u4f7f\u7528\u689d\u4ef6\u904b\u7b97\u5b50\uff0c\u689d\u4ef6\u53e5\u6709\u5169\u7a2e\u7d50\u679c\uff0cTrue (1) \u548c False (0)\u3002\u7576 if \u689d\u4ef6\u53e5\u7b26\u5408\u6642\uff0c\u6703\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\uff0c\u5426\u5247\u6703\u7121\u8996\u9673\u8ff0\u53e5\uff0c\u57f7\u884c\u4e4b\u5f8c\u7684\u7a0b\u5f0f\u78bc\u3002\u9673\u8ff0\u53e5\u70ba\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u53ef\u6709 1 \u5230\u591a\u53e5\uff0c\u7528 {} \u5305\u8d77\u4f86\uff0c\u53ea\u6709 1 \u53e5\u6642\u53ef\u7701\u7565\uff0c\u4f46\u70ba\u7dad\u8b77\u53ca\u53ef\u8b80\u6027\uff0c\u5efa\u8b70\u4e0d\u8981\u7701\u7565\uff0c \u5982\u679c\u6709\u5169\u7a2e\uff08\u542b\uff09\u4ee5\u4e0a\u7684\u689d\u4ef6\uff0c\u53ef\u4f7f\u7528\u8907\u5408\u9673\u8ff0\u53e5\uff0c\u7576 if \u689d\u4ef6\u4e0d\u7b26\u5408\u6642\uff0c\u6703\u57f7\u884c else if \uff0c\u5982\u679c else if \u518d\u4e0d\u7b26\u5408\uff0c\u6703\u518d\u57f7\u884c\u4e0b\u4e00\u500b else if \uff0c\u76f4\u5230\u9047\u5230\u7b26\u5408\u7684\u689d\u4ef6\u53e5\uff0c\u5c31\u6703\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\uff0c\u5982\u679c\u57f7\u884c\u5230 else \u5247\u6703\u7121\u689d\u4ef6\u7684\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\u3002\u5728\u8907\u5408\u9673\u8ff0\u53e5\u4e2d\uff0c\u53ef\u4ee5\u6709 0 \u5230\u591a\u500b else if \uff0c\u4ee5\u53ca 0 \u6216 1 \u500b else \u3002 if \u689d\u4ef6\u5224\u65b7\u652f\u6301\u5de2\u72c0\u7d50\u69cb\uff0c\u610f\u601d\u70ba\u53ef\u4ee5\u5728 if \u689d\u4ef6\u5224\u65b7\u88e1\u9762\u653e if \u689d\u4ef6\u5224\u65b7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // \u57fa\u672c\u8a9e\u6cd5 if ( \u689d\u4ef6 _1 ) { \u9673\u8ff0 _1 ; } // \u8907\u5408\u9673\u8ff0\u53e5 if ( \u689d\u4ef6 _1 ) { \u9673\u8ff0 _1 ; } else if ( \u689d\u4ef6 _2 ) { \u9673\u8ff0 _2 ; } ... else if ( \u689d\u4ef6 _ ( n - 1 )) { \u9673\u8ff0 _ ( n - 1 ); } else { \u9673\u8ff0 n ; } // \u5de2\u72c0 if if ( \u689d\u4ef6 _1 ) { if ( \u689d\u4ef6 _a ) { \u9673\u8ff0 _a ; } } // \u7bc4\u4f8b\uff0c\u5224\u65b7 i \u662f\u5426\u70ba\u5947\u6578 scanf ( \"%d\" , & i ); if ( i % 2 == 0 ) { printf ( \"%d is odd \\n \" , i ); } else { printf ( \"%d is even \\n \" , i ); } if \u689d\u4ef6\u5224\u65b7\u53ea\u80fd\u57f7\u884c\u55ae\u6b21\uff0c\u5982\u8981\u91cd\u8907\u57f7\u884c\uff0c\u9700\u4f7f\u7528\u8ff4\u5708\uff0c\u8ff4\u5708\u6709\u5169\u7a2e\uff1a while \u548c for \u3002 while \u8ff4\u5708 while \u8ff4\u5708\u7528\u5728\u7d42\u6b62\u689d\u4ef6\u672a\u77e5\u7684\u60c5\u6cc1\u4e0b\u3002 \u57f7\u884c\u9806\u5e8f\u70ba\uff1a \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 ->...-> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u689d\u4ef6\u90e8 \uff08\u4e0d\u7b26\u5408\uff09-> \u8df3\u51fa\u3002 \u7576\u689d\u4ef6\u90e8\u7684\u689d\u4ef6\u7b26\u5408\uff0c\u624d\u6703\u57f7\u884c\u9673\u6558\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u53ea\u6709\u7576\u689d\u4ef6\u90e8\u7684\u689d\u4ef6\u4e0d\u7b26\u5408\uff0c\u9019\u500b\u8ff4\u5708\u624d\u6703\u7d42\u6b62\u3002 \u6709\u500b\u548c while \u8ff4\u5708\u76f8\u4f3c\u7684\u8ff4\u5708\u53eb\u505a do-while \u8ff4\u5708\uff0c\u5dee\u5225\u5728\u65bc do-while \u6703\u5148\u57f7\u884c\u9673\u6558\uff0c\u518d\u5224\u65b7\u662f\u5426\u8981\u96e2\u958b\u8ff4\u5708\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // while \u8a9e\u6cd5 while ( \u689d\u4ef6\u90e8 ) { \u9673\u6558 ; } // \u7bc4\u4f8b\uff0c1 \u5230 100 \u7684\u7e3d\u548c int i = 1 , ans = 0 ; while ( i <= 100 ) { ans += 1 ; i += 1 ; } // do-while \u8a9e\u6cd5 do { \u9673\u6558 ; } while ( \u689d\u4ef6\u90e8 ); // <- \u9019\u88e1\u6709\u5206\u865f\uff0c\u8981\u6ce8\u610f \u689d\u4ef6\u90e8\u53ef\u642d\u914d\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u6ce8\u610f\u4f7f\u7528\u524d\u7db4\u548c\u5f8c\u7db4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> int main () { int n = 5 , m = 5 ; printf ( \"prefix:\" ); while ( -- n ) { printf ( \" %d\" , n ); } printf ( \" \\n \" ); printf ( \"postfix:\" ); while ( m -- ) { printf ( \" %d\" , m ); } printf ( \" \\n \" ); } /* prefix: 4 3 2 1 postfix: 4 3 2 1 0 */ for \u8ff4\u5708 for \u8ff4\u5708\u7528\u5728\u7d42\u6b62\u689d\u4ef6\u5df2\u77e5\u7684\u60c5\u6cc1\u4e0b\uff0c\u6703\u8a2d\u7acb\u4e00\u500b\u63a7\u5236\u8b8a\u6578 (Control Variable) \u4f86\u63a7\u5236\u8ff4\u5708\u57f7\u884c\u7684\u6b21\u6578\u3002 for \u8ff4\u5708\u5206\u6210\u521d\u59cb\u90e8\u3001\u689d\u4ef6\u90e8\u3001\u66f4\u65b0\u90e8\u4e09\u90e8\u5206 \u521d\u59cb\u90e8\u3001\u689d\u4ef6\u90e8\u3001\u66f4\u65b0\u90e8\u9019\u4e09\u90e8\u5206\u7686\u53ef\u7701\u7565\u3002 \u521d\u59cb\u90e8\uff1a\u7528\u4f86\u5ba3\u544a\u548c\u521d\u59cb\u5316\u63a7\u5236\u8b8a\u6578\uff08 C99 \u524d\u4e0d\u80fd\u5ba3\u544a\uff09\uff0c\u8b8a\u6578\u5ba3\u544a\u53ea\u80fd\u662f\u540c\u7a2e\u5f62\u614b\uff0c\u5982\u679c\u6709\u5169\u7a2e\uff08\u542b\uff09\u4ee5\u4e0a\u7684\u5f62\u614b\u8981\u5ba3\u544a\uff0c\u5176\u4e2d\u4e00\u7a2e\u8981\u5ba3\u544a\u5916\u90e8\u3002 \u689d\u4ef6\u90e8\uff1a\u5224\u65b7\u662f\u5426\u8981\u7e7c\u7e8c\u8ff4\u5708\uff0c\u540c while \u8ff4\u5708\u7684\u689d\u4ef6\u90e8\u3002 \u66f4\u65b0\u90e8\uff1a\u66f4\u65b0\u63a7\u5236\u8b8a\u6578\uff0c\u66f4\u65b0\u90e8\u7684\u503c\u5982\u679c\u662f\u8981 +1 \u6216 -1 \uff0c\u901a\u5e38\u6703\u4f7f\u7528\u905e\u589e\u904b\u7b97\u5b50\u3002 \u524d\u7db4\u5f8c\u7db4\u904b\u7b97\u5b50\uff0c\u5728\u66f4\u65b0\u90e8\u6548\u679c\u76f8\u540c\u3002\u5728\u8ffd\u6c42\u6548\u7387\u7684\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u6703\u4f7f\u7528\u524d\u7db4\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u56e0\u70ba\u524d\u7db4\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u53ea\u6703\u6539\u8b8a\u6578\u7684\u503c\uff0c\u800c\u5f8c\u7db4\u904b\u7b97\u5b50\uff0c\u6703\u5148\u8907\u88fd\u4e00\u500b\u8b8a\u6578\u7528\u65bc\u56de\u50b3\uff0c\u518d\u6539\u8b8a\u6578\u7684\u503c\uff0c\u6548\u7387\u6703\u4f4e\u65bc\u524d\u7db4\u904b\u7b97\u5b50\u3002 for \u8ff4\u5708\u57f7\u884c\u9806\u5e8f\uff1a \u521d\u59cb\u90e8 -> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u66f4\u65b0\u90e8 -> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\u689d\u4ef6\uff09-> \u9673\u6558 -> \u66f4\u65b0\u90e8 ->... \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u66f4\u65b0\u90e8 -> \u689d\u4ef6\u90e8 \uff08\u4e0d\u7b26\u5408\uff09-> \u8df3\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // for \u8a9e\u6cd5 for ( \u521d\u59cb\u90e8 ; \u689d\u4ef6\u90e8 ; \u66f4\u65b0\u90e8 ) { \u9673\u6558 ; } // \u7bc4\u4f8b\uff0c1 \u5230 100 \u7684\u7e3d\u548c int ans = 0 ; for ( int i = 1 ; i <= 100 ; ++ i ) { ans += 1 ; } while \u548c for \u5169\u7a2e\u5beb\u6cd5\u53ef\u4ee5\u8f49\u63db\uff0c\u7686\u652f\u6301\u5de2\u72c0\u7d50\u69cb\uff0c\u53ef\u4ee5\u548c if \u642d\u914d\u3002 1 2 3 4 5 6 7 8 9 // 0~100 \u4e2d\u7684\u5947\u6578\u548c int sum = 0 ; for ( int i = 0 ; i <= 100 ; i += 1 ) { if ( i % 2 != 0 ) { sum += i ; } } break \u548c continue break \uff1a\u8df3\u51fa\u8ff4\u5708\u3002 continue \uff1a\u76f4\u63a5\u7e7c\u7e8c\u4e0b\u4e00\u6b21\u8ff4\u5708\u57f7\u884c\uff0c\u8df3\u904e\u9019\u6b21\u8ff4\u5708\u5f8c\u7e8c\u7684\u7a0b\u5f0f\u78bc\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <iostream> int main () { printf ( \"break:\" ); for ( int i = 0 ; i < 5 ; ++ i ) { if ( i == 2 ) { break ; } printf ( \" %d\" , i ); } printf ( \" \\n \" ); printf ( \"continue:\" ); for ( int i = 0 ; i < 5 ; ++ i ) { if ( i == 2 ) { continue ; } printf ( \" %d\" , i ); } printf ( \" \\n \" ); } /* break: 0 1 continue: 0 1 3 4 */ \u5e38\u898b\u7684\u8f38\u5165\u689d\u4ef6 \u6bd4\u8cfd\u4e2d\u6703\u6709\u4e00\u4e9b\u8f38\u5165\u689d\u4ef6\uff0c\u5e38\u898b\u6709 EOF \u7248\u3001 T \u884c\u7248\u3001X \u5c3e\u7248\uff0c\u4ee5\u4e0b\u4e00\u4e00\u4ecb\u7d39\u3002 T \u884c\u7248 \u9019\u7a2e\u984c\u76ee\u683c\u5f0f\u5982\u4e0b\uff1a 1 \u7b2c\u4e00\u884c\u7d66\u4e00\u500b\u6578\u5b57 T\uff0c\u4ee3\u8868\u6709 T \u7b46\u6e2c\u8cc7... \u7528 while \u548c for \u8ff4\u5708\u53ef\u4ee5\u9019\u6a23\u5beb\uff1a 1 2 3 4 5 6 7 8 int T ; cin >> T ; while ( T -- ) { } for ( int i = 0 ; i < T ; ++ i ) { } EOF \u7248 \u9019\u7a2e\u984c\u76ee\u901a\u5e38\u6c92\u6709\u660e\u78ba\u7684\u7d42\u6b62\u689d\u4ef6\uff0c\u6216\u662f\u76f4\u63a5\u544a\u8a34\u4f60\u300c\u4ee5 EOF \u7d50\u5c3e\u300d\u3002 \u6a94\u6848\u7d50\u5c3e (End of File, EOF)\uff0c\u662f\u6307\u4f5c\u696d\u7cfb\u7d71\u7121\u6cd5\u5f9e\u8cc7\u6599\u4f86\u6e90\u8b80\u53d6\u66f4\u591a\u8cc7\u6599\u7684\u60c5\u5f62\uff0c\u4e5f\u5c31\u662f\u4e00\u500b\u7a0b\u5f0f\u8b80\u8cc7\u6599\u8b80\u5230\u6a94\u5c3e\uff0c\u7a0b\u5f0f\u9047\u5230\u6a94\u5c3e\u6703\u56de\u50b3\u503c\uff0c\u4e0b\u5217\u5217\u51fa\u5e38\u7528\u8f38\u5165\u51fd\u5f0f\uff08\u51fd\u5f0f\u8acb\u53c3\u8003 \u51fd\u5f0f\u8207\u905e\u8ff4\u7ae0\u7bc0 )\uff1a \u5982\u4f55\u6a21\u64ec EOF \u5728 windows \u7684\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u6309 Crtl + Z \u985e Linux \u7cfb\u7d71\u6309 Crtl + D \u4e5f\u53ef\u4ee5\u7528 command line \u7de8\u8b6f\u7a0b\u5f0f\uff0c\u91cd\u65b0\u5c0e\u5411\u8f38\u5165\u8f38\u51fa \u7576\u8b80\u5230\u6a94\u5c3e\u6642\uff0c scanf \u6703\u56de\u50b3 -1 \uff0c\u5229\u7528 scanf \u7684\u56de\u50b3\u503c\u5224\u65b7\u662f\u5426\u7368\u5230\u6a94\u5c3e\u3002 \u932f\u8aa4\u89c0\u5ff5 \u932f\u8aa4\uff1a\u8b80\u4e0d\u5230\u6578\u5b57\u6703\u8b8a\u6210 -1 \u6b63\u78ba\uff1a\u8b80\u4e0d\u5230 scanf() \u6703\u56de\u50b3 -1\uff0c\u4e5f\u53ea\u6709 C \u7684 scanf \u6703\u56de\u50b3 -1 cin \u6709\u5169\u7a2e\u5beb\u6cd5\uff0c\u4e00\u7a2e\u662f\u5229\u7528\u51fd\u5f0f eof \u5224\u65b7\u662f\u5426\u9084\u6709\u8cc7\u6599\u8f38\u5165\u3002\u7b2c\u4e8c\u7a2e\u662f\u5229\u7528 cin \u7684\u56de\u50b3\u503c\uff0c\u7576\u8b80\u5230\u6a94\u5c3e\u6642\uff0c cin \u6703\u56de\u50b3\u7a7a\u7269\u4ef6\u3002\u7a7a\u7269\u4ef6\u5728 C++ \u8f49\u63db\u6210 bool \u503c\u6703\u662f false \uff0c\u53ef\u5c07\u7d50\u679c\u8f49\u63db\u81f3 bool \u503c\u5728\u5224\u65b7\uff0c\u5728\u689d\u4ef6\u53e5\u88e1\u9762\uff0c\u6240\u6709\u56de\u50b3\u503c\u90fd\u6703\u8b8a\u6210 bool \u503c\uff0c\u4e0d\u7528\u7279\u5225\u8f49\u63db\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int x ; // scanf while ( scanf ( \"%d\" , & x ) != -1 ) { } // `EOF` \u662f `C/C++` \u8a9e\u8a00\u7684\u4e00\u500b\u5e38\u6578\uff0c\u70ba `-1` \uff0c\u53ef\u4ee5\u7528 `EOF` \u4ee3\u66ff `-1` // \uff0c\u589e\u52a0\u53ef\u8b80\u6027\u3002 while ( scanf ( \"%d\" , & x ) != EOF ) { } // cin while ( cin . eof ()) { cin >> x ; } while (( bool ) cin >> x ) { } while ( cin >> x ) { } \u53e6\u5916\u9644\u4e0a JAVA \u548c python \u7684 EOF \u5beb\u6cd5\uff1a 1 2 Scanner sc = new Scanner ( System . in ); while ( sc . hasNext ()) 1 2 3 import sys for s in sys . stdin : X \u5c3e\u7248 1 ... \u6700\u5f8c\u8f38\u5165 X \u7d50\u675f\u3002 X \u53ef\u4ee5\u662f\u4efb\u610f\u578b\u614b\u7684\u4efb\u610f\u503c\uff0c\u4f8b\u5982\u6578\u5b57\u7684 -1 \uff0c\u5b57\u5143\u7684 e \u3002 \u9019\u7a2e\u8f38\u5165\u6709\u5169\u7a2e\u5beb\u6cd5\uff0c\u4e00\u7a2e\u662f\u4f7f\u7528 break \uff0c\u53e6\u4e00\u7a2e\u662f\u4f7f\u7528 C++ \u7684\u9017\u865f\u904b\u7b97\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int x ; // \u4f7f\u7528 break while ( scanf ( \"%d\" , & x )) { if ( x == -1 ) { break ; } } while ( cin >> x ) { if ( x == -1 ) { break ; } } // \u4f7f\u7528 C++ \u7684\u9017\u865f\u904b\u7b97\u5b50 while ( scanf ( \"%d\" , & x ), x != -1 ) { } while ( cin >> x , x != -1 ) { }","title":"\u689d\u4ef6\u5224\u65b7\u8207\u8ff4\u5708"},{"location":"syntax/conditionandloop/#condition-loop","text":"","title":"\u689d\u4ef6\u5224\u65b7 (Condition) \u8207\u8ff4\u5708 (Loop)"},{"location":"syntax/conditionandloop/#if","text":"\u70ba\u4e86\u61c9\u4ed8\u4e0d\u540c\u689d\u4ef6\u4e0b\u80fd\u505a\u51fa\u4e0d\u540c\u6307\u4ee4\uff0c C/C++ \u63d0\u4f9b\u4e86 if \u689d\u4ef6\u53e5\u5224\u65b7\u3002 \u689d\u4ef6\u53e5\u9700\u8981\u4f7f\u7528\u689d\u4ef6\u904b\u7b97\u5b50\uff0c\u689d\u4ef6\u53e5\u6709\u5169\u7a2e\u7d50\u679c\uff0cTrue (1) \u548c False (0)\u3002\u7576 if \u689d\u4ef6\u53e5\u7b26\u5408\u6642\uff0c\u6703\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\uff0c\u5426\u5247\u6703\u7121\u8996\u9673\u8ff0\u53e5\uff0c\u57f7\u884c\u4e4b\u5f8c\u7684\u7a0b\u5f0f\u78bc\u3002\u9673\u8ff0\u53e5\u70ba\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u53ef\u6709 1 \u5230\u591a\u53e5\uff0c\u7528 {} \u5305\u8d77\u4f86\uff0c\u53ea\u6709 1 \u53e5\u6642\u53ef\u7701\u7565\uff0c\u4f46\u70ba\u7dad\u8b77\u53ca\u53ef\u8b80\u6027\uff0c\u5efa\u8b70\u4e0d\u8981\u7701\u7565\uff0c \u5982\u679c\u6709\u5169\u7a2e\uff08\u542b\uff09\u4ee5\u4e0a\u7684\u689d\u4ef6\uff0c\u53ef\u4f7f\u7528\u8907\u5408\u9673\u8ff0\u53e5\uff0c\u7576 if \u689d\u4ef6\u4e0d\u7b26\u5408\u6642\uff0c\u6703\u57f7\u884c else if \uff0c\u5982\u679c else if \u518d\u4e0d\u7b26\u5408\uff0c\u6703\u518d\u57f7\u884c\u4e0b\u4e00\u500b else if \uff0c\u76f4\u5230\u9047\u5230\u7b26\u5408\u7684\u689d\u4ef6\u53e5\uff0c\u5c31\u6703\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\uff0c\u5982\u679c\u57f7\u884c\u5230 else \u5247\u6703\u7121\u689d\u4ef6\u7684\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\u3002\u5728\u8907\u5408\u9673\u8ff0\u53e5\u4e2d\uff0c\u53ef\u4ee5\u6709 0 \u5230\u591a\u500b else if \uff0c\u4ee5\u53ca 0 \u6216 1 \u500b else \u3002 if \u689d\u4ef6\u5224\u65b7\u652f\u6301\u5de2\u72c0\u7d50\u69cb\uff0c\u610f\u601d\u70ba\u53ef\u4ee5\u5728 if \u689d\u4ef6\u5224\u65b7\u88e1\u9762\u653e if \u689d\u4ef6\u5224\u65b7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // \u57fa\u672c\u8a9e\u6cd5 if ( \u689d\u4ef6 _1 ) { \u9673\u8ff0 _1 ; } // \u8907\u5408\u9673\u8ff0\u53e5 if ( \u689d\u4ef6 _1 ) { \u9673\u8ff0 _1 ; } else if ( \u689d\u4ef6 _2 ) { \u9673\u8ff0 _2 ; } ... else if ( \u689d\u4ef6 _ ( n - 1 )) { \u9673\u8ff0 _ ( n - 1 ); } else { \u9673\u8ff0 n ; } // \u5de2\u72c0 if if ( \u689d\u4ef6 _1 ) { if ( \u689d\u4ef6 _a ) { \u9673\u8ff0 _a ; } } // \u7bc4\u4f8b\uff0c\u5224\u65b7 i \u662f\u5426\u70ba\u5947\u6578 scanf ( \"%d\" , & i ); if ( i % 2 == 0 ) { printf ( \"%d is odd \\n \" , i ); } else { printf ( \"%d is even \\n \" , i ); } if \u689d\u4ef6\u5224\u65b7\u53ea\u80fd\u57f7\u884c\u55ae\u6b21\uff0c\u5982\u8981\u91cd\u8907\u57f7\u884c\uff0c\u9700\u4f7f\u7528\u8ff4\u5708\uff0c\u8ff4\u5708\u6709\u5169\u7a2e\uff1a while \u548c for \u3002","title":"if \u689d\u4ef6\u5224\u65b7"},{"location":"syntax/conditionandloop/#while","text":"while \u8ff4\u5708\u7528\u5728\u7d42\u6b62\u689d\u4ef6\u672a\u77e5\u7684\u60c5\u6cc1\u4e0b\u3002 \u57f7\u884c\u9806\u5e8f\u70ba\uff1a \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 ->...-> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u689d\u4ef6\u90e8 \uff08\u4e0d\u7b26\u5408\uff09-> \u8df3\u51fa\u3002 \u7576\u689d\u4ef6\u90e8\u7684\u689d\u4ef6\u7b26\u5408\uff0c\u624d\u6703\u57f7\u884c\u9673\u6558\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u53ea\u6709\u7576\u689d\u4ef6\u90e8\u7684\u689d\u4ef6\u4e0d\u7b26\u5408\uff0c\u9019\u500b\u8ff4\u5708\u624d\u6703\u7d42\u6b62\u3002 \u6709\u500b\u548c while \u8ff4\u5708\u76f8\u4f3c\u7684\u8ff4\u5708\u53eb\u505a do-while \u8ff4\u5708\uff0c\u5dee\u5225\u5728\u65bc do-while \u6703\u5148\u57f7\u884c\u9673\u6558\uff0c\u518d\u5224\u65b7\u662f\u5426\u8981\u96e2\u958b\u8ff4\u5708\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // while \u8a9e\u6cd5 while ( \u689d\u4ef6\u90e8 ) { \u9673\u6558 ; } // \u7bc4\u4f8b\uff0c1 \u5230 100 \u7684\u7e3d\u548c int i = 1 , ans = 0 ; while ( i <= 100 ) { ans += 1 ; i += 1 ; } // do-while \u8a9e\u6cd5 do { \u9673\u6558 ; } while ( \u689d\u4ef6\u90e8 ); // <- \u9019\u88e1\u6709\u5206\u865f\uff0c\u8981\u6ce8\u610f \u689d\u4ef6\u90e8\u53ef\u642d\u914d\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u6ce8\u610f\u4f7f\u7528\u524d\u7db4\u548c\u5f8c\u7db4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> int main () { int n = 5 , m = 5 ; printf ( \"prefix:\" ); while ( -- n ) { printf ( \" %d\" , n ); } printf ( \" \\n \" ); printf ( \"postfix:\" ); while ( m -- ) { printf ( \" %d\" , m ); } printf ( \" \\n \" ); } /* prefix: 4 3 2 1 postfix: 4 3 2 1 0 */","title":"while \u8ff4\u5708"},{"location":"syntax/conditionandloop/#for","text":"for \u8ff4\u5708\u7528\u5728\u7d42\u6b62\u689d\u4ef6\u5df2\u77e5\u7684\u60c5\u6cc1\u4e0b\uff0c\u6703\u8a2d\u7acb\u4e00\u500b\u63a7\u5236\u8b8a\u6578 (Control Variable) \u4f86\u63a7\u5236\u8ff4\u5708\u57f7\u884c\u7684\u6b21\u6578\u3002 for \u8ff4\u5708\u5206\u6210\u521d\u59cb\u90e8\u3001\u689d\u4ef6\u90e8\u3001\u66f4\u65b0\u90e8\u4e09\u90e8\u5206 \u521d\u59cb\u90e8\u3001\u689d\u4ef6\u90e8\u3001\u66f4\u65b0\u90e8\u9019\u4e09\u90e8\u5206\u7686\u53ef\u7701\u7565\u3002 \u521d\u59cb\u90e8\uff1a\u7528\u4f86\u5ba3\u544a\u548c\u521d\u59cb\u5316\u63a7\u5236\u8b8a\u6578\uff08 C99 \u524d\u4e0d\u80fd\u5ba3\u544a\uff09\uff0c\u8b8a\u6578\u5ba3\u544a\u53ea\u80fd\u662f\u540c\u7a2e\u5f62\u614b\uff0c\u5982\u679c\u6709\u5169\u7a2e\uff08\u542b\uff09\u4ee5\u4e0a\u7684\u5f62\u614b\u8981\u5ba3\u544a\uff0c\u5176\u4e2d\u4e00\u7a2e\u8981\u5ba3\u544a\u5916\u90e8\u3002 \u689d\u4ef6\u90e8\uff1a\u5224\u65b7\u662f\u5426\u8981\u7e7c\u7e8c\u8ff4\u5708\uff0c\u540c while \u8ff4\u5708\u7684\u689d\u4ef6\u90e8\u3002 \u66f4\u65b0\u90e8\uff1a\u66f4\u65b0\u63a7\u5236\u8b8a\u6578\uff0c\u66f4\u65b0\u90e8\u7684\u503c\u5982\u679c\u662f\u8981 +1 \u6216 -1 \uff0c\u901a\u5e38\u6703\u4f7f\u7528\u905e\u589e\u904b\u7b97\u5b50\u3002 \u524d\u7db4\u5f8c\u7db4\u904b\u7b97\u5b50\uff0c\u5728\u66f4\u65b0\u90e8\u6548\u679c\u76f8\u540c\u3002\u5728\u8ffd\u6c42\u6548\u7387\u7684\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u6703\u4f7f\u7528\u524d\u7db4\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u56e0\u70ba\u524d\u7db4\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u53ea\u6703\u6539\u8b8a\u6578\u7684\u503c\uff0c\u800c\u5f8c\u7db4\u904b\u7b97\u5b50\uff0c\u6703\u5148\u8907\u88fd\u4e00\u500b\u8b8a\u6578\u7528\u65bc\u56de\u50b3\uff0c\u518d\u6539\u8b8a\u6578\u7684\u503c\uff0c\u6548\u7387\u6703\u4f4e\u65bc\u524d\u7db4\u904b\u7b97\u5b50\u3002 for \u8ff4\u5708\u57f7\u884c\u9806\u5e8f\uff1a \u521d\u59cb\u90e8 -> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u66f4\u65b0\u90e8 -> \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\u689d\u4ef6\uff09-> \u9673\u6558 -> \u66f4\u65b0\u90e8 ->... \u689d\u4ef6\u90e8 \uff08\u7b26\u5408\uff09-> \u9673\u6558 -> \u66f4\u65b0\u90e8 -> \u689d\u4ef6\u90e8 \uff08\u4e0d\u7b26\u5408\uff09-> \u8df3\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // for \u8a9e\u6cd5 for ( \u521d\u59cb\u90e8 ; \u689d\u4ef6\u90e8 ; \u66f4\u65b0\u90e8 ) { \u9673\u6558 ; } // \u7bc4\u4f8b\uff0c1 \u5230 100 \u7684\u7e3d\u548c int ans = 0 ; for ( int i = 1 ; i <= 100 ; ++ i ) { ans += 1 ; } while \u548c for \u5169\u7a2e\u5beb\u6cd5\u53ef\u4ee5\u8f49\u63db\uff0c\u7686\u652f\u6301\u5de2\u72c0\u7d50\u69cb\uff0c\u53ef\u4ee5\u548c if \u642d\u914d\u3002 1 2 3 4 5 6 7 8 9 // 0~100 \u4e2d\u7684\u5947\u6578\u548c int sum = 0 ; for ( int i = 0 ; i <= 100 ; i += 1 ) { if ( i % 2 != 0 ) { sum += i ; } }","title":"for \u8ff4\u5708"},{"location":"syntax/conditionandloop/#break-continue","text":"break \uff1a\u8df3\u51fa\u8ff4\u5708\u3002 continue \uff1a\u76f4\u63a5\u7e7c\u7e8c\u4e0b\u4e00\u6b21\u8ff4\u5708\u57f7\u884c\uff0c\u8df3\u904e\u9019\u6b21\u8ff4\u5708\u5f8c\u7e8c\u7684\u7a0b\u5f0f\u78bc\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <iostream> int main () { printf ( \"break:\" ); for ( int i = 0 ; i < 5 ; ++ i ) { if ( i == 2 ) { break ; } printf ( \" %d\" , i ); } printf ( \" \\n \" ); printf ( \"continue:\" ); for ( int i = 0 ; i < 5 ; ++ i ) { if ( i == 2 ) { continue ; } printf ( \" %d\" , i ); } printf ( \" \\n \" ); } /* break: 0 1 continue: 0 1 3 4 */","title":"break \u548c continue"},{"location":"syntax/conditionandloop/#_1","text":"\u6bd4\u8cfd\u4e2d\u6703\u6709\u4e00\u4e9b\u8f38\u5165\u689d\u4ef6\uff0c\u5e38\u898b\u6709 EOF \u7248\u3001 T \u884c\u7248\u3001X \u5c3e\u7248\uff0c\u4ee5\u4e0b\u4e00\u4e00\u4ecb\u7d39\u3002","title":"\u5e38\u898b\u7684\u8f38\u5165\u689d\u4ef6"},{"location":"syntax/conditionandloop/#t","text":"\u9019\u7a2e\u984c\u76ee\u683c\u5f0f\u5982\u4e0b\uff1a 1 \u7b2c\u4e00\u884c\u7d66\u4e00\u500b\u6578\u5b57 T\uff0c\u4ee3\u8868\u6709 T \u7b46\u6e2c\u8cc7... \u7528 while \u548c for \u8ff4\u5708\u53ef\u4ee5\u9019\u6a23\u5beb\uff1a 1 2 3 4 5 6 7 8 int T ; cin >> T ; while ( T -- ) { } for ( int i = 0 ; i < T ; ++ i ) { }","title":"T \u884c\u7248"},{"location":"syntax/conditionandloop/#eof","text":"\u9019\u7a2e\u984c\u76ee\u901a\u5e38\u6c92\u6709\u660e\u78ba\u7684\u7d42\u6b62\u689d\u4ef6\uff0c\u6216\u662f\u76f4\u63a5\u544a\u8a34\u4f60\u300c\u4ee5 EOF \u7d50\u5c3e\u300d\u3002 \u6a94\u6848\u7d50\u5c3e (End of File, EOF)\uff0c\u662f\u6307\u4f5c\u696d\u7cfb\u7d71\u7121\u6cd5\u5f9e\u8cc7\u6599\u4f86\u6e90\u8b80\u53d6\u66f4\u591a\u8cc7\u6599\u7684\u60c5\u5f62\uff0c\u4e5f\u5c31\u662f\u4e00\u500b\u7a0b\u5f0f\u8b80\u8cc7\u6599\u8b80\u5230\u6a94\u5c3e\uff0c\u7a0b\u5f0f\u9047\u5230\u6a94\u5c3e\u6703\u56de\u50b3\u503c\uff0c\u4e0b\u5217\u5217\u51fa\u5e38\u7528\u8f38\u5165\u51fd\u5f0f\uff08\u51fd\u5f0f\u8acb\u53c3\u8003 \u51fd\u5f0f\u8207\u905e\u8ff4\u7ae0\u7bc0 )\uff1a \u5982\u4f55\u6a21\u64ec EOF \u5728 windows \u7684\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u6309 Crtl + Z \u985e Linux \u7cfb\u7d71\u6309 Crtl + D \u4e5f\u53ef\u4ee5\u7528 command line \u7de8\u8b6f\u7a0b\u5f0f\uff0c\u91cd\u65b0\u5c0e\u5411\u8f38\u5165\u8f38\u51fa \u7576\u8b80\u5230\u6a94\u5c3e\u6642\uff0c scanf \u6703\u56de\u50b3 -1 \uff0c\u5229\u7528 scanf \u7684\u56de\u50b3\u503c\u5224\u65b7\u662f\u5426\u7368\u5230\u6a94\u5c3e\u3002 \u932f\u8aa4\u89c0\u5ff5 \u932f\u8aa4\uff1a\u8b80\u4e0d\u5230\u6578\u5b57\u6703\u8b8a\u6210 -1 \u6b63\u78ba\uff1a\u8b80\u4e0d\u5230 scanf() \u6703\u56de\u50b3 -1\uff0c\u4e5f\u53ea\u6709 C \u7684 scanf \u6703\u56de\u50b3 -1 cin \u6709\u5169\u7a2e\u5beb\u6cd5\uff0c\u4e00\u7a2e\u662f\u5229\u7528\u51fd\u5f0f eof \u5224\u65b7\u662f\u5426\u9084\u6709\u8cc7\u6599\u8f38\u5165\u3002\u7b2c\u4e8c\u7a2e\u662f\u5229\u7528 cin \u7684\u56de\u50b3\u503c\uff0c\u7576\u8b80\u5230\u6a94\u5c3e\u6642\uff0c cin \u6703\u56de\u50b3\u7a7a\u7269\u4ef6\u3002\u7a7a\u7269\u4ef6\u5728 C++ \u8f49\u63db\u6210 bool \u503c\u6703\u662f false \uff0c\u53ef\u5c07\u7d50\u679c\u8f49\u63db\u81f3 bool \u503c\u5728\u5224\u65b7\uff0c\u5728\u689d\u4ef6\u53e5\u88e1\u9762\uff0c\u6240\u6709\u56de\u50b3\u503c\u90fd\u6703\u8b8a\u6210 bool \u503c\uff0c\u4e0d\u7528\u7279\u5225\u8f49\u63db\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int x ; // scanf while ( scanf ( \"%d\" , & x ) != -1 ) { } // `EOF` \u662f `C/C++` \u8a9e\u8a00\u7684\u4e00\u500b\u5e38\u6578\uff0c\u70ba `-1` \uff0c\u53ef\u4ee5\u7528 `EOF` \u4ee3\u66ff `-1` // \uff0c\u589e\u52a0\u53ef\u8b80\u6027\u3002 while ( scanf ( \"%d\" , & x ) != EOF ) { } // cin while ( cin . eof ()) { cin >> x ; } while (( bool ) cin >> x ) { } while ( cin >> x ) { } \u53e6\u5916\u9644\u4e0a JAVA \u548c python \u7684 EOF \u5beb\u6cd5\uff1a 1 2 Scanner sc = new Scanner ( System . in ); while ( sc . hasNext ()) 1 2 3 import sys for s in sys . stdin :","title":"EOF \u7248"},{"location":"syntax/conditionandloop/#x","text":"1 ... \u6700\u5f8c\u8f38\u5165 X \u7d50\u675f\u3002 X \u53ef\u4ee5\u662f\u4efb\u610f\u578b\u614b\u7684\u4efb\u610f\u503c\uff0c\u4f8b\u5982\u6578\u5b57\u7684 -1 \uff0c\u5b57\u5143\u7684 e \u3002 \u9019\u7a2e\u8f38\u5165\u6709\u5169\u7a2e\u5beb\u6cd5\uff0c\u4e00\u7a2e\u662f\u4f7f\u7528 break \uff0c\u53e6\u4e00\u7a2e\u662f\u4f7f\u7528 C++ \u7684\u9017\u865f\u904b\u7b97\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int x ; // \u4f7f\u7528 break while ( scanf ( \"%d\" , & x )) { if ( x == -1 ) { break ; } } while ( cin >> x ) { if ( x == -1 ) { break ; } } // \u4f7f\u7528 C++ \u7684\u9017\u865f\u904b\u7b97\u5b50 while ( scanf ( \"%d\" , & x ), x != -1 ) { } while ( cin >> x , x != -1 ) { }","title":"X \u5c3e\u7248"},{"location":"syntax/cstring/","text":"cstring \u51fd\u5f0f\u5eab cstring \u51fd\u5f0f\u5eab\u662f C \u7684\u51fd\u5f0f\u5eab\uff0c\u5b9a\u7fa9\u64cd\u4f5c\u9663\u5217\u7684\u51fd\u5f0f\u5eab\uff0c\u4ee5\u4e0b\u6558\u8ff0\u70ba\u7af6\u8cfd\u5e38\u7528\u7684\u51fd\u5f0f\uff1a \u5f15\u5165 C : string.h C++ : cstring memcpy : \u5f9e source \u8907\u88fd num bytes \u8a18\u61b6\u9ad4\u5230 destination \u3002 memcpy (destination, source, num) strcpy : \u5f9e source \u8907\u88fd C \u5f0f\u5b57\u4e32\u5230 destination \u3002 strcpy(destination, source) strncpy : \u5f9e source \u8907\u88fd num \u500b\u5b57\u5143\u8a18\u61b6\u9ad4\u5230 destination \u3002 strncpy(destination, source, num) srtcat : \u5c07 source \u63a5\u5230 destination \u5f8c\u9762\u3002 strcat(destination, source) strncat : \u5c07 source \u7684\u524d num \u500b\u5b57\u5143\u63a5\u5230 destination \u5f8c\u9762\u3002 strncat(destination, source, num) memcmp : \u6bd4\u8f03\u5169\u8a18\u61b6\u9ad4\u524d num bytes\u3002 memcmp(ptr1, ptr2, num) strcmp : \u6bd4\u8f03\u5169\u5b57\u4e32\u3002 strcmp(str1, str2) \u6bd4\u8f03\u51fd\u6578\u7d50\u679c \u7d50\u679c \u8aaa\u660e <0 \u524d\u8005<\u5f8c\u8005 =0 \u524d\u8005 = \u5f8c\u8005 >0 \u524d\u8005 > \u5f8c\u8005 memset : \u8a2d\u5b9a ptr \u524d num bytes \u70ba value memset(ptr, value, num) memset \u61c9\u8a72\u662f\u8981\u8a2d\u5b9a\u5b57\u5143\uff0c\u7136\u800c\u6574\u6578\u578b\u614b\u7684 0 \u548c -1 \uff0c\u7684\u6bcf\u500b bytes \u525b\u597d\u4e5f\u662f 0 \u548c -1 \uff0c\u6240\u4ee5 memset \u4e5f\u53ef\u7528\u4f86\u8a2d\u5b9a\u6574\u6578\u9663\u5217\u5168\u70ba 0 \u548c -1 \u3002 srtlen : \u56de\u50b3 C \u5f0f\u5b57\u4e32\u7684\u9577\u5ea6 strlen(str) \u7bc4\u4f8b \u8907\u88fd\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 char str1 [] = \"This is an apple.\" ; char str2 [] = \"That is a banana.\" ; printf ( \"Before strcpy: \\n \" ); printf ( \"%s \\n \" , str2 ); strcpy ( str2 , str1 ); printf ( \" \\n After strcpy: \\n \" ); printf ( \"%s \\n \" , str2 ); /* Before strcpy: That is a banana. After strcpy: This is an apple. */ \u4e32\u63a5\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 char str [] = \"Ha!\" ; printf ( \"Before strcpy: \\n \" ); printf ( \"%s \\n \" , str ); strcat ( str , \" Hello!\" ); printf ( \" \\n After strcpy: \\n \" ); printf ( \"%s \\n \" , str ); /* Before strcpy: Ha! After strcpy: Ha! Hello! */ \u6bd4\u8f03\u5b57\u4e32\u5927\u5c0f\uff08\u5b57\u5178\u5e8f\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 char str1 [] = \"This is an apple.\" ; char str2 [] = \"That is a banana.\" ; int res = memcmp ( str1 , str2 , sizeof ( str1 )); if ( res > 0 ) { printf ( \"'%s' is greater than '%s'. \\n \" , str1 , str2 ); } else if ( res < 0 ) { printf ( \"'%s' is less than '%s'. \\n \" , str1 , str2 ); } else { printf ( \"'%s' is the same as '%s'. \\n \" , str1 , str2 ); } /* 'This is an apple.' is greater than 'That is a banana.'. */ \u8a2d\u5b9a\u5b57\u5143\u9663\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 char str [ 5 ]; printf ( \"Before memeset: \\n \" ); for ( int i = 0 ; i < ( int ) strlen ( str ); ++ i ) { printf ( \"%c\" , str [ i ]); } memset ( str , '+' , sizeof ( str )); printf ( \" \\n After memeset: \\n \" ); for ( int i = 0 ; i < ( int ) strlen ( str ); ++ i ) { printf ( \"%c\" , str [ i ]); } /* Before memeset: After memeset: +++++ */ \u8a2d\u5b9a\u6574\u6578\u9663\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int arr [ 5 ]; printf ( \"Before memeset: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } memset ( arr , -1 , sizeof ( arr )); printf ( \" \\n After memeset: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } /* Before memeset: 8 0 2 0 7480496 After memeset: -1 -1 -1 -1 -1 */ cstring \u51fd\u5f0f\u5eab in cplusplus \u21a9","title":"cstring"},{"location":"syntax/cstring/#cstring","text":"cstring \u51fd\u5f0f\u5eab\u662f C \u7684\u51fd\u5f0f\u5eab\uff0c\u5b9a\u7fa9\u64cd\u4f5c\u9663\u5217\u7684\u51fd\u5f0f\u5eab\uff0c\u4ee5\u4e0b\u6558\u8ff0\u70ba\u7af6\u8cfd\u5e38\u7528\u7684\u51fd\u5f0f\uff1a \u5f15\u5165 C : string.h C++ : cstring memcpy : \u5f9e source \u8907\u88fd num bytes \u8a18\u61b6\u9ad4\u5230 destination \u3002 memcpy (destination, source, num) strcpy : \u5f9e source \u8907\u88fd C \u5f0f\u5b57\u4e32\u5230 destination \u3002 strcpy(destination, source) strncpy : \u5f9e source \u8907\u88fd num \u500b\u5b57\u5143\u8a18\u61b6\u9ad4\u5230 destination \u3002 strncpy(destination, source, num) srtcat : \u5c07 source \u63a5\u5230 destination \u5f8c\u9762\u3002 strcat(destination, source) strncat : \u5c07 source \u7684\u524d num \u500b\u5b57\u5143\u63a5\u5230 destination \u5f8c\u9762\u3002 strncat(destination, source, num) memcmp : \u6bd4\u8f03\u5169\u8a18\u61b6\u9ad4\u524d num bytes\u3002 memcmp(ptr1, ptr2, num) strcmp : \u6bd4\u8f03\u5169\u5b57\u4e32\u3002 strcmp(str1, str2) \u6bd4\u8f03\u51fd\u6578\u7d50\u679c \u7d50\u679c \u8aaa\u660e <0 \u524d\u8005<\u5f8c\u8005 =0 \u524d\u8005 = \u5f8c\u8005 >0 \u524d\u8005 > \u5f8c\u8005 memset : \u8a2d\u5b9a ptr \u524d num bytes \u70ba value memset(ptr, value, num) memset \u61c9\u8a72\u662f\u8981\u8a2d\u5b9a\u5b57\u5143\uff0c\u7136\u800c\u6574\u6578\u578b\u614b\u7684 0 \u548c -1 \uff0c\u7684\u6bcf\u500b bytes \u525b\u597d\u4e5f\u662f 0 \u548c -1 \uff0c\u6240\u4ee5 memset \u4e5f\u53ef\u7528\u4f86\u8a2d\u5b9a\u6574\u6578\u9663\u5217\u5168\u70ba 0 \u548c -1 \u3002 srtlen : \u56de\u50b3 C \u5f0f\u5b57\u4e32\u7684\u9577\u5ea6 strlen(str)","title":"cstring \u51fd\u5f0f\u5eab"},{"location":"syntax/cstring/#_1","text":"\u8907\u88fd\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 char str1 [] = \"This is an apple.\" ; char str2 [] = \"That is a banana.\" ; printf ( \"Before strcpy: \\n \" ); printf ( \"%s \\n \" , str2 ); strcpy ( str2 , str1 ); printf ( \" \\n After strcpy: \\n \" ); printf ( \"%s \\n \" , str2 ); /* Before strcpy: That is a banana. After strcpy: This is an apple. */ \u4e32\u63a5\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 char str [] = \"Ha!\" ; printf ( \"Before strcpy: \\n \" ); printf ( \"%s \\n \" , str ); strcat ( str , \" Hello!\" ); printf ( \" \\n After strcpy: \\n \" ); printf ( \"%s \\n \" , str ); /* Before strcpy: Ha! After strcpy: Ha! Hello! */ \u6bd4\u8f03\u5b57\u4e32\u5927\u5c0f\uff08\u5b57\u5178\u5e8f\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 char str1 [] = \"This is an apple.\" ; char str2 [] = \"That is a banana.\" ; int res = memcmp ( str1 , str2 , sizeof ( str1 )); if ( res > 0 ) { printf ( \"'%s' is greater than '%s'. \\n \" , str1 , str2 ); } else if ( res < 0 ) { printf ( \"'%s' is less than '%s'. \\n \" , str1 , str2 ); } else { printf ( \"'%s' is the same as '%s'. \\n \" , str1 , str2 ); } /* 'This is an apple.' is greater than 'That is a banana.'. */ \u8a2d\u5b9a\u5b57\u5143\u9663\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 char str [ 5 ]; printf ( \"Before memeset: \\n \" ); for ( int i = 0 ; i < ( int ) strlen ( str ); ++ i ) { printf ( \"%c\" , str [ i ]); } memset ( str , '+' , sizeof ( str )); printf ( \" \\n After memeset: \\n \" ); for ( int i = 0 ; i < ( int ) strlen ( str ); ++ i ) { printf ( \"%c\" , str [ i ]); } /* Before memeset: After memeset: +++++ */ \u8a2d\u5b9a\u6574\u6578\u9663\u5217 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int arr [ 5 ]; printf ( \"Before memeset: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } memset ( arr , -1 , sizeof ( arr )); printf ( \" \\n After memeset: \\n \" ); for ( int i = 0 ; i < 5 ; ++ i ) { printf ( \"%d \" , arr [ i ]); } /* Before memeset: 8 0 2 0 7480496 After memeset: -1 -1 -1 -1 -1 */ cstring \u51fd\u5f0f\u5eab in cplusplus \u21a9","title":"\u7bc4\u4f8b"},{"location":"syntax/cstylestring/","text":"C \u5f0f\u5b57\u4e32 (C-Style String) C \u5f0f\u5b57\u4e32\u5373\u662f\u5b57\u5143\u9663\u5217\uff0c\u76f8\u8f03\u4e00\u822c\u9663\u5217\uff0c\u5b57\u5143\u9663\u5217\u6709\u4e00\u4e9b\u7368\u6709\u7684\u7528\u6cd5\uff0c\u4ee5\u4e0b\u4f86\u4ecb\u7d39\uff1a \u6ce8\u610f \u9019\u88e1\u662f\u6307 C \u5f0f\u5b57\u4e32(\u5b57\u5143\u9663\u5217)\uff0c\u4e0d\u662f C++ \u7684 STL \u5bb9\u5668 String \u5ba3\u544a C \u5f0f\u5b57\u4e32\u662f\u9663\u5217\uff0c\u6240\u6709\u9663\u5217\u5ba3\u544a\u65b9\u6cd5\u4e5f\u9069\u7528\u5728 C \u5f0f\u5b57\u4e32\uff0c\u552f\u8981\u6ce8\u610f\u6700\u5f8c\u8981\u7d66\u4e00\u500b \\0 \uff0c\u8868\u793a\u5b57\u4e32\u7d50\u5c3e\u3002C \u5f0f\u5b57\u4e32\u53ef\u4ee5\u4e0d\u7d66\u5927\u5c0f\uff08\u9577\u5ea6\uff09\uff0c\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528\u5b57\u4e32\u5e38\u6578\u5ba3\u544a\uff0c\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u5ba3\u544a\uff0c\u4e0d\u7528\u5728\u5f8c\u9762\u52a0\u4e0a \\0 \uff0c\u4f46\u7a0b\u5f0f\u81ea\u52d5\u6703\u88dc \\0 \u3002 1 2 3 4 char str1 [ 6 ]; char str2 [ 6 ] = { 'a' , 'p' , 'p' , 'l' , 'e' , '\\0' }; char str3 [] = { 'a' , 'p' , 'p' , 'l' , 'e' , '\\0' }; char str4 [] = \"apple\" ; \u8f38\u5165\u8f38\u51fa C \u5f0f\u5b57\u4e32\u53ef\u4ee5\u4e00\u500b\u5b57\u5143\u4e00\u500b\u5b57\u5143\u6162\u6162\u8f38\u5165\uff0c\u4e5f\u53ef\u4ee5\u4e00\u6b21\u8f38\u5165\u6574\u500b\u5b57\u4e32\u3002\uff1a scanf \u6703\u8f38\u5165\u76f4\u5230\u9047\u898b\u63db\u884c\u5b57\u5143\uff0c\u8f38\u5165\u7684\u9577\u5ea6\u6709\u53ef\u80fd\u5927\u65bc\u8b8a\u6578\u9577\u5ea6\uff0c\u53ef\u80fd\u9020\u6210\u5b89\u5168\u4e0a\u7684\u7591\u616e\uff08\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u7d66\u7684\u8cc7\u6599\u90fd\u662f\u6709\u9577\u5ea6\u9650\u5236\uff0c\u6c92\u6709\u9019\u500b\u554f\u984c\uff09\uff0c scanf \u53ef\u4ee5\u8a2d\u5b9a width \u4f86\u63a7\u5236\u8f38\u5165\u9577\u5ea6\u3002 \u8f38\u51fa\u7528 printf \uff0c printf \u6703\u4e00\u76f4\u8f38\u51fa\uff0c\u76f4\u5230\u9047\u898b \\0 \u3002 1 2 3 scanf ( \"%s\" , str1 ); // \u4e0d\u5b89\u5168\uff0c\u4f46\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e0a OK scanf ( \"%9s\" , str1 ); // \u6bd4\u8f03\u5b89\u5168\u7684\u5beb\u6cd5 printf ( \"%s \\n \" , str1 ); \u5b57\u5178\u5e8f \u5b57\u5178\u5e8f\u662f\u6307\u6309\u7167\u55ae\u8a5e\u51fa\u73fe\u5728\u5b57\u5178\u7684\u9806\u5e8f\u9032\u884c\u6392\u5e8f\u7684\u65b9\u6cd5 1 \uff0c\u53ef\u7528\u4f86\u898f\u7bc4\u5b57\u4e32\u4e4b\u9593\u7684\u9806\u5e8f\u3002\u5169\u500b\u76f8\u7570\u5b57\u4e32\u9593\u7684\u5b57\u5178\u5e8f\u6bd4\u8f03\uff1a \u5f9e\u7b2c 1 \u500b\u5b57\u5143\u958b\u59cb\u6bd4\u5c0d\u3002 \u5982\u679c\u5b57\u5143\u76f8\u540c\uff0c\u6bd4\u8f03\u4e0b\u4e00\u500b\u5b57\u5143\u3002 \u5426\u5247\u8f49\u63db\u6210 ASCII \u7de8\u865f\uff0c\u6bd4\u8f03\u7de8\u865f\u5927\u5c0f\uff0c\u7de8\u865f\u5c0f\u7684\u5b57\u5178\u5e8f\u8f03\u5c0f\u3002 \u5982\u679c\u9047\u5230\u5176\u4e2d\u4e00\u65b9\u5b57\u4e32\u5df2\u7d93\u6bd4\u8f03\u5b8c\u6240\u6709\u5b57\u5143\uff0c\u5247\u5b57\u4e32\u9577\u5ea6\u8f03\u77ed\u8005\uff0c\u5176\u5b57\u5178\u5e8f\u8f03\u5c0f\u3002 \u7bc4\u4f8b 1 s=abc,t=bcd \u5728\u7b2c 1 \u500b\u5b57\u5143 s_1=a < b=t_1 \uff0c\u56e0\u6b64 s < t \u7bc4\u4f8b 2 s=apple,t=acquire \u5728\u7b2c 2 \u500b\u5b57\u5143 s_2=p > c=t_2 \uff0c\u56e0\u6b64 s > t \u7bc4\u4f8b 3 s=pencil,t=pencilbox \u524d\u7b2c 6 \u500b\u5b57\u5143\u90fd\u76f8\u7b49\uff0c\u56e0\u70ba s \u5df2\u7d93\u6bd4\u8f03\u5b8c\u6240\u6709\u5b57\u5143\uff0c\u56e0\u6b64 s < t Scan Set Scan Set \u53ef\u4ee5\u8a2d\u5b9a\u5b57\u4e32\u8f38\u5165\u53ea\u5305\u542b\u54ea\u4e9b\u5b57\u5143\uff0c\u4e3b\u8981\u7528\u65bc\u8f38\u5165\u683c\u5f0f\u8f03\u8907\u96dc\u7684\u984c\u76ee\u3002\u8209\u4f8b\u5982\u4e0b\uff1a %[abc]s \uff1a\u8f38\u5165\u5305\u542b abc \u7684\u5b57\u4e32 %[^abc]s \uff1a\u8f38\u5165\u4e0d\u5305\u542b abc \u7684\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 scanf ( \"%[abc]s\" , s ); printf ( \"%s \\n \" , s ); /* \u8f38\u5165\uff1aabcdef \u8f38\u51fa\uff1aabc */ scanf ( \"%[^abc]s\" , s ); printf ( \"%s \\n \" , s ); /* \u8f38\u5165\uff1afedcba \u8f38\u51fa\uff1acba */ \u5b57\u5178\u5e8f in \u7dad\u57fa\u767e\u79d1 \u21a9","title":"C \u5f0f\u5b57\u4e32"},{"location":"syntax/cstylestring/#c-c-style-string","text":"C \u5f0f\u5b57\u4e32\u5373\u662f\u5b57\u5143\u9663\u5217\uff0c\u76f8\u8f03\u4e00\u822c\u9663\u5217\uff0c\u5b57\u5143\u9663\u5217\u6709\u4e00\u4e9b\u7368\u6709\u7684\u7528\u6cd5\uff0c\u4ee5\u4e0b\u4f86\u4ecb\u7d39\uff1a \u6ce8\u610f \u9019\u88e1\u662f\u6307 C \u5f0f\u5b57\u4e32(\u5b57\u5143\u9663\u5217)\uff0c\u4e0d\u662f C++ \u7684 STL \u5bb9\u5668 String","title":"C \u5f0f\u5b57\u4e32 (C-Style String)"},{"location":"syntax/cstylestring/#_1","text":"C \u5f0f\u5b57\u4e32\u662f\u9663\u5217\uff0c\u6240\u6709\u9663\u5217\u5ba3\u544a\u65b9\u6cd5\u4e5f\u9069\u7528\u5728 C \u5f0f\u5b57\u4e32\uff0c\u552f\u8981\u6ce8\u610f\u6700\u5f8c\u8981\u7d66\u4e00\u500b \\0 \uff0c\u8868\u793a\u5b57\u4e32\u7d50\u5c3e\u3002C \u5f0f\u5b57\u4e32\u53ef\u4ee5\u4e0d\u7d66\u5927\u5c0f\uff08\u9577\u5ea6\uff09\uff0c\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528\u5b57\u4e32\u5e38\u6578\u5ba3\u544a\uff0c\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u5ba3\u544a\uff0c\u4e0d\u7528\u5728\u5f8c\u9762\u52a0\u4e0a \\0 \uff0c\u4f46\u7a0b\u5f0f\u81ea\u52d5\u6703\u88dc \\0 \u3002 1 2 3 4 char str1 [ 6 ]; char str2 [ 6 ] = { 'a' , 'p' , 'p' , 'l' , 'e' , '\\0' }; char str3 [] = { 'a' , 'p' , 'p' , 'l' , 'e' , '\\0' }; char str4 [] = \"apple\" ;","title":"\u5ba3\u544a"},{"location":"syntax/cstylestring/#_2","text":"C \u5f0f\u5b57\u4e32\u53ef\u4ee5\u4e00\u500b\u5b57\u5143\u4e00\u500b\u5b57\u5143\u6162\u6162\u8f38\u5165\uff0c\u4e5f\u53ef\u4ee5\u4e00\u6b21\u8f38\u5165\u6574\u500b\u5b57\u4e32\u3002\uff1a scanf \u6703\u8f38\u5165\u76f4\u5230\u9047\u898b\u63db\u884c\u5b57\u5143\uff0c\u8f38\u5165\u7684\u9577\u5ea6\u6709\u53ef\u80fd\u5927\u65bc\u8b8a\u6578\u9577\u5ea6\uff0c\u53ef\u80fd\u9020\u6210\u5b89\u5168\u4e0a\u7684\u7591\u616e\uff08\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u7d66\u7684\u8cc7\u6599\u90fd\u662f\u6709\u9577\u5ea6\u9650\u5236\uff0c\u6c92\u6709\u9019\u500b\u554f\u984c\uff09\uff0c scanf \u53ef\u4ee5\u8a2d\u5b9a width \u4f86\u63a7\u5236\u8f38\u5165\u9577\u5ea6\u3002 \u8f38\u51fa\u7528 printf \uff0c printf \u6703\u4e00\u76f4\u8f38\u51fa\uff0c\u76f4\u5230\u9047\u898b \\0 \u3002 1 2 3 scanf ( \"%s\" , str1 ); // \u4e0d\u5b89\u5168\uff0c\u4f46\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e0a OK scanf ( \"%9s\" , str1 ); // \u6bd4\u8f03\u5b89\u5168\u7684\u5beb\u6cd5 printf ( \"%s \\n \" , str1 );","title":"\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/cstylestring/#_3","text":"\u5b57\u5178\u5e8f\u662f\u6307\u6309\u7167\u55ae\u8a5e\u51fa\u73fe\u5728\u5b57\u5178\u7684\u9806\u5e8f\u9032\u884c\u6392\u5e8f\u7684\u65b9\u6cd5 1 \uff0c\u53ef\u7528\u4f86\u898f\u7bc4\u5b57\u4e32\u4e4b\u9593\u7684\u9806\u5e8f\u3002\u5169\u500b\u76f8\u7570\u5b57\u4e32\u9593\u7684\u5b57\u5178\u5e8f\u6bd4\u8f03\uff1a \u5f9e\u7b2c 1 \u500b\u5b57\u5143\u958b\u59cb\u6bd4\u5c0d\u3002 \u5982\u679c\u5b57\u5143\u76f8\u540c\uff0c\u6bd4\u8f03\u4e0b\u4e00\u500b\u5b57\u5143\u3002 \u5426\u5247\u8f49\u63db\u6210 ASCII \u7de8\u865f\uff0c\u6bd4\u8f03\u7de8\u865f\u5927\u5c0f\uff0c\u7de8\u865f\u5c0f\u7684\u5b57\u5178\u5e8f\u8f03\u5c0f\u3002 \u5982\u679c\u9047\u5230\u5176\u4e2d\u4e00\u65b9\u5b57\u4e32\u5df2\u7d93\u6bd4\u8f03\u5b8c\u6240\u6709\u5b57\u5143\uff0c\u5247\u5b57\u4e32\u9577\u5ea6\u8f03\u77ed\u8005\uff0c\u5176\u5b57\u5178\u5e8f\u8f03\u5c0f\u3002 \u7bc4\u4f8b 1 s=abc,t=bcd \u5728\u7b2c 1 \u500b\u5b57\u5143 s_1=a < b=t_1 \uff0c\u56e0\u6b64 s < t \u7bc4\u4f8b 2 s=apple,t=acquire \u5728\u7b2c 2 \u500b\u5b57\u5143 s_2=p > c=t_2 \uff0c\u56e0\u6b64 s > t \u7bc4\u4f8b 3 s=pencil,t=pencilbox \u524d\u7b2c 6 \u500b\u5b57\u5143\u90fd\u76f8\u7b49\uff0c\u56e0\u70ba s \u5df2\u7d93\u6bd4\u8f03\u5b8c\u6240\u6709\u5b57\u5143\uff0c\u56e0\u6b64 s < t","title":"\u5b57\u5178\u5e8f"},{"location":"syntax/cstylestring/#scan-set","text":"Scan Set \u53ef\u4ee5\u8a2d\u5b9a\u5b57\u4e32\u8f38\u5165\u53ea\u5305\u542b\u54ea\u4e9b\u5b57\u5143\uff0c\u4e3b\u8981\u7528\u65bc\u8f38\u5165\u683c\u5f0f\u8f03\u8907\u96dc\u7684\u984c\u76ee\u3002\u8209\u4f8b\u5982\u4e0b\uff1a %[abc]s \uff1a\u8f38\u5165\u5305\u542b abc \u7684\u5b57\u4e32 %[^abc]s \uff1a\u8f38\u5165\u4e0d\u5305\u542b abc \u7684\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 scanf ( \"%[abc]s\" , s ); printf ( \"%s \\n \" , s ); /* \u8f38\u5165\uff1aabcdef \u8f38\u51fa\uff1aabc */ scanf ( \"%[^abc]s\" , s ); printf ( \"%s \\n \" , s ); /* \u8f38\u5165\uff1afedcba \u8f38\u51fa\uff1acba */ \u5b57\u5178\u5e8f in \u7dad\u57fa\u767e\u79d1 \u21a9","title":"Scan Set"},{"location":"syntax/functionandrecursive/","text":"\u51fd\u5f0f\u8207\u905e\u8ff4 \u51fd\u5f0f \u5982\u679c\u7a0b\u5f0f\u88e1\u6709\u4e00\u6bb5\u6703\u91cd\u8907\u51fa\u73fe\u7684\u7a0b\u5f0f\u78bc\uff0c\u53ef\u4ee5\u5c07\u9019\u6bb5\u7a0b\u5f0f\u78bc\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u9019\u6a23\u53ef\u4ee5\u6e1b\u5c11\u7a0b\u5f0f\u7684\u9577\u5ea6\uff0c\u53ca\u964d\u4f4e\u7dad\u8b77\u7684\u96e3\u5ea6\uff0c\u4ee5\u4e0b\u70ba\u5176\u8a9e\u6cd5\uff1a 1 2 return_type function_name ( parameter list ) { \\\\ Do something ... return data ; } function_name : \u51fd\u5f0f\u7684\u540d\u7a31 parameter : \u51fd\u5f0f\u7684\u53c3\u6578 return_type : \u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\uff0c\u53ef\u70ba C/C++ \u63d0\u4f9b\u7684 \u57fa\u790e\u8cc7\u6599\u578b\u614b \u6216\u662f \u81ea\u5b9a\u7fa9\u7684\u7d50\u69cb \uff0c\u5982\u679c\u4e0d\u9700\u6709\u56de\u50b3\u503c\uff0c\u53ef\u8a2d\u70ba void \uff0c return \u662f C/C++ \u95dc\u9375\u5b50\uff0c\u56de\u50b3\u51fd\u5f0f\u7d50\u679c\uff0c\u9700\u8207\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\u76f8\u7b26\u3002\u7576\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\u70ba void \uff0c\u53ef\u4ee5\u7701\u7565\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int sum ( int x , int y ) { int sum = 0 ; sum += x ; sum += y ; return x + y ; } void print_hello () { cout << \"Hello \\n \" ; return ; // \u53ef\u7701\u7565 } main \u662f C/C++ \u7a0b\u5f0f\u7684\u5165\u53e3\u51fd\u5f0f\uff0c\u63a5\u53d7\u547d\u4ee4\u5217\u7684\u53c3\u6578\uff0c\u6b63\u5e38\u60c5\u6cc1\u6703\u56de\u50b3 0 \u4ee3\u8868\u6b63\u5e38\u904b\u4f5c\u3002 \u8b8a\u6578\u7bc4\u570d (Scope) \u548c\u751f\u547d\u9031\u671f (Lifttime) \u5728 C++ \u4e2d\uff0c\u4e00\u500b\u8b8a\u6578\u53ef\u88ab\u4f7f\u7528\u7684\u5340\u57df\uff0c\u7a31\u70ba\u7bc4\u570d (Scope)\uff0c\u6bcf\u7a2e\u8b8a\u6578\u90fd\u6709\u81ea\u5df1\u7684\u751f\u547d\u9031\u671f (Lifttime)\uff0c\u7bc4\u570d\u53ef\u5206\u70ba\u5f88\u591a\u7a2e\uff0c\u9019\u88e1\u6211\u5011\u53ea\u8ac7\u4e09\u7a2e\uff0c\u5305\u542b\u5168\u57df\u8b8a\u6578 (Global variable)\u3001\u5340\u57df\u8b8a\u6578 (Local variable) \u8207\u5340\u584a\u8b8a\u6578 (Block variable)\u3002 \u5168\u57df\u8b8a\u6578\uff1a\u5168\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u51fd\u5f0f\u5916\u90e8\u7684\u8b8a\u6578\uff0c\u6574\u500b\u7a0b\u5f0f\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u5168\u57df\u8b8a\u6578\u901a\u5e38\u70ba\u5e38\u6578\uff0c\u6216\u662f\u591a\u500b\u51fd\u5f0f\u5171\u7528\u7684\u8b8a\u6578\u3002\u5168\u57df\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u7a0b\u5f0f\u958b\u59cb\uff0c\u7d42\u65bc\u7a0b\u5f0f\u7d50\u675f\u3002 \u5340\u57df\u8b8a\u6578\uff1a\u5340\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u51fd\u5f0f\u5167\u90e8\u7684\u8b8a\u6578\uff0c\u53ea\u9650\u8a72\u51fd\u5f0f\u4f7f\u7528\uff0c\u5340\u57df\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u51fd\u5f0f\u958b\u59cb\uff0c\u7d42\u65bc\u51fd\u5f0f\u7d50\u675f\u3002 \u5340\u584a\u8b8a\u6578\uff1a\u5340\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u5340\u584a\u5167\u90e8\u7684\u8b8a\u6578\uff0c\u53ea\u9650\u8a72\u5340\u584a\u4f7f\u7528\uff0c\u5340\u584a\u5305\u542b if \u3001 while \u3001 for \u5340\u584a\uff0c\u5340\u584a\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u5340\u584a\u958b\u59cb\uff0c\u7d42\u65bc\u5340\u584a\u7d50\u675f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; const int N = 100 ; // \u5168\u57df\u8b8a\u6578 int var1 = 1 ; // \u5168\u57df\u8b8a\u6578 void print_var1 () { cout << var1 << '\\n' ; } int main () { int var2 = N ; // \u5340\u57df\u8b8a\u6578 for ( int i = 0 ; i < var2 ; ++ i ) // \u5340\u584a\u8b8a\u6578 { ++ var1 ; print_var1 (); } } \u6ce8\u610f \u5c07\u6240\u6709\u8b8a\u6578\u90fd\u8a2d\u70ba\u5168\u57df\u8b8a\u6578\u56fa\u7136\u65b9\u4fbf\uff0c\u4f46\u6703\u7522\u751f\u540d\u7a31\u7a7a\u9593\u91cd\u758a\u7684\u554f\u984c\uff08\u4e0b\u9762\u5169\u500b\u7bc4\u4f8b\u7a0b\u5f0f\uff0c\u56e0\u70ba\u8b8a\u6578\u5b9a\u7fa9\u4f4d\u7f6e\u4e0d\u540c\uff0c\u9020\u6210\u4e0d\u540c\u7d50\u679c\uff09\uff0c\u9020\u6210\u7dad\u8b77\u4e0a\u7684\u56f0\u96e3\uff0c\u61c9\u5c0f\u5fc3\u4f7f\u7528\uff0c\u80fd\u64fa\u653e\u5230\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\uff0c\u4e0d\u61c9\u8a72\u8a2d\u70ba\u5168\u57df\u8b8a\u6578\uff0c\u80fd\u64fa\u653e\u5230\u5340\u584a\u5167\u7684\u8b8a\u6578\uff0c\u4e0d\u61c9\u8a72\u8a2d\u70ba\u5340\u57df\u8b8a\u6578\u3002 \u7bc4\u4f8b 1(\u540d\u7a31\u7a7a\u9593\u91cd\u758a) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> using namespace std ; int i ; void print_var () { for ( i = 0 ; i < 3 ; ++ i ) { cout << i << '\\n' ; } } int main () { for ( i = 0 ; i < 3 ; ++ i ) { print_var (); } } /* 0 1 2 */ \u7bc4\u4f8b 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> using namespace std ; void print_var () { for ( int i = 0 ; i < 3 ; ++ i ) { cout << i << '\\n' ; } } int main () { for ( int i = 0 ; i < 3 ; ++ i ) { print_var (); } } /* 0 1 2 0 1 2 0 1 2 */ \u8986\u84cb \u7576\u7bc4\u570d\u4e0d\u540c\u7684\u8b8a\u6578\u540c\u540d\u6642\uff0c\u7bc4\u570d\u5c0f\u7684\u6703\u8986\u84cb\u7bc4\u570d\u5927\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; int main () { int num = 5 ; for ( int i = 0 ; i < 1 ; ++ i ) { int num = 10 ; cout << num << '\\n' ; } } /* 10 */ static \u95dc\u9375\u5b57 \u5982\u679c\u4e00\u500b\u51fd\u5f0f\u5167\u90e8\u7684\u8b8a\u6578\u524d\u9762\u52a0\u4e0a static \u95dc\u9375\u5b57\uff0c\u90a3\u9ebc\u9019\u500b\u8b8a\u6578\u5c31\u6703\u5728\u7a0b\u5f0f\u4e00\u958b\u59cb\u5c31\u6703\u653e\u5728\u8a18\u61b6\u9ad4\u56fa\u5b9a\u7684\u4f4d\u7f6e\u4e0a\uff0c\u53ea\u5230\u7a0b\u5f0f\u7d50\u675f\u624d\u6d88\u5931\uff0c\u800c\u4e0d\u662f\u96a8\u8457\u51fd\u5f0f\u7d50\u675f\u800c\u6d88\u5931\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> using namespace std ; void addSum ( int i ) { static int sum = 0 ; sum += i ; cout << \"The current sum is: \" << sum << '\\n' ; } int main () { for ( int i = 1 ; i <= 5 ; ++ i ) { addSum ( i ); } } /* The current sum is: 1 The current sum is: 3 The current sum is: 6 The current sum is: 10 The current sum is: 15 */ \u905e\u8ff4 \u905e\u8ff4\u662f\u6307\u4e00\u7a2e\u89e3\u6c7a\u554f\u984c\u7684\u8fa6\u6cd5\uff0c\u905e\u8ff4\u6703\u5148\u5c07\u554f\u984c\u62c6\u89e3\u6210\u6578\u500b\u76f8\u4f3c\u7684\u5b50\u554f\u984c\uff0c\u89e3\u6c7a\u5b50\u554f\u984c\u5f8c\uff0c\u518d\u900f\u904e\u5b50\u554f\u984c\u7684\u7d50\u679c\u5c07\u554f\u984c\u89e3\u6c7a\u3002\u5728\u51fd\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u547c\u53eb\u76f8\u540c\u7684\u51fd\u5f0f\u5e36\u6709\u4e0d\u540c\u7684\u53c3\u6578\uff0c\u9019\u500b\u7279\u6027\u53ef\u4ee5\u61c9\u7528\u5728\u905e\u8ff4\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u51fd\u5f0f\u5be6\u4f5c\u905e\u8ff4\u3002\u905e\u8ff4\u6709\u5169\u500b\u8981\u4ef6\uff1a \u7d42\u6b62\u689d\u4ef6 \u7e2e\u5c0f\u554f\u984c\u7684\u65b9\u5f0f \u4ee5\u968e\u4e58\u70ba\u4f8b\uff1a n!=\\left\\{<script type=\"math/tex; mode=display\">\\begin{array}{}1 && if\\ i\\leq 1\\ (\u7d42\u6b62\u689d\u4ef6)\\\\ n\\times (n-1)! && else\\ (\u7e2e\u5c0f\u554f\u984c\u7684\u65b9\u5f0f)\\end{array} \\right. 1 2 3 4 5 6 7 8 9 10 11 int factorial ( int i ) { if ( i <= 1 ) { return 1 ; } int ans ; ans = factorial ( i - 1 ); ans *= i ; return ans ; } \u9664\u4e86\u968e\u4e58\u4e4b\u5916\uff0c\u9084\u6709\u8a31\u591a\u905e\u8ff4\u7684\u57fa\u790e\u984c \u8cbb\u5f0f\u6578\u5217 \u6cb3\u5167\u5854 \u6700\u5927\u516c\u56e0\u6578 \u5982\u4f55\u64b0\u5beb\u51fd\u5f0f (Function) - Michael Chen \u7684\u6280\u8853\u6587\u4ef6 \u21a9 \u51fd\u5f0f\u7c21\u4ecb - openhome.cc \u21a9 \u905e\u8ff4 - openhome.cc \u21a9 \u8b8a\u6578\u7bc4\u570d - openhome.cc \u21a9","title":"\u51fd\u5f0f\u8207\u905e\u8ff4"},{"location":"syntax/functionandrecursive/#_1","text":"","title":"\u51fd\u5f0f\u8207\u905e\u8ff4"},{"location":"syntax/functionandrecursive/#_2","text":"\u5982\u679c\u7a0b\u5f0f\u88e1\u6709\u4e00\u6bb5\u6703\u91cd\u8907\u51fa\u73fe\u7684\u7a0b\u5f0f\u78bc\uff0c\u53ef\u4ee5\u5c07\u9019\u6bb5\u7a0b\u5f0f\u78bc\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u9019\u6a23\u53ef\u4ee5\u6e1b\u5c11\u7a0b\u5f0f\u7684\u9577\u5ea6\uff0c\u53ca\u964d\u4f4e\u7dad\u8b77\u7684\u96e3\u5ea6\uff0c\u4ee5\u4e0b\u70ba\u5176\u8a9e\u6cd5\uff1a 1 2 return_type function_name ( parameter list ) { \\\\ Do something ... return data ; } function_name : \u51fd\u5f0f\u7684\u540d\u7a31 parameter : \u51fd\u5f0f\u7684\u53c3\u6578 return_type : \u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\uff0c\u53ef\u70ba C/C++ \u63d0\u4f9b\u7684 \u57fa\u790e\u8cc7\u6599\u578b\u614b \u6216\u662f \u81ea\u5b9a\u7fa9\u7684\u7d50\u69cb \uff0c\u5982\u679c\u4e0d\u9700\u6709\u56de\u50b3\u503c\uff0c\u53ef\u8a2d\u70ba void \uff0c return \u662f C/C++ \u95dc\u9375\u5b50\uff0c\u56de\u50b3\u51fd\u5f0f\u7d50\u679c\uff0c\u9700\u8207\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\u76f8\u7b26\u3002\u7576\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\u70ba void \uff0c\u53ef\u4ee5\u7701\u7565\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int sum ( int x , int y ) { int sum = 0 ; sum += x ; sum += y ; return x + y ; } void print_hello () { cout << \"Hello \\n \" ; return ; // \u53ef\u7701\u7565 } main \u662f C/C++ \u7a0b\u5f0f\u7684\u5165\u53e3\u51fd\u5f0f\uff0c\u63a5\u53d7\u547d\u4ee4\u5217\u7684\u53c3\u6578\uff0c\u6b63\u5e38\u60c5\u6cc1\u6703\u56de\u50b3 0 \u4ee3\u8868\u6b63\u5e38\u904b\u4f5c\u3002","title":"\u51fd\u5f0f"},{"location":"syntax/functionandrecursive/#scope-lifttime","text":"\u5728 C++ \u4e2d\uff0c\u4e00\u500b\u8b8a\u6578\u53ef\u88ab\u4f7f\u7528\u7684\u5340\u57df\uff0c\u7a31\u70ba\u7bc4\u570d (Scope)\uff0c\u6bcf\u7a2e\u8b8a\u6578\u90fd\u6709\u81ea\u5df1\u7684\u751f\u547d\u9031\u671f (Lifttime)\uff0c\u7bc4\u570d\u53ef\u5206\u70ba\u5f88\u591a\u7a2e\uff0c\u9019\u88e1\u6211\u5011\u53ea\u8ac7\u4e09\u7a2e\uff0c\u5305\u542b\u5168\u57df\u8b8a\u6578 (Global variable)\u3001\u5340\u57df\u8b8a\u6578 (Local variable) \u8207\u5340\u584a\u8b8a\u6578 (Block variable)\u3002 \u5168\u57df\u8b8a\u6578\uff1a\u5168\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u51fd\u5f0f\u5916\u90e8\u7684\u8b8a\u6578\uff0c\u6574\u500b\u7a0b\u5f0f\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u5168\u57df\u8b8a\u6578\u901a\u5e38\u70ba\u5e38\u6578\uff0c\u6216\u662f\u591a\u500b\u51fd\u5f0f\u5171\u7528\u7684\u8b8a\u6578\u3002\u5168\u57df\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u7a0b\u5f0f\u958b\u59cb\uff0c\u7d42\u65bc\u7a0b\u5f0f\u7d50\u675f\u3002 \u5340\u57df\u8b8a\u6578\uff1a\u5340\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u51fd\u5f0f\u5167\u90e8\u7684\u8b8a\u6578\uff0c\u53ea\u9650\u8a72\u51fd\u5f0f\u4f7f\u7528\uff0c\u5340\u57df\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u51fd\u5f0f\u958b\u59cb\uff0c\u7d42\u65bc\u51fd\u5f0f\u7d50\u675f\u3002 \u5340\u584a\u8b8a\u6578\uff1a\u5340\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u5340\u584a\u5167\u90e8\u7684\u8b8a\u6578\uff0c\u53ea\u9650\u8a72\u5340\u584a\u4f7f\u7528\uff0c\u5340\u584a\u5305\u542b if \u3001 while \u3001 for \u5340\u584a\uff0c\u5340\u584a\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u5340\u584a\u958b\u59cb\uff0c\u7d42\u65bc\u5340\u584a\u7d50\u675f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; const int N = 100 ; // \u5168\u57df\u8b8a\u6578 int var1 = 1 ; // \u5168\u57df\u8b8a\u6578 void print_var1 () { cout << var1 << '\\n' ; } int main () { int var2 = N ; // \u5340\u57df\u8b8a\u6578 for ( int i = 0 ; i < var2 ; ++ i ) // \u5340\u584a\u8b8a\u6578 { ++ var1 ; print_var1 (); } } \u6ce8\u610f \u5c07\u6240\u6709\u8b8a\u6578\u90fd\u8a2d\u70ba\u5168\u57df\u8b8a\u6578\u56fa\u7136\u65b9\u4fbf\uff0c\u4f46\u6703\u7522\u751f\u540d\u7a31\u7a7a\u9593\u91cd\u758a\u7684\u554f\u984c\uff08\u4e0b\u9762\u5169\u500b\u7bc4\u4f8b\u7a0b\u5f0f\uff0c\u56e0\u70ba\u8b8a\u6578\u5b9a\u7fa9\u4f4d\u7f6e\u4e0d\u540c\uff0c\u9020\u6210\u4e0d\u540c\u7d50\u679c\uff09\uff0c\u9020\u6210\u7dad\u8b77\u4e0a\u7684\u56f0\u96e3\uff0c\u61c9\u5c0f\u5fc3\u4f7f\u7528\uff0c\u80fd\u64fa\u653e\u5230\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\uff0c\u4e0d\u61c9\u8a72\u8a2d\u70ba\u5168\u57df\u8b8a\u6578\uff0c\u80fd\u64fa\u653e\u5230\u5340\u584a\u5167\u7684\u8b8a\u6578\uff0c\u4e0d\u61c9\u8a72\u8a2d\u70ba\u5340\u57df\u8b8a\u6578\u3002 \u7bc4\u4f8b 1(\u540d\u7a31\u7a7a\u9593\u91cd\u758a) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> using namespace std ; int i ; void print_var () { for ( i = 0 ; i < 3 ; ++ i ) { cout << i << '\\n' ; } } int main () { for ( i = 0 ; i < 3 ; ++ i ) { print_var (); } } /* 0 1 2 */ \u7bc4\u4f8b 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> using namespace std ; void print_var () { for ( int i = 0 ; i < 3 ; ++ i ) { cout << i << '\\n' ; } } int main () { for ( int i = 0 ; i < 3 ; ++ i ) { print_var (); } } /* 0 1 2 0 1 2 0 1 2 */","title":"\u8b8a\u6578\u7bc4\u570d (Scope) \u548c\u751f\u547d\u9031\u671f (Lifttime)"},{"location":"syntax/functionandrecursive/#_3","text":"\u7576\u7bc4\u570d\u4e0d\u540c\u7684\u8b8a\u6578\u540c\u540d\u6642\uff0c\u7bc4\u570d\u5c0f\u7684\u6703\u8986\u84cb\u7bc4\u570d\u5927\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; int main () { int num = 5 ; for ( int i = 0 ; i < 1 ; ++ i ) { int num = 10 ; cout << num << '\\n' ; } } /* 10 */","title":"\u8986\u84cb"},{"location":"syntax/functionandrecursive/#static","text":"\u5982\u679c\u4e00\u500b\u51fd\u5f0f\u5167\u90e8\u7684\u8b8a\u6578\u524d\u9762\u52a0\u4e0a static \u95dc\u9375\u5b57\uff0c\u90a3\u9ebc\u9019\u500b\u8b8a\u6578\u5c31\u6703\u5728\u7a0b\u5f0f\u4e00\u958b\u59cb\u5c31\u6703\u653e\u5728\u8a18\u61b6\u9ad4\u56fa\u5b9a\u7684\u4f4d\u7f6e\u4e0a\uff0c\u53ea\u5230\u7a0b\u5f0f\u7d50\u675f\u624d\u6d88\u5931\uff0c\u800c\u4e0d\u662f\u96a8\u8457\u51fd\u5f0f\u7d50\u675f\u800c\u6d88\u5931\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> using namespace std ; void addSum ( int i ) { static int sum = 0 ; sum += i ; cout << \"The current sum is: \" << sum << '\\n' ; } int main () { for ( int i = 1 ; i <= 5 ; ++ i ) { addSum ( i ); } } /* The current sum is: 1 The current sum is: 3 The current sum is: 6 The current sum is: 10 The current sum is: 15 */","title":"static \u95dc\u9375\u5b57"},{"location":"syntax/functionandrecursive/#_4","text":"\u905e\u8ff4\u662f\u6307\u4e00\u7a2e\u89e3\u6c7a\u554f\u984c\u7684\u8fa6\u6cd5\uff0c\u905e\u8ff4\u6703\u5148\u5c07\u554f\u984c\u62c6\u89e3\u6210\u6578\u500b\u76f8\u4f3c\u7684\u5b50\u554f\u984c\uff0c\u89e3\u6c7a\u5b50\u554f\u984c\u5f8c\uff0c\u518d\u900f\u904e\u5b50\u554f\u984c\u7684\u7d50\u679c\u5c07\u554f\u984c\u89e3\u6c7a\u3002\u5728\u51fd\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u547c\u53eb\u76f8\u540c\u7684\u51fd\u5f0f\u5e36\u6709\u4e0d\u540c\u7684\u53c3\u6578\uff0c\u9019\u500b\u7279\u6027\u53ef\u4ee5\u61c9\u7528\u5728\u905e\u8ff4\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u51fd\u5f0f\u5be6\u4f5c\u905e\u8ff4\u3002\u905e\u8ff4\u6709\u5169\u500b\u8981\u4ef6\uff1a \u7d42\u6b62\u689d\u4ef6 \u7e2e\u5c0f\u554f\u984c\u7684\u65b9\u5f0f \u4ee5\u968e\u4e58\u70ba\u4f8b\uff1a n!=\\left\\{<script type=\"math/tex; mode=display\">\\begin{array}{}1 && if\\ i\\leq 1\\ (\u7d42\u6b62\u689d\u4ef6)\\\\ n\\times (n-1)! && else\\ (\u7e2e\u5c0f\u554f\u984c\u7684\u65b9\u5f0f)\\end{array} \\right. 1 2 3 4 5 6 7 8 9 10 11 int factorial ( int i ) { if ( i <= 1 ) { return 1 ; } int ans ; ans = factorial ( i - 1 ); ans *= i ; return ans ; } \u9664\u4e86\u968e\u4e58\u4e4b\u5916\uff0c\u9084\u6709\u8a31\u591a\u905e\u8ff4\u7684\u57fa\u790e\u984c \u8cbb\u5f0f\u6578\u5217 \u6cb3\u5167\u5854 \u6700\u5927\u516c\u56e0\u6578 \u5982\u4f55\u64b0\u5beb\u51fd\u5f0f (Function) - Michael Chen \u7684\u6280\u8853\u6587\u4ef6 \u21a9 \u51fd\u5f0f\u7c21\u4ecb - openhome.cc \u21a9 \u905e\u8ff4 - openhome.cc \u21a9 \u8b8a\u6578\u7bc4\u570d - openhome.cc \u21a9","title":"\u905e\u8ff4"},{"location":"syntax/inputoutput/","text":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa \u6a19\u6e96\u8f38\u5165\u8f38\u51fa\u3001\u6587\u4ef6\u8f38\u5165\u8f38\u51fa \u6a19\u6e96\u8f38\u5165\uff1a\u7531\u9375\u76e4\u8f38\u5165\u3002 \u6a19\u6e96\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u87a2\u5e55\u3002 \u6587\u4ef6\u8f38\u5165\uff1a\u7531\u6587\u4ef6\u8f38\u5165\u3002 \u6587\u4ef6\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u6587\u4ef6\u3002 \u6a19\u6e96/\u6587\u4ef6\u8f38\u51fa\u8f38\u5165\u53ef\u4ee5\u6df7\u7528\u3002 C \u6a19\u6e96\u8f38\u5165\u8f38\u51fa scanf \u548c printf \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 stdio.h \u3002 scanf \u548c printf \u6703\u7d66\u5b9a\u4e00\u500b\u7531\u683c\u5f0f\u78bc\u7684\u5b57\u4e32\uff0c\u4e26\u6839\u64da\u683c\u5f0f\u78bc\uff0c\u5728\u5f8c\u9762\u63a5\u4e0a\u76f8\u5c0d\u61c9\u500b\u6578\u7684\u53c3\u6578\u3002 scanf scanf \u7684\u683c\u5f0f\u78bc\u683c\u5f0f\u70ba\uff1a %[*][width][length]specifier * \u53ef\u4ee5\u6307\u5b9a\u8b80\u5165\u7684\u8cc7\u6599\u88ab\u5ffd\u7565\u3002 width \u8a2d\u5b9a\u6700\u5927\u53ef\u8f38\u5165\u5b57\u5143\u7684\u500b\u6578\uff0c\u8acb\u53c3\u8003 C \u5f0f\u5b57\u4e32\u7ae0\u7bc0 \u3002 length \u8a2d\u5b9a\u8f38\u5165\u578b\u614b\u5927\u5c0f\uff0c\u548c\u683c\u5f0f\u78bc\u642d\u914d\u3002 specifier \u70ba\u683c\u5f0f\u78bc\uff0c\u662f\u7528\u4f86\u6307\u5b9a\u8f38\u5165\u7684\u578b\u614b\u3002 \u5e38\u898b\u683c\u5f0f\u78bc \u8aaa\u660e d signed decimal u unsigned decimal f float c character \u683c\u5f0f\u78bc length d i u o x f e g a c s[][^] p n (none) int* unsigned int* float* char* void** int* hh signed char* unsigned char* signed char* h short int* unsigned short int* short int* l long int* unsigned long int* double* wchar_t* long int* ll long long int* unsigned long long int* long long int* j intmax_t* uintmax_t* intmax_t* z size_t* size_t* size_t* t ptrdiff_t* ptrdiff_t* ptrdiff_t* L long double* 1 2 3 scanf ( \"%d\" , & i ); // \u8b80\u5165\u4e00\u500b int scanf ( \"%*d %d\" , & i ); // \u8b80\u5165\u5169\u500b int\uff0c\u7b2c\u4e00\u500b\u6574\u6578\u6703\u88ab\u5ffd\u7565 scanf ( \"%lld\" , & i ); // \u8b80\u5165\u4e00\u500b long long int scanf \u7684\u53c3\u6578\u524d\u9762\u9700\u8981\u52a0\u4e00\u500b & \uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f scanf \u7684\u53c3\u6578\u662f\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u8981\u66f4\u8a73\u7d30\u7406\u89e3\u8981\u5148\u5b78\u5b8c\u6307\u6a19\u3002\uff08\u7de8\u8005\u8a8d\u70ba\u9019\u662f\u7576\u521d\u8a2d\u8a08\u6c92\u60f3\u5230\u7684\u4e00\u500b bug)\u3002 printf printf \u7684\u683c\u5f0f\u78bc\u683c\u5f0f\u70ba\uff1a %[flags][width][.precision][length]specifier flags \u9019\u88e1\u4e0d\u8a73\u7d30\u63d0\uff0c\u53ef\u53c3\u8003 cplusplus \u3002 width \u5728 printf \u7684\u7528\u9014\u70ba\u5c0d\u53f3\u9760\u9f4a\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\uff0c\u5c0d\u6d6e\u9ede\u6578\u4e5f\u7121\u6548\u3002\u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u5bec\u5ea6\uff0c\u53ef\u7528 * \u4ee3\u66ff\u3002 precision \u5728 printf \u7684\u7528\u9014\u70ba\u6307\u5b9a\u8f38\u51fa\u9577\u5ea6\u3002\u6574\u6578\u90e8\u5206\uff0c\u5982\u679c\u662f\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u88dc 0 \uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u5247\u7121\u6548\u3002\u6d6e\u9ede\u6578\u90e8\u5206\uff0c\u6240\u8b02\u7684\u8f38\u51fa\u9577\u5ea6\u6307\u7684\u662f\u5c0f\u6578\u9ede\u5f8c\u7684\u4f4d\u6578\u3002\u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u9577\u5ea6\uff0c\u4ea6\u53ef\u7528 * \u4ee3\u66ff\u3002 length \u548c specifier \u540c scanf \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iomanip> #include <iostream> using namespace std ; int main () { int i = 100 ; double d = 3.14 ; printf ( \"%4d \\n \" , i ); printf ( \"%.4d \\n \" , i ); printf ( \"%.4f \\n \" , d ); printf ( \" \\n use * \\n \" ); printf ( \"%*d \\n \" , 4 , i ); printf ( \"%.*d \\n \" , 4 , i ); printf ( \"%.*f \\n \" , 4 , d ); } /* 100 0100 3.1400 use * 100 0100 3.1400 */ C++ \u8f38\u5165\u8f38\u51fa\uff0ccin \u548c cout cin \u548c cout \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 iostream \u3002 cin \u548c cout \u4e26\u4e0d\u9700\u8981\u5148\u7d66\u51fa\u683c\u5f0f\uff0c\u76f4\u63a5\u8f38\u51fa/\u8f38\u5165\u8b8a\u6578\u540d\u7a31\u5373\u53ef\u3002 endl \u7684\u4f5c\u7528\u662f\u8f38\u51fa\u63db\u884c\uff0c\u642d\u914d cout \u4f7f\u7528\uff0c \\n \u53ef\u4ee5\u53d6\u4ee3\u3002 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int main () { int i ; cin >> i ; cout << i << endl ; } iomanip C++ \u7684 cout \u4e5f\u6709\u8a2d\u5b9a\u5bec\u5ea6\u548c\u9577\u5ea6\u7684\u529f\u80fd\uff0c\u9700\u4f7f\u7528\u5230\u6a19\u982d\u6a94 iomanip \u3002 \u5bec\u5ea6\uff1a setw \uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff0c\u6216\u4f7f\u7528 setfill \u6539\u7528\u5176\u4ed6\u5b57\u5143\u88dc\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\u3002 \u9577\u5ea6\uff1a setprecision \uff0c\u53ea\u5c0d\u6d6e\u9ede\u6578\u6709\u6548\u3002cout \u6709\u5169\u7a2e\u8868\u793a\u65b9\u5f0f\uff0c scientific \u548c fixed \uff0c scientific \u53ea\u6703\u8f38\u51fa\u6709\u6548\u4f4d\u6578\uff0c fixed \u6703\u5c07\u6240\u6709\u4f4d\u6578\u5370\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iomanip> #include <iostream> using namespace std ; int main () { int a = 100 ; double d = 1.414 ; int x = 4 ; // \u53ef\u66f4\u6539\u4e26\u89c0\u5bdf\u7d50\u679c // \u6574\u6578\u7bc4\u4f8b cout << setw ( x ) << a << '\\n' ; cout << setfill ( 'x' ) << setw ( x ) << a << '\\n' ; cout << setprecision ( x ) << a << '\\n' ; cout << fixed << setprecision ( x ) << a << '\\n' ; cout << scientific << setprecision ( x ) << a << '\\n' ; cout << '\\n' ; // \u6d6e\u9ede\u6578\u7bc4\u4f8b cout << setw ( x ) << d << '\\n' ; cout << setfill ( 'x' ) << setw ( d ) << a << '\\n' ; cout << setprecision ( x ) << d << '\\n' ; cout << fixed << setprecision ( x ) << d << '\\n' ; cout << scientific << setprecision ( x ) << d << '\\n' ; } /* 100 x100 100 100 100 1.4140e+00 100 1.4140e+00 1.4140 1.4140e+00 */ \u8f38\u5165\u8f38\u51fa\u512a\u5316 \u6709\u6642\u5019\u4f7f\u7528 cin/cout \u6703\u9020\u6210\u8d85\u6642\u7684\u7d50\u679c\uff0c\u63db\u6210 scanf/printf \u5c31\u6703\u6b63\u78ba\u3002\u9020\u6210 cin/cout \u904e\u6162\u7684\u539f\u56e0\u7c21\u55ae\u4f86\u8aaa\u53ef\u5217\u51fa\u4ee5\u4e0b\u5e7e\u9ede\uff1a \u70ba\u4e86\u548c stdin/stdout \u540c\u6b65\u3002 \u4f7f\u7528 endl \u6703\u5f37\u5236\u6e05\u7a7a\u7de9\u885d\u5340\u3002 cin \u7d81\u4f4f\u4e86 cout \uff0c\u5728\u8f38\u5165\u7684\u6642\u5019\u8f38\u51fa\u4e5f\u6703\u88ab\u5f37\u5236\u6e05\u7a7a\u7de9\u885d\u5340\u3002 \u89e3\u6c7a\u8fa6\u6cd5\u5982\u4e0b\uff1a \u7528 \\n \u53d6\u4ee3 endl \u3002 \u5728\u7a0b\u5f0f\u958b\u982d\u52a0\u5165\u9019\u4e09\u884c\uff1a 1 2 3 cin . tie ( nullptr ); cout . tie ( nullptr ); ios_base :: sync_with_stdio ( false ); \u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u8003\uff1a C++ \u7684\u8f38\u51fa\u5165 cin/cout \u548c scanf/printf \u8ab0\u6bd4\u8f03\u5feb\uff1f","title":"\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputoutput/#_1","text":"","title":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputoutput/#_2","text":"\u6a19\u6e96\u8f38\u5165\uff1a\u7531\u9375\u76e4\u8f38\u5165\u3002 \u6a19\u6e96\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u87a2\u5e55\u3002 \u6587\u4ef6\u8f38\u5165\uff1a\u7531\u6587\u4ef6\u8f38\u5165\u3002 \u6587\u4ef6\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u6587\u4ef6\u3002 \u6a19\u6e96/\u6587\u4ef6\u8f38\u51fa\u8f38\u5165\u53ef\u4ee5\u6df7\u7528\u3002","title":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa\u3001\u6587\u4ef6\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputoutput/#c","text":"scanf \u548c printf \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 stdio.h \u3002 scanf \u548c printf \u6703\u7d66\u5b9a\u4e00\u500b\u7531\u683c\u5f0f\u78bc\u7684\u5b57\u4e32\uff0c\u4e26\u6839\u64da\u683c\u5f0f\u78bc\uff0c\u5728\u5f8c\u9762\u63a5\u4e0a\u76f8\u5c0d\u61c9\u500b\u6578\u7684\u53c3\u6578\u3002","title":"C \u6a19\u6e96\u8f38\u5165\u8f38\u51fa"},{"location":"syntax/inputoutput/#scanf","text":"scanf \u7684\u683c\u5f0f\u78bc\u683c\u5f0f\u70ba\uff1a %[*][width][length]specifier * \u53ef\u4ee5\u6307\u5b9a\u8b80\u5165\u7684\u8cc7\u6599\u88ab\u5ffd\u7565\u3002 width \u8a2d\u5b9a\u6700\u5927\u53ef\u8f38\u5165\u5b57\u5143\u7684\u500b\u6578\uff0c\u8acb\u53c3\u8003 C \u5f0f\u5b57\u4e32\u7ae0\u7bc0 \u3002 length \u8a2d\u5b9a\u8f38\u5165\u578b\u614b\u5927\u5c0f\uff0c\u548c\u683c\u5f0f\u78bc\u642d\u914d\u3002 specifier \u70ba\u683c\u5f0f\u78bc\uff0c\u662f\u7528\u4f86\u6307\u5b9a\u8f38\u5165\u7684\u578b\u614b\u3002 \u5e38\u898b\u683c\u5f0f\u78bc \u8aaa\u660e d signed decimal u unsigned decimal f float c character \u683c\u5f0f\u78bc length d i u o x f e g a c s[][^] p n (none) int* unsigned int* float* char* void** int* hh signed char* unsigned char* signed char* h short int* unsigned short int* short int* l long int* unsigned long int* double* wchar_t* long int* ll long long int* unsigned long long int* long long int* j intmax_t* uintmax_t* intmax_t* z size_t* size_t* size_t* t ptrdiff_t* ptrdiff_t* ptrdiff_t* L long double* 1 2 3 scanf ( \"%d\" , & i ); // \u8b80\u5165\u4e00\u500b int scanf ( \"%*d %d\" , & i ); // \u8b80\u5165\u5169\u500b int\uff0c\u7b2c\u4e00\u500b\u6574\u6578\u6703\u88ab\u5ffd\u7565 scanf ( \"%lld\" , & i ); // \u8b80\u5165\u4e00\u500b long long int scanf \u7684\u53c3\u6578\u524d\u9762\u9700\u8981\u52a0\u4e00\u500b & \uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f scanf \u7684\u53c3\u6578\u662f\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u8981\u66f4\u8a73\u7d30\u7406\u89e3\u8981\u5148\u5b78\u5b8c\u6307\u6a19\u3002\uff08\u7de8\u8005\u8a8d\u70ba\u9019\u662f\u7576\u521d\u8a2d\u8a08\u6c92\u60f3\u5230\u7684\u4e00\u500b bug)\u3002","title":"scanf"},{"location":"syntax/inputoutput/#printf","text":"printf \u7684\u683c\u5f0f\u78bc\u683c\u5f0f\u70ba\uff1a %[flags][width][.precision][length]specifier flags \u9019\u88e1\u4e0d\u8a73\u7d30\u63d0\uff0c\u53ef\u53c3\u8003 cplusplus \u3002 width \u5728 printf \u7684\u7528\u9014\u70ba\u5c0d\u53f3\u9760\u9f4a\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\uff0c\u5c0d\u6d6e\u9ede\u6578\u4e5f\u7121\u6548\u3002\u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u5bec\u5ea6\uff0c\u53ef\u7528 * \u4ee3\u66ff\u3002 precision \u5728 printf \u7684\u7528\u9014\u70ba\u6307\u5b9a\u8f38\u51fa\u9577\u5ea6\u3002\u6574\u6578\u90e8\u5206\uff0c\u5982\u679c\u662f\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u88dc 0 \uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u5247\u7121\u6548\u3002\u6d6e\u9ede\u6578\u90e8\u5206\uff0c\u6240\u8b02\u7684\u8f38\u51fa\u9577\u5ea6\u6307\u7684\u662f\u5c0f\u6578\u9ede\u5f8c\u7684\u4f4d\u6578\u3002\u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u9577\u5ea6\uff0c\u4ea6\u53ef\u7528 * \u4ee3\u66ff\u3002 length \u548c specifier \u540c scanf \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iomanip> #include <iostream> using namespace std ; int main () { int i = 100 ; double d = 3.14 ; printf ( \"%4d \\n \" , i ); printf ( \"%.4d \\n \" , i ); printf ( \"%.4f \\n \" , d ); printf ( \" \\n use * \\n \" ); printf ( \"%*d \\n \" , 4 , i ); printf ( \"%.*d \\n \" , 4 , i ); printf ( \"%.*f \\n \" , 4 , d ); } /* 100 0100 3.1400 use * 100 0100 3.1400 */","title":"printf"},{"location":"syntax/inputoutput/#c-cin-cout","text":"cin \u548c cout \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 iostream \u3002 cin \u548c cout \u4e26\u4e0d\u9700\u8981\u5148\u7d66\u51fa\u683c\u5f0f\uff0c\u76f4\u63a5\u8f38\u51fa/\u8f38\u5165\u8b8a\u6578\u540d\u7a31\u5373\u53ef\u3002 endl \u7684\u4f5c\u7528\u662f\u8f38\u51fa\u63db\u884c\uff0c\u642d\u914d cout \u4f7f\u7528\uff0c \\n \u53ef\u4ee5\u53d6\u4ee3\u3002 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int main () { int i ; cin >> i ; cout << i << endl ; }","title":"C++ \u8f38\u5165\u8f38\u51fa\uff0ccin \u548c cout"},{"location":"syntax/inputoutput/#iomanip","text":"C++ \u7684 cout \u4e5f\u6709\u8a2d\u5b9a\u5bec\u5ea6\u548c\u9577\u5ea6\u7684\u529f\u80fd\uff0c\u9700\u4f7f\u7528\u5230\u6a19\u982d\u6a94 iomanip \u3002 \u5bec\u5ea6\uff1a setw \uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff0c\u6216\u4f7f\u7528 setfill \u6539\u7528\u5176\u4ed6\u5b57\u5143\u88dc\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\u3002 \u9577\u5ea6\uff1a setprecision \uff0c\u53ea\u5c0d\u6d6e\u9ede\u6578\u6709\u6548\u3002cout \u6709\u5169\u7a2e\u8868\u793a\u65b9\u5f0f\uff0c scientific \u548c fixed \uff0c scientific \u53ea\u6703\u8f38\u51fa\u6709\u6548\u4f4d\u6578\uff0c fixed \u6703\u5c07\u6240\u6709\u4f4d\u6578\u5370\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iomanip> #include <iostream> using namespace std ; int main () { int a = 100 ; double d = 1.414 ; int x = 4 ; // \u53ef\u66f4\u6539\u4e26\u89c0\u5bdf\u7d50\u679c // \u6574\u6578\u7bc4\u4f8b cout << setw ( x ) << a << '\\n' ; cout << setfill ( 'x' ) << setw ( x ) << a << '\\n' ; cout << setprecision ( x ) << a << '\\n' ; cout << fixed << setprecision ( x ) << a << '\\n' ; cout << scientific << setprecision ( x ) << a << '\\n' ; cout << '\\n' ; // \u6d6e\u9ede\u6578\u7bc4\u4f8b cout << setw ( x ) << d << '\\n' ; cout << setfill ( 'x' ) << setw ( d ) << a << '\\n' ; cout << setprecision ( x ) << d << '\\n' ; cout << fixed << setprecision ( x ) << d << '\\n' ; cout << scientific << setprecision ( x ) << d << '\\n' ; } /* 100 x100 100 100 100 1.4140e+00 100 1.4140e+00 1.4140 1.4140e+00 */","title":"iomanip"},{"location":"syntax/inputoutput/#_3","text":"\u6709\u6642\u5019\u4f7f\u7528 cin/cout \u6703\u9020\u6210\u8d85\u6642\u7684\u7d50\u679c\uff0c\u63db\u6210 scanf/printf \u5c31\u6703\u6b63\u78ba\u3002\u9020\u6210 cin/cout \u904e\u6162\u7684\u539f\u56e0\u7c21\u55ae\u4f86\u8aaa\u53ef\u5217\u51fa\u4ee5\u4e0b\u5e7e\u9ede\uff1a \u70ba\u4e86\u548c stdin/stdout \u540c\u6b65\u3002 \u4f7f\u7528 endl \u6703\u5f37\u5236\u6e05\u7a7a\u7de9\u885d\u5340\u3002 cin \u7d81\u4f4f\u4e86 cout \uff0c\u5728\u8f38\u5165\u7684\u6642\u5019\u8f38\u51fa\u4e5f\u6703\u88ab\u5f37\u5236\u6e05\u7a7a\u7de9\u885d\u5340\u3002 \u89e3\u6c7a\u8fa6\u6cd5\u5982\u4e0b\uff1a \u7528 \\n \u53d6\u4ee3 endl \u3002 \u5728\u7a0b\u5f0f\u958b\u982d\u52a0\u5165\u9019\u4e09\u884c\uff1a 1 2 3 cin . tie ( nullptr ); cout . tie ( nullptr ); ios_base :: sync_with_stdio ( false ); \u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u8003\uff1a C++ \u7684\u8f38\u51fa\u5165 cin/cout \u548c scanf/printf \u8ab0\u6bd4\u8f03\u5feb\uff1f","title":"\u8f38\u5165\u8f38\u51fa\u512a\u5316"},{"location":"syntax/operator/","text":"\u904b\u7b97\u5b50 \u4e0b\u6587\u4e2d\u7684\u6240\u6709\u8a9e\u6cd5\uff0c a , b , c , condition1 , condition2 \u90fd\u662f\u8b8a\u6578\u540d\u7a31\u3002 \u7b97\u8853\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u6b63\u865f\uff08\u4e00\u5143\uff09 +a \u8ca0\u865f\uff08\u4e00\u5143\uff09 -a \u52a0\u6cd5\uff08\u4e8c\u5143\uff09 a+b \u6e1b\u6cd5\uff08\u4e8c\u5143\uff09 a-b \u4e58\u6cd5\uff08\u4e8c\u5143\uff09 a*b \u9664\u6cd5\uff08\u4e8c\u5143\uff09 a/b \u6a21\u6578\uff08\u4e8c\u5143\uff09 a%b \u53d6\u9918\u6578 \u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u524d\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u524d\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b \u4f4d\u5143\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u4f4d\u5143 AND\uff08\u4e00\u5143\uff09 a&b \u4f4d\u5143 XOR\uff08\u4e00\u5143\uff09 a^b \u4f4d\u5143 OR\uff08\u4e00\u5143\uff09 `a b` \u4f4d\u5143 \u4e00\u7684\u88dc\u6578\uff08\u4e00\u5143\uff09 ~a \u4f4d\u5143\u5de6\u79fb\uff08\u4e8c\u5143\uff09 a<<b \u4f4d\u5143\u53f3\u79fb\uff08\u4e8c\u5143\uff09 a>>b \u8ce6\u503c\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a=b \u7b97\u6578/\u4f4d\u5143\u904b\u7b97\u5b50\u7686\u53ef\u4ee5\u548c\u8ce6\u503c\u904b\u7b97\u5b50\u5408\u4f75\uff0c\u5982\u4e0b\u8868\uff1a \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u52a0\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 `a =b` \u540c`a=a b` \u4f4d\u5143 XOR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a>>=b \u540c a=a>>b \u6bd4\u8f03\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u5c0f\u65bc\uff08\u4e8c\u5143\uff09 a<b \u5c0f\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a<=b \u5927\u65bc\uff08\u4e8c\u5143\uff09 a>b \u5927\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a>=b \u7b49\u65bc\uff08\u4e8c\u5143\uff09 a==b \u4e0d\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a!=b \u908f\u8f2f\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u908f\u8f2f AND\uff08\u4e8c\u5143\uff09 condition1 && condition2 \u908f\u8f2f OR\uff08\u4e8c\u5143\uff09 `condition1 condition2` \u908f\u8f2f \u975e\uff08\u4e00\u5143\uff09 !condition1 \u9017\u865f\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u9017\u865f\u904b\u7b97\u5b50\uff08\u4e8c\u5143\uff09 a,b \u4e1f\u68c4\u5de6\u503c\uff0c\u56de\u50b3\u53f3\u908a\u7684\u503c \u689d\u4ef6\u904b\u7b97\u5b50 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u689d\u4ef6\u904b\u7b97\u5b50\uff08\u4e09\u5143\uff09 a?b:c \u76f8\u7576\u65bc if(a){b}else{c} \u512a\u5148\u9806\u5e8f \u8aaa\u660e \u512a\u5148\u7d1a\u8d8a\u9ad8\uff08\u6578\u5b57\u8d8a\u5c0f\uff09\uff0c\u6703\u8d8a\u5148\u57f7\u884c\u3002 \u5982\u679c\u5169\u500b\u904b\u7b97\u5b50\u512a\u5148\u7d1a\u76f8\u540c\uff0c\u4f9d\u7167\u7d50\u5408\u6027\u7684\u65b9\u5411\u57f7\u884c\u3002 \u591a\u8f09\u6027\u53ea\u6a19\u8a3b\u5426\u7684\u904b\u7b97\u5b50\uff0c\u672a\u6a19\u8a18\u7684\u904b\u7b97\u5b50\u90fd\u662f\u53ef\u591a\u8f09\u7684\u3002 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u591a\u8f09\u6027 \u7d50\u5408\u6027 \u512a\u5148\u7d1a 1 :: \u4f5c\u7528\u57df\u89e3\u6790\uff08C++ \u5c08\u6709\uff09 \u5426 \u512a\u5148\u7d1a 2 \u5de6\u5230\u53f3 \u5f8c\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u5f8c\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b () \u51fd\u793a\u547c\u53eb [] \u9663\u5217\u5b58\u53d6 a.b \u4ee5\u7269\u4ef6\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 \u5426 a->b \u4ee5\u6307\u6a19\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 dynamic_cast \u57f7\u884c\u6642\u6aa2\u67e5\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 static_cast \u672a\u7d93\u6aa2\u67e5\u7684\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 reinterpret_cast \u91cd\u5b9a\u7fa9\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 const_cast \u66f4\u6539\u975e\u5e38\u6578\u5c6c\u6027\uff08C++ \u5c08\u6709\uff09 \u5426 typeid \u53d6\u5f97\u985e\u578b\u8cc7\u8a0a\uff08C++ \u5c08\u6709\uff09 \u5426 \u512a\u5148\u7d1a 3 \u53f3\u81f3\u5de6 \u524d\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u524d\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u6b63\u865f\uff08\u4e00\u5143\uff09 +a \u8ca0\u865f\uff08\u4e00\u5143\uff09 -a \u908f\u8f2f \u975e\uff08\u4e00\u5143\uff09 !condition1 \u4f4d\u5143 \u4e00\u7684\u88dc\u6578\uff08\u4e00\u5143\uff09 ~a \u9593\u63a5 int val=*ptr \u900f\u904e\u6307\u6a19\u9593\u63a5\u64cd\u4f5c\u8b8a\u6578 \u50b3\u5740 int *ptr=&a \u53d6\u5f97\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e sizeof(a) \u53d6\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u5927\u5c0f \u5426 new , new[] \u52d5\u614b\u8a18\u61b6\u9ad4\u5206\u914d\uff08C++ \u5c08\u6709\uff09 delete , delete[] \u52d5\u614b\u8a18\u61b6\u9ad4\u91cb\u653e\uff08C++ \u5c08\u6709\uff09 \u512a\u5148\u7d1a 4 \u5de6\u5230\u53f3 .* \u6210\u54e1\u7269\u4ef6\u9078\u64c7\uff08C++ \u5c08\u6709\uff09 ->* \u6210\u54e1\u6307\u6a19\u9078\u64c7\uff08C++ \u5c08\u6709\uff09 \u512a\u5148\u7d1a 5 \u5de6\u5230\u53f3 \u4e58\u6cd5\uff08\u4e8c\u5143\uff09 a*b \u9664\u6cd5\uff08\u4e8c\u5143\uff09 a/b \u6a21\u6578\uff08\u4e8c\u5143\uff09 a%b \u53d6\u9918\u6578 \u512a\u5148\u7d1a 6 \u5de6\u5230\u53f3 \u52a0\u6cd5\uff08\u4e8c\u5143\uff09 a+b \u6e1b\u6cd5\uff08\u4e8c\u5143\uff09 a-b \u512a\u5148\u7d1a 7 \u5de6\u5230\u53f3 \u4f4d\u5143\u5de6\u79fb\uff08\u4e8c\u5143\uff09 a<<b \u4f4d\u5143\u53f3\u79fb\uff08\u4e8c\u5143\uff09 a>>b \u512a\u5148\u7d1a 8 \u5de6\u5230\u53f3 \u5c0f\u65bc\uff08\u4e8c\u5143\uff09 a<b \u5c0f\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a<=b \u5927\u65bc\uff08\u4e8c\u5143\uff09 a>b \u5927\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a>=b \u512a\u5148\u7d1a 9 \u5de6\u5230\u53f3 \u7b49\u65bc\uff08\u4e8c\u5143\uff09 a==b \u4e0d\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a!=b \u512a\u5148\u7d1a 10 \u5de6\u5230\u53f3 \u4f4d\u5143 AND\uff08\u4e00\u5143\uff09 a&b \u512a\u5148\u7d1a 11 \u5de6\u5230\u53f3 \u4f4d\u5143 XOR\uff08\u4e00\u5143\uff09 a^b \u512a\u5148\u7d1a 12 \u5de6\u5230\u53f3 \u4f4d\u5143 OR\uff08\u4e00\u5143\uff09 `a b` \u512a\u5148\u7d1a 13 \u5de6\u5230\u53f3 \u908f\u8f2f AND\uff08\u4e8c\u5143\uff09 condition1 && condition2 \u512a\u5148\u7d1a 14 \u5de6\u5230\u53f3 \u908f\u8f2f OR\uff08\u4e8c\u5143\uff09 `condition1 condition2` \u512a\u5148\u7d1a 15 \u53f3\u81f3\u5de6 \u689d\u4ef6\u904b\u7b97\u5b50\uff08\u4e09\u5143\uff09 a?b:c \u76f8\u7576\u65bc if(a){b}else{c} \u5426 \u512a\u5148\u7d1a 16 \u53f3\u81f3\u5de6 \u52a0\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 `a =b` \u540c`a=a b` \u4f4d\u5143 XOR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a>>=b \u540c a=a>>b \u512a\u5148\u7d1a 17 \u53f3\u81f3\u5de6 \u4e1f\u64f2\u7570\u5e38 throw \u5426 \u512a\u5148\u7d1a 18 \u5de6\u5230\u53f3 \u9017\u865f\u904b\u7b97\u5b50\uff08\u4e8c\u5143\uff09 a,b \u4e1f\u68c4\u5de6\u503c","title":"\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_1","text":"\u4e0b\u6587\u4e2d\u7684\u6240\u6709\u8a9e\u6cd5\uff0c a , b , c , condition1 , condition2 \u90fd\u662f\u8b8a\u6578\u540d\u7a31\u3002","title":"\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_2","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u6b63\u865f\uff08\u4e00\u5143\uff09 +a \u8ca0\u865f\uff08\u4e00\u5143\uff09 -a \u52a0\u6cd5\uff08\u4e8c\u5143\uff09 a+b \u6e1b\u6cd5\uff08\u4e8c\u5143\uff09 a-b \u4e58\u6cd5\uff08\u4e8c\u5143\uff09 a*b \u9664\u6cd5\uff08\u4e8c\u5143\uff09 a/b \u6a21\u6578\uff08\u4e8c\u5143\uff09 a%b \u53d6\u9918\u6578","title":"\u7b97\u8853\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_3","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u524d\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u524d\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b","title":"\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_4","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u4f4d\u5143 AND\uff08\u4e00\u5143\uff09 a&b \u4f4d\u5143 XOR\uff08\u4e00\u5143\uff09 a^b \u4f4d\u5143 OR\uff08\u4e00\u5143\uff09 `a b` \u4f4d\u5143 \u4e00\u7684\u88dc\u6578\uff08\u4e00\u5143\uff09 ~a \u4f4d\u5143\u5de6\u79fb\uff08\u4e8c\u5143\uff09 a<<b \u4f4d\u5143\u53f3\u79fb\uff08\u4e8c\u5143\uff09 a>>b","title":"\u4f4d\u5143\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_5","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a=b \u7b97\u6578/\u4f4d\u5143\u904b\u7b97\u5b50\u7686\u53ef\u4ee5\u548c\u8ce6\u503c\u904b\u7b97\u5b50\u5408\u4f75\uff0c\u5982\u4e0b\u8868\uff1a \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u52a0\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 `a =b` \u540c`a=a b` \u4f4d\u5143 XOR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a>>=b \u540c a=a>>b","title":"\u8ce6\u503c\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_6","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u5c0f\u65bc\uff08\u4e8c\u5143\uff09 a<b \u5c0f\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a<=b \u5927\u65bc\uff08\u4e8c\u5143\uff09 a>b \u5927\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a>=b \u7b49\u65bc\uff08\u4e8c\u5143\uff09 a==b \u4e0d\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a!=b","title":"\u6bd4\u8f03\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_7","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u908f\u8f2f AND\uff08\u4e8c\u5143\uff09 condition1 && condition2 \u908f\u8f2f OR\uff08\u4e8c\u5143\uff09 `condition1 condition2` \u908f\u8f2f \u975e\uff08\u4e00\u5143\uff09 !condition1","title":"\u908f\u8f2f\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_8","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u9017\u865f\u904b\u7b97\u5b50\uff08\u4e8c\u5143\uff09 a,b \u4e1f\u68c4\u5de6\u503c\uff0c\u56de\u50b3\u53f3\u908a\u7684\u503c","title":"\u9017\u865f\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_9","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u689d\u4ef6\u904b\u7b97\u5b50\uff08\u4e09\u5143\uff09 a?b:c \u76f8\u7576\u65bc if(a){b}else{c}","title":"\u689d\u4ef6\u904b\u7b97\u5b50"},{"location":"syntax/operator/#_10","text":"\u8aaa\u660e \u512a\u5148\u7d1a\u8d8a\u9ad8\uff08\u6578\u5b57\u8d8a\u5c0f\uff09\uff0c\u6703\u8d8a\u5148\u57f7\u884c\u3002 \u5982\u679c\u5169\u500b\u904b\u7b97\u5b50\u512a\u5148\u7d1a\u76f8\u540c\uff0c\u4f9d\u7167\u7d50\u5408\u6027\u7684\u65b9\u5411\u57f7\u884c\u3002 \u591a\u8f09\u6027\u53ea\u6a19\u8a3b\u5426\u7684\u904b\u7b97\u5b50\uff0c\u672a\u6a19\u8a18\u7684\u904b\u7b97\u5b50\u90fd\u662f\u53ef\u591a\u8f09\u7684\u3002 \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u591a\u8f09\u6027 \u7d50\u5408\u6027 \u512a\u5148\u7d1a 1 :: \u4f5c\u7528\u57df\u89e3\u6790\uff08C++ \u5c08\u6709\uff09 \u5426 \u512a\u5148\u7d1a 2 \u5de6\u5230\u53f3 \u5f8c\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 a++ \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u5f8c\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 a-- \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b () \u51fd\u793a\u547c\u53eb [] \u9663\u5217\u5b58\u53d6 a.b \u4ee5\u7269\u4ef6\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 \u5426 a->b \u4ee5\u6307\u6a19\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 dynamic_cast \u57f7\u884c\u6642\u6aa2\u67e5\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 static_cast \u672a\u7d93\u6aa2\u67e5\u7684\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 reinterpret_cast \u91cd\u5b9a\u7fa9\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 const_cast \u66f4\u6539\u975e\u5e38\u6578\u5c6c\u6027\uff08C++ \u5c08\u6709\uff09 \u5426 typeid \u53d6\u5f97\u985e\u578b\u8cc7\u8a0a\uff08C++ \u5c08\u6709\uff09 \u5426 \u512a\u5148\u7d1a 3 \u53f3\u81f3\u5de6 \u524d\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 ++a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u524d\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 --a \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u6b63\u865f\uff08\u4e00\u5143\uff09 +a \u8ca0\u865f\uff08\u4e00\u5143\uff09 -a \u908f\u8f2f \u975e\uff08\u4e00\u5143\uff09 !condition1 \u4f4d\u5143 \u4e00\u7684\u88dc\u6578\uff08\u4e00\u5143\uff09 ~a \u9593\u63a5 int val=*ptr \u900f\u904e\u6307\u6a19\u9593\u63a5\u64cd\u4f5c\u8b8a\u6578 \u50b3\u5740 int *ptr=&a \u53d6\u5f97\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e sizeof(a) \u53d6\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u5927\u5c0f \u5426 new , new[] \u52d5\u614b\u8a18\u61b6\u9ad4\u5206\u914d\uff08C++ \u5c08\u6709\uff09 delete , delete[] \u52d5\u614b\u8a18\u61b6\u9ad4\u91cb\u653e\uff08C++ \u5c08\u6709\uff09 \u512a\u5148\u7d1a 4 \u5de6\u5230\u53f3 .* \u6210\u54e1\u7269\u4ef6\u9078\u64c7\uff08C++ \u5c08\u6709\uff09 ->* \u6210\u54e1\u6307\u6a19\u9078\u64c7\uff08C++ \u5c08\u6709\uff09 \u512a\u5148\u7d1a 5 \u5de6\u5230\u53f3 \u4e58\u6cd5\uff08\u4e8c\u5143\uff09 a*b \u9664\u6cd5\uff08\u4e8c\u5143\uff09 a/b \u6a21\u6578\uff08\u4e8c\u5143\uff09 a%b \u53d6\u9918\u6578 \u512a\u5148\u7d1a 6 \u5de6\u5230\u53f3 \u52a0\u6cd5\uff08\u4e8c\u5143\uff09 a+b \u6e1b\u6cd5\uff08\u4e8c\u5143\uff09 a-b \u512a\u5148\u7d1a 7 \u5de6\u5230\u53f3 \u4f4d\u5143\u5de6\u79fb\uff08\u4e8c\u5143\uff09 a<<b \u4f4d\u5143\u53f3\u79fb\uff08\u4e8c\u5143\uff09 a>>b \u512a\u5148\u7d1a 8 \u5de6\u5230\u53f3 \u5c0f\u65bc\uff08\u4e8c\u5143\uff09 a<b \u5c0f\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a<=b \u5927\u65bc\uff08\u4e8c\u5143\uff09 a>b \u5927\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a>=b \u512a\u5148\u7d1a 9 \u5de6\u5230\u53f3 \u7b49\u65bc\uff08\u4e8c\u5143\uff09 a==b \u4e0d\u7b49\u65bc\uff08\u4e8c\u5143\uff09 a!=b \u512a\u5148\u7d1a 10 \u5de6\u5230\u53f3 \u4f4d\u5143 AND\uff08\u4e00\u5143\uff09 a&b \u512a\u5148\u7d1a 11 \u5de6\u5230\u53f3 \u4f4d\u5143 XOR\uff08\u4e00\u5143\uff09 a^b \u512a\u5148\u7d1a 12 \u5de6\u5230\u53f3 \u4f4d\u5143 OR\uff08\u4e00\u5143\uff09 `a b` \u512a\u5148\u7d1a 13 \u5de6\u5230\u53f3 \u908f\u8f2f AND\uff08\u4e8c\u5143\uff09 condition1 && condition2 \u512a\u5148\u7d1a 14 \u5de6\u5230\u53f3 \u908f\u8f2f OR\uff08\u4e8c\u5143\uff09 `condition1 condition2` \u512a\u5148\u7d1a 15 \u53f3\u81f3\u5de6 \u689d\u4ef6\u904b\u7b97\u5b50\uff08\u4e09\u5143\uff09 a?b:c \u76f8\u7576\u65bc if(a){b}else{c} \u5426 \u512a\u5148\u7d1a 16 \u53f3\u81f3\u5de6 \u52a0\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a+=b \u540c a=a+b \u6e1b\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a-=b \u540c a=a-b \u4e58\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a*=b \u540c a=a*b \u9664\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a/=b \u540c a=a/b \u53d6\u6a21 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a%=b \u540c a=a%b \u4f4d\u5143 AND + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a&=b \u540c a=a&b \u4f4d\u5143 OR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 `a =b` \u540c`a=a b` \u4f4d\u5143 XOR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a^=b \u540c a=a^b \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a<<=b \u540c a=a<<b \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 a>>=b \u540c a=a>>b \u512a\u5148\u7d1a 17 \u53f3\u81f3\u5de6 \u4e1f\u64f2\u7570\u5e38 throw \u5426 \u512a\u5148\u7d1a 18 \u5de6\u5230\u53f3 \u9017\u865f\u904b\u7b97\u5b50\uff08\u4e8c\u5143\uff09 a,b \u4e1f\u68c4\u5de6\u503c","title":"\u512a\u5148\u9806\u5e8f"},{"location":"syntax/pointer/","text":"\u6307\u6a19 (Pointer) \u6307\u6a19 (Pointer) \u8207\u76f8\u95dc\u904b\u7b97\u5b50 \u4e00\u500b\u8b8a\u6578\u9664\u4e86\u5c0d\u61c9\u4e00\u7a2e\u8cc7\u6599\u578b\u614b\u3001\u4e00\u500b\u503c\uff0c\u9084\u5c0d\u61c9\u4e86\u4e00\u500b\u4f4d\u5740\uff08\u5132\u5b58\u8a72\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff09\u3002\u8981\u77e5\u9053\u4e00\u500b\u8b8a\u6578\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u7528\u50b3\u5740\u904b\u7b97\u5b50 & \uff0c\u4e26\u9644\u503c\u7d66\u4e00\u500b\u8b8a\u6578\uff0c\u5b58\u653e\u4f4d\u7f6e\u7684\u8b8a\u6578\u7a31\u70ba\u300c\u6307\u6a19\u300d\u3002 \u5728\u8b8a\u6578\u524d\u9762\u52a0\u4e0a * \uff0c\u5c31\u6210\u70ba\u6307\u6a19\uff0c\u6ce8\u610f * \u8981\u653e\u5728\u6bcf\u500b\u8b8a\u6578\u4e4b\u524d\uff0c\u6307\u6a19\u4e0d\u5fc5\u5728\u5ba3\u544a\u6642\u8ce6\u503c\u3002 \u6307\u6a19\u6709\u7dad\u5ea6\u7684\u6982\u5ff5\uff0c\u4e00\u7dad\u6307\u6a19\u5b58\u653e\u4e00\u822c\u8b8a\u6578\u4e4b\u4f4d\u7f6e\uff0c\u4e8c\u7dad\u6307\u6a19\u5b58\u653e\u4e00\u7dad\u6307\u6a19\u4e4b\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u985e\u63a8\u3002 \u5229\u7528\u9593\u63a5\u904b\u7b97\u5b50 * \uff0c\u900f\u904e\u6307\u6a19\u9593\u63a5\u64cd\u4f5c\u8b8a\u6578\u3002 * \u7684\u4e0d\u540c\u529f\u80fd \u4e0b\u9762\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u6709\u5169\u6b21\u51fa\u73fe *ptr \uff0c\u4f46\u610f\u7fa9\u4e0d\u540c\u3002 \u7b2c\u4e00\u6b21\u51fa\u73fe\u662f\u7528\u4f86\u5ba3\u544a ptr \u662f\uff08\u4e00\u7dad\uff09\u6307\u6a19\u3002 \u5f8c\u9762\u51fa\u73fe\u7684\u90fd\u662f\u900f\u904e ptr \u6307\u6a19\u64cd\u4f5c a \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int * a , b ; // \u53ea\u6709 a \u662f\u6307\u6a19\u3002 int val = 5 ; int * ptr = & val ; // \u4e00\u7dad\u6307\u6a19 ptr int ** ptr2 = & ptr ; // \u4e8c\u7dad\u6307\u6a19 ptr2 // \u8a18\u61b6\u9ad4\u70ba\u52d5\u614b\u914d\u7f6e\uff0c\u6bcf\u6b21\u8dd1\u51fa\u7684\u7b54\u6848\u4e0d\u76e1\u76f8\u540c\u3002 // \u8f38\u51fa\u70ba\u4e00\u500b 16 \u9032\u4f4d\u7684\u6578\u5b57\uff0c\u958b\u982d\u70ba `0x` \uff08\u4ee3\u8868 16 \u9032\u4f4d\uff09\u3002 cout << ptr << '\\n' ; cout << ( * ptr ) << ' ' << val << '\\n' ; ++ ( * ptr ); cout << ( * ptr ) << ' ' << val << '\\n' ; \u6307\u6a19\u6709\u4ee5\u4e0b\u512a\u9ede\uff1a \u50b3\u905e\u53c3\u6578\u6642\uff0c\u4e0d\u6703\u8907\u88fd\u53c3\u6578\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002 \u5728\u57f7\u884c\u7a0b\u5f0f\u6642\uff0c\u8a18\u61b6\u9ad4\u662f\u6211\u5011\u6240\u9700\u8003\u91cf\u7684\u9ede\u4e4b\u4e00\uff0c\u4efb\u4f55\u8b8a\u6578\u53ef\u80fd\u6703\u5728\u4efb\u4f55\u6642\u523b\uff0c\u6210\u70ba\u4e0d\u9700\u8981\u7684\u8cc7\u8a0a\uff0c\u6210\u52d5\u614b\u8a18\u61b6\u9ad4\u53ef\u5728\u7a0b\u5f0f\u57f7\u884c\u904e\u7a0b\u6dfb\u52a0\u6216\u522a\u9664\u4efb\u4f55\u8a18\u61b6\u9ad4\uff0c\u6e1b\u5c11\u8a18\u61b6\u9ad4\u8cc7\u6e90\u3002 \u76f8\u8f03\u9663\u5217\uff0c\u6307\u6a19\u53ef\u4ee5\u7c21\u6f54\u5730\u8868\u793a\u5404\u7a2e\u5716\u3001\u6a39\u7b49\u975e\u7dda\u6027\u8cc7\u6599\u7d50\u69cb\uff0c\u964d\u4f4e\u7dad\u8b77\u6210\u672c\u3002 \u53c3\u8003 (Reference) \u53c3\u8003\u4ee3\u8868\u4e00\u500b\u8b8a\u6578\u7684\u5225\u540d\uff0c\u53ef\u76f4\u63a5\u53d6\u5f97\u8b8a\u6578\u7684\u4f4d\u5740\uff0c\u4e26\u9593\u63a5\u900f\u904e\u53c3\u8003\u5225\u540d\u4f86\u64cd\u4f5c\u7269\u4ef6\uff0c\u4f5c\u7528\u985e\u4f3c\u65bc\u6307\u6a19\uff0c\u4f46\u4e0d\u5fc5\u4f7f\u7528\u6307\u6a19\u8a9e\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e0d\u5fc5\u4f7f\u7528 * \u904b\u7b97\u5b50\u4f86\u64cd\u4f5c\u8b8a\u6578\u3002 \u53c3\u8003\u5fc5\u9808\u5728\u5ba3\u544a\u6642\u8a2d\u521d\u59cb\u503c\u3002 1 2 3 4 5 int a = 5 ; int & r = a ; ++ r ; cout << r << '\\n' ; // 5 int & r2 ; // Complier error \u53c3\u8003\u6709\u4ee5\u4e0b\u512a\u9ede\uff1a \u50b3\u905e\u53c3\u6578\u6642\uff0c\u4e0d\u6703\u8907\u88fd\u53c3\u6578\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002 \u53ef\u53d6\u4ee3\u592a\u9577\u7684\u8b8a\u6578\uff08\u5982\uff1a a[x][y][z] )\uff0c\u589e\u52a0\u53ef\u8b80\u6027\u3002 \u51fd\u5f0f\u50b3\u5165\u53c3\u6578 \u51fd\u5f0f\u50b3\u5165\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u662f\u4e00\u822c\u3001\u6307\u6a19\u6216\u662f\u53c3\u8003\u578b\u614b\uff0c\u4ee5\u4e0b\u4ee5 Swap \u4f86\u4ecb\u7d39\uff1a Call by value\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u4e00\u822c\u578b\u614b\uff0c\u6703 \"\u8907\u88fd\" \u4e00\u4efd\u5230\u51fd\u5f0f\uff0c\u539f\u672c\u7684\u8b8a\u6578\u4e0d\u6703\u6709\u4efb\u4f55\u6539\u8b8a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void swap ( int x , int y ) { cout << x << ' ' << y << '\\n' ; // 1 2 int t = x ; x = y ; y = t ; cout << x << ' ' << y << '\\n' ; // 2 1 } int main () { int a = 1 , b = 2 ; cout << a << ' ' << b << '\\n' ; // 1 2 swap ( a , b ); cout << a << ' ' << b << '\\n' ; // 1 2 } Call by address (value of pointer)\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u6307\u6a19\u578b\u614b\uff0c\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\u6539\u8b8a\uff0c\u662f\u5c0d\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff0c\u6240\u4ee5\u539f\u672c\u7684\u6578\u5b57\u4e5f\u6703\u8ddf\u8457\u6539\u8b8a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void swap ( int * x , int * y ) { cout << * x << ' ' << * y << '\\n' ; // 1 2 int t = * x ; * x = * y ; * y = t ; cout << * x << ' ' << * y << '\\n' ; // 2 1 } int main () { int a = 1 , b = 2 ; cout << a << ' ' << b << '\\n' ; // 1 2 swap ( & a , & b ); cout << a << ' ' << b << '\\n' ; // 2 1 } Call by reference\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u53c3\u8003\u578b\u614b\uff0c\u51fd\u6578\u5167\u7684\u8b8a\u6578\u662f\u539f\u672c\u8b8a\u6578\u7684\u5206\u8eab\uff0c\u6240\u4ee5\u51fd\u6578\u5167\u8b8a\u6578\u6539\u8b8a\u6642\uff0c\u539f\u672c\u8b8a\u6578\u4e5f\u6703\u8ddf\u8005\u6539\u8b8a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void swap ( int & x , int & y ) { cout << x << ' ' << y << '\\n' ; // 1 2 int t = x ; x = y ; y = t ; cout << x << ' ' << y << '\\n' ; // 2 1 } int main () { int a = 1 , b = 2 ; cout << a << ' ' << b << '\\n' ; // 1 2 swap ( a , b ); cout << a << ' ' << b << '\\n' ; // 2 1 } \u6307\u6a19\u8207\u4f4d\u5740 in openhome.cc \u21a9","title":"\u6307\u6a19"},{"location":"syntax/pointer/#pointer","text":"","title":"\u6307\u6a19 (Pointer)"},{"location":"syntax/pointer/#pointer_1","text":"\u4e00\u500b\u8b8a\u6578\u9664\u4e86\u5c0d\u61c9\u4e00\u7a2e\u8cc7\u6599\u578b\u614b\u3001\u4e00\u500b\u503c\uff0c\u9084\u5c0d\u61c9\u4e86\u4e00\u500b\u4f4d\u5740\uff08\u5132\u5b58\u8a72\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff09\u3002\u8981\u77e5\u9053\u4e00\u500b\u8b8a\u6578\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u7528\u50b3\u5740\u904b\u7b97\u5b50 & \uff0c\u4e26\u9644\u503c\u7d66\u4e00\u500b\u8b8a\u6578\uff0c\u5b58\u653e\u4f4d\u7f6e\u7684\u8b8a\u6578\u7a31\u70ba\u300c\u6307\u6a19\u300d\u3002 \u5728\u8b8a\u6578\u524d\u9762\u52a0\u4e0a * \uff0c\u5c31\u6210\u70ba\u6307\u6a19\uff0c\u6ce8\u610f * \u8981\u653e\u5728\u6bcf\u500b\u8b8a\u6578\u4e4b\u524d\uff0c\u6307\u6a19\u4e0d\u5fc5\u5728\u5ba3\u544a\u6642\u8ce6\u503c\u3002 \u6307\u6a19\u6709\u7dad\u5ea6\u7684\u6982\u5ff5\uff0c\u4e00\u7dad\u6307\u6a19\u5b58\u653e\u4e00\u822c\u8b8a\u6578\u4e4b\u4f4d\u7f6e\uff0c\u4e8c\u7dad\u6307\u6a19\u5b58\u653e\u4e00\u7dad\u6307\u6a19\u4e4b\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u985e\u63a8\u3002 \u5229\u7528\u9593\u63a5\u904b\u7b97\u5b50 * \uff0c\u900f\u904e\u6307\u6a19\u9593\u63a5\u64cd\u4f5c\u8b8a\u6578\u3002 * \u7684\u4e0d\u540c\u529f\u80fd \u4e0b\u9762\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u6709\u5169\u6b21\u51fa\u73fe *ptr \uff0c\u4f46\u610f\u7fa9\u4e0d\u540c\u3002 \u7b2c\u4e00\u6b21\u51fa\u73fe\u662f\u7528\u4f86\u5ba3\u544a ptr \u662f\uff08\u4e00\u7dad\uff09\u6307\u6a19\u3002 \u5f8c\u9762\u51fa\u73fe\u7684\u90fd\u662f\u900f\u904e ptr \u6307\u6a19\u64cd\u4f5c a \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int * a , b ; // \u53ea\u6709 a \u662f\u6307\u6a19\u3002 int val = 5 ; int * ptr = & val ; // \u4e00\u7dad\u6307\u6a19 ptr int ** ptr2 = & ptr ; // \u4e8c\u7dad\u6307\u6a19 ptr2 // \u8a18\u61b6\u9ad4\u70ba\u52d5\u614b\u914d\u7f6e\uff0c\u6bcf\u6b21\u8dd1\u51fa\u7684\u7b54\u6848\u4e0d\u76e1\u76f8\u540c\u3002 // \u8f38\u51fa\u70ba\u4e00\u500b 16 \u9032\u4f4d\u7684\u6578\u5b57\uff0c\u958b\u982d\u70ba `0x` \uff08\u4ee3\u8868 16 \u9032\u4f4d\uff09\u3002 cout << ptr << '\\n' ; cout << ( * ptr ) << ' ' << val << '\\n' ; ++ ( * ptr ); cout << ( * ptr ) << ' ' << val << '\\n' ; \u6307\u6a19\u6709\u4ee5\u4e0b\u512a\u9ede\uff1a \u50b3\u905e\u53c3\u6578\u6642\uff0c\u4e0d\u6703\u8907\u88fd\u53c3\u6578\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002 \u5728\u57f7\u884c\u7a0b\u5f0f\u6642\uff0c\u8a18\u61b6\u9ad4\u662f\u6211\u5011\u6240\u9700\u8003\u91cf\u7684\u9ede\u4e4b\u4e00\uff0c\u4efb\u4f55\u8b8a\u6578\u53ef\u80fd\u6703\u5728\u4efb\u4f55\u6642\u523b\uff0c\u6210\u70ba\u4e0d\u9700\u8981\u7684\u8cc7\u8a0a\uff0c\u6210\u52d5\u614b\u8a18\u61b6\u9ad4\u53ef\u5728\u7a0b\u5f0f\u57f7\u884c\u904e\u7a0b\u6dfb\u52a0\u6216\u522a\u9664\u4efb\u4f55\u8a18\u61b6\u9ad4\uff0c\u6e1b\u5c11\u8a18\u61b6\u9ad4\u8cc7\u6e90\u3002 \u76f8\u8f03\u9663\u5217\uff0c\u6307\u6a19\u53ef\u4ee5\u7c21\u6f54\u5730\u8868\u793a\u5404\u7a2e\u5716\u3001\u6a39\u7b49\u975e\u7dda\u6027\u8cc7\u6599\u7d50\u69cb\uff0c\u964d\u4f4e\u7dad\u8b77\u6210\u672c\u3002","title":"\u6307\u6a19 (Pointer) \u8207\u76f8\u95dc\u904b\u7b97\u5b50"},{"location":"syntax/pointer/#reference","text":"\u53c3\u8003\u4ee3\u8868\u4e00\u500b\u8b8a\u6578\u7684\u5225\u540d\uff0c\u53ef\u76f4\u63a5\u53d6\u5f97\u8b8a\u6578\u7684\u4f4d\u5740\uff0c\u4e26\u9593\u63a5\u900f\u904e\u53c3\u8003\u5225\u540d\u4f86\u64cd\u4f5c\u7269\u4ef6\uff0c\u4f5c\u7528\u985e\u4f3c\u65bc\u6307\u6a19\uff0c\u4f46\u4e0d\u5fc5\u4f7f\u7528\u6307\u6a19\u8a9e\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e0d\u5fc5\u4f7f\u7528 * \u904b\u7b97\u5b50\u4f86\u64cd\u4f5c\u8b8a\u6578\u3002 \u53c3\u8003\u5fc5\u9808\u5728\u5ba3\u544a\u6642\u8a2d\u521d\u59cb\u503c\u3002 1 2 3 4 5 int a = 5 ; int & r = a ; ++ r ; cout << r << '\\n' ; // 5 int & r2 ; // Complier error \u53c3\u8003\u6709\u4ee5\u4e0b\u512a\u9ede\uff1a \u50b3\u905e\u53c3\u6578\u6642\uff0c\u4e0d\u6703\u8907\u88fd\u53c3\u6578\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002 \u53ef\u53d6\u4ee3\u592a\u9577\u7684\u8b8a\u6578\uff08\u5982\uff1a a[x][y][z] )\uff0c\u589e\u52a0\u53ef\u8b80\u6027\u3002","title":"\u53c3\u8003 (Reference)"},{"location":"syntax/pointer/#_1","text":"\u51fd\u5f0f\u50b3\u5165\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u662f\u4e00\u822c\u3001\u6307\u6a19\u6216\u662f\u53c3\u8003\u578b\u614b\uff0c\u4ee5\u4e0b\u4ee5 Swap \u4f86\u4ecb\u7d39\uff1a Call by value\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u4e00\u822c\u578b\u614b\uff0c\u6703 \"\u8907\u88fd\" \u4e00\u4efd\u5230\u51fd\u5f0f\uff0c\u539f\u672c\u7684\u8b8a\u6578\u4e0d\u6703\u6709\u4efb\u4f55\u6539\u8b8a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void swap ( int x , int y ) { cout << x << ' ' << y << '\\n' ; // 1 2 int t = x ; x = y ; y = t ; cout << x << ' ' << y << '\\n' ; // 2 1 } int main () { int a = 1 , b = 2 ; cout << a << ' ' << b << '\\n' ; // 1 2 swap ( a , b ); cout << a << ' ' << b << '\\n' ; // 1 2 } Call by address (value of pointer)\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u6307\u6a19\u578b\u614b\uff0c\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\u6539\u8b8a\uff0c\u662f\u5c0d\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff0c\u6240\u4ee5\u539f\u672c\u7684\u6578\u5b57\u4e5f\u6703\u8ddf\u8457\u6539\u8b8a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void swap ( int * x , int * y ) { cout << * x << ' ' << * y << '\\n' ; // 1 2 int t = * x ; * x = * y ; * y = t ; cout << * x << ' ' << * y << '\\n' ; // 2 1 } int main () { int a = 1 , b = 2 ; cout << a << ' ' << b << '\\n' ; // 1 2 swap ( & a , & b ); cout << a << ' ' << b << '\\n' ; // 2 1 } Call by reference\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u53c3\u8003\u578b\u614b\uff0c\u51fd\u6578\u5167\u7684\u8b8a\u6578\u662f\u539f\u672c\u8b8a\u6578\u7684\u5206\u8eab\uff0c\u6240\u4ee5\u51fd\u6578\u5167\u8b8a\u6578\u6539\u8b8a\u6642\uff0c\u539f\u672c\u8b8a\u6578\u4e5f\u6703\u8ddf\u8005\u6539\u8b8a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void swap ( int & x , int & y ) { cout << x << ' ' << y << '\\n' ; // 1 2 int t = x ; x = y ; y = t ; cout << x << ' ' << y << '\\n' ; // 2 1 } int main () { int a = 1 , b = 2 ; cout << a << ' ' << b << '\\n' ; // 1 2 swap ( a , b ); cout << a << ' ' << b << '\\n' ; // 2 1 } \u6307\u6a19\u8207\u4f4d\u5740 in openhome.cc \u21a9","title":"\u51fd\u5f0f\u50b3\u5165\u53c3\u6578"},{"location":"syntax/structure/","text":"\u81ea\u5b9a\u7fa9\u7d50\u69cb \u81ea\u5b9a\u7fa9\u7d50\u69cb\u70ba\u4e00\u4e9b\u6210\u54e1\u5143\u7d20\uff08\u8cc7\u6599\uff09\u7684\u7d44\u5408\u9ad4\uff0c\u5728 C \u6709 struct \uff0c C++ \u6709 struct \u548c class \uff0c C \u548c C++ \u7684 struct \u662f\u4e0d\u540c\u7684\uff0c\u4ee5\u4e0b\u8b1b\u89e3\uff1a C \u7684 struct \u5b9a\u7fa9\uff1a {} \u4e4b\u9593\u5b58\u653e\u6210\u54e1\u5143\u7d20\uff0c\u6210\u54e1\u5143\u7d20\u53ef\u4ee5\u793a\u6307\u6a19\u6216\u9663\u5217\uff0c } \u4e4b\u5f8c\u8981\u52a0\u4e0a ; \u3002 \u5ba3\u544a\uff1a\u5ba3\u544a\u53ef\u5728\u5b9a\u7fa9\u6642\u5ba3\u544a\uff08 Line 6 )\uff0c\u4e5f\u53ef\u4ee5\u7368\u7acb\u5ba3\u544a\u4e00\u884c ( Line 8-10 )\uff0c\u76f8\u4f3c\u5730\uff0c\u53ef\u4ee5\u5ba3\u544a\u70ba\u6307\u6a19\u6216\u662f\u9663\u5217\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // struct struct Item { int price ; int weight ; } apple ; struct Item banana1 , banana2 ; struct Item cake [ 10 ]; struct Item * itemPointer ; // class class Item { public : int price , weight ; int getPrice () { return price ; } } apple ; Item banana ; C++ \u7684 struct \u548c class C++ \u7684 struct \u548c class \u5c0e\u5165\u7269\u4ef6\u5c0e\u5411\u7684\u6982\u5ff5\uff0c\u9664\u4e86\u6210\u54e1\u5143\u7d20\uff0c\u9084\u53ef\u5b9a\u7fa9\u6210\u54e1\u51fd\u5f0f\u3002\u7368\u7acb\u5ba3\u544a\u6642\uff0c\u4e0d\u7528\u5728\u524d\u9762\u52a0\u4e0a struct \u548c class \u3002 C++ \u7684 struct \u548c class \u7684\u5dee\u7570\u5728\u65bc\u6210\u54e1\u7684\u9810\u8a2d\u5b58\u53d6\u6b0a\u9650\uff0c\u6709 public \u3001 protected \u3001 private \u4e09\u7a2e\u6b0a\u9650\uff0c strcut \u6210\u54e1\u9810\u8a2d\u70ba public \uff0c class \u5247\u662f private \u3002 public : \u6240\u6709\u51fd\u5f0f\u53ef\u5b58\u53d6\u3002 protected : \u6210\u54e1\u51fd\u5f0f\u3001 friend \u985e\u5225\u6210\u54e1\u6216\u51fd\u5f0f\uff0c\u4ee5\u53ca\u884d\u751f\u985e\u5225\u53ef\u5b58\u53d6\u3002 private : \u6210\u54e1\u51fd\u5f0f\u53ca friend \u985e\u5225\u6210\u54e1\u6216\u51fd\u5f0f\u53ef\u5b58\u53d6\u3002 1 2 3 4 5 6 7 struct Item { int price , weight ; int getPrice () { return price ; } } apple ; Item banana ; friend \u95dc\u9375\u5b57 \u6bcf\u500b\u4eba\u793e\u7fa4\u4e2d\u7684\u597d\u53cb\uff0c\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u767c\u4f48\u7684\u79c1\u4eba\u6587\u7ae0\uff0c friend \u5c31\u540c\u5982\u793e\u7fa4\u4e2d\u7684\u597d\u53cb\uff0c\u63d0\u4f9b friend \u985e\u5225\u6216\u51fd\u5f0f\u5b58\u53d6\u8a72\u7d50\u69cb\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 struct Circle { private : double radius ; friend double area ( Circle & ); }; double area ( Circle & c ) { return c . radius * c . radius * 3.14 ; } \u884d\u751f\u985e\u5225 \u884d\u751f\u985e\u5225\u662f\u7269\u4ef6\u5c0e\u5411\u7684\u6982\u5ff5\uff0c\u5982\u679c B \u662f\u4e00\u7a2e A \uff0c B \u5c31\u662f A \u7684\u884d\u751f\u985e\u5225\uff0c A \u5c31\u662f B \u7684\u57fa\u790e\u985e\u5225\u3002 \u4f8b\u5982\u300c\u6c7d\u8eca\u300d\u662f\u4e00\u7a2e\u300c\u4ea4\u901a\u5de5\u5177\u300d\uff0c\u90a3\u9ebc\u300c\u6c7d\u8eca\u300d\u5c31\u662f\u300c\u4ea4\u901a\u5de5\u5177\u300d\u7684\u884d\u751f\u985e\u5225\uff0c\u300c\u4ea4\u901a\u5de5\u5177\u300d\u5c31\u662f\u300c\u6c7d\u8eca\u300d\u7684\u57fa\u790e\u985e\u5225\u3002 \u8a2a\u554f\u5143\u7d20 \u5c0d\u65bc\u4e00\u822c\u8b8a\u6578 var \uff0c\u7528 var.name \u3002 \u5c0d\u65bc\u6307\u6a19\u8b8a\u6578 ptr \uff0c\u7528 ptr->name \u6216 (*ptr).name \u3002 \u8986\u8f09 (Override) \u548c\u591a\u8f09 (Overload) \u8986\u8f09 (Override) \u662f\u6307\u5728\u884d\u751f\u985e\u5225\u91cd\u65b0\u6539\u5beb\u540c\u540d\u5beb\u300c\u53c3\u6578\u76f8\u540c\u300d\u7684\u51fd\u5f0f\u3002 \u591a\u8f09 (Overload) \u662f\u6307\u5728\u91cd\u65b0\u6539\u5beb\u540c\u540d\u5beb\u300c\u53c3\u6578\u4e0d\u540c\u300d\u7684\u51fd\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct Transportation { string color ; void printColor () { cout << \"The transportation's color is \" + color + \". \\n \" ; } void printColor ( int year ) // overload { cout << \"These transportation was made in\" + year + \". \\n \" ; cout << \"These transportation's color is \" + color + \". \\n \" ; } }; struct Car : Transportation { void printColor () // override { cout << \"The car's color is \" + color + \". \\n \" ; } }; \u5efa\u69cb\u51fd\u5f0f (Constructor)\u3001\u89e3\u69cb\u51fd\u5f0f (Destructor) \u5efa\u69cb\u51fd\u5f0f\u7d50\u69cb\u7684\u540d\u7a31\u76f8\u540c\uff0c\u662f\u7528\u4f86\u521d\u59cb\u5316\u7d50\u69cb\u88e1\u7684\u8cc7\u6599\uff0c\u5982\u679c\u6c92\u6709\u4efb\u4f55\u5efa\u69cb\u51fd\u5f0f\uff0c\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7121\u53c3\u6578\u7684\u9810\u8a2d\u5efa\u69cb\u51fd\u5f0f\u3002\u7136\u800c\uff0c\u5982\u679c\u6709\u4e00\u500b\u5e36\u53c3\u6578\u7684\u5efa\u69cb\u51fd\u5f0f\uff0c\u5c31\u4e0d\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7121\u53c3\u6578\u7684\u9810\u8a2d\u5efa\u69cb\u51fd\u5f0f\uff0c\u9019\u6642\u5019\u8981\u5beb\u4e00\u500b\u4e0d\u5e36\u4efb\u4f55\u53c3\u6578\u7684\u904b\u7b97\u51fd\u5f0f\uff0c\u5426\u5247\u53ef\u80fd\u5c0e\u81f4\u7a0b\u5f0f\u5728\u7de8\u8b6f\u6642\u767c\u751f\u932f\u8aa4\u3002 \u89e3\u69cb\u51fd\u5f0f\u7684\u540d\u5b57\u5f62\u5f0f\u70ba ~\u7d50\u69cb\u7684\u540d\u7a31 \uff0c\u5728\u8b8a\u6578\u96e2\u958b\u4f5c\u7528\u57df\u6642\u904b\u4f5c\uff0c\u4e0d\u5beb\u7684\u8a71\u4e5f\u662f\u6703\u6709\u9810\u8a2d\u89e3\u69cb\u51fd\u5f0f\uff0c\u5728\u7a0b\u5f0f\u6bd4\u8cfd\u4e2d\u7d55\u5927\u90e8\u5206\u7684\u72c0\u6cc1\uff0c\u4e0d\u7528\u7279\u5225\u5beb\u89e3\u69cb\u51fd\u5f0f\u3002 \u5efa\u69cb\u51fd\u5f0f\u548c\u89e3\u69cb\u51fd\u5f0f\u7684\u5b58\u53d6\u6b0a\u9650\u5fc5\u70ba public \u3002 \u591a\u8f09\u904b\u7b97\u5b50\uff08Operator overloading) C/C++ \u5b9a\u7fa9\u4e86\u5404\u7a2e\u904b\u7b97\u5b50\uff0c\u81ea\u5b9a\u7fa9\u7d50\u69cb\u6839\u64da\u9700\u6c42\u53ef\u4ee5\u591a\u8f09\u904b\u7b97\u5b50\u3002\u5728\u7af6\u8cfd\u4e2d\uff0c\u5e38\u9700\u8981\u4f5c\u6392\u5e8f\u800c\u9700\u8981\u591a\u8f09\u5c0f\u65bc\u904b\u7b97\u5b50\uff08 < )\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct Plane { int x , y ; // Constructor Plane (){}; Plane ( int _x , int _y ) : x ( _x ), y ( _y ) {} // Operator overloading bool operator < ( const Plane & rhs ) const { if ( x != rhs . x ) return x < rhs . x ; return y < rhs . y ; } // Destructor ~ Plane (){}; }; int main () { Plane p1 ; Plane p2 ( 1 , 2 ); Plane p3 = Plane (); Plane p4 = Plane ( 0 , 0 ); } \u9577\u5ea6 \u7d50\u69cb\u7684\u9577\u5ea6\uff0c\u4e26\u975e\u70ba\u6240\u6709\u5143\u7d20\u76f8\u52a0\uff0c C/C++ \u7684\u7d50\u69cb\u9577\u5ea6\u914d\u7f6e\u6703\u9032\u884c\u300c\u5c0d\u9f4a\u7684\u6700\u4f73\u5316\u300d\u3002struct \u6703\u5206\u6210\u5f88\u591a\u584a\u5b58\u653e\uff0c\u6bcf\u4e00\u584a\u6703\u662f\u6700\u5927\u5143\u7d20\u7684\u9577\u5ea6\u70ba\u5c0d\u9f4a\u57fa\u6e96\uff0c\u5143\u7d20\u6703\u4f9d\u5ba3\u544a\u7684\u9806\u5e8f\u64fa\u653e\uff0c\u9023\u7e8c\u7684\u5143\u7d20\u6703\u653e\u5728\u540c\u4e00\u584a\uff0c\u5982\u679c\u4e0d\u5920\u7a7a\u9593\u64fa\u653e\u624d\u6703\u653e\u5728\u4e0b\u4e00\u584a\u3002 \u4ee5\u4e0b\u4f8b\u5b50\u4f5c\u70ba\u8aaa\u660e\uff0c\u5728\u9019\u88e1\uff0c\u6211\u5011 sizeof \u9019\u500b\u904b\u7b97\u5b50\u6c42\u51fa\u7d50\u69cb\u7684\u9577\u5ea6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct Data1 { char ch1 ; int i ; char ch2 ; }; struct Data2 { char ch1 ; char ch2 ; int i ; }; int main () { cout << sizeof ( Data1 ) << '\\n' ; cout << sizeof ( Data2 ) << '\\n' ; } /* 12 8 */ Data1 \u548c Data2 \u7576\u4e2d\u6700\u5927\u5143\u7d20\u9577\u5ea6\u70ba 4 ( int )\u3002 Data1 \uff0c\u7528\u4e86 3 \u584a\u4f86\u5b58 1 \u500b struct \uff0c\u7b2c\u4e00\u584a\u5b58 char ch1 \uff0c\u7b2c\u4e8c\u584a\u5b58 int i \uff0c\u7b2c\u4e09\u584a\u5b58 char ch2 \uff0c\u56e0\u6b64\u9577\u5ea6\u70ba 12 \uff1b Data2 \uff0c\u7528\u4e86 3 \u584a\u4f86\u5b58 2 \u500b struct \uff0c\u7b2c\u4e00\u584a\u5b58 char ch1 \u548c char ch2 \uff0c\u7b2c\u4e8c\u584a\u5b58 int i \uff0c\u56e0\u6b64\u9577\u5ea6\u70ba 8 \u3002 \u70ba\u4ec0\u9ebc\u8981\u7528\u81ea\u5b9a\u7fa9\u7d50\u69cb \u8cc7\u6599\u5b58\u653e\u6709\u5f88\u591a\u7a2e\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u958b\u591a\u500b\u9663\u5217\u4f86\u53d6\u4ee3\u81ea\u5b9a\u7fa9\u7d50\u69cb\uff0c\u4f46\u6709\u4e9b\u64cd\u4f5c\u6703\u76f4\u63a5\u5c07\u8cc7\u6599\u79fb\u52d5\uff0c\u5305\u542b\u6392\u5e8f\u548c\u522a\u9664\uff0c\u5982\u679c\u7528\u591a\u500b\u9663\u5217\u5132\u5b58\uff0c\u9700\u8981\u78ba\u4fdd\u6bcf\u500b\u9663\u5217\u7684\u8cc7\u6599\u90fd\u88ab\u6b63\u78ba\u7684\u79fb\u52d5\uff1b\u4f7f\u7528\u7d50\u69cb\uff0c\u5c31\u4e0d\u7528\u53bb\u7dad\u8b77\u9019\u4ef6\u4e8b\u60c5\u3002 \u518d\u4f86\u662f\u591a\u500b\u7d50\u69cb\u53ef\u80fd\u6703\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u5143\u7d20\u3002\u4f8b\u5982 apple \u548c banana\uff0c\u5b83\u5011\u90fd\u6709\u4e00\u500b\u6210\u54e1\u5143\u7d20 price\uff0c\u5982\u679c\u7528\u591a\u500b\u9663\u5217\u5132\u5b58\uff0c\u5b83\u5011\u4e0d\u80fd\u5171\u7528\u540c\u4e00\u500b\u9663\u5217 price[] \uff0c\u8981\u5beb\u6210 priceOfApple \u548c priceOfBanana \uff1b\u5982\u679c\u7528\u7d50\u69cb\uff0c\u5c31\u53ef\u4ee5\u8b93\u4e0d\u540c\u7d50\u69cb\u64c1\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u5143\u7d20\uff08\u4f8b\u5982 a.price \u548c b.price ) \u4f86\u5340\u5206\u3002 Override \u8207 Overload \u7684\u5dee\u5225 - \u6a58\u5b50\u4e82\u8aaa\u8a71 \u21a9 \u5b9a\u7fa9\u7d50\u69cb - openhome.cc \u21a9 How To Calculate Size Of Structure And Class in C & C++ - CppNuts in Youtube \u21a9 \u7ed3\u6784\u4f53 - OI Wiki \u21a9","title":"\u81ea\u5b9a\u7fa9\u7d50\u69cb"},{"location":"syntax/structure/#_1","text":"\u81ea\u5b9a\u7fa9\u7d50\u69cb\u70ba\u4e00\u4e9b\u6210\u54e1\u5143\u7d20\uff08\u8cc7\u6599\uff09\u7684\u7d44\u5408\u9ad4\uff0c\u5728 C \u6709 struct \uff0c C++ \u6709 struct \u548c class \uff0c C \u548c C++ \u7684 struct \u662f\u4e0d\u540c\u7684\uff0c\u4ee5\u4e0b\u8b1b\u89e3\uff1a","title":"\u81ea\u5b9a\u7fa9\u7d50\u69cb"},{"location":"syntax/structure/#c-struct","text":"\u5b9a\u7fa9\uff1a {} \u4e4b\u9593\u5b58\u653e\u6210\u54e1\u5143\u7d20\uff0c\u6210\u54e1\u5143\u7d20\u53ef\u4ee5\u793a\u6307\u6a19\u6216\u9663\u5217\uff0c } \u4e4b\u5f8c\u8981\u52a0\u4e0a ; \u3002 \u5ba3\u544a\uff1a\u5ba3\u544a\u53ef\u5728\u5b9a\u7fa9\u6642\u5ba3\u544a\uff08 Line 6 )\uff0c\u4e5f\u53ef\u4ee5\u7368\u7acb\u5ba3\u544a\u4e00\u884c ( Line 8-10 )\uff0c\u76f8\u4f3c\u5730\uff0c\u53ef\u4ee5\u5ba3\u544a\u70ba\u6307\u6a19\u6216\u662f\u9663\u5217\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // struct struct Item { int price ; int weight ; } apple ; struct Item banana1 , banana2 ; struct Item cake [ 10 ]; struct Item * itemPointer ; // class class Item { public : int price , weight ; int getPrice () { return price ; } } apple ; Item banana ;","title":"C \u7684 struct"},{"location":"syntax/structure/#c-struct-class","text":"C++ \u7684 struct \u548c class \u5c0e\u5165\u7269\u4ef6\u5c0e\u5411\u7684\u6982\u5ff5\uff0c\u9664\u4e86\u6210\u54e1\u5143\u7d20\uff0c\u9084\u53ef\u5b9a\u7fa9\u6210\u54e1\u51fd\u5f0f\u3002\u7368\u7acb\u5ba3\u544a\u6642\uff0c\u4e0d\u7528\u5728\u524d\u9762\u52a0\u4e0a struct \u548c class \u3002 C++ \u7684 struct \u548c class \u7684\u5dee\u7570\u5728\u65bc\u6210\u54e1\u7684\u9810\u8a2d\u5b58\u53d6\u6b0a\u9650\uff0c\u6709 public \u3001 protected \u3001 private \u4e09\u7a2e\u6b0a\u9650\uff0c strcut \u6210\u54e1\u9810\u8a2d\u70ba public \uff0c class \u5247\u662f private \u3002 public : \u6240\u6709\u51fd\u5f0f\u53ef\u5b58\u53d6\u3002 protected : \u6210\u54e1\u51fd\u5f0f\u3001 friend \u985e\u5225\u6210\u54e1\u6216\u51fd\u5f0f\uff0c\u4ee5\u53ca\u884d\u751f\u985e\u5225\u53ef\u5b58\u53d6\u3002 private : \u6210\u54e1\u51fd\u5f0f\u53ca friend \u985e\u5225\u6210\u54e1\u6216\u51fd\u5f0f\u53ef\u5b58\u53d6\u3002 1 2 3 4 5 6 7 struct Item { int price , weight ; int getPrice () { return price ; } } apple ; Item banana ; friend \u95dc\u9375\u5b57 \u6bcf\u500b\u4eba\u793e\u7fa4\u4e2d\u7684\u597d\u53cb\uff0c\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u767c\u4f48\u7684\u79c1\u4eba\u6587\u7ae0\uff0c friend \u5c31\u540c\u5982\u793e\u7fa4\u4e2d\u7684\u597d\u53cb\uff0c\u63d0\u4f9b friend \u985e\u5225\u6216\u51fd\u5f0f\u5b58\u53d6\u8a72\u7d50\u69cb\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 struct Circle { private : double radius ; friend double area ( Circle & ); }; double area ( Circle & c ) { return c . radius * c . radius * 3.14 ; } \u884d\u751f\u985e\u5225 \u884d\u751f\u985e\u5225\u662f\u7269\u4ef6\u5c0e\u5411\u7684\u6982\u5ff5\uff0c\u5982\u679c B \u662f\u4e00\u7a2e A \uff0c B \u5c31\u662f A \u7684\u884d\u751f\u985e\u5225\uff0c A \u5c31\u662f B \u7684\u57fa\u790e\u985e\u5225\u3002 \u4f8b\u5982\u300c\u6c7d\u8eca\u300d\u662f\u4e00\u7a2e\u300c\u4ea4\u901a\u5de5\u5177\u300d\uff0c\u90a3\u9ebc\u300c\u6c7d\u8eca\u300d\u5c31\u662f\u300c\u4ea4\u901a\u5de5\u5177\u300d\u7684\u884d\u751f\u985e\u5225\uff0c\u300c\u4ea4\u901a\u5de5\u5177\u300d\u5c31\u662f\u300c\u6c7d\u8eca\u300d\u7684\u57fa\u790e\u985e\u5225\u3002","title":"C++ \u7684 struct \u548c class"},{"location":"syntax/structure/#_2","text":"\u5c0d\u65bc\u4e00\u822c\u8b8a\u6578 var \uff0c\u7528 var.name \u3002 \u5c0d\u65bc\u6307\u6a19\u8b8a\u6578 ptr \uff0c\u7528 ptr->name \u6216 (*ptr).name \u3002","title":"\u8a2a\u554f\u5143\u7d20"},{"location":"syntax/structure/#override-overload","text":"\u8986\u8f09 (Override) \u662f\u6307\u5728\u884d\u751f\u985e\u5225\u91cd\u65b0\u6539\u5beb\u540c\u540d\u5beb\u300c\u53c3\u6578\u76f8\u540c\u300d\u7684\u51fd\u5f0f\u3002 \u591a\u8f09 (Overload) \u662f\u6307\u5728\u91cd\u65b0\u6539\u5beb\u540c\u540d\u5beb\u300c\u53c3\u6578\u4e0d\u540c\u300d\u7684\u51fd\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct Transportation { string color ; void printColor () { cout << \"The transportation's color is \" + color + \". \\n \" ; } void printColor ( int year ) // overload { cout << \"These transportation was made in\" + year + \". \\n \" ; cout << \"These transportation's color is \" + color + \". \\n \" ; } }; struct Car : Transportation { void printColor () // override { cout << \"The car's color is \" + color + \". \\n \" ; } };","title":"\u8986\u8f09 (Override) \u548c\u591a\u8f09 (Overload)"},{"location":"syntax/structure/#constructor-destructor","text":"\u5efa\u69cb\u51fd\u5f0f\u7d50\u69cb\u7684\u540d\u7a31\u76f8\u540c\uff0c\u662f\u7528\u4f86\u521d\u59cb\u5316\u7d50\u69cb\u88e1\u7684\u8cc7\u6599\uff0c\u5982\u679c\u6c92\u6709\u4efb\u4f55\u5efa\u69cb\u51fd\u5f0f\uff0c\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7121\u53c3\u6578\u7684\u9810\u8a2d\u5efa\u69cb\u51fd\u5f0f\u3002\u7136\u800c\uff0c\u5982\u679c\u6709\u4e00\u500b\u5e36\u53c3\u6578\u7684\u5efa\u69cb\u51fd\u5f0f\uff0c\u5c31\u4e0d\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7121\u53c3\u6578\u7684\u9810\u8a2d\u5efa\u69cb\u51fd\u5f0f\uff0c\u9019\u6642\u5019\u8981\u5beb\u4e00\u500b\u4e0d\u5e36\u4efb\u4f55\u53c3\u6578\u7684\u904b\u7b97\u51fd\u5f0f\uff0c\u5426\u5247\u53ef\u80fd\u5c0e\u81f4\u7a0b\u5f0f\u5728\u7de8\u8b6f\u6642\u767c\u751f\u932f\u8aa4\u3002 \u89e3\u69cb\u51fd\u5f0f\u7684\u540d\u5b57\u5f62\u5f0f\u70ba ~\u7d50\u69cb\u7684\u540d\u7a31 \uff0c\u5728\u8b8a\u6578\u96e2\u958b\u4f5c\u7528\u57df\u6642\u904b\u4f5c\uff0c\u4e0d\u5beb\u7684\u8a71\u4e5f\u662f\u6703\u6709\u9810\u8a2d\u89e3\u69cb\u51fd\u5f0f\uff0c\u5728\u7a0b\u5f0f\u6bd4\u8cfd\u4e2d\u7d55\u5927\u90e8\u5206\u7684\u72c0\u6cc1\uff0c\u4e0d\u7528\u7279\u5225\u5beb\u89e3\u69cb\u51fd\u5f0f\u3002 \u5efa\u69cb\u51fd\u5f0f\u548c\u89e3\u69cb\u51fd\u5f0f\u7684\u5b58\u53d6\u6b0a\u9650\u5fc5\u70ba public \u3002","title":"\u5efa\u69cb\u51fd\u5f0f (Constructor)\u3001\u89e3\u69cb\u51fd\u5f0f (Destructor)"},{"location":"syntax/structure/#operator-overloading","text":"C/C++ \u5b9a\u7fa9\u4e86\u5404\u7a2e\u904b\u7b97\u5b50\uff0c\u81ea\u5b9a\u7fa9\u7d50\u69cb\u6839\u64da\u9700\u6c42\u53ef\u4ee5\u591a\u8f09\u904b\u7b97\u5b50\u3002\u5728\u7af6\u8cfd\u4e2d\uff0c\u5e38\u9700\u8981\u4f5c\u6392\u5e8f\u800c\u9700\u8981\u591a\u8f09\u5c0f\u65bc\u904b\u7b97\u5b50\uff08 < )\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct Plane { int x , y ; // Constructor Plane (){}; Plane ( int _x , int _y ) : x ( _x ), y ( _y ) {} // Operator overloading bool operator < ( const Plane & rhs ) const { if ( x != rhs . x ) return x < rhs . x ; return y < rhs . y ; } // Destructor ~ Plane (){}; }; int main () { Plane p1 ; Plane p2 ( 1 , 2 ); Plane p3 = Plane (); Plane p4 = Plane ( 0 , 0 ); }","title":"\u591a\u8f09\u904b\u7b97\u5b50\uff08Operator overloading)"},{"location":"syntax/structure/#_3","text":"\u7d50\u69cb\u7684\u9577\u5ea6\uff0c\u4e26\u975e\u70ba\u6240\u6709\u5143\u7d20\u76f8\u52a0\uff0c C/C++ \u7684\u7d50\u69cb\u9577\u5ea6\u914d\u7f6e\u6703\u9032\u884c\u300c\u5c0d\u9f4a\u7684\u6700\u4f73\u5316\u300d\u3002struct \u6703\u5206\u6210\u5f88\u591a\u584a\u5b58\u653e\uff0c\u6bcf\u4e00\u584a\u6703\u662f\u6700\u5927\u5143\u7d20\u7684\u9577\u5ea6\u70ba\u5c0d\u9f4a\u57fa\u6e96\uff0c\u5143\u7d20\u6703\u4f9d\u5ba3\u544a\u7684\u9806\u5e8f\u64fa\u653e\uff0c\u9023\u7e8c\u7684\u5143\u7d20\u6703\u653e\u5728\u540c\u4e00\u584a\uff0c\u5982\u679c\u4e0d\u5920\u7a7a\u9593\u64fa\u653e\u624d\u6703\u653e\u5728\u4e0b\u4e00\u584a\u3002 \u4ee5\u4e0b\u4f8b\u5b50\u4f5c\u70ba\u8aaa\u660e\uff0c\u5728\u9019\u88e1\uff0c\u6211\u5011 sizeof \u9019\u500b\u904b\u7b97\u5b50\u6c42\u51fa\u7d50\u69cb\u7684\u9577\u5ea6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct Data1 { char ch1 ; int i ; char ch2 ; }; struct Data2 { char ch1 ; char ch2 ; int i ; }; int main () { cout << sizeof ( Data1 ) << '\\n' ; cout << sizeof ( Data2 ) << '\\n' ; } /* 12 8 */ Data1 \u548c Data2 \u7576\u4e2d\u6700\u5927\u5143\u7d20\u9577\u5ea6\u70ba 4 ( int )\u3002 Data1 \uff0c\u7528\u4e86 3 \u584a\u4f86\u5b58 1 \u500b struct \uff0c\u7b2c\u4e00\u584a\u5b58 char ch1 \uff0c\u7b2c\u4e8c\u584a\u5b58 int i \uff0c\u7b2c\u4e09\u584a\u5b58 char ch2 \uff0c\u56e0\u6b64\u9577\u5ea6\u70ba 12 \uff1b Data2 \uff0c\u7528\u4e86 3 \u584a\u4f86\u5b58 2 \u500b struct \uff0c\u7b2c\u4e00\u584a\u5b58 char ch1 \u548c char ch2 \uff0c\u7b2c\u4e8c\u584a\u5b58 int i \uff0c\u56e0\u6b64\u9577\u5ea6\u70ba 8 \u3002","title":"\u9577\u5ea6"},{"location":"syntax/structure/#_4","text":"\u8cc7\u6599\u5b58\u653e\u6709\u5f88\u591a\u7a2e\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u958b\u591a\u500b\u9663\u5217\u4f86\u53d6\u4ee3\u81ea\u5b9a\u7fa9\u7d50\u69cb\uff0c\u4f46\u6709\u4e9b\u64cd\u4f5c\u6703\u76f4\u63a5\u5c07\u8cc7\u6599\u79fb\u52d5\uff0c\u5305\u542b\u6392\u5e8f\u548c\u522a\u9664\uff0c\u5982\u679c\u7528\u591a\u500b\u9663\u5217\u5132\u5b58\uff0c\u9700\u8981\u78ba\u4fdd\u6bcf\u500b\u9663\u5217\u7684\u8cc7\u6599\u90fd\u88ab\u6b63\u78ba\u7684\u79fb\u52d5\uff1b\u4f7f\u7528\u7d50\u69cb\uff0c\u5c31\u4e0d\u7528\u53bb\u7dad\u8b77\u9019\u4ef6\u4e8b\u60c5\u3002 \u518d\u4f86\u662f\u591a\u500b\u7d50\u69cb\u53ef\u80fd\u6703\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u5143\u7d20\u3002\u4f8b\u5982 apple \u548c banana\uff0c\u5b83\u5011\u90fd\u6709\u4e00\u500b\u6210\u54e1\u5143\u7d20 price\uff0c\u5982\u679c\u7528\u591a\u500b\u9663\u5217\u5132\u5b58\uff0c\u5b83\u5011\u4e0d\u80fd\u5171\u7528\u540c\u4e00\u500b\u9663\u5217 price[] \uff0c\u8981\u5beb\u6210 priceOfApple \u548c priceOfBanana \uff1b\u5982\u679c\u7528\u7d50\u69cb\uff0c\u5c31\u53ef\u4ee5\u8b93\u4e0d\u540c\u7d50\u69cb\u64c1\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u5143\u7d20\uff08\u4f8b\u5982 a.price \u548c b.price ) \u4f86\u5340\u5206\u3002 Override \u8207 Overload \u7684\u5dee\u5225 - \u6a58\u5b50\u4e82\u8aaa\u8a71 \u21a9 \u5b9a\u7fa9\u7d50\u69cb - openhome.cc \u21a9 How To Calculate Size Of Structure And Class in C & C++ - CppNuts in Youtube \u21a9 \u7ed3\u6784\u4f53 - OI Wiki \u21a9","title":"\u70ba\u4ec0\u9ebc\u8981\u7528\u81ea\u5b9a\u7fa9\u7d50\u69cb"},{"location":"syntax/type/","text":"\u57fa\u790e\u8cc7\u6599\u578b\u614b\u578b\u5225 \u5132\u5b58\u8cc7\u6599 \u96fb\u8166\u662f\u4ee5\u4e8c\u9032\u4f4d\u5132\u5b58\u8cc7\u6599\uff0c\u4e8c\u9032\u4f4d\u662f\u6307\u6578\u5b57\u662f\u7531 0,1 \u7d44\u6210\uff0c\u76f8\u8f03\u65bc\u5e38\u898b\u7684\u5341\u9032\u4f4d\u662f\u7531 0~9 \u7d44\u6210\uff0c\u4e00\u500b 0 \u6216 1 \u7a31\u70ba\u4f4d\u5143 (bit)\uff0c8 bits \u7a31\u70ba byte\uff08\u4f4d\u5143\u7d44\uff09\uff0cbyte \u662f\u96fb\u8166\u57fa\u672c\u5132\u5b58\u55ae\u4f4d\uff0c\u4e0b\u8868\u70ba\u5404\u7a2e\u5e38\u898b\u96fb\u8166\u5132\u5b58\u55ae\u4f4d\u3002 \u55ae\u4f4d \u5099\u8a3b 1B 1 byte 1KB 1024 bytes 1MB 1024 KBs 1GB 1024 MBs \u5728 C/C++ \u88e1\uff0c\u5c07\u6240\u6709\u7684\u57fa\u790e\u8cc7\u6599\u578b\u614b\u5206\u6210\u56db\u985e\u8aaa\u660e\uff0c\u4f9d\u5e8f\u662f\u6574\u6578\u3001\u6d6e\u9ede\u6578\u3001\u5b57\u5143\u3001\u5e03\u6797\u503c\u3002 \u6574\u6578 \u6574\u6578\u5206\u6210\u5169\u500b\u90e8\u5206\uff0c\u6700\u5de6\u908a\u7684\u4f4d\u5143\u8868\u793a\u6b63\u8ca0\u865f\uff08 0 : \u6b63\uff0c 1 : \u8ca0\uff09\uff0c\u5176\u9918\u8868\u793a\u6578\u5b57\u3002 \u901a\u5e38\u6703\u4ee5 int \u4f5c\u70ba\u6574\u6578\u578b\u614b\uff0cint \u517c\u9867\u7bc4\u570d\u5927\u5c0f\u548c\u8a18\u61b6\u9ad4\u5927\u5c0f\u3002\u5982\u679c\u5b58\u7684\u6578\u5b57\u4fdd\u8b49\u4e0d\u6703\u7528\u5230\u8ca0\u6578\u7684\u8a71\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a unsigned\uff0c\u9019\u6a23\u6700\u5de6\u908a\u7684\u4f4d\u5143\u4e5f\u6703\u7528\u4f86\u8868\u793a\u6578\u5b57\u3002 \u6ea2\u4f4d \u4e0a\u8868\u6709\u7d66\u51fa\u6bcf\u7a2e\u578b\u614b\u7684\u7bc4\u570d\u3002\u5047\u8a2d\u5169\u500b\u76f8\u540c\u578b\u614b\u52a0\u7e3d\u5f8c\u8d85\u904e\u7bc4\u570d\uff0c\u90a3\u9ebc\u6700\u9ad8\u4f4d\uff08\u6700\u5de6\u908a\uff09\u9032\u4f4d\u5f8c\u6703\u88ab\u6368\u53bb\uff0c\u9020\u6210\u7d50\u679c\u548c\u6b63\u78ba\u503c\u4e0d\u540c\uff0c\u9019\u500b\u72c0\u6cc1\u7a31\u4e4b\u70ba\u6ea2\u4f4d\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <cstdio> int main () { int a = 1000000000 , b = 2000000000 ; printf ( \"%d \\n \" , a + b ); } /* -1294967296 */ \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d short short int, signed short int 2 \u201332,768 to 32,767 unsigned short unsigned short int 2 0 to 65,535 int signed, signed int 4 \u20132,147,483,648 to 2,147,483,647 unsigned int unsigned 4 0 to 4,294,967,295 long long long long int, signed long long 8 \u20139,223,372,036,854,775,808 to 9,223,372,036,854,775,807 unsigned long long unsigned long long int 8 0 to 18,446,744,073,709,551,615 \u6d6e\u9ede\u6578 \u6d6e\u9ede\u6578\u5206\u6210 3 \u500b\u90e8\u5206\uff0csign bit\uff08\u7b26\u865f\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b63\u8ca0\u865f\u3001exponent\uff08\u6307\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b21\u65b9\u6578\u3001mantissa\uff08\u5c3e\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u7cbe\u78ba\u5ea6\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d \u7cbe\u5ea6 float \u7121 4 3.4E +/- 38 7 digits double long double 8 1.7E +/- 308 15 digits \u6d6e\u9ede\u6578\u5132\u5b58\u4e5f\u6703\u6709\u9650\u5236\uff0c\u5982\u679c\u5c0f\u6578\u9ede\u5f8c\u500b\u4f4d\u6578\u904e\u591a\uff0c\u6703\u88ab\u6368\u53bb\u9020\u6210\u8aa4\u5dee\uff0cfloat \u4fdd\u8b49\u4ee5 10 \u9032\u4f4d\u8868\u793a\u6642\uff0c\u5c0f\u6578\u9ede\u5f8c 7 \u4f4d\u5167\u6703\u662f\u6b63\u78ba\uff0cdouble \u5247\u662f 15 \u4f4d\u3002 \u5b57\u5143 C/C++ \u63a1\u7528 ASCII \u5b57\u5143\u96c6\uff0c\u4e00\u500b\u6578\u5b57\u5c0d\u61c9\u4e00\u500b\u5b57\u6bcd\uff0c\u4f46\u9019\u4efd\u5b57\u5143\u96c6\u53ea\u6709\u82f1\u6587\u5b57\u6bcd\u3001\u6578\u5b57\u3001\u5e38\u898b\u7684\u7b26\u865f\uff0c\u5176\u4ed6\u570b\u5bb6\u7684\u6587\u5b57\u5247\u7121\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d char \u7121 1 -128 to 127 unsigned char \u7121 1 0 to 255 wchar \u7121 2 0 to 65,535 \u5e03\u6797\u503c\uff08C++) \u5e03\u6797\u503c\u53ea\u6709\u5169\u7a2e\u690d Ture (1 \u6216\u662f\u8aaa \u975e 0)\u3001False (0)\uff0c\u7576\u4f5c\u908f\u8f2f\u8b8a\u6578\uff0c\u76f8\u8f03\u5229\u7528\u6574\u6578\u578b\u614b\uff0c\u6709\u5169\u500b\u6709\u512a\u52e2\uff0c\u4e00\u500b\u662f\u7bc0\u7701\u8a18\u61b6\u9ad4\uff0c\u4e8c\u662f\u53ef\u4ee5\u660e\u78ba\u8868\u793a\u662f\u7528\u4f86\u8a18\u9304 True/False \u72c0\u614b\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d bool \u7121 1 0 to 1 \u5f8c\u8a18 \u9084\u6709\u4e00\u500b\u578b\u614b enum\uff0c\u9019\u88e1\u5148\u4e0d\u63d0\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d enum \u7121 varies TBA","title":"\u57fa\u672c\u8cc7\u6599\u578b\u614b"},{"location":"syntax/type/#_1","text":"","title":"\u57fa\u790e\u8cc7\u6599\u578b\u614b\u578b\u5225"},{"location":"syntax/type/#_2","text":"\u96fb\u8166\u662f\u4ee5\u4e8c\u9032\u4f4d\u5132\u5b58\u8cc7\u6599\uff0c\u4e8c\u9032\u4f4d\u662f\u6307\u6578\u5b57\u662f\u7531 0,1 \u7d44\u6210\uff0c\u76f8\u8f03\u65bc\u5e38\u898b\u7684\u5341\u9032\u4f4d\u662f\u7531 0~9 \u7d44\u6210\uff0c\u4e00\u500b 0 \u6216 1 \u7a31\u70ba\u4f4d\u5143 (bit)\uff0c8 bits \u7a31\u70ba byte\uff08\u4f4d\u5143\u7d44\uff09\uff0cbyte \u662f\u96fb\u8166\u57fa\u672c\u5132\u5b58\u55ae\u4f4d\uff0c\u4e0b\u8868\u70ba\u5404\u7a2e\u5e38\u898b\u96fb\u8166\u5132\u5b58\u55ae\u4f4d\u3002 \u55ae\u4f4d \u5099\u8a3b 1B 1 byte 1KB 1024 bytes 1MB 1024 KBs 1GB 1024 MBs \u5728 C/C++ \u88e1\uff0c\u5c07\u6240\u6709\u7684\u57fa\u790e\u8cc7\u6599\u578b\u614b\u5206\u6210\u56db\u985e\u8aaa\u660e\uff0c\u4f9d\u5e8f\u662f\u6574\u6578\u3001\u6d6e\u9ede\u6578\u3001\u5b57\u5143\u3001\u5e03\u6797\u503c\u3002","title":"\u5132\u5b58\u8cc7\u6599"},{"location":"syntax/type/#_3","text":"\u6574\u6578\u5206\u6210\u5169\u500b\u90e8\u5206\uff0c\u6700\u5de6\u908a\u7684\u4f4d\u5143\u8868\u793a\u6b63\u8ca0\u865f\uff08 0 : \u6b63\uff0c 1 : \u8ca0\uff09\uff0c\u5176\u9918\u8868\u793a\u6578\u5b57\u3002 \u901a\u5e38\u6703\u4ee5 int \u4f5c\u70ba\u6574\u6578\u578b\u614b\uff0cint \u517c\u9867\u7bc4\u570d\u5927\u5c0f\u548c\u8a18\u61b6\u9ad4\u5927\u5c0f\u3002\u5982\u679c\u5b58\u7684\u6578\u5b57\u4fdd\u8b49\u4e0d\u6703\u7528\u5230\u8ca0\u6578\u7684\u8a71\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a unsigned\uff0c\u9019\u6a23\u6700\u5de6\u908a\u7684\u4f4d\u5143\u4e5f\u6703\u7528\u4f86\u8868\u793a\u6578\u5b57\u3002","title":"\u6574\u6578"},{"location":"syntax/type/#_4","text":"\u4e0a\u8868\u6709\u7d66\u51fa\u6bcf\u7a2e\u578b\u614b\u7684\u7bc4\u570d\u3002\u5047\u8a2d\u5169\u500b\u76f8\u540c\u578b\u614b\u52a0\u7e3d\u5f8c\u8d85\u904e\u7bc4\u570d\uff0c\u90a3\u9ebc\u6700\u9ad8\u4f4d\uff08\u6700\u5de6\u908a\uff09\u9032\u4f4d\u5f8c\u6703\u88ab\u6368\u53bb\uff0c\u9020\u6210\u7d50\u679c\u548c\u6b63\u78ba\u503c\u4e0d\u540c\uff0c\u9019\u500b\u72c0\u6cc1\u7a31\u4e4b\u70ba\u6ea2\u4f4d\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <cstdio> int main () { int a = 1000000000 , b = 2000000000 ; printf ( \"%d \\n \" , a + b ); } /* -1294967296 */ \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d short short int, signed short int 2 \u201332,768 to 32,767 unsigned short unsigned short int 2 0 to 65,535 int signed, signed int 4 \u20132,147,483,648 to 2,147,483,647 unsigned int unsigned 4 0 to 4,294,967,295 long long long long int, signed long long 8 \u20139,223,372,036,854,775,808 to 9,223,372,036,854,775,807 unsigned long long unsigned long long int 8 0 to 18,446,744,073,709,551,615","title":"\u6ea2\u4f4d"},{"location":"syntax/type/#_5","text":"\u6d6e\u9ede\u6578\u5206\u6210 3 \u500b\u90e8\u5206\uff0csign bit\uff08\u7b26\u865f\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b63\u8ca0\u865f\u3001exponent\uff08\u6307\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b21\u65b9\u6578\u3001mantissa\uff08\u5c3e\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u7cbe\u78ba\u5ea6\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d \u7cbe\u5ea6 float \u7121 4 3.4E +/- 38 7 digits double long double 8 1.7E +/- 308 15 digits \u6d6e\u9ede\u6578\u5132\u5b58\u4e5f\u6703\u6709\u9650\u5236\uff0c\u5982\u679c\u5c0f\u6578\u9ede\u5f8c\u500b\u4f4d\u6578\u904e\u591a\uff0c\u6703\u88ab\u6368\u53bb\u9020\u6210\u8aa4\u5dee\uff0cfloat \u4fdd\u8b49\u4ee5 10 \u9032\u4f4d\u8868\u793a\u6642\uff0c\u5c0f\u6578\u9ede\u5f8c 7 \u4f4d\u5167\u6703\u662f\u6b63\u78ba\uff0cdouble \u5247\u662f 15 \u4f4d\u3002","title":"\u6d6e\u9ede\u6578"},{"location":"syntax/type/#_6","text":"C/C++ \u63a1\u7528 ASCII \u5b57\u5143\u96c6\uff0c\u4e00\u500b\u6578\u5b57\u5c0d\u61c9\u4e00\u500b\u5b57\u6bcd\uff0c\u4f46\u9019\u4efd\u5b57\u5143\u96c6\u53ea\u6709\u82f1\u6587\u5b57\u6bcd\u3001\u6578\u5b57\u3001\u5e38\u898b\u7684\u7b26\u865f\uff0c\u5176\u4ed6\u570b\u5bb6\u7684\u6587\u5b57\u5247\u7121\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d char \u7121 1 -128 to 127 unsigned char \u7121 1 0 to 255 wchar \u7121 2 0 to 65,535","title":"\u5b57\u5143"},{"location":"syntax/type/#c","text":"\u5e03\u6797\u503c\u53ea\u6709\u5169\u7a2e\u690d Ture (1 \u6216\u662f\u8aaa \u975e 0)\u3001False (0)\uff0c\u7576\u4f5c\u908f\u8f2f\u8b8a\u6578\uff0c\u76f8\u8f03\u5229\u7528\u6574\u6578\u578b\u614b\uff0c\u6709\u5169\u500b\u6709\u512a\u52e2\uff0c\u4e00\u500b\u662f\u7bc0\u7701\u8a18\u61b6\u9ad4\uff0c\u4e8c\u662f\u53ef\u4ee5\u660e\u78ba\u8868\u793a\u662f\u7528\u4f86\u8a18\u9304 True/False \u72c0\u614b\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d bool \u7121 1 0 to 1","title":"\u5e03\u6797\u503c\uff08C++)"},{"location":"syntax/type/#_7","text":"\u9084\u6709\u4e00\u500b\u578b\u614b enum\uff0c\u9019\u88e1\u5148\u4e0d\u63d0\u3002 \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d enum \u7121 varies TBA","title":"\u5f8c\u8a18"},{"location":"tool/cmd/","text":"\u547d\u4ee4\u5217 (Command Line) MinGW \u8981\u5728\u96fb\u8166\u7de8\u8b6f C \u6216 C++ \u7684\u6a94\u6848\u9700\u5b89\u88dd MinGW \u8f09\u9ede\uff1a https://sourceforge.net/projects/mingw/ \u5176\u4ed6\u8a2d\u5b9a\u90fd\u4e0d\u7528\u6539\uff0c\u76f4\u5230\u9019\u908a\u9078 Mark All Upgrade \u518d\u9078 Apply Change \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff1a \u5c0d\u672c\u6a5f\u9ede\u53f3\u9375\u9078\u5167\u5bb9 \u9032\u968e\u7cfb\u7d71\u8a2d\u5b9a \u74b0\u5883\u8b8a\u6578 \u9ede\u958b\u7cfb\u7d71\u8b8a\u6578\u4e2d\u7684 PATH \u65b0\u589e C:\\MinGW\\bin \uff08\u9810\u8a2d\u5728\u9019\u500b path \u4e0b\uff09 \u6253\u958b cmd \u8f38\u5165 gcc --version \uff08\u6216 g++ --version ) \u6aa2\u67e5\u662f\u5426\u5b89\u88dd\u6210\u529f \u683c\u5f0f C: gcc*.c -o*.exe C++: g++*.cpp -o*.exe Note: -o \u662f\u8b93\u81ea\u5df1\u53ef\u4ee5\u9078\u64c7 exe \u6a94\u8981\u53eb\u4ec0\u9ebc\u540d\u5b57\uff0c\u4e0d\u7136\u9810\u8a2d\u90fd\u6703\u70ba a.exe \u7bc4\u4f8b \u524d\u63d0\uff1a a.cpp \u5b58\u5728\u684c\u9762 \u6253\u958b cmd \u5230 a.cpp \u6a94\u6848\u8def\u5f91\uff1a cd C:\\\\Users\\\\User_name\\\\Desktop \uff08\u82e5\u5b58\u5728\u684c\u9762\u901a\u5e38\u6253\u958b cmd\uff0c\u53ef\u4ee5\u76f4\u63a5 cd Desktop ) \u7de8\u8b6f\uff1a g++ a.cpp -o a.exe \u57f7\u884c\uff1a a.exe \u8f38\u5165\u548c\u8f38\u51fa\uff1a a.exe&lt;in.in> out.out","title":"\u547d\u4ee4\u5217"},{"location":"tool/cmd/#command-line","text":"","title":"\u547d\u4ee4\u5217 (Command Line)"},{"location":"tool/cmd/#mingw","text":"\u8981\u5728\u96fb\u8166\u7de8\u8b6f C \u6216 C++ \u7684\u6a94\u6848\u9700\u5b89\u88dd MinGW \u8f09\u9ede\uff1a https://sourceforge.net/projects/mingw/ \u5176\u4ed6\u8a2d\u5b9a\u90fd\u4e0d\u7528\u6539\uff0c\u76f4\u5230\u9019\u908a\u9078 Mark All Upgrade \u518d\u9078 Apply Change","title":"MinGW"},{"location":"tool/cmd/#_1","text":"\u5c0d\u672c\u6a5f\u9ede\u53f3\u9375\u9078\u5167\u5bb9 \u9032\u968e\u7cfb\u7d71\u8a2d\u5b9a \u74b0\u5883\u8b8a\u6578 \u9ede\u958b\u7cfb\u7d71\u8b8a\u6578\u4e2d\u7684 PATH \u65b0\u589e C:\\MinGW\\bin \uff08\u9810\u8a2d\u5728\u9019\u500b path \u4e0b\uff09 \u6253\u958b cmd \u8f38\u5165 gcc --version \uff08\u6216 g++ --version ) \u6aa2\u67e5\u662f\u5426\u5b89\u88dd\u6210\u529f","title":"\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff1a"},{"location":"tool/cmd/#_2","text":"C: gcc*.c -o*.exe C++: g++*.cpp -o*.exe Note: -o \u662f\u8b93\u81ea\u5df1\u53ef\u4ee5\u9078\u64c7 exe \u6a94\u8981\u53eb\u4ec0\u9ebc\u540d\u5b57\uff0c\u4e0d\u7136\u9810\u8a2d\u90fd\u6703\u70ba a.exe","title":"\u683c\u5f0f"},{"location":"tool/cmd/#_3","text":"\u524d\u63d0\uff1a a.cpp \u5b58\u5728\u684c\u9762 \u6253\u958b cmd \u5230 a.cpp \u6a94\u6848\u8def\u5f91\uff1a cd C:\\\\Users\\\\User_name\\\\Desktop \uff08\u82e5\u5b58\u5728\u684c\u9762\u901a\u5e38\u6253\u958b cmd\uff0c\u53ef\u4ee5\u76f4\u63a5 cd Desktop ) \u7de8\u8b6f\uff1a g++ a.cpp -o a.exe \u57f7\u884c\uff1a a.exe \u8f38\u5165\u548c\u8f38\u51fa\uff1a a.exe&lt;in.in> out.out","title":"\u7bc4\u4f8b"},{"location":"tool/codeblocks/","text":"Code::Blocks \u8f09\u9ede\uff1a http://www.codeblocks.org/downloads \u5efa\u7acb c/cpp \u6a94 Create a new project Console application Select C/C++ \u8f38\u5165 Project title, \u9078\u60f3\u653e\u7684\u8def\u5f91 Finished \u9ede\u958b Sources, \u5373\u53ef\u627e\u5230 c/cpp \u6a94 \u5728\u525b\u525b\u9078\u64c7\u5b58\u653e\u7684\u8def\u5f91\u4e5f\u53ef\u4ee5\u627e\u5230 Project Folder \u5e38\u7528\u71b1\u9375 \u6307\u4ee4 \u529f\u80fd Ctrl + F9 \u7de8\u8b6f Ctrl + F10 \u904b\u884c\u4e0a\u6b21\u6210\u529f\u7de8\u8b6f\u7684\u6a94\u6848 F9 \u7de8\u8b6f\u4e26\u57f7\u884c\u6a94\u6848\uff08\u5982\u6709 Error \u5247\u6703\u5831\u932f\uff09 Shift + F2 \u95dc\u9589/\u958b\u555f\u5de6\u5074\u8cc7\u8a0a\u6b04","title":"Code::Blocks"},{"location":"tool/codeblocks/#codeblocks","text":"\u8f09\u9ede\uff1a http://www.codeblocks.org/downloads","title":"Code::Blocks"},{"location":"tool/codeblocks/#ccpp","text":"Create a new project Console application Select C/C++ \u8f38\u5165 Project title, \u9078\u60f3\u653e\u7684\u8def\u5f91 Finished \u9ede\u958b Sources, \u5373\u53ef\u627e\u5230 c/cpp \u6a94 \u5728\u525b\u525b\u9078\u64c7\u5b58\u653e\u7684\u8def\u5f91\u4e5f\u53ef\u4ee5\u627e\u5230 Project Folder","title":"\u5efa\u7acb c/cpp \u6a94"},{"location":"tool/codeblocks/#_1","text":"\u6307\u4ee4 \u529f\u80fd Ctrl + F9 \u7de8\u8b6f Ctrl + F10 \u904b\u884c\u4e0a\u6b21\u6210\u529f\u7de8\u8b6f\u7684\u6a94\u6848 F9 \u7de8\u8b6f\u4e26\u57f7\u884c\u6a94\u6848\uff08\u5982\u6709 Error \u5247\u6703\u5831\u932f\uff09 Shift + F2 \u95dc\u9589/\u958b\u555f\u5de6\u5074\u8cc7\u8a0a\u6b04","title":"\u5e38\u7528\u71b1\u9375"},{"location":"tool/makecodebook/","text":"\u88fd\u4f5c CodeBook \u9019\u662f\u4e00\u500b\u8d85\u7d1a\u61f6\u4eba\u5305\u5efa\u8b70\u4f60\u5b78\u7fd2 git \u7684\u64cd\u4f5c\u65b9\u6cd5 A. GitHub \u8a3b\u518a\u4e00\u500b github \u5e33\u865f https://github.com/ B. \u5efa\u7acb\u4f60\u7684\u5009\u5eab \u7bc4\u4f8b\u9801\u9762\uff1a https://github.com/HJackH/CodeBook-Sample \u6709\u5169\u7a2e\u65b9\u6cd5\uff08\u9078\u64c7\u4e00\u7a2e\u5c31\u53ef\u4ee5\uff09 fork import \u5148\u8907\u88fd\u7bc4\u4f8b\u9801\u9762 git \u7684\u9023\u7d50 \u9ede\u64ca Import repository \u8cbc\u4e0a\u525b\u525b\u8907\u88fd\u7684\u9023\u7d50 C. \u6253\u958b\u7db2\u9801\u7de8\u8f2f\u9801\u9762 (codespace) \u5982\u679c\u4f60\u6703\u4f7f\u7528 git\uff0c\u4e5f\u53ef\u4ee5 clone \b\b\b\u5230\u672c\u5730\u7de8\u8f2f \u5148\u5230\u525b\u525b\u4f60\u5efa\u7acb\u7684\u5009\u5eab \u9ede\u9375\u76e4\u4e0a\u7684 . \u6216\u662f\u6539\u8b8a\u7db2\u5740 \u539f\u672c\uff1a https://github.com/YOUR_NAME/mycodebook \u4fee\u6539\uff1a https://github.dev/YOUR_NAME/mycodebook D. \u5c07\u4f60\u7684\u7a0b\u5f0f\u78bc\u52a0\u5230 codebook \u4e2d \u5c07\u7a0b\u5f0f\u78bc\u5148\u653e\u5230\u8cc7\u6599\u593e\u4e2d \u53ef\u4ee5\u662f .cpp \uff08\u7a0b\u5f0f\u78bc\uff09\u3001 .tex (latex) \u6216\u5176\u4ed6\u6587\u5b57\u6a94\u6848 \u66f4\u6539 content.tex \u7a0b\u5f0f\u78bc\u6a94\u6848\u7528 lstinputisting latex \u6a94\u6848\u7528 input E. codebook.tex \u4e2d\u53ef\u8a2d\u5b9a\u7684\u5730\u65b9 \u4fee\u6539\u500b\u4eba\u3001\u968a\u4f0d\u8cc7\u8a0a \\fancyhead[C] \u662f\u4e2d\u9593\u7684\u6a19\u984c \\fancyhead[L] \u662f\u5de6\u908a\u7684\u6a19\u984c F. \u4e0a\u50b3\u5230 GitHub git add git commit \u53ef\u4ee5\u6253\u4e00\u4e9b commit \u8a0a\u606f\uff08\u4f8b\u5982\uff1aadd kruskal's algorithm) git push\uff08\u7db2\u9801\u7de8\u8f2f\u5668\u4e0d\u9700\u8981 push) G. \u67e5\u770b\u7d50\u679c \u7b49\u5f85 1 \u5206\u9418\u5de6\u53f3 \u5207\u63db\u5230 pdf branch","title":"\u88fd\u4f5c CodeBook"},{"location":"tool/makecodebook/#codebook","text":"\u9019\u662f\u4e00\u500b\u8d85\u7d1a\u61f6\u4eba\u5305\u5efa\u8b70\u4f60\u5b78\u7fd2 git \u7684\u64cd\u4f5c\u65b9\u6cd5","title":"\u88fd\u4f5c CodeBook"},{"location":"tool/makecodebook/#a-github","text":"\u8a3b\u518a\u4e00\u500b github \u5e33\u865f https://github.com/","title":"A. GitHub"},{"location":"tool/makecodebook/#b","text":"\u7bc4\u4f8b\u9801\u9762\uff1a https://github.com/HJackH/CodeBook-Sample \u6709\u5169\u7a2e\u65b9\u6cd5\uff08\u9078\u64c7\u4e00\u7a2e\u5c31\u53ef\u4ee5\uff09 fork import \u5148\u8907\u88fd\u7bc4\u4f8b\u9801\u9762 git \u7684\u9023\u7d50 \u9ede\u64ca Import repository \u8cbc\u4e0a\u525b\u525b\u8907\u88fd\u7684\u9023\u7d50","title":"B. \u5efa\u7acb\u4f60\u7684\u5009\u5eab"},{"location":"tool/makecodebook/#c-codespace","text":"\u5982\u679c\u4f60\u6703\u4f7f\u7528 git\uff0c\u4e5f\u53ef\u4ee5 clone \b\b\b\u5230\u672c\u5730\u7de8\u8f2f \u5148\u5230\u525b\u525b\u4f60\u5efa\u7acb\u7684\u5009\u5eab \u9ede\u9375\u76e4\u4e0a\u7684 . \u6216\u662f\u6539\u8b8a\u7db2\u5740 \u539f\u672c\uff1a https://github.com/YOUR_NAME/mycodebook \u4fee\u6539\uff1a https://github.dev/YOUR_NAME/mycodebook","title":"C. \u6253\u958b\u7db2\u9801\u7de8\u8f2f\u9801\u9762 (codespace)"},{"location":"tool/makecodebook/#d-codebook","text":"\u5c07\u7a0b\u5f0f\u78bc\u5148\u653e\u5230\u8cc7\u6599\u593e\u4e2d \u53ef\u4ee5\u662f .cpp \uff08\u7a0b\u5f0f\u78bc\uff09\u3001 .tex (latex) \u6216\u5176\u4ed6\u6587\u5b57\u6a94\u6848 \u66f4\u6539 content.tex \u7a0b\u5f0f\u78bc\u6a94\u6848\u7528 lstinputisting latex \u6a94\u6848\u7528 input","title":"D. \u5c07\u4f60\u7684\u7a0b\u5f0f\u78bc\u52a0\u5230 codebook \u4e2d"},{"location":"tool/makecodebook/#e-codebooktex","text":"\u4fee\u6539\u500b\u4eba\u3001\u968a\u4f0d\u8cc7\u8a0a \\fancyhead[C] \u662f\u4e2d\u9593\u7684\u6a19\u984c \\fancyhead[L] \u662f\u5de6\u908a\u7684\u6a19\u984c","title":"E. codebook.tex \u4e2d\u53ef\u8a2d\u5b9a\u7684\u5730\u65b9"},{"location":"tool/makecodebook/#f-github","text":"git add git commit \u53ef\u4ee5\u6253\u4e00\u4e9b commit \u8a0a\u606f\uff08\u4f8b\u5982\uff1aadd kruskal's algorithm) git push\uff08\u7db2\u9801\u7de8\u8f2f\u5668\u4e0d\u9700\u8981 push)","title":"F. \u4e0a\u50b3\u5230 GitHub"},{"location":"tool/makecodebook/#g","text":"\u7b49\u5f85 1 \u5206\u9418\u5de6\u53f3 \u5207\u63db\u5230 pdf branch","title":"G. \u67e5\u770b\u7d50\u679c"},{"location":"tool/pc2/","text":"\u5982\u4f55\u4f7f\u7528 PC^2 PC2 \u66fe\u662f\u8a31\u591a\u8cfd\u4e8b\u5305\u542b ICPC Final \u6240\u4f7f\u7528\u7684\u8a55\u6e2c\u7cfb\u7d71\uff0c\u73fe\u591a\u88ab Domjudge \u53d6\u4ee3\u3002 \u63d0\u4ea4 \u9078\u64c7\u984c\u76ee\u3001\u8a9e\u8a00\u3001\u7a0b\u5f0f\u78bc \u6e2c\u8a66 addititonal files \u6839\u672c\u6c92\u7528 \u9078\u64c7\u8981\u6e2c\u8a66\u7684\u7a0b\u5f0f\uff0c\u6309 Test \u9078\u64c7\u6e2c\u8a66 \u81ea\u88fd\u8f38\u5165\u6a94 \u67e5\u770b\u8f38\u51fa\u7d50\u679c \u67e5\u770b\u7d50\u679c \u9ede\u64ca View Runs","title":"PC2"},{"location":"tool/pc2/#pc2","text":"PC2 \u66fe\u662f\u8a31\u591a\u8cfd\u4e8b\u5305\u542b ICPC Final \u6240\u4f7f\u7528\u7684\u8a55\u6e2c\u7cfb\u7d71\uff0c\u73fe\u591a\u88ab Domjudge \u53d6\u4ee3\u3002","title":"\u5982\u4f55\u4f7f\u7528 PC^2"},{"location":"tool/pc2/#_1","text":"\u9078\u64c7\u984c\u76ee\u3001\u8a9e\u8a00\u3001\u7a0b\u5f0f\u78bc","title":"\u63d0\u4ea4"},{"location":"tool/pc2/#_2","text":"addititonal files \u6839\u672c\u6c92\u7528 \u9078\u64c7\u8981\u6e2c\u8a66\u7684\u7a0b\u5f0f\uff0c\u6309 Test \u9078\u64c7\u6e2c\u8a66 \u81ea\u88fd\u8f38\u5165\u6a94 \u67e5\u770b\u8f38\u51fa\u7d50\u679c","title":"\u6e2c\u8a66"},{"location":"tool/pc2/#_3","text":"\u9ede\u64ca View Runs","title":"\u67e5\u770b\u7d50\u679c"},{"location":"tool/resources/","text":"\u76f8\u95dc\u8cc7\u6e90 \u5728\u7dda\u8a55\u6e2c\u7cfb\u7d71 (Online Judge, OJ) \u5728\u7dda\u8a55\u91cf\u7cfb\u7d71\u63d0\u4f9b\u7df4\u7fd2\u8005\u5728\u5beb\u5b8c\u984c\u76ee\u5f8c\uff0c\u5373\u6642\u4e0a\u50b3\u4e26\u7372\u5f97\u7d50\u679c\u3002 Zerojudge \uff1a\u4e2d\u6587\uff0c\u6709\u5927\u91cf\u7c21\u55ae\u984c\u76ee\u3002 TIOJ \uff1a\u4e2d\u6587\uff0c\u984c\u76ee\u504f\u96e3\u3002 Atcoder \uff1a\u56fa\u5b9a\u9031\u672b\u665a\u4e0a\u6709\u6bd4\u8cfd\u3002 Atcoder Problem Codeforces \uff1a\u6709\u6bd4\u8cfd\u4f46\u6642\u9593\u4e0d\u56fa\u5b9a\u3002 Virtual Judge \uff1a\u63d0\u4f9b\u63d0\u4ea4\u7a0b\u5f0f\u78bc\u5230\u5404\u5927 OJ \u7684\u5e73\u53f0\u3002 Uva \uff1a\u6700\u53e4\u8001\u7684 OJ\uff0c\u6709 ICPC \u984c\u76ee\u3002 Algorithmist Uva toolkit UvaLive \uff1aICPC \u984c\u76ee\u3002 \u6d1b\u8c37 neoj \uff1a\u53f0\u5927\u8cc7\u8a0a\u4e4b\u82bd\u3002 \u5b78\u7fd2\u7db2\u7ad9 oi wiki \u8cc7\u8a0a\u4e4b\u82bd menyf openhome \uff1a\u7a0b\u5f0f\u8a9e\u8a00\u5b78\u7fd2\u3002 \u8996\u89ba\u5316\u5b78\u7fd2 visualgo U.S. Fencing Coaches Association Codebook \u53c3\u8003 Hrbust ACM Book \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab wiwiho soulmachine \u5176\u4ed6\u5de5\u5177 A2 \uff1a\u984c\u55ae\u6574\u7406\u3002 CS Academy - Graph tool CS Academy - Geometry tool CS Academy - Diff tool","title":"\u5b78\u7fd2\u8cc7\u6e90"},{"location":"tool/resources/#_1","text":"","title":"\u76f8\u95dc\u8cc7\u6e90"},{"location":"tool/resources/#online-judge-oj","text":"\u5728\u7dda\u8a55\u91cf\u7cfb\u7d71\u63d0\u4f9b\u7df4\u7fd2\u8005\u5728\u5beb\u5b8c\u984c\u76ee\u5f8c\uff0c\u5373\u6642\u4e0a\u50b3\u4e26\u7372\u5f97\u7d50\u679c\u3002 Zerojudge \uff1a\u4e2d\u6587\uff0c\u6709\u5927\u91cf\u7c21\u55ae\u984c\u76ee\u3002 TIOJ \uff1a\u4e2d\u6587\uff0c\u984c\u76ee\u504f\u96e3\u3002 Atcoder \uff1a\u56fa\u5b9a\u9031\u672b\u665a\u4e0a\u6709\u6bd4\u8cfd\u3002 Atcoder Problem Codeforces \uff1a\u6709\u6bd4\u8cfd\u4f46\u6642\u9593\u4e0d\u56fa\u5b9a\u3002 Virtual Judge \uff1a\u63d0\u4f9b\u63d0\u4ea4\u7a0b\u5f0f\u78bc\u5230\u5404\u5927 OJ \u7684\u5e73\u53f0\u3002 Uva \uff1a\u6700\u53e4\u8001\u7684 OJ\uff0c\u6709 ICPC \u984c\u76ee\u3002 Algorithmist Uva toolkit UvaLive \uff1aICPC \u984c\u76ee\u3002 \u6d1b\u8c37 neoj \uff1a\u53f0\u5927\u8cc7\u8a0a\u4e4b\u82bd\u3002","title":"\u5728\u7dda\u8a55\u6e2c\u7cfb\u7d71 (Online Judge, OJ)"},{"location":"tool/resources/#_2","text":"oi wiki \u8cc7\u8a0a\u4e4b\u82bd menyf openhome \uff1a\u7a0b\u5f0f\u8a9e\u8a00\u5b78\u7fd2\u3002","title":"\u5b78\u7fd2\u7db2\u7ad9"},{"location":"tool/resources/#_3","text":"visualgo U.S. Fencing Coaches Association","title":"\u8996\u89ba\u5316\u5b78\u7fd2"},{"location":"tool/resources/#codebook","text":"Hrbust ACM Book \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab wiwiho soulmachine","title":"Codebook \u53c3\u8003"},{"location":"tool/resources/#_4","text":"A2 \uff1a\u984c\u55ae\u6574\u7406\u3002 CS Academy - Graph tool CS Academy - Geometry tool CS Academy - Diff tool","title":"\u5176\u4ed6\u5de5\u5177"},{"location":"tool/sublimetext/","text":"Subblime Text 3 \u8f09\u9ede\uff1a https://www.sublimetext.com/ \u5e38\u7528\u7248\u9762\u914d\u7f6e View -> Layout -> Column: 2 View -> Groups -> New Group \u5e38\u7528\u71b1\u9375 \u6307\u4ee4 \u529f\u80fd Ctrl + X \u522a\u9664\u884c Ctrl + D \u9078\u53d6\u55ae\u5b57\uff08\u53ef\u91cd\u8907\u9078\u53d6\u76f8\u540c\u7684\uff09 Ctrl + Y \u56de\u5fa9\u4e0a\u4e00\u6b65 Ctrl + B \u7de8\u8b6f C/C++ Alt + F3 \u9078\u53d6\u6240\u6709\u5df2\u9078\u53d6\u7684\u55ae\u5b57 Ctrl + Shift + V \u8cbc\u4e0a\u4e26\u7b26\u5408\u7e2e\u6392 Ctrl + Shift + T \u9084\u539f\u6700\u5f8c\u95dc\u9589\u7684\u5206\u9801 Ctrl + Shift + P \u547d\u4ee4\u63d0\u793a\u7b26\uff08\u5305\u542b\u6240\u6709\u547d\u4ee4\uff09 \u7de8\u8b6f \u7528 Command Line \u7de8\u8b6f\uff08gcc/g++)","title":"Sublime Text"},{"location":"tool/sublimetext/#subblime-text-3","text":"\u8f09\u9ede\uff1a https://www.sublimetext.com/","title":"Subblime Text 3"},{"location":"tool/sublimetext/#_1","text":"View -> Layout -> Column: 2 View -> Groups -> New Group","title":"\u5e38\u7528\u7248\u9762\u914d\u7f6e"},{"location":"tool/sublimetext/#_2","text":"\u6307\u4ee4 \u529f\u80fd Ctrl + X \u522a\u9664\u884c Ctrl + D \u9078\u53d6\u55ae\u5b57\uff08\u53ef\u91cd\u8907\u9078\u53d6\u76f8\u540c\u7684\uff09 Ctrl + Y \u56de\u5fa9\u4e0a\u4e00\u6b65 Ctrl + B \u7de8\u8b6f C/C++ Alt + F3 \u9078\u53d6\u6240\u6709\u5df2\u9078\u53d6\u7684\u55ae\u5b57 Ctrl + Shift + V \u8cbc\u4e0a\u4e26\u7b26\u5408\u7e2e\u6392 Ctrl + Shift + T \u9084\u539f\u6700\u5f8c\u95dc\u9589\u7684\u5206\u9801 Ctrl + Shift + P \u547d\u4ee4\u63d0\u793a\u7b26\uff08\u5305\u542b\u6240\u6709\u547d\u4ee4\uff09","title":"\u5e38\u7528\u71b1\u9375"},{"location":"tool/sublimetext/#_3","text":"\u7528 Command Line \u7de8\u8b6f\uff08gcc/g++)","title":"\u7de8\u8b6f"},{"location":"tool/uva/","text":"UVa Online Judge UVa \u70ba\u7b2c\u4e00\u500b Online Judge\uff0c\u539f\u70ba\u897f\u73ed\u7259 UVa \u5927\u5b78\u71df\u904b\uff0c\u73fe\u5df2\u7368\u7acb\u51fa\u4f86\uff0c\u7db2\u7ad9\u540d\u7a31\u4e5f\u4e0d\u6703\u518d\u51fa\u73fe UVa \u5b57\u6a23\u3002 \u8a3b\u518a \u9996\u9801\u5de6\u908a\u6709\u500b login \u908a\u6b04\uff0c\u9ede\u64ca register \uff0c\u6703\u8df3\u8f49\u81f3\u8a3b\u518a\u9801\u9762\u3002 \u5404\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a name , Email , username , password , verify password \u5fc5\u586b\u3002 former UVa ID \uff1a\u5982\u679c\u4f60\u4e4b\u524d\u6709 UVa \u5e33\u865f\u53ef\u4ee5\u5408\u4f75\uff0c\u6c92\u6709\u8fa6\u904e\u5c31\u8df3\u904e\u3002 Result Email \uff1a\u770b\u8981\u4e0d\u8981\u628a\u4e0a\u50b3\u7684\u7d50\u679c\u5bc4\u5230\u4f60\u7684 email\u3002 Virtual judge \uff1a\u662f\u5426\u70ba\u4ee3\u7406\u7e73\u4ea4\u7a0b\u5f0f\u78bc\u7684\u5e33\u865f\uff0c\u4e0d\u8981\u52fe\u9078\u3002 \u627e\u984c\u76ee \u7528\u641c\u5c0b\u5f15\u64ce\u3002 \u4f7f\u7528 UHunt \u3002 \u9ede\u5de6\u908a\u908a\u6b04 Browse Problems \uff0c\u627e\u5c0b\u76f8\u5c0d\u61c9\u984c\u76ee\u3002 \u63d0\u4ea4\u984c\u76ee \u984c\u76ee\u9801\u9762\u53f3\u4e0a\u89d2\u6709 4 \u500b\u6309\u9215\uff0c\u6309 Submit \uff0c\u6703\u8df3\u8f49\u7e73\u4ea4\u9801\u9762\u3002 \u9078\u64c7\u8a9e\u8a00\uff0c\u7e73\u4ea4\u7a0b\u5f0f\u78bc\uff08\u8cbc\u4e0a\u7a0b\u5f0f\u78bc\u6216\u662f\u4e0a\u50b3\u6a94\u6848\uff09\uff0c\u6309 Submit \u3002 \u67e5\u770b\u7d50\u679c \u9ede\u5de6\u908a\u908a\u6b04 My Submissions \u9ede\u5de6\u908a\u908a\u6b04 My uHunt with Virtual Contest Service \uff08\u5efa\u8b70\uff09 uDebug \u5728\u984c\u76ee\u9801\u9762\u6709\u9846 Debug \u6309\u9215\uff0c\u6709\u4eba\u6703\u63d0\u4f9b Debug \u7684\u6e2c\u8cc7\uff0c\u7d55\u5927\u90e8\u5206\u90fd\u662f\u53ef\u7528\u7684\uff0c\u57fa\u672c\u4e0a\u770b\u6309\u8b9a\u7684\u4eba\u6578 > 0 \u5c31\u80fd\u4f7f\u7528","title":"UVa Judge"},{"location":"tool/uva/#uva-online-judge","text":"UVa \u70ba\u7b2c\u4e00\u500b Online Judge\uff0c\u539f\u70ba\u897f\u73ed\u7259 UVa \u5927\u5b78\u71df\u904b\uff0c\u73fe\u5df2\u7368\u7acb\u51fa\u4f86\uff0c\u7db2\u7ad9\u540d\u7a31\u4e5f\u4e0d\u6703\u518d\u51fa\u73fe UVa \u5b57\u6a23\u3002","title":"UVa Online Judge"},{"location":"tool/uva/#_1","text":"\u9996\u9801\u5de6\u908a\u6709\u500b login \u908a\u6b04\uff0c\u9ede\u64ca register \uff0c\u6703\u8df3\u8f49\u81f3\u8a3b\u518a\u9801\u9762\u3002 \u5404\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a name , Email , username , password , verify password \u5fc5\u586b\u3002 former UVa ID \uff1a\u5982\u679c\u4f60\u4e4b\u524d\u6709 UVa \u5e33\u865f\u53ef\u4ee5\u5408\u4f75\uff0c\u6c92\u6709\u8fa6\u904e\u5c31\u8df3\u904e\u3002 Result Email \uff1a\u770b\u8981\u4e0d\u8981\u628a\u4e0a\u50b3\u7684\u7d50\u679c\u5bc4\u5230\u4f60\u7684 email\u3002 Virtual judge \uff1a\u662f\u5426\u70ba\u4ee3\u7406\u7e73\u4ea4\u7a0b\u5f0f\u78bc\u7684\u5e33\u865f\uff0c\u4e0d\u8981\u52fe\u9078\u3002","title":"\u8a3b\u518a"},{"location":"tool/uva/#_2","text":"\u7528\u641c\u5c0b\u5f15\u64ce\u3002 \u4f7f\u7528 UHunt \u3002 \u9ede\u5de6\u908a\u908a\u6b04 Browse Problems \uff0c\u627e\u5c0b\u76f8\u5c0d\u61c9\u984c\u76ee\u3002","title":"\u627e\u984c\u76ee"},{"location":"tool/uva/#_3","text":"\u984c\u76ee\u9801\u9762\u53f3\u4e0a\u89d2\u6709 4 \u500b\u6309\u9215\uff0c\u6309 Submit \uff0c\u6703\u8df3\u8f49\u7e73\u4ea4\u9801\u9762\u3002 \u9078\u64c7\u8a9e\u8a00\uff0c\u7e73\u4ea4\u7a0b\u5f0f\u78bc\uff08\u8cbc\u4e0a\u7a0b\u5f0f\u78bc\u6216\u662f\u4e0a\u50b3\u6a94\u6848\uff09\uff0c\u6309 Submit \u3002","title":"\u63d0\u4ea4\u984c\u76ee"},{"location":"tool/uva/#_4","text":"\u9ede\u5de6\u908a\u908a\u6b04 My Submissions \u9ede\u5de6\u908a\u908a\u6b04 My uHunt with Virtual Contest Service \uff08\u5efa\u8b70\uff09","title":"\u67e5\u770b\u7d50\u679c"},{"location":"tool/uva/#udebug","text":"\u5728\u984c\u76ee\u9801\u9762\u6709\u9846 Debug \u6309\u9215\uff0c\u6709\u4eba\u6703\u63d0\u4f9b Debug \u7684\u6e2c\u8cc7\uff0c\u7d55\u5927\u90e8\u5206\u90fd\u662f\u53ef\u7528\u7684\uff0c\u57fa\u672c\u4e0a\u770b\u6309\u8b9a\u7684\u4eba\u6578 > 0 \u5c31\u80fd\u4f7f\u7528","title":"uDebug"},{"location":"tool/vscode/","text":"Visual Studio Code \u8f09\u9ede\uff1a https://code.visualstudio.com/ C/C++ Extension \u5167\u5efa\u7d42\u7aef\u6a5f \u547c\u53eb\u7d42\u7aef\u6a5f\uff1aCtrl +` \u9810\u8a2d\u662f powershell\uff0c\u5efa\u8b70\u8abf\u6210 cmd \u9078 Command Prompt \u6309 + \u6253\u958b\u5373\u662f cmd \u5e38\u7528\u71b1\u9375 \u6307\u4ee4 \u529f\u80fd Ctrl + X \u522a\u9664\u884c Ctrl + D \u9078\u53d6\u55ae\u5b57\uff08\u53ef\u91cd\u8907\u9078\u53d6\u76f8\u540c\u7684\uff09 Ctrl + Y \u56de\u5fa9\u4e0a\u4e00\u6b65 Shift + Alt + F \u81ea\u52d5\u6392\u7248 \u7de8\u8b6f \u7528 Command Line \u7de8\u8b6f\uff08gcc/g++)","title":"VS Code"},{"location":"tool/vscode/#visual-studio-code","text":"\u8f09\u9ede\uff1a https://code.visualstudio.com/ C/C++ Extension","title":"Visual Studio Code"},{"location":"tool/vscode/#_1","text":"\u547c\u53eb\u7d42\u7aef\u6a5f\uff1aCtrl +` \u9810\u8a2d\u662f powershell\uff0c\u5efa\u8b70\u8abf\u6210 cmd \u9078 Command Prompt \u6309 + \u6253\u958b\u5373\u662f cmd","title":"\u5167\u5efa\u7d42\u7aef\u6a5f"},{"location":"tool/vscode/#_2","text":"\u6307\u4ee4 \u529f\u80fd Ctrl + X \u522a\u9664\u884c Ctrl + D \u9078\u53d6\u55ae\u5b57\uff08\u53ef\u91cd\u8907\u9078\u53d6\u76f8\u540c\u7684\uff09 Ctrl + Y \u56de\u5fa9\u4e0a\u4e00\u6b65 Shift + Alt + F \u81ea\u52d5\u6392\u7248","title":"\u5e38\u7528\u71b1\u9375"},{"location":"tool/vscode/#_3","text":"\u7528 Command Line \u7de8\u8b6f\uff08gcc/g++)","title":"\u7de8\u8b6f"}]}