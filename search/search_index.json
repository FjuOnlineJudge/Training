{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b61\u8fce\u4f86\u5230 FJCU CPC \u8a13\u7df4\u7db2","text":"<p>\u672c\u7db2\u7ad9\u7528\u65bc\u8f14\u4ec1\u5927\u5b78\u6821\u5167\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u57f9\u8a13\u8b1b\u7fa9\u5b58\u653e\u8655\u3002 \u539f\u8b1b\u7fa9 \u7528 Tex \u5beb\uff0c\u5f8c\u611f\u53d7\u5230\u7dad\u8b77\u4e4b\u56f0\u96e3\uff0c\u53c3\u8003\u4e86 OI Wiki \uff0c\u5229\u7528 mkdocs \u5efa\u7acb\u4e00\u500b\u958b\u653e\u81ea\u7531\u7de8\u8f2f\u7684\u7db2\u7ad9\u3002</p> <p>\u76ee\u524d\u5df2\u5c07\u539f\u8b1b\u7fa9\u5927\u90e8\u5206\u5167\u5bb9\u642c\u81f3\u65bc\u6b64\uff0c\u73fe\u5728\u81f4\u529b\u65bc\u5de5\u5177\u7bc7\u548c\u8a9e\u6cd5\u7bc7\u7684\u64b0\u5beb\u3002</p> <p>\u672c\u7db2\u7ad9\u53d7\u5230 OI Wiki \u555f\u767c\uff0c\u53c3\u8003\u4e86 github repo \u5efa\u7acb\uff0c\u5728\u6b64\u611f\u8b1d\u3002</p> <p>\u672c\u7db2\u7ad9\u5167\u5bb9\u591a\u6578\u53c3\u8003\u677f\u4e2d\u8b1b\u7fa9\u3001\u5efa\u4e2d\u8b1b\u7fa9\u3001\u53ca\u6821\u5167\u6691\u8a13\u8b1b\u7fa9\u5167\u5bb9\uff0c\u5728\u6b64\u611f\u8b1d\u3002</p>"},{"location":"algorithm/binarylifting/","title":"\u500d\u589e","text":"<p>\u628a\u7dda\u6027\u67e5\u8a62\u7684\u6642\u9593\u8907\u96dc\u5ea6\u512a\u5316\u5230\u5c0d\u6578\u7b49\u7d1a\u3002</p>"},{"location":"algorithm/binarylifting/#_2","title":"\u6b65\u9a5f","text":"<p>\u5047\u8a2d\u5e8f\u5217\u9577\u5ea6 \uff0c \u4ee3\u8868  \u7d93\u904e  \u8f49\u63db\u7684\u7d50\u679c\u3002\u7b2c\u4e00\u7dad\u5927\u5c0f \uff0c\u7b2c\u4e8c\u7dad\u5927\u5c0f \u3002</p> <ul> <li>\u521d\u59cb\u5316\uff1a\u7b97\u51fa\u6240\u6709 \u3002</li> <li>\u52d5\u614b\u898f\u5283\uff1a\u7b97\u51fa\u6240\u6709 \u3002</li> <li>\u4e8c\u5206\u641c\u67e5\u8a62\uff1a\u5229\u7528  \u7684\u7d50\u679c\u7b97\u51fa\u7b54\u6848\u3002</li> </ul>"},{"location":"algorithm/binarylifting/#atcoder-regular-contest-060-c","title":"AtCoder Regular Contest 060 C","text":"AtCoder Regular Contest 060 C - Tak and Hotels <p>  \u865f\u65c5\u9928\u4f4d\u7f6e\u70ba \uff0c\uff0c\u4e00\u5929\u53ef\u4ee5\u8d70  \u55ae\u4f4d\uff0c\u554f\u5f9e  \u865f\u65c5\u9928\u8d70\u5230  \u865f\u65c5\u9928\u8981\u5e7e\u5929\u3002</p> <p>\u4ee4  \u5f9e\u65c5\u9928  \u8d70  \u5929\u6700\u9060\u53ef\u4ee5\u8d70\u5230\u5e7e\u865f\u65c5\u9928\uff0c\u5148\u7528\u4e8c\u5206\u641c\u6c42\u51fa\u5f9e\u6bcf\u5bb6\u65c5\u9928\u8d70  \u5929\u6700\u9060\u53ef\u4ee5\u8d70\u5230\u5e7e\u865f\u65c5\u9928\uff0c\u63a5\u8457\u7528\u52d5\u614b\u898f\u5283\u7b97\u51fa\u5176\u4ed6\u7b54\u6848\uff0c\u5728\u67e5\u8a62\u7684\u6642\u5019\uff0c\u4e8c\u5206\u641c\u627e\u5230  \u6700\u591a\u8d70\u5e7e\u5929\u4f9d\u7136\u4e0d\u6703\u5230 \uff0c\u9019\u6a23\u6bd4\u8d77\u76f4\u63a5\u627e  \u8d70\u5230  \u8981\u82b1\u5e7e\u5929\u6bd4\u8f03\u5bb9\u6613\uff0c\u6700\u5f8c\u628a\u7d50\u679c  \u5c31\u662f\u7b54\u6848\u3002</p> <pre><code>const int LOG = 20;\n\nint main()\n{\nint n, L, q;\ncin &gt;&gt; n;\nvector&lt;int&gt; a(n);\nvector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(LOG));\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; a[i];\ncin &gt;&gt; L &gt;&gt; q;\nfor (int i = 0; i &lt; n; ++i)\n{\ndp[i][0] = lower_bound(a.begin(), a.end(), a[i] + L) - a.begin();\nif (dp[i][0] == n || a[i] + L &lt; a[dp[i][0]])\ndp[i][0] -= 1;\n}\nfor (int i = 1; i &lt; LOG; ++i)\nfor (int j = 0; j &lt; n; ++j)\ndp[j][i] = dp[dp[j][i - 1]][i - 1];\nwhile (q--)\n{\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\n--a;\n--b;\nif (a &gt; b)\nswap(a, b);\nint ans = 0;\nfor (int i = LOG - 1; i &gt;= 0; --i)\nif (dp[a][i] &lt; b)\n{\nans += (1 &lt;&lt; i);\na = dp[a][i];\n}\ncout &lt;&lt; ans + 1 &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/binarylifting/#codeforces-1175e","title":"Codeforces 1175E","text":"Codeforces 1175E - Minimal Segment Cover <p>\u7d66\u5b9a  \u500b\u5340\u9593  \u548c  \u7b46\u8a62\u554f\uff0c\u8a62\u554f\u81f3\u5c11\u8981\u591a\u5c11\u5340\u9593\u624d\u80fd\u8986\u84cb \u3002</p> <p>\u4ee4 \uff1a\u5f9e  \u958b\u59cb\u7d93\u904e\u5e7e\u500b  \u5340\u9593\u80fd\u62b5\u9054\u7684\u6700\u5927\u53f3\u754c\uff0c \u70ba\u5305\u542b  \u7684\u6240\u6709\u5340\u9593\u6700\u5927\u7684\u53f3\u754c\uff0c\u5728\u5be6\u4f5c\u4e0a\u6703\u5206\u6210\u5de6\u754c  \u548c\u5de6\u754c  \u5206\u958b\u8655\u88e1\uff0c\u5148\u8655\u7406\u5de6\u754c  \u7684\u60c5\u6cc1\uff1a\uff1b\u518d\u8655\u7406\u5de6\u754c  \u7684\u60c5\u6cc1\uff0c\u4e5f\u5c31\u662f \uff0c\u9019\u88e1\u7528\u5230\u524d\u7db4\u7684\u6280\u5de7\uff1a\u3002</p> <p>\u4e8c\u5206\u641c\u7684\u90e8\u5206\u6703\u641c\u5c0b  \u6700\u591a\u7d93\u904e\u5e7e\u500b\u5340\u9593\u4f9d\u7136\u4e0d\u6703\u5230\u9054 \u3002</p>"},{"location":"algorithm/binarylifting/#_3","title":"\u61c9\u7528","text":"<ul> <li>Sparse Table</li> <li>\u6700\u4f4e\u5171\u540c\u7956\u5148</li> <li>\u5feb\u901f\u51aa</li> </ul>"},{"location":"algorithm/binarysearch/","title":"\u4e8c\u5206\u641c","text":"<p>\u5c0d\u65bc\u4e00\u500b\u51fd\u6578  \uff0c\u5982\u679c\u5b58\u5728\u4e00\u500b \uff0c\u5c0d\u65bc\u6240\u6709  \u7684 \uff0c  true (false)\uff0c\u53cd\u4e4b  false(true)\uff0c\u57fa\u65bc\u9019\u6a23\u7684\u55ae\u8abf\u6027\uff0c\u5c31\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u627e\u5c0b \u3002\u6bcf\u6b21\u8dcc\u4ee3\u6703\u6839\u64da\u76ee\u524d\u908a\u754c\u4e2d\u9593\u503c\u7684\u7d50\u679c\uff0c\u6c7a\u5b9a\u4e0b\u6b21\u641c\u5c0b\u7bc4\u570d\u70ba\u5de6\u534a\u90e8\u5206\u6216\u53f3\u534a\u90e8\u5206\u3002</p>"},{"location":"algorithm/binarysearch/#_2","title":"\u641c\u5c0b\u7bc4\u570d\u66f4\u65b0","text":"<p>\u4e0b\u6587\u6703\u4ecb\u7d39\u5169\u7a2e\u7bc4\u570d\u66f4\u65b0\u7684\u6280\u5de7\u3002</p> <p>  \u8f38\u51fa\u6709 True \u548c False \u5169\u7a2e\u7d50\u679c\uff0c \u6709\u5169\u7a2e\u5206\u5e03\u60c5\u6cc1\uff1a</p> <ul> <li>\u60c5\u6cc1 1\uff1aTrue \u90fd\u5728 False \u7684\u5de6\u908a\uff0c\u8981\u627e\u6700\u53f3\u908a\u7684 True<ul> <li>True, True, True, True, False, False</li> </ul> </li> <li>\u60c5\u6cc1 2\uff1aTrue \u90fd\u5728 False \u7684\u53f3\u908a\uff0c\u8981\u627e\u6700\u5de6\u908a\u7684 True<ul> <li>False, False, True, True, True, True</li> </ul> </li> </ul> <p>\u7d00\u9304\u641c\u5c0b\u7bc4\u570d\u5de6\u53f3\u754c\uff1a \u548c  \u70ba\u76ee\u524d\u7d00\u9304\u641c\u5c0b\u7bc4\u570d\u5de6\u53f3\u754c\uff0c\u60c5\u6cc1 1 \u8981\u6ce8\u610f\u7121\u9650\u8ff4\u5708\u7684\u554f\u984c\uff0c\u89e3\u6c7a\u8fa6\u6cd5\u5982\u7a0b\u5f0f\u78bc\u6240\u793a\u3002</p> <pre><code>// \u60c5\u6cc1 1\nT binary_search()\n{\nint L = 1, R = n;\nwhile(L &lt; R - 1) // \u907f\u514d\u7121\u9650\u8ff4\u5708\n{\nint M = (L + R) &gt;&gt; 1;\nif(f(M))L = M;\nelse R = M - 1;\n}\nif(L == r - 1 &amp;&amp; f(R)) ++L;\nif(!f(L))return -1;\nreturn L;\n}\n\n// \u60c5\u6cc1 2\nT binary_search()\n{\nint L = 1, R = n;\nwhile(L &lt; R)\n{\nint M = (L + R) &gt;&gt; 1;\nif(f(M))R = M;\nelse L = M + 1;\n}\nif(L == n &amp;&amp; !f(L))return -1;\nreturn L;\n}\n</code></pre> <p>\u7d00\u9304 True \u548c False \u6700\u5f8c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e<sup>1</sup>\uff1a\u4ee4  \u548c  \u70ba True \u548c False \u6700\u5f8c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e\uff0c\u9019\u7a2e\u8fa6\u6cd5\u7684\u512a\u52e2\u5728\u65bc\u5169\u7a2e\u60c5\u6cc1\u53ea\u5dee\u5728\u521d\u59cb\u5316\uff0c\u8f03\u4e0d\u5bb9\u6613\u6253\u932f\u3002</p> <pre><code>// \u60c5\u6cc1 1\nT binary_search()\n{\nint ok = 1, ng = n;\nwhile(abs(ok - ng) &gt; 1)\n{\nint M = (ok + ng) &gt;&gt; 1;\nif(f(M))ok = M;\nelse ng = M;\n}\n}\n\n// \u60c5\u6cc1 2\nT binary_search()\n{\nint ok = n, ng = 1;\nwhile(abs(ok - ng) &gt; 1)\n{\nint M = (ok + ng) &gt;&gt; 1;\nif(f(M))ok = M;\nelse ng = M;\n}\n}\n</code></pre>"},{"location":"algorithm/binarysearch/#_3","title":"\u6ce8\u610f\u4e8b\u9805","text":"<p>\u4e8c\u5206\u641c\u8981\u6ce8\u610f\u5169\u4ef6\u4e8b\uff0c\u4e00\u500b\u662f\u7121\u9650\u8ff4\u5708\uff0c\u5728\u300c\u7d00\u9304\u641c\u5c0b\u7bc4\u570d\u5de6\u53f3\u754c\u300d\u90e8\u5206\u6709\u63d0\u5230\u3002\u4e00\u500b\u662f\u5728\u5be6\u6578\u4e2d\u4e8c\u5206\u641c\uff0c\u56e0\u70ba\u5be6\u6578\u7684\u7a20\u5bc6\u6027\uff0c\u984c\u76ee\u6703\u6709\u8aa4\u5dee\u5bb9\u5fcd\u503c\uff08\u4f8b\u5982  )\uff0c\u53ea\u8981\u5728\u8aa4\u5dee\u5167\u90fd\u662f\u5bb9\u8a31\u7684\uff0c\u5728\u5be6\u4f5c\u6642\u6703\u8a2d\u4e00\u500b\u6578\u5b57  \u4e26\u4f7f  \u6216 \u3002</p>"},{"location":"algorithm/binarysearch/#_4","title":"\u6709\u5e8f\u5e8f\u5217\u4e8c\u5206\u641c","text":"<p>\u5c0d\u6392\u5217\u597d\u7684\u5e8f\u5217\uff0c\u53ef\u76f4\u63a5\u4f7f\u7528 <code>lower_bound</code> \u548c <code>upper_bound</code>\u3002</p> <pre><code>lower_bound(a, a + n, k);     //\u6700\u5de6\u908a \u2265 k \u7684\u4f4d\u7f6e\nupper_bound(a, a + n, k);     //\u6700\u5de6\u908a &gt; k \u7684\u4f4d\u7f6e\nupper_bound(a, a + n, k) - 1; //\u6700\u53f3\u908a \u2264 k \u7684\u4f4d\u7f6e\nlower_bound(a, a + n, k) - 1; //\u6700\u53f3\u908a &lt; k \u7684\u4f4d\u7f6e\n[lower_bound, upper_bound) //\u7b49\u65bc k \u7684\u7bc4\u570d\nequal_range(a, a+n, k);\n</code></pre> UVa 10474 - Where is the Marble? <p>\u7d66\u5b9a\u4e00\u7d44\u6578\u5b57\uff0c\u5148\u5c07\u5b83\u5011\u6392\u5e8f\u5f8c\uff0c\u8a62\u554f\u6578\u5b57 \uff0c\u5728\u7b2c\u5e7e\u500b\u4f4d\u7f6e\u3002</p> <p>\u4e8c\u5206\u641c\u57fa\u672c\u7df4\u7fd2\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define N 10010\n\nint main()\n{\nint t = 0, n, q;\nvector&lt;int&gt; a(N);\nwhile (cin &gt;&gt; n &gt;&gt; q, n)\n{\ncout &lt;&lt; \"CASE# \" &lt;&lt; ++t &lt;&lt; \":\\n\";\nfor (int i = 0; i &lt; n; i++)\ncin &gt;&gt; a[i];\nsort(a.begin(), a.begin() + n);\nfor (int j = 1, x; j &lt;= q; j++)\n{\ncin &gt;&gt; x;\nauto it = lower_bound(a.begin(), a.begin() + n, x);\nif (it == a.begin() + n || *it != x)\ncout &lt;&lt; x &lt;&lt; \" not found\\n\";\nelse\ncout &lt;&lt; x &lt;&lt; \" found at \" &lt;&lt; it - a.begin() + 1 &lt;&lt; '\\n';\n}\n}\n}\n</code></pre> UVa 11057 - Exact Sum <p>\u7d66\u5b9a\u4e00\u7d44\u6578\u5b57\uff0c\u627e\u51fa\u5169\u500b\u6578\u5b57\uff0c\u6578\u5b57\u548c\u70ba \uff0c\u5982\u679c\u6709\u591a\u7d44\u89e3\uff0c\u8f38\u51fa\u5dee\u8ddd\u6700\u5c0f\u7684\u4e00\u7d44\u3002</p> <p>\u5148\u5c0d\u5e8f\u5217\u6392\u5e8f\uff0c\u679a\u8209\u6bcf\u500b\u6578\u5b57 \uff0c\u5229\u7528\u4e8c\u5206\u641c\u5224\u65b7\u662f\u5426\u5b58\u5728 \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>\n</code></pre>"},{"location":"algorithm/binarysearch/#_5","title":"\u5c0d\u7b54\u6848\u4e8c\u5206\u641c","text":"<p>\u6709\u4e9b\u984c\u76ee\u70ba \"\u6700\u591a/\u6700\u5c11\u70ba\u4f55\u6703\u6210\u7acb\"\uff0c\u90a3\u9ebc\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u826f\u597d\u7684\u6642\u9593\u6aa2\u67e5\u51fa \" \u5982\u679c\u4ee3\u50f9\u662f  \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \"\uff0c\u4e26\u4e14  \u5177\u6709\u55ae\u8abf\u6027\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u8f49\u63db\u6210 \"  \u5982\u679c\u4ee3\u50f9\u662f  \uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u9054\u6210\u76ee\u6a19 \"\uff0c\u5c0d\u7b54\u6848\uff08\uff09\u9032\u884c\u4e8c\u5206\u641c\u3002</p> UVa 12032 - The Monkey and the Oiled Bamboo <p>\u4e00\u958b\u59cb\u4f4d\u7f6e\u5728 \uff0c\u4f9d\u5e8f\u62b5\u9054\u5ea7\u6a19 \uff0c\u627e\u51fa\u6700\u5c0f\u7684  \u6eff\u8db3\uff1a\u6bcf\u4e00\u6b21\u6700\u591a\u53ea\u80fd\u524d\u9032  \u6b65\uff0c\u5982\u679c\u9019\u6b21\u524d\u9032  \u6b65\uff0c\u4e4b\u5f8c\u6700\u591a\u53ea\u80fd\u524d\u9032  \u6b65\uff0c\u4ee5\u6b64\u985e\u63a8\u3002</p> <p>\u4e8c\u5206\u641c\u7b54\u6848 \uff0c \u4ee3\u8868\u4e00\u958b\u59cb  \u662f\u5426\u53ef\u4ee5\u984c\u76ee\u8981\u6c42\uff0c\u5229\u7528\u984c\u76ee\u6558\u8ff0\u5be6\u73fe \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int n;\nvector&lt;int&gt; v(MXN);\n\nbool f(int k)\n{\nfor (int i = 1; i &lt;= n; ++i)\n{\nif (v[i] - v[i - 1] &gt; k)\nreturn false;\nif (v[i] - v[i - 1] == k)\n--k;\n}\nreturn true;\n}\n\nint main()\n{\nint t;\ncin &gt;&gt; t;\nv[0] = 0;\nfor (int ti = 1; ti &lt;= t; ++ti)\n{\ncin &gt;&gt; n;\nfor (int i = 1; i &lt;= n; ++i)\ncin &gt;&gt; v[i];\nint L = 1, R = v[n], ans = 0;\nwhile (L &lt;= R)\n{\nint M = (L + R) &gt;&gt; 1;\nif (f(M))\n{\nans = M;\nR = M - 1;\n}\nelse\nL = M + 1;\n}\ncout &lt;&lt; \"Case \" &lt;&lt; ti &lt;&lt; \": \" &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre> UVa 11413 - Fill the Containers <p>\u7d66\u5b9a  \u500b\u6578\u5b57 \uff0c\u8981\u628a\u5b83\u5207\u5272\u6210  \u7d44\u6578\u5b57\uff0c\u7b2c  \u7d44\u6578\u5b57\u548c\u70ba \uff0c\u5207\u5272\u6210\u672c \uff0c\u8acb\u6c42\u51fa\u6700\u5c0f\u7684 \u3002</p> <p>\u9019\u984c\u8a2d  \u70ba\u6210\u672c\u662f\u5426\u53ef\u4ee5 \uff0c \u7684\u5224\u65b7\u65b9\u6cd5\u70ba\uff1a\u5f9e\u982d\u958b\u59cb\u53d6\u6578\u5b57\uff0c\u6bcf\u4e00\u7d44\u76e1\u53ef\u80fd\u7d2f\u7a4d\u5230 \uff0c\u53d6\u5b8c  \u7d44\u5f8c\uff0c\u770b\u662f\u5426\u9084\u6709\u6578\u5b57\u672a\u53d6\u5230\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>vector&lt;long long&gt; v(MXN);\nint n, m;\n\nbool f(long long x)\n{\nint idx = 0;\nfor (int i = 0; i &lt; m; ++i)\n{\nlong long cur = 0;\nwhile (idx &lt; n &amp;&amp; cur + v[idx] &lt;= x)\n{\ncur += v[idx];\n++idx;\n}\n}\nreturn idx == n;\n}\n\nint main()\n{\nwhile (cin &gt;&gt; n &gt;&gt; m)\n{\nlong long sum = 0;\nfor (int i = 0; i &lt; n; ++i)\n{\ncin &gt;&gt; v[i];\nsum += v[i];\n}\nlong long L = 0, R = sum, ans = 0;\nwhile (L &lt;= R)\n{\nint M = (L + R) &gt;&gt; 1;\nif (f(M))\n{\nR = M - 1;\nans = M;\n}\nelse\nL = M + 1;\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre> UVa 12190 - Electric Bill <p>\u7d66\u5b9a\u96fb\u529b\u50f9\u683c\u8868\uff0c\u4f60\u548c\u4f60\u7684\u9130\u5c45\u5408\u4f75\u8a08\u7b97\u96fb\u8cbb\u70ba  \u5143\uff0c\u5206\u958b\u8a08\u7b97\u7684\u5dee\u984d\u70ba  \u5143\uff0c\u8acb\u554f\u5982\u679c\u5206\u958b\u8a08\u7b97\u7684\u60c5\u6cc1\u4e0b\uff0c\u4f60\u7684\u96fb\u8cbb\u70ba\u4f55(\u4f60\u7684\u96fb\u8cbb\u6bd4\u8f03\u4fbf\u5b9c)?</p> <p>\u8a2d  \u8a08\u7b97\u4f7f\u7528  \u5ea6\u96fb\u7684\u96fb\u8cbb\uff0c\u5148\u7528\u4e8c\u5206\u641c\u627e\u51fa\u5169\u500b\u4eba\u7e3d\u5171\u4f7f\u7528\u7684\u96fb\u91cf \uff0c\u63a5\u8457\u4e8c\u5206\u641c\u4f60\u7684\u96fb\u91cf \uff0c\u6709\u4ee5\u4e0b\u4e09\u7a2e\u60c5\u6cc1\uff1a</p> <ul> <li>\u5982\u679c \uff0c\u8f38\u51fa  </li> <li>\u5982\u679c \uff0c </li> <li>\u5426\u5247  </li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>long long bill(long long x)\n{\nif (x &lt; 100)\nreturn 2 * x;\nif (x &lt; 10000)\nreturn 3 * (x - 100) + 200;\nif (x &lt; 1000000)\nreturn 5 * (x - 10000) + 29900;\nelse\nreturn 7 * (x - 1000000) + 4979900;\n}\n\nint main()\n{\nIOS;\nint a, b;\nwhile (cin &gt;&gt; a &gt;&gt; b, a || b)\n{\nlong long tot = 0;\nlong long L = 0, R = 1000000000;\nwhile (L &lt;= R)\n{\nlong long M = (L + R) &gt;&gt; 1;\nlong long res = bill(M);\nif (res == a)\n{\ntot = M;\nbreak;\n}\nif (res &lt; a)\nL = M + 1;\nelse\nR = M - 1;\n}\nL = 0;\nR = tot;\nwhile (L &lt;= R)\n{\nlong long M = (L + R) &gt;&gt; 1;\nlong long res = bill(tot - M) - bill(M);\nif (res == b)\n{\ncout &lt;&lt; bill(M) &lt;&lt; '\\n';\nbreak;\n}\nif (res &lt; b)\nR = M - 1;\nelse\nL = M + 1;\n}\n}\n}\n</code></pre>"},{"location":"algorithm/binarysearch/#_6","title":"\u6700\u5c0f\u74f6\u9838\u6a39","text":"\u6700\u5c0f\u74f6\u9838\u6a39 <p>\u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u4e00\u9846\u751f\u6210\u6a39\uff0c\u6a39\u7684\u6700\u5927\u908a\u6b0a\u503c\u6700\u5c0f\u3002</p> <p>\u679a\u8209\u6700\u5927\u908a\u6b0a\u503c  \uff0c\u7528 DFS/BFS \u6aa2\u67e5  \u7684\u908a\u662f\u5426\u53ef\u4ee5\u5c07\u6240\u6709\u9ede\u76f8\u9023\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u6700\u5927\u908a\u6b0a\u503c\u6703  \uff0c\u5426\u5247\u6703  \u3002</p>"},{"location":"algorithm/binarysearch/#_7","title":"\u4e09\u5206\u641c","text":"<p>\u5c0d\u65bc\u51f8\u51fd\u6578\uff08\u4f8b\u5982  )\uff0c\u6211\u5011\u60f3\u8981\u627e\u5c0b\u5176\u6975\u503c\uff0c\u610f\u8b02\u5176\u5de6\u53f3\u5169\u5074\u7686\u5404\u81ea\u905e\u589e/\u905e\u6e1b\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e09\u5206\u641c\u4f86\u89e3\u6c7a\uff08\u4e8c\u5206\u641c\u53ea\u80fd\u89e3\u6c7a\u5168\u9ad4\u55ae\u8abf\u6027\uff0c\u4e0d\u80fd\u89e3\u6c7a\u6709\u5169\u908a\u7684\uff09\u3002 \u8003\u616e\u4e09\u5206\u5f8c\u5f9e\u5de6\u5230\u53f3\u56db\u500b\u63a1\u6a23\u9ede\u7684\u95dc\u4fc2\uff1a</p> <ul> <li> <p></p> </li> <li> <p>  \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a</p> </li> <li>  \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a</li> <li>  \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a</li> <li>  \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a</li> </ul> <p>\u9019\u6bb5\u63cf\u6558\u9084\u53ef\u4ee5\u518d\u7c21\u5316\uff1a</p> <ul> <li>  \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u53f3\u908a</li> <li>  \uff0c\u6b64\u6642\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u5728\u6700\u5de6\u908a</li> </ul> <p>\u6bcf\u6b21\u8fed\u4ee3\u5148\u6c42\u51fa  \u7684\u503c\uff0c\u518d\u5229\u7528\u7c21\u5316\u904e\u7684\u898f\u5247\uff0c\u4f7f\u5340\u9593\u6e1b\u5c11  \u3002\u4ee4  \u70ba\u8aa4\u5dee\u5bb9\u5fcd\u503c\uff0c\u4e00\u958b\u59cb\u7684\u7bc4\u570d\u70ba  \uff0c\u8ff4\u5708\u5927\u7d04\u9700\u8fed\u4ee3  \u6b21\uff08  \u5927\u7d04\u70ba  )\u3002</p> <pre><code>const double EPS = 1e\u22127;\ndouble trinary_search(double L, double R)\n{\nwhile (R - L &gt; EPS)\n{\ndouble mL = (L + L + R) / 3, mR = (L + R + R) / 3;\nif (f(mR) &gt; f(mL))\nR = mR;\nelse\nL = mL;\n}\nreturn L;\n}\n</code></pre> <p>\u53e6\u5916\u4e00\u7a2e\u505a\u6cd5\uff0c\u6703\u56fa\u5b9a\u8ff4\u5708\u8fed\u4ee3\u6b21\u6578\u3002</p> <pre><code>double trinary_search(double L, double R)\n{\nfor (int i = 0; i &lt; 300; ++i)\n{\ndouble mL = (L + L + R) / 3, mR = (L + R + R) / 3;\nif (f(mR) &gt; f(mL))\nR = mR;\nelse\nL = mL;\n}\nreturn L;\n}\n</code></pre> UVa 01476 - Error Curves <p>\u7d66\u5b9a  \u500b\u958b\u53e3\u5411\u4e0a\u7684\u4e8c\u6b21\u66f2\u7dda \uff0c\u4ee4 \uff0c\u6c42  \u7684\u6700\u5c0f\u503c\u3002</p> <p>\u591a\u500b\u4e8c\u6b21\u51fd\u6578\u53d6\u6700\u5927\u503c\u7684\u7d50\u679c\u9084\u662f\u4e00\u500b\u4e8c\u6b21\u51fd\u6578\uff0c\u5229\u7528\u4e09\u5206\u641c\u641c\u5c0b\u6975\u503c\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int n;\ndouble a[MXN], b[MXN], c[MXN];\n\ndouble f(double x)\n{\ndouble ret = a[0] * x * x + b[0] * x + c[0];\nFOR(i, 1, n) ret = max(ret, a[i] * x * x + b[i] * x + c[i]);\nreturn ret;\n}\n\ndouble trinary_search(double L, double R)\n{\nfor (int i = 0; i &lt; 300; ++i)\n{\ndouble mL = (L + L + R) / 3, mR = (L + R + R) / 3;\nif (f(mR) &gt; f(mL))\nR = mR;\nelse\nL = mL;\n}\nreturn L;\n}\n\nint main()\n{\nint t;\ncin &gt;&gt; t;\nwhile (t--)\n{\ncin &gt;&gt; n;\nFOR(i, 0, n) cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];\ncout &lt;&lt; fixed &lt;&lt; setprecision(4) &lt;&lt; f(trinary_search(0.0, 1000.0)) &lt;&lt; '\\n';\n}\n}\n</code></pre> UVa 10385 - Duathlon <p>\u4eca\u5929\u6709  \u500b\u4eba\u8981\u53c3\u52a0\u9435\u4eba\u4e8c\u9805\uff0c\u6709\u8dd1\u6b65\u548c\u9a0e\u8173\u8e0f\u8eca\uff0c\u7e3d\u9577  \u516c\u91cc\uff0c\u7b2c  \u4f4d\u53c3\u8cfd\u8005\u8cc4\u8cc2\u4e3b\u8fa6\u65b9\uff0c\u60f3\u8981\u5f97\u5230\u7b2c\u4e00\u540d\uff0c\u4e3b\u8fa6\u65b9\u77e5\u9053\u6bcf\u500b\u4eba\u8dd1\u6b65\u548c\u9a0e\u8173\u8e0f\u8eca\u7684\u901f\u5ea6 \uff0c\u4e26\u4e14\u53ef\u4ee5\u96a8\u610f\u6c7a\u5b9a\u8dd1\u6b65\u548c\u9a0e\u8173\u8e0f\u8eca\u7684\u8ddd\u96e2\uff0c\u6c42\u7b2c  \u4f4d\u53c3\u8cfd\u8005\u662f\u5426\u80fd\u7372\u5f97\u7b2c\u4e00\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u8f38\u51fa\u9818\u5148\u7b2c\u4e8c\u540d\u7684\u79d2\u6578\u548c\u4e3b\u8fa6\u65b9\u8a2d\u5b9a\u8dd1\u6b65\u548c\u9a0e\u8173\u8e0f\u8eca\u7684\u8ddd\u96e2\u3002</p> <p>\u8a2d\u8dd1\u6b65  \u516c\u91cc\uff0c\u90a3\u9ebc\u9a0e\u8173\u8e0f\u8eca  \u516c\u91cc\uff0c\u7b2c  \u4f4d\u53c3\u8cfd\u8005\u8981\u82b1\u8cbb \uff0c\u524d  \u4f4d\u53c3\u8cfd\u8005\u82b1\u8cbb\u6642\u9593\u53d6\u6700\u5c0f\u503c\uff0c\u518d\u6e1b\u53bb\u7b2c  \u4f4d\u53c3\u8cfd\u8005\u7684\u6642\u9593\uff0c\u6703\u662f\u4e00\u500b\u51f8\u51fd\u6578(\u53ef\u4ee5\u53c3\u8003\u9019\u7bc7\u6587\u7ae0)\uff0c\u540c\u6a23\u4e5f\u80fd\u7528\u4e09\u5206\u641c\u627e\u51fa\u6975\u503c</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int n;\ndouble L;\ndouble vr[MXN], vk[MXN];\n\ndouble f(double r)\n{\ndouble t = r / vr[n - 1] + (L - r) / vk[n - 1];\ndouble ret = r / vr[0] + (L - r) / vk[0];\nfor(int i = 1; i &lt; n - 1; ++i) ret = min(ret, r / vr[i] + (L - r) / vk[i]);\nreturn ret - t;\n}\n\ndouble trinary_search(double L, double R) // find max\n{\nfor (int i = 0; i &lt; 300; ++i)\n{\ndouble mL = (L + L + R) / 3, mR = (L + R + R) / 3;\nif (f(mL) &gt; f(mR))\nR = mR;\nelse\nL = mL;\n}\nreturn L;\n}\n\nint main()\n{\nwhile (cin &gt;&gt; L &gt;&gt; n)\n{\nfor(int i = 0; i &lt; n; ++i) cin &gt;&gt; vr[i] &gt;&gt; vk[i];\ndouble ansL = trinary_search(0.0, L);\ndouble ansT = f(ansL);\nif (ansT &lt; 0.00)\nprintf(\"The cheater cannot win.\\n\");\nelse\nprintf(\"The cheater can win by %.0lf seconds with r = %.2lfkm and \"\n\"k = %.2lfkm.\\n\",\nansT * 3600.0, ansL, L - ansL);\n}\n}\n</code></pre>"},{"location":"algorithm/binarysearch/#_8","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li> <p>\u6700\u5c0f\u74f6\u9838\u6a39</p> <ul> <li>UVa 01395 - Slim Span </li> </ul> </li> <li></li> </ul> <ol> <li> <p>Twitter \u4e0a\u7684\u5716\u7247\u8aaa\u660e \u21a9</p> </li> </ol>"},{"location":"algorithm/complexity/","title":"\u8907\u96dc\u5ea6","text":"<p>\u8907\u96dc\u5ea6\u662f\u5b9a\u6027\u63cf\u8ff0\u8a72\u6f14\u7b97\u6cd5\u57f7\u884c\u6210\u672c\uff08\u6642\u9593/\u7a7a\u9593\uff09\u51fd\u5f0f\uff0c\u7528\u4f86\u5206\u6790\u6f14\u7b97\u6cd5\u7684\u6548\u7387\u3002</p>"},{"location":"algorithm/complexity/#_2","title":"\u5e38\u7528\u51fd\u6578","text":"<ul> <li>Big  \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0a\u754c\uff0c\u5b9a\u7fa9\u70ba  \u6709  \uff0c\u4f8b\u5982  \uff0c\u6211\u5011\u6703\u6ce8\u91cd\u6700\u9ad8\u9805  \uff0c\u4e14\u6211\u5011\u6703 5 \u662f\u5e38\u6578\uff0c\u5f97\u51fa  </li> <li>Big  \u7528\u4f86\u8868\u793a\u4e00\u500b\u8907\u96dc\u5ea6\u7684\u4e0b\u754c\uff0c\u5c0d\u65bc\u4efb\u610f\u7684  , \u90fd\u6709  \u3002</li> <li>Big  \u8981\u540c\u6642\u6eff\u8db3 Big  \u548c Big  </li> </ul> <p>Big  \u662f\u6211\u5011\u6bd4\u8f03\u5e38\u7528\u7684\uff0c\u5176\u4ed6\u5169\u500b\u53ef\u80fd\u518d\u4e00\u4e9b\u5730\u65b9\u6703\u7528\u5230</p>"},{"location":"algorithm/complexity/#_3","title":"\u5e38\u898b\u8907\u96dc\u5ea6","text":"<p>  \u53e6\u5916\u9084\u6709\u4e00\u500b\u5728\u4e26\u67e5\u96c6\u5e38\u898b\uff0c\u5373  \uff0c\u8fd1\u4f3c\u65bc  \uff0c\u53ef\u76f4\u63a5\u7576\u4f5c  </p>"},{"location":"algorithm/complexity/#_4","title":"\u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6","text":"<ul> <li>\u6642\u9593\u8907\u96dc\u5ea6\uff1a\u548c\u904b\u7b97\u6709\u95dc\uff0c <code>*%</code> \u6703\u6bd4 <code>+-</code> \u9084\u8981\u4e45\uff0c\u800c\u8907\u96dc\u5ea6\u5f97\u9805\u6b21\u6703\u8ddf\u8ff4\u5708\u6709\u95dc\uff0c\u521d\u968e\u7af6\u8cfd\u53ea\u6703\u5728\u610f\u4f60\u7684\u9805\u6b21\uff0c\u53ea\u8981\u4e0d\u8981\u592a\u5927\u57fa\u672c\u90fd\u6703\u904e\uff0c\u9032\u968e\u4e9b\u6bd4\u8cfd\uff0c\u6709\u53ef\u80fd\u51fa\u73fe\u5e38\u6578\u904e\u5927\uff0c\u5c0e\u81f4\u8907\u96dc\u5ea6\u5408\u7406\u537b\u9084\u662f\u5403 TLE \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u9700\u8981\u5229\u7528 \"\u58d3\u5e38\u6578\" \u6280\u5de7\uff0c\u964d\u4f4e\u6642\u9593\uff0c\u8b93\u7a0b\u5f0f AC\u3002</li> <li>\u7a7a\u9593\u8907\u96dc\u5ea6\uff1a\u5247\u662f\u8ddf\u4f60\u5ba3\u544a\u7684\u8b8a\u6578\u8a18\u61b6\u9ad4\u7e3d\u548c\u6709\u95dc\uff0c\u6bd4\u6642\u9593\u8907\u96dc\u5ea6\u5bb9\u6613\u4f30\u8a08\uff0c\u5728\u6a39\u72c0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5f80\u5f80\u9700\u8981\u642d\u914d\u52d5\u614b\u8a18\u61b6\u9ad4\uff0c\u624d\u4e0d\u6703\u56e0\u70ba\u958b\u592a\u591a\u7a7a\u9593\u800c\u5403\u4e86 MLE\u3002</li> </ul> <p>\u984c\u5916\u8a71\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684 array \u4e0d\u662f\u958b\u5728\u5168\u57df\u5167\uff0c\u958b\u4e86 10 \u7684 5,6 \u6b21\uff0c\u5728\u57f7\u884c\u6642\u8dd1\u51fa RE\uff0c\u90a3\u4f60\u6709\u4ee5\u4e0b\u5169\u7a2e\u89e3\u6c7a\u65b9\u5f0f</p> <ul> <li>\u628a array \u79fb\u81f3\u5168\u57df</li> <li>\u52a0\u4e0a static\uff0c\u8868\u793a\u975c\u614b\u8b8a\u6578</li> </ul>"},{"location":"algorithm/divideandconquer/","title":"\u5206\u6cbb","text":"<p>\u5206\u6cbb\u6cd5\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u5b50\u554f\u984c\uff08\u5206\uff09\uff0c\u89e3\u6c7a\u5b8c\u518d\u5408\u4f75\u56de\u539f\u672c\u7684\u554f\u984c\uff08\u6cbb\uff09\u3002\\\u5206\u6cbb\u5206\u6210\u4ee5\u4e0b\u6b65\u9a5f</p> <ul> <li>\u5207\u5272\uff1a\u628a\u4e00\u500b\u554f\u984c\u5207\u6210\u5b50\u554f\u984c\u7136\u5f8c\u905e\u8ff4</li> <li>\u7d42\u6b62\u689d\u4ef6\uff1a\u505c\u6b62\u5207\u5272\uff0c\u7b97\u51fa\u7b54\u6848\u56de\u50b3\u3002</li> <li>\u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5b50\u554f\u984c\u7b97\u51fa\u7b54\u6848\u7136\u5f8c\u56de\u50b3</li> </ul>"},{"location":"algorithm/divideandconquer/#_2","title":"\u5408\u4f75\u6392\u5e8f\u6cd5","text":"<ul> <li>\u5207\u5272\uff1a\u628a\u5e8f\u5217\u5206\u6210\u5169\u534a\u7136\u5f8c\u905e\u8ff4\u3002</li> <li>\u7d42\u6b62\u689d\u4ef6\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3\u3002</li> <li>\u5408\u4f75\uff1a\u5229\u7528\u50b3\u56de\u4f86\u7684\u5169\u5e8f\u5217\uff08\u5de6\u5e8f\u5217\u3001\u53f3\u5e8f\u5217\uff09\u9032\u884c\u6392\u5e8f\u3002\u5408\u4f75\u7684\u65b9\u6cd5\u70ba\u6bd4\u8f03\u5169\u5e8f\u5217\u6700\u5de6\u908a\u7684\u5143\u7d20\uff0c\u8f03\u5c0f\u7684\u5143\u7d20\u6392\u5728\u524d\u982d\uff0c\u8981\u7279\u5225\u6ce8\u610f\u67d0\u500b\u5e8f\u5217\u70ba\u7a7a\u7684\u60c5\u6cc1\u3002       \u5be6\u4f5c\u6642\u9700\u591a\u958b\u4e00\u500b\u9663\u5217\u66ab\u5b58\uff0c\u958b\u5169\u500b\u6574\u6578  \u5206\u5225\u7dad\u8b77\u5de6\u53f3\u5e8f\u5217\u76ee\u524d\u6bd4\u8f03\u7684\u4f4d\u7f6e\u3002</li> </ul> <p>\u5408\u4f75\u6392\u5e8f\u6cd5\u662f\u7a69\u5b9a\u7684\u6f14\u7b97\u6cd5\uff0c\u6703\u905e\u8ff4  \u5c64\uff0c\u5408\u4f75\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> <pre><code>using namespace std;\nconst int N = 100;\nint arr[N], buf[N];\nvoid sol(int L, int R)\n{ // [L,R)\nif (R - L &lt;= 1)\nreturn;\nint M = (R + L) / 2;\nsol(L, M);\nsol(M, R);\nint i = L, j = M, k = L;\nwhile (i &lt; M || j &lt; R)\n{\nif (i &gt;= M)\nbuf[k] = arr[j++];\nelse if (j &gt;= R)\nbuf[k] = arr[i++];\nelse\n{\nif (arr[i] &lt;= arr[j])\nbuf[k] = arr[i++];\nelse\n{\nbuf[k] = arr[j++];\n}\n}\nk++;\n}\nfor (int k = L; k &lt; R; k++)\narr[k] = buf[k];\nreturn;\n}\n</code></pre>"},{"location":"algorithm/divideandconquer/#_3","title":"\u9006\u5e8f\u6578\u5c0d","text":"\u9006\u5e8f\u6578\u5c0d <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217\uff0c\u6c42\u6709\u5e7e\u7d44\u6578\u5c0d  \u6eff\u8db3  \u4e14  \u3002</p> <p>\u9019\u984c\u6211\u5011\u53ef\u4ee5\u8f49\u63db\u6210\uff0c\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217  \uff0c\u5728\u53ea\u80fd\u5c07\u76f8\u9130\u4f4d\u7f6e\u4ea4\u63db\u7684\u60c5\u6cc1\u4e0b\uff0c\u9700\u8981\u63db\u5e7e\u6b21\u624d\u80fd\u5c07\u5e8f\u5217\u5f9e\u5c0f\u6392\u5230\u5927\u3002</p> <p>\u4ea4\u63db\u6b21\u6578\u53ef\u4ee5\u5728\u5408\u4f75\u6392\u5e8f\u6cd5\u7684\u300c\u5408\u4f75\u300d\u7a0b\u5f0f\u78bc\u4e2d\u8a08\u7b97\uff0c\u53ea\u8981\u53f3\u5e8f\u5217\u6709\u5143\u7d20\u5c0f\u65bc\u524d\u9762\u7684\u5143\u7d20\uff0c\u5c31\u6703\u5f62\u6210\u9006\u5e8f\u6578\u5c0d\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7bc4\u4f8b\u7a0b\u5f0f\u78bc <code>arr[i]&gt;arr[j]</code> \u7684\u60c5\u6cc1\uff0c\u9019\u6642\u5019\u6bcf\u4e00\u500b\u5de6\u5e8f\u5217\u5c1a\u672a\u6392\u5e8f\u5b8c\u7562\u7684\u5143\u7d20\uff0c\u90fd\u6703\u548c <code>arr[j]</code> \u5f62\u6210\u9006\u5e8f\u6578\u5c0d\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n#define L 500010\nint arr[L], buf[L];\n\nlong long sol(int left, int right)\n{\nif (right - left &lt;= 1)\nreturn 0;\nint middle = (right + left) / 2;\nlong long ans = sol(left, middle) + sol(middle, right);\nint i = left, j = middle, k = left;\nwhile (i &lt; middle || j &lt; right)\n{\nif (i &gt;= middle)\nbuf[k] = arr[j++];\nelse if (j &gt;= right)\nbuf[k] = arr[i++];\nelse\n{\nif (arr[i] &lt;= arr[j])\nbuf[k] = arr[i++];\nelse\n{\nbuf[k] = arr[j++];\nans += middle - i;\n}\n}\nk++;\n}\nfor (int k = left; k &lt; right; k++)\narr[k] = buf[k];\nreturn ans;\n}\n\nint main()\n{\nint n;\nwhile (cin &gt;&gt; n, n)\n{\nmemset(arr, 0, sizeof(arr));\nmemset(buf, 0, sizeof(buf));\nfor (int i = 0; i &lt; n; i++)\ncin &gt;&gt; arr[i];\ncout &lt;&lt; sol(0, n) &lt;&lt; endl;\n}\n}\n</code></pre> UVa 10810 - Ultra-QuickSort <p>\u7d66\u5b9a\u5e8f\u5217 \uff0c\u6c42\u4f7f\u7528\u6ce1\u6cab\u6392\u5e8f\u6cd5\u9700\u8981\u4ea4\u63db\u7684\u6b21\u6578\uff0c\u6ce1\u6cab\u6392\u5e8f\u6cd5\u6703\u5f9e\u5de6\u5230\u53f3\u6bd4\u8f03\u76f8\u9130\u5169\u6578\uff0c\u5982\u679c\u5de6\u908a\u7684\u6578\u8f03\u5927\u5c31\u4ea4\u63db\u5169\u6578\u3002</p> <p>\u4e00\u500b\u6578\u5b57  \u6703\u8ddf\u6240\u6709\u5728  \u53f3\u908a\uff0c\u4e14\u5c0f\u65bc  \u7684\u6578\u5b57\u4ea4\u63db\u4f4d\u7f6e\uff0c\u63db\u53e5\u8a71\u8aaa\uff0c\u5c31\u662f\u548c  \u5f62\u6210\u9006\u5e8f\u6578\u5c0d\u7684\u6578\u5b57\uff0c\u6240\u4ee5\u9019\u984c\u8981\u6c42\u7684\u662f\u9006\u5e8f\u6578\u5c0d\u7684\u6578\u91cf\u3002</p> UVa 11495 - Bubbles and Buckets <p>\u7d66\u5b9a\u5e8f\u5217 \uff0c\u5169\u500b\u8f2a\u6d41\u4ea4\u63db\u5169\u500b\u76f8\u9130\u6578\u5b57(\u5de6\u908a\u6578\u5b57\u5fc5\u9808\u5927\u65bc\u53f3\u908a\u624d\u53ef\u4ea4\u63db)\uff0c\u8b93\u5e8f\u5217\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u4eba\u7372\u52dd\uff0c\u8acb\u554f\u7372\u52dd\u7684\u662f\u5148\u624b\u9084\u662f\u5f8c\u624b?</p> <p>\u540c\u6a23\u6c42\u9006\u5e8f\u6578\u5c0d\u7684\u6578\u91cf\uff0c\u5947\u6578\u5148\u624b\u52dd\uff0c\u5076\u6578\u5f8c\u624b\u52dd\u3002</p>"},{"location":"algorithm/divideandconquer/#_4","title":"\u5feb\u901f\u6392\u5e8f\u6cd5","text":"<ul> <li>\u5207\u5272\uff1a\u9078\u5b9a\u4e00\u500b\u57fa\u6e96\u9ede  \uff0c\u5c07\u5176\u4ed6\u6578\u5b57\u5206\u6210\u5169\u5806\uff0c  \u7684\u6578\u5b57\u6392\u5728  \u524d\u9762\uff0c  \u7684\u6578\u5b57\u6392\u653e\u5728  \u7684\u5f8c\u9762\uff0c\u5206\u5806\u5b8c\u6210\uff0c\u518d\u5206\u5225\u905e\u8ff4\u6392\u5e8f\u5169\u5806\u3002</li> <li>\u7d42\u6b62\u689d\u4ef6\uff1a\u76f4\u5230\u5e8f\u5217\u9577\u5ea6\u70ba 1\uff0c\u9019\u6642\u5019\u5df2\u70ba\u4e00\u500b\u6392\u597d\u7684\u5e8f\u5217\uff0c\u76f4\u63a5\u56de\u50b3\u3002</li> <li>\u5408\u4f75\uff1a\u5df2\u7d93\u6392\u597d\u9806\u5e8f\uff0c\u4e0d\u9700\u8981\u984d\u5916\u7684\u5408\u4f75\u52d5\u4f5c\u3002</li> </ul> <p>\u5feb\u901f\u6392\u5e8f\u6cd5\u662f\u4e00\u7a2e\u4e0d\u7a69\u5b9a\u7684\u6f14\u7b97\u6cd5\uff0c\u6700\u597d\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u6700\u5dee\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p>"},{"location":"algorithm/divideandconquer/#_5","title":"\u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d","text":"\u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d <p>\u7d66\u5b9a\u4e8c\u7dad\u5e73\u9762\u4e0a\u7684  \u500b\u9ede\uff0c\u8981\u627e\u51fa\u8ddd\u96e2\u6700\u8fd1\u7684\u5169\u500b\u9ede\u3002</p> <p>\u4e00\u958b\u59cb\u5148\u5c07\u9ede\u4f9d  \u5ea7\u6a19\u6392\u5e8f\u3002</p> <ul> <li>\u5207\u5272\uff1a\u5c07\u9ede\u5206\u6210\u4e00\u534a\uff0c\u5206\u5225\u905e\u8ff4\u3002</li> <li>\u7d42\u6b62\u689d\u4ef6\uff1a\u9ede\u6578  \uff0c\u7528\u5169\u5c64\u8ff4\u5708\u627e\u51fa\u6700\u8fd1\u9ede\u5c0d\u3002</li> <li>\u5408\u4f75\uff1a<ul> <li>\u8a2d\u76ee\u524d\u6700\u5c0f\u7684\u9ede\u5c0d\u8ddd\u96e2\u70ba  \u3002</li> <li>\u5de6\u908a\u9ede\u96c6  \uff0c\u53f3\u908a\u9ede\u96c6\u70ba  \u3002</li> <li>\u5169\u9ede\u96c6\u7684\u4e2d\u9ede\u70ba  \u3002</li> <li>\u8a2d\u9ede\u96c6  </li> <li>\u9996\u5148\u627e\u51fa  \uff0c\u56e0\u70ba\u8981\u627e\u5230\u6bd4  \u627e\u7684\u9ede\u5c0d\u6703\u5728  \u88e1\uff0c\u63a5\u8457\u628a  \u88e1\u7684\u9ede\u5c0d  \u5ea7\u6a19\u6392\u5e8f\u3002\u63a5\u8457\u5c07\u6bcf\u500b\u9ede\u548c\u6bd4\u81ea\u5df1\u7684  \u5ea7\u6a19\u5927\u7684\u9ede\u53d6\u8ddd\u96e2\uff0c\u5982\u679c\u6709  \u5c31\u66f4\u65b0\u503c\uff0c\u5982\u679c\u9047\u5230\u8ddf\u81ea\u5df1\u7684  \u5ea7\u6a19\u76f8\u5dee\u8d85\u904e  \u7684\u9ede\u5c31\u505c\u6b62\u6bd4\u8f03\uff08\u4e0d\u53ef\u80fd\u8ddd\u96e2\u6703  )\u3002</li> </ul> </li> </ul> <p>\u5408\u4f75\u7684\u7b97\u6cd5\u770b\u4f3c\u662f  \uff0c\u4f46\u5be6\u969b\u4e0a\u53ea\u6703\u5217\u8209  \u500b\u9ede\u5de6\u53f3\uff08\u9019\u65b9\u9762\u5f85\u8b49\u5be6\u6b63\u78ba\u500b\u6578\uff0c\u5728\u6b64\u53ea\u8981\u77e5\u9053\u662f\u4e00\u500b\u5f88\u5c0f\u7684\u6578\uff09\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\nusing dvt = double;\nconst dvt INF = 1e20;\nconst int MXN = 1e5 + 5;\nstruct dot\n{\ndvt x, y;\n} p[MXN], tmp[MXN];\n\nbool cmpX(dot a, dot b) { return a.x &lt; b.x; }\nbool cmpY(dot a, dot b) { return a.y &lt; b.y; }\n\ndvt getDis(dot a, dot b)\n{\nreturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\ndvt nearestPair(int L, int R)\n{\nif (L == R)\n{\nreturn INF;\n}\nif (L + 1 == R)\n{\nreturn getDis(p[L], p[R]);\n}\nint M = (L + R) &gt;&gt; 1;\ndvt d = min(nearestPair(L, M), nearestPair(M, R));\nint k = 0;\nfor (int i = L; i &lt;= R; ++i)\n{\nif (fabs(p[i].x - p[M].x) &lt;= d)\n{\ntmp[k++] = p[i];\n}\n}\nsort(tmp, tmp + k, cmpY);\nfor (int i = 0; i &lt; k; ++i)\n{\nfor (int j = i + 1; j &lt; k &amp;&amp; tmp[j].y - tmp[i].y &lt; d; ++j)\n{\ndouble d2 = getDis(tmp[i], tmp[j]);\nd = min(d, d2);\n}\n}\nreturn d;\n}\n\nint main()\n{\nint n;\nscanf(\"%d\", &amp;n);\nfor (int i = 0; i &lt; n; ++i)\n{\nscanf(\"%lf%lf\", &amp;p[i].x, &amp;p[i].y);\n}\nsort(p, p + n, cmpX);\ndvt res = nearestPair(0, n - 1);\nprintf(\"%.2lf\\n\", res);\n}\n</code></pre>"},{"location":"algorithm/divideandconquer/#_6","title":"\u76f8\u95dc\u984c\u76ee","text":"UVA 1608\uff1aNon-boring sequences <p>\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217  \uff0c\u5224\u65b7\u4f7f\u5426\u6bcf\u4e00\u500b\u9023\u7e8c\u7684\u5b50\u5e8f\u5217\uff0c\u90fd\u6709\u4e00\u500b\u6578\u5b57\uff0c\u53ea\u5728\u8a72\u5b50\u5e8f\u5217\u51fa\u73fe\u4e00\u6b21\u3002</p> <p>\u53ea\u8981\u5728\u5e8f\u5217  \u4e2d\u627e\u5230\u4e00\u500b\u7b26\u5408\u7684\u6578\u5b57  \uff0c\u90a3\u9ebc\u6240\u6709\u5728  \u5230  \u4e4b\u9593\uff0c\u5305\u542b  \u7684\u9023\u7e8c\u5b50\u5e8f\u5217\u90fd\u7b26\u5408\uff0c\u63a5\u8457\u518d\u5224\u65b7  \u548c  \u5169\u500b\u5b50\u5e8f\u5217\u662f\u5426\u7b26\u5408\u5373\u53ef\u3002</p> <p>\u6b64\u5916\u5982\u679c  \u53ea\u5f9e\u4e00\u7aef\u958b\u59cb\u627e\uff0c\u6700\u5dee\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u70ba\u4e86\u907f\u514d\u8d85\u6642\uff0c\u5f9e\u5169\u7aef\u958b\u59cb\u627e\uff0c\u6700\u5dee\u7684\u60c5\u6cc1\u5c31\u662f\u6bcf\u6b21\u90fd\u525b\u597d\u5728\u4e2d\u9593\u627e\u5230  \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\nconst int N = 200005;\nint a[N], L[N], R[N];\n\nbool sol(int a, int b)\n{\nif (a &gt;= b)\nreturn 1;\nfor (int i = 0; i &lt;= (b - a) / 2; i++)\n{\nif (L[a + i] &lt; a &amp;&amp; b &lt; R[a + i])\n{\nreturn sol(a, a + i - 1) &amp;&amp; sol(a + i + 1, b);\n}\nif (L[b - i] &lt; a &amp;&amp; b &lt; R[b - i])\n{\nreturn sol(a, b - i - 1) &amp;&amp; sol(b - i + 1, b);\n}\n}\nreturn 0;\n}\nint main()\n{\nint t, n;\nmap&lt;int, int&gt; tb;\ncin &gt;&gt; t;\nwhile (t--)\n{\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++)\n{\ncin &gt;&gt; a[i];\n}\ntb.clear();\nfor (int i = 0; i &lt; n; i++)\n{\nif (tb.find(a[i]) == tb.end())\n{\nL[i] = -1;\n}\nelse\n{\nL[i] = tb[a[i]];\n}\ntb[a[i]] = i;\n}\ntb.clear();\nfor (int i = n - 1; i &gt;= 0; i--)\n{\nif (tb.find(a[i]) == tb.end())\n{\nR[i] = n;\n}\nelse\n{\nR[i] = tb[a[i]];\n}\ntb[a[i]] = i;\n}\ncout &lt;&lt; (sol(0, n - 1) ? \"non-boring\\n\" : \"boring\\n\");\n}\n}\n</code></pre> Codefocdes 1490D - Permutation Transformation <p>\u7d66\u5b9a\u4e00\u7d44 permutation \uff0c\u8981\u5c07\u9019\u500b\u6392\u5217\u8f49\u6210\u4e00\u9846\u4e8c\u5143\u6a39\uff0c\u4f5c\u6cd5\u70ba\uff1a - \u5c07\u6700\u5927\u7684\u6578\u5b57\u7576\u6210\u6839\uff0c\u8a72\u6578\u5b57\u5de6\u53f3\u5169\u908a\u7684\u6578\u5217\uff0c\u5206\u5225\u7576\u6210\u5de6\u53f3\u5b50\u6a39\u3002 - \u5b50\u6a39\u4f9d\u76f8\u540c\u65b9\u5f0f\u5efa\u69cb\u3002</p> <p>\u8acb\u554f\u5728\u8f49\u5316\u6210\u4e8c\u5143\u6a39\u5f8c\uff0c\u6bcf\u4e00\u500b\u6578\u5b57\u7684\u6df1\u5ea6\u70ba\u4f55?</p> <p>\u5927\u5c0f\u6700\u591a\u70ba \uff0c\u7528\u905e\u8ff4\u89e3\u7684\u6642\u9593\u8907\u96dc\u5ea6  \u4e0d\u6703\u8d85\u904e\u6642\u9650\u7684\u3002\u641c\u5c0b\u4e00\u500b\u5340\u9593 \uff0c\u627e\u5230\u6700\u5927\u7684\u6578\u5b57 \uff0c\u66f4\u65b0\u4ed6\u7684\u6df1\u5ea6\uff0c\u7e7c\u7e8c\u905e\u8ff4  \u548c \u3002</p>"},{"location":"algorithm/divideandconquer/#_7","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u4e8c\u7dad\u5e73\u9762\u4e0a\u6700\u8fd1\u9ede\u5c0d<ul> <li>UVa 10245 - The Closest Pair Problem </li> </ul> </li> </ul> <ol> <li> <p>\u8a08\u7b97\u5e7e\u4f55 \u5e73\u9762\u6700\u8fd1\u9ede\u5c0d nlogn \u5206\u6cbb\u6f14\u7b97\u6cd5 \u6c42\u5e73\u9762\u4e2d\u8ddd\u96e2\u6700\u8fd1\u7684\u5169\u9ede in IT \u95b1\u8b80 \u21a9</p> </li> <li> <p>\u5e73\u9762\u6700\u8fd1\u70b9\u5bf9 in OI WiKi \u21a9</p> </li> </ol>"},{"location":"algorithm/enumerate/","title":"\u679a\u8209\uff08Enumerate)","text":"<p>\u679a\u8209\u662f\u6700\u76f4\u89c0\u7684\u6f14\u7b97\u6cd5\uff0c\u5217\u51fa\u6240\u6709\u53ef\u80fd\u7684\u89e3\uff0c\u4e26\u5224\u65b7\u662f\u5426\u7b26\u5408\u984c\u76ee\u8981\u6c42\u3002\u5bb9\u6613\u5beb\u51fa\uff0c\u4f46\u901a\u5e38\u6642\u9593\u8907\u96dc\u5ea6\u592a\u5927\u7121\u6cd5\u6eff\u8db3\u984c\u76ee\u6642\u9650\u3002</p> <p>\u901a\u5e38\u5728\u8a2d\u8a08\u679a\u8209\u627e\u51fa\u9700\u8981\u679a\u8209\u7684\u53c3\u6578\uff0c\u4e26\u9078\u64c7\u662f\u8981\u7528\u8ff4\u5708\u6216\u905e\u8ff4\u65b9\u5f0f\u3002\u5982\u679c\u8a55\u4f30\u6642\u9593\u8907\u96dc\u5ea6\u7684\u6642\u5019\u767c\u73fe\u592a\u5927\u6642\uff0c\u53ef\u642d\u914d\u4e00\u4e9b\u6280\u5de7\u4f86\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u3002</p> <p>\u76f8\u5c0d\u5730\uff0c\u5982\u679c\u6709\u4e9b\u984c\u76ee\u6e2c\u8cc7\u7bc4\u570d\u5c0f\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u5927\u9084\u662f\u53ef\u4ee5\u5728\u6642\u9650\u5167\u901a\u904e\u984c\u76ee\u3002</p> UVa 10167 - Birthday Cake <p>\u7d66\u5b9a  \u500b\u9ede\uff0c\u8acb\u627e\u51fa\u4e00\u689d\u7dda \uff0c\u7684\u5169\u7aef\u5404\u6709  \u500b\u9ede \uff0c\u4e14  \u70ba\u6574\u6578\u3002</p> <p>  \u90fd\u53ea\u6709\u7d04  \u7a2e\u53ef\u80fd\uff0c\u679a\u8209  \u53ea\u6709  \u6b21\u65b9\u7a2e\u53ef\u80fd\uff0c\u6bcf\u6b21\u6aa2\u67e5  \u500b\u9ede\uff0c\u6700\u591a\u679a\u8209  \u6b21\uff0c\u4e0d\u6703\u8d85\u904e\u6642\u9650\u3002</p> <p>\u5224\u65b7  \u5728  \u7684\u54ea\u4e00\u5074\u65b9\u6cd5\u662f\u5c07  \u4ee3\u5165  \u4e2d(\u9019\u88e1\u5047\u8a2d  \u662f\u56fa\u5b9a\u7684)\u3002</p> <ul> <li> \uff0c\u5728\u7dda\u4e0a</li> <li> \uff0c\u5728\u7dda\u7684\u5de6\u5074</li> <li> \uff0c\u5728\u7dda\u7684\u53f3\u5074</li> </ul>"},{"location":"algorithm/enumerate/#_1","title":"\u7279\u6b8a\u679a\u8209\u578b\u614b","text":""},{"location":"algorithm/enumerate/#_2","title":"\u96c6\u5408","text":"<p>\u5982\u679c\u984c\u76ee\u8981\u6c42\u548c\u96c6\u5408\u6709\u95dc\u4fc2\uff0c\u53ef\u5229\u7528\u4e8c\u9032\u4f4d\u8868\u793a\u4e00\u500b\u96c6\u5408\uff0c\u7b2c  \u4f4d\u4ee3\u8868\u7b2c  \u6a23\u7269\u54c1\u9078\u6216\u4e0d\u9078 (0 \u6216 1)\u3002\u6642\u9593\u8907\u96dc\u5ea6  \uff0c\u82e5\u57f7\u884c\u6642\u9650\u70ba  \u79d2\uff0c\u679a\u8209\u5927\u5c0f\u6700\u591a\u7d04  \u3002</p> <p>\u6709\u905e\u8ff4\u548c\u4e8c\u9032\u4f4d\u5169\u7a2e\u5be6\u73fe\u65b9\u5f0f\uff0c\u524d\u8005\u8f03\u7c21\u55ae\u3002</p> <pre><code>void dfs(int idx, ...)\n{\n...\ndfs(i+1, ...); // choose ith element\ndfs(i+1, ...); // not to choose ith element\n}\n</code></pre> <pre><code>const int N = 20; // max element size\n\nfor (int i = 1; i &lt; (1 &lt;&lt; n); ++i)\n{\nbitset&lt;N&gt; b(i);\nfor (int j = 0; j &lt; n; ++j)if(b[j])\n{\n...\n}\n}\n</code></pre> AtCoder Regular Contest 061 A - Many Formulas <p>\u7d66\u5b9a\u4e00\u500b\u6578\u5b57 \uff0c\u53ef\u4ee5\u5728\u6578\u5b57\u4efb\u610f\u4f4d\u7f6e\u52a0\u4e0a <code>+</code> \u6210\u70ba\u7b97\u5f0f\uff0c\u8acb\u8f38\u51fa\u6240\u6709\u7b97\u5f0f\u7d50\u679c\u7684\u548c\u3002 \u7bc4\u4f8b\uff1a </p> <p>\u9996\u5148\u628a\u6574\u6578\u8f49\u6210\u5e8f\u5217 ()\uff0c\u65b9\u4fbf\u5c0d\u6bcf\u4e00\u4f4d\u6578\u64cd\u4f5c\u3002\u679a\u8209\u52a0\u865f\u7684\u653e\u7f6e\u4f4d\u7f6e\uff0c\u905e\u8ff4\u679a\u8209\u7dad\u8b77\u4e09\u500b\u8b8a\u6578\uff1a\u4f4d\u7f6e\u3001\u6700\u5f8c\u4e00\u500b\u52a0\u865f\u4e4b\u524d\u7684\u548c\uff0c\u6700\u5f8c\u4e00\u500b\u52a0\u865f\u4e4b\u5f8c\u7684\u503c\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>vector&lt;int&gt; v;\nint sz;\nlong long ans;\n\nvoid dfs(int idx, long long sum, long long cur)\n{\nif (idx == sz)\n{\nans += sum + cur;\nreturn;\n}\ndfs(idx + 1, sum, cur * 10 + v[idx]); // not to choose +\ndfs(idx + 1, sum + cur, v[idx]);      // choose +\n}\n\nint main()\n{\nlong long n;\ncin &gt;&gt; n;\nwhile (n)\n{\nv.emplace_back(n % 10);\nn /= 10;\n}\nreverse(v.begin(), v.end());\nsz = (int)v.size();\nans = 0;\ndfs(0, 0, 0);\ncout &lt;&lt; ans / 2 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/enumerate/#_3","title":"\u9806\u5e8f","text":"<p>\u5982\u679c\u984c\u76ee\u8981\u6c42\u548c\u9806\u5e8f\u6709\u95dc\u4fc2\uff0c\u53ef\u5229\u7528 <code>&lt;algorithm&gt;</code> \u5167\u7684 <code>next_permutation</code> \u6216 <code>prev_permutation</code> \u9054\u5230\u679a\u8209\u5143\u7d20\u7684\u5148\u5f8c\u9806\u5e8f\u3002\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u82e5\u57f7\u884c\u6642\u9650\u70ba  \u79d2\uff0c\u679a\u8209\u5927\u5c0f\u6700\u591a\u7d04  \u3002</p> <p>\u4e0b\u9762\u984c\u76ee\u7528\u65bc\u7df4\u7fd2\u5982\u4f55\u679a\u8209\u9806\u5e8f\uff1a</p> UVa 10098 - Generating Fast <p>\u7d66\u5b9a\u4e00\u500b\u5b57\u4e32\uff0c\u4e00\u500b\u5b57\u4e32\u6709  \u7a2e\u6392\u5e8f\uff0c\u8acb\u4f9d\u64da\u5b57\u5178\u5e8f\u5927\u5c0f\u8f38\u51fa\u6240\u6709\u6392\u5e8f\u3002</p> <p>\u9019\u984c\u9808\u5229\u7528\u5230 <code>C++</code> <code>&lt;algorithm&gt;</code> \u51fd\u5f0f\u5eab\u7684 <code>sort</code> \u548c <code>next_permutation</code> (\u53ef\u4ee5\u53c3\u8003\u9019\u500b\u7db2\u7ad9)\uff0c\u524d\u8005\u7528\u4f86\u6c42\u51fa\u7b2c\u4e00\u5c0f\u6392\u5e8f\uff0c\u5f8c\u8005\u627e\u51fa\u4e0b\u4e00\u500b\u6392\u5e8f\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>sort(s.begin(), s.end());\ndo{\ncout &lt;&lt; s &lt;&lt; endl;\n} while (next_permutation(s.begin(), s.end(), comp));\n</code></pre>"},{"location":"algorithm/enumerate/#_4","title":"\u6280\u5de7","text":""},{"location":"algorithm/enumerate/#_5","title":"\u6e1b\u5c11\u679a\u8209\u7dad\u5ea6","text":"<p>\u627e\u51fa\u9700\u8981\u679a\u8209\u7684\u53c3\u6578\u5f8c\uff0c\u6709\u4e9b\u53c3\u6578\u53ef\u80fd\u662f\u548c\u7d50\u679c\u7121\u95dc\uff0c\u6216\u662f\u53ef\u7531\u5176\u4ed6\u53c3\u6578\u63a8\u5c0e\u51fa\uff0c\u79fb\u9664\u8a72\u53c3\u6578\u53ef\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u3002</p> uva10976 - Fractions Again? <p>\u7d66\u5b9a  \uff0c\u8acb\u6c42\u51fa\u6240\u6709\u6b63\u6574\u6578\u89e3  \uff0c\u4f7f\u5f97  </p> <p>\u6700\u76f4\u89c0\u7684\u89e3\u6cd5\u662f\u679a\u8209\u5169\u500b\u53c3\u6578  \uff0c\u4f46\u5176\u5be6\u53ea\u8981\u77e5\u9053  \u4efb\u610f\u4e00\u9805\u5c31\u53ef\u63a8\u51fa\u53e6\u5916\u4e00\u9805\uff0c\u6709\u6839\u64da\u984c\u76ee\u6211\u5011\u53ef\u4ee5\u5f97\u51fa  \u5728  \u4e4b\u9593\uff08\u7576  \u6642\uff0c  )\uff0c\u8981\u679a\u8209\u7684\u7bc4\u570d\u8f03\u5c0f\uff0c\u56e0\u6b64\u6211\u5011\u9078\u64c7\u679a\u8209  \u7684\u7b97\u6cd5\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  </p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n#define N 10005\n\nint main()\n{\nint n;\nwhile (cin &gt;&gt; n)\n{\nint ans[N][2], ar = 0;\nfor (int i = n + 1; i &lt;= 2 * n; i++)\n{\nint r = i - n;\nif ((i * n) % r == 0)\n{\nans[ar][1] = i;\nans[ar][0] = (i * n) / r;\nar++;\n}\n}\nprintf(\"%d\\n\", ar);\nfor (int i = 0; i &lt; ar; i++)\nprintf(\"1/%d = 1/%d + 1/%d\\n\", n, ans[i][0], ans[i][1]);\n}\n}\n</code></pre>"},{"location":"algorithm/enumerate/#_6","title":"\u96d9\u6307\u6a19","text":"<p>\u5229\u7528\u5169\u500b\u6307\u6a19\u7dda\u6027\u904d\u6b77\u9663\u5217\uff0c\u5f97\u51fa\u7b54\u6848\u3002\u300c\u96d9\u6307\u6a19\u300d\u53ef\u70ba\u5169\u500b\u6307\u6a19\u6216\u662f\u5169\u500b\u6574\u6578\u578b\u614b\u8b8a\u6578\u7d00\u9304\u4f4d\u7f6e\u3002</p> UVa 11078 - Open Credit System <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \uff0c\u6c42\u51fa\u4e00\u7d44  \u4f7f\u5f97  \u6700\u5927</p> <p>\u9996\u5148\u6703\u76f4\u89c0\u7684\u60f3\u5230\u4e00\u500b  \u7684\u7b97\u6cd5\uff1a\u679a\u8209  \u7b97\u51fa\u7d50\u679c\u5f8c\u53d6\u6700\u5927\u503c\u3002</p> <p>\u63a5\u8457\u53ef\u4ee5\u60f3\u5230\u5c0d\u65bc\u6bcf\u500b\u6578\u5b57  \u53ea\u8981\u548c  \u76f8\u6e1b\u5373\u53ef\uff0c\u8a2d\u7acb\u4e00\u500b\u8b8a\u6578 \uff0c\uff0c\u7b54\u6848  \u548c  \u53d6\u6700\u5927\u503c\uff0c \u66f4\u65b0  \u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\nint n;\nvector&lt;int&gt; v(150005);\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; v[i];\nint minj = 0, ans = v[1] - v[0];\nfor (int i = 1; i &lt; n; ++i)\n{\nans = max(ans, v[i] - v[minj]);\nif (v[i] &lt; v[minj])\nminj = i;\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> 11572 - Unique Snowflakes <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \uff0c\u6c42\u51fa\u6700\u9577\u5e8f\u5217\uff0c\u7576\u4e2d\u6c92\u6709\u91cd\u8907\u7684\u6578\u5b57</p> <p>\u6211\u5011\u53ef\u4ee5\u8a2d\u5169\u500b\u6307\u6a19\uff0c\u5de6\u6307\u6a19\u548c\u53f3\u6307\u6a19\uff0c\u6bcf\u6b21\u8fed\u4ee3\u53f3\u6307\u6a19\u5148\u5f80\u524d\u4e00\u500b\u4f4d\u7f6e\uff0c\u5982\u679c\u5de6\u53f3\u6307\u6a19\u4e4b\u9593\u6709\u91cd\u8907\u7684\u6578\u5b57\uff0c\u5c31\u5c07\u5de6\u6307\u6a19\u5f80\u524d\u4e00\u500b\u4f4d\u7f6e\uff0c\u76f4\u5230\u6c92\u6709\u5de6\u53f3\u6307\u6a19\u4e4b\u9593\u6c92\u6709\u91cd\u8907\u7684\u6578\u5b57\u3002\u5229\u7528 <code>set</code> \u4f86\u7dad\u8b77\u662f\u5426\u6709\u91cd\u8907\u6578\u5b57\uff0c\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\nint t, n;\ncin &gt;&gt; t;\nvector&lt;int&gt; v(1000000);\nset&lt;int&gt; st;\nwhile (t--)\n{\nst.clear();\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; ++i)\n{\ncin &gt;&gt; v[i];\n}\nint ans = 0;\nfor (int L = 0, R = 0; R &lt; n; ++R)\n{\nwhile (st.count(v[R]))\n{\nst.erase(v[L++]);\n}\nst.insert(v[R]);\nans = max(ans, R - L + 1);\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/enumerate/#_7","title":"\u6298\u534a\u679a\u8209","text":"<p>\u679a\u8209\u6240\u6709\u96c6\u5408\u7684\u6642\u9593\u8907\u96dc\u5ea6\u592a\u5927\uff0c\u628a\u5143\u7d20\u62c6\u6210\u4e8c\u4efd\u5206\u5225\u679a\u8209\u518d\u5408\u4f75\uff0c\u80fd\u5920\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\uff0c\u9019\u7a2e\u6280\u5de7\u7a31\u70ba\u300c\u6298\u534a\u679a\u8209\u300d (Meet in the Middle)\u3002</p> AtCoder Beginner Contest 184 F - Programming Contest <p>\u7d66\u5b9a  \u500b\u6578\u5b57\u52a0\u8d77\u4f86\uff0c\u53ef\u4ee5\u9078\u4efb\u610f\u591a\u500b\u6578\u5b57\uff0c\u6578\u5b57\u548c\u4e0d\u8d85\u904e  \u7684\u60c5\u6cc1\u4e0a\uff0c\u6700\u5927\u6578\u5b57\u548c\u70ba\u591a\u5c11?</p> <p>\u6578\u5b57\u5206\u6210\u5169\u500b\u96c6\u5408 \uff0c\u6bcf\u4e00\u5806\u5206\u5225\u679a\u8209\u6240\u6709\u53ef\u80fd\u7684\u6578\u5b57\u548c\u4e26\u6392\u5e8f\uff0c\u7372\u5f97  </p> <p>\u679a\u8209\u96c6\u5408  \u7684\u6578\u5b57 \uff0c\u627e\u51fa  \u96c6\u5408\u5167\u5c0f\u65bc\u7b49\u65bc  \u4e2d\u6700\u5927\u7684\u6578 \u3002</p> <ul> <li>\u66f4\u65b0\u7b54\u6848  </li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>vector&lt;long long&gt; v;\n\nvoid dfs(set&lt;long long&gt; &amp;s, int idx, int R, long long sum)\n{\nif (idx &gt;= R)\n{\ns.insert(sum);\nreturn;\n}\ndfs(s, idx + 1, R, sum);\ndfs(s, idx + 1, R, sum + v[idx]);\n}\n\nint main()\n{\nIOS;\nint n;\nlong long t, ans = 0;\nset&lt;long long&gt; s1, s2;\ncin &gt;&gt; n &gt;&gt; t;\nfor (int i = 0, x; i &lt; n; ++i)\n{\ncin &gt;&gt; x;\nv.emplace_back(x);\n}\ndfs(s1, 0, n / 2, 0);\ndfs(s2, n / 2, n, 0);\nfor (auto &amp;x : s1)\n{\nauto it = s2.upper_bound(t - x);\nlong long y = *(--it);\nif (x + y &lt;= t)\nans = max(ans, x + y);\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> uva01326 - Jurassic Remains <p>\u7d66\u5b9a  \u4e32\u82f1\u6587\u5b57\u4e32\uff0c\u8acb\u6700\u591a\u53ef\u4ee5\u5305\u542b\u5e7e\u500b\u5b57\u4e32\uff0c\u4f7f\u5f97\u9019\u4e9b\u5b57\u4e32\u5167\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\u3002</p> <p>\u5148\u628a\u6bcf\u500b\u5b57\u4e32\u8f49\u6210\u4e00\u500b\u4e8c\u9032\u4f4d\uff0c\u7b2c  \u4f4d\u8868\u793a\u5b57\u4e32\u6709\uff080: \u5076\u6578\uff0c1: \u5947\u6578\uff09\u500b\u5b57\u5143 i (0:A, 1:B, ...)\u3002\u5982\u679c\u6709\u4e00\u5806\u5b57\u4e32\u5167\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\uff0c\u90a3\u9ebc\u4ed6\u5011\u7684 xor \u503c  \u3002</p> <p>\u9019\u984c\u95dc\u65bc\u300c\u96c6\u5408\u300d\uff0c\u53ef\u7528\u4e8c\u9032\u4f4d\u679a\u8209\uff0c\u52a0\u4e0a\u5224\u65b7\uff0c\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p> <p>\u4f7f\u7528\u62c6\u534a\u679a\u8209\uff0c\u628a\u524d  \u548c\u5f8c  \u5b57\u4e32\u5206\u5225\u679a\u8209\uff0c\u5206\u5225\u628a\u7d50\u679c\u5b58\u5728\u4e0d\u540c\u7684 map \u88e1\u9762\uff0c\u5982\u679c\u5169\u500b map \u6709\u76f8\u540c\u7684 xor \u503c\uff0c\u4ee3\u8868\u5169\u500b\u96c6\u5408\u7684\u5b57\u4e32\u5408\u8d77\u4f86\uff0c\u6bcf\u500b\u5b57\u5143\u90fd\u51fa\u73fe\u5076\u6578\u6b21\u3002\u9019\u7a2e\u505a\u6cd5\u6642\u9593\u8907\u96dc\u5ea6\u70ba  </p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 30;\nint bitcount(int x) { return x == 0 ? 0 : (x &amp; 1) + bitcount(x &gt;&gt; 1); }\nint main()\n{\nstring s;\nmap&lt;int, int&gt; tb;\nint n, a[N];\nwhile (cin &gt;&gt; n)\n{\nmemset(a, 0, sizeof(a));\nfor (int i = 0; i &lt; n; i++)\n{\ncin &gt;&gt; s;\ntb.clear();\nfor (int j = 0; j &lt; s.size(); j++)\na[i] ^= (1 &lt;&lt; int(s[j] - 'A'));\n}\nint n1 = n / 2, n2 = n - n1, x, ans = 0;\nfor (int i = 0; i &lt; (1 &lt;&lt; n1); i++)\n{\nx = 0;\nfor (int j = 0; j &lt; n1; j++)\n{\nif (i &amp; (1 &lt;&lt; j))\nx ^= a[j];\n}\nif (!tb.count(x) || bitcount(i) &gt; bitcount(tb[x]))\ntb[x] = i;\n}\nfor (int i = 0; i &lt; (1 &lt;&lt; n2); i++)\n{\nx = 0;\nfor (int j = 0; j &lt; n2; j++)\n{\nif (i &amp; (1 &lt;&lt; j))\nx ^= a[n1 + j];\n}\nif (tb.count(x) &amp;&amp; bitcount(i) + bitcount(tb[x]) &gt; bitcount(ans))\nans = (i &lt;&lt; n1) ^ tb[x];\n}\ncout &lt;&lt; bitcount(ans) &lt;&lt; '\\n';\nbool o = 0;\nfor (int i = 0; i &lt; n; i++)\n{\nif (ans &amp; (1 &lt;&lt; i))\n{\nif (o)\ncout &lt;&lt; ' ';\no = 1;\ncout &lt;&lt; i + 1;\n}\n}\ncout &lt;&lt; '\\n';\n}\n}\n</code></pre> uva10125 - Sumsets <p>\u7d66\u5b9a\u4e00\u500b\u96c6\u5408\uff0c\u8acb\u627e\u5230\u6700\u5927\u7684  \u6eff\u8db3 \uff0c \u7686\u76f8\u7570\u3002</p> <p>\u76f4\u63a5\u679a\u8209\u7684\u8907\u96dc\u5ea6\u5f0f \uff0c\u628a\u5f0f\u5b50\u79fb\u9805\u6210\u70ba \uff0c\u679a\u8209\u6240\u6709  \u7684\u7d50\u679c\uff0c\u518d\u679a\u8209 \uff0c\u7576\u679a\u8209\u51fa\u4e00\u7d44 \uff0c\u5c31\u6aa2\u67e5\u662f\u5426\u6709\u7b26\u5408\u689d\u4ef6\u7684 \u3002\u70ba\u4e86\u8981\u5224\u65b7\u662f\u5426\u76f8\u7570\uff0c\u8981\u984d\u5916\u7d00\u9304\u4f4d\u7f6e\uff0c\u984c\u76ee\u8981\u6c42\u6700\u5927\u7684 \uff0c\u56e0\u6b64\u7531\u5927\u5f80\u5c0f\u679a\u8209 \u3002</p> <p>\u679a\u8209  \u548c  \u7684\u6642\u9593\u8907\u96dc\u5ea6 \uff0c\u6aa2\u67e5\u662f\u5426\u6709\u7b26\u5408\u689d\u4ef6\u7684  \u7684\u6642\u9593\u8907\u96dc\u5ea6 \uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6 \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt; tb;\nvector&lt;int&gt; v;\n\nvoid sol()\n{\nfor (int i = (int)v.size() - 1; i &gt;= 0; --i)\n{\nfor (int j = i - 1; j &gt;= 0; --j)\n{\nint diff = v[i] - v[j];\nif (tb.find(diff) == tb.end())\ncontinue;\nfor (auto &amp;item : tb[diff])\n{\nif (item.first != i &amp;&amp; item.first != j &amp;&amp;\nitem.second != i &amp;&amp; item.second != j)\n{\ncout &lt;&lt; v[i] &lt;&lt; '\\n';\nreturn;\n}\n}\n}\n}\ncout &lt;&lt; \"no solution\\n\";\n}\n\nint main()\n{\nint n;\nwhile (cin &gt;&gt; n, n)\n{\nv.clear();\ntb.clear();\nfor (int i = 0, x; i &lt; n; ++i)\n{\ncin &gt;&gt; x;\nv.emplace_back(x);\n}\nsort(v.begin(), v.end());\nfor (int i = 0; i &lt; (int)v.size(); ++i)\n{\nfor (int j = i + 1; j &lt; (int)v.size(); ++j)\n{\nint sum = v[i] + v[j];\nif (tb.find(sum) == tb.end())\n{\ntb.insert({sum, vector&lt;pair&lt;int, int&gt;&gt;()});\n}\ntb[sum].push_back(make_pair(i, j));\n}\n}\nsol();\n}\n}\n</code></pre>"},{"location":"algorithm/enumerate/#_8","title":"\u526a\u679d","text":"<p>\u5728\u4f7f\u7528\u905e\u8ff4\u679a\u8209\u6642\uff0c\u7576\u641c\u5c0b\u5230\u4e00\u7d44\u89e3\u7b54\uff0c\u767c\u73fe\u8a72\u7d44\u89e3\u548c\u5176\u5ef6\u4f38\u7684\u89e3\uff0c\u7686\u7121\u6cd5\u9054\u5230\u9054\u5230\u9700\u6c42\uff0c\u5c31\u505c\u6b62\u641c\u5c0b\uff0c\u6539\u641c\u5c0b\u5176\u4ed6\u7d44\u89e3\uff0c\u8a72\u6280\u5de7\u53eb\u505a\u300c\u526a\u679d\u300d\u3002</p> <p>\u660e\u78ba\u5730\u4f86\u8aaa\uff0c\u4ee5\u4e0b\u72c0\u6cc1\u9700\u4f7f\u7528\u526a\u679d\uff1a</p> <ul> <li>\u767c\u73fe\u89e3\u7b54\u662f\u4e0d\u5408\u6cd5\u7684\u3002</li> <li>\u5728\u6700\u4f73\u5316\u554f\u984c\uff0c\u767c\u73fe\u7121\u6cd5\u6210\u70ba\u6700\u4f73\u89e3\u3002</li> </ul> <p>\u526a\u679d\u80fd\u6e1b\u5c11\u679a\u8209\u6578\u91cf\uff0c\u964d\u4f4e\u57f7\u884c\u6642\u9593\u3002</p> Qusetion <p>\u7d66\u5b9a\u4e00\u500b\u6578\u5b57  \uff0c\u8981\u4f60\u6c42\u51fa\u6709\u5e7e\u7d44\u6b63\u6574\u6578\u89e3  \uff0c\u4f7f\u5f97  \u3002\u9806\u5e8f\u4e0d\u540c\u8996\u70ba\u76f8\u540c\u89e3\uff0c\u4f8b\u5982  \u548c  \u8996\u70ba\u76f8\u540c\u7d44\u89e3\u3002</p> <ul> <li>\u70ba\u4e86\u907f\u514d\u7b97\u5230\u91cd\u8907\u7d44\u5408\uff0c\u6211\u5011\u8b93  \u3002</li> <li>\u8a2d\u76ee\u524d\u89e3\u7e3d\u548c\u70ba  \uff0c\u6700\u5f8c\u4e00\u9805\u70ba  \uff0c\u4e0b\u4e00\u9805  \u5c31\u5f9e  \u958b\u59cb\u5617\u8a66\uff0c\u7576\u5617\u8a66\u5230  \u6642\uff0c\u5c31\u505c\u6b62\u5617\u8a66\u3002</li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint ans, tar;\n\nvoid dfs(int mx, int sum)\n{\nif (sum == tar)\n++ans;\nfor (int i = mx;; ++i)\n{\nif (sum + i &gt; tar)\nbreak;\ndfs(i, sum + i);\n}\nreturn;\n}\n\nint main()\n{\nwhile (cin &gt;&gt; tar)\n{\nans = 0;\ndfs(1, 0);\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre> UVa 10364 - Square <p>\u7d66\u5b9a  \u6839\u6728\u68cd\u7684\u9577\u5ea6\uff0c\u5728\u4e0d\u6298\u65b7\u6728\u68cd\u7684\u60c5\u6cc1\u4e0b\uff0c\u662f\u5426\u53ef\u4ee5\u6392\u51fa\u6b63\u65b9\u5f62?</p> <ul> <li>\u5982\u679c\u9577\u5ea6\u548c\u4e0d\u662f  \u7684\u500d\u6578\uff0c\u6216\u662f\u6700\u9577\u9577\u5ea6\u5927\u65bc\u9577\u5ea6\u548c \uff0c\u7b54\u6848\u7686\u70ba\u5426\u5b9a\u3002</li> <li>\u6728\u68cd\u4f9d\u9577\u5ea6\u5f9e\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7531\u9577\u7684\u68cd\u5b50\u958b\u59cb\u9078\u80fd\u5c11\u56de\u6eaf\u6b21\u6578\u3002</li> <li>\u5982\u679c\u5982\u679c\u5c07\u4e0a\u7576\u524d\u68cd\u5b50\u5f8c\uff0c\u7d2f\u7a4d\u9577\u5ea6\u5927\u65bc\u908a\u9577\uff0c\u8df3\u904e\u7576\u524d\u68cd\u5b50\u6539\u5617\u8a66\u66f4\u77ed\u7684\u68cd\u5b50\u3002</li> <li>\u7528\u4e00\u500b <code>bool</code> \u9663\u5217  \u7d00\u9304\u90a3\u4e9b\u68cd\u5b50\u662f\u88ab\u7528\u904e\u7684\uff0c\u907f\u514d\u68cd\u5b50\u88ab\u91cd\u8907\u679a\u8209\u3002</li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>const int MXN = 30;\nvector&lt;int&gt; v(MXN);\nbitset&lt;MXN&gt; used;\nint n,sum, avg;\n\nbool dfs(int curSide, int curLength, int idx)\n{\n// cout &lt;&lt; curSide &lt;&lt; ' ' &lt;&lt; curLength &lt;&lt; ' ' &lt;&lt; idx &lt;&lt; '\\n';\nif(curLength == avg)\n{\nif(curSide == 3)\nreturn true;\n++curSide;\ncurLength = idx = 0;\n}\nfor (int i = idx; i &lt; n; ++i)\n{\nif(used[i] || curLength + v[i] &gt; avg)\ncontinue;\nused[i] = true;\nif(dfs(curSide, curLength + v[i], i + 1))\nreturn true;\nused[i] = false;\n}\nreturn false;\n}\n\nvoid solve()\n{\nsum = 0;\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; ++i)\n{\ncin &gt;&gt; v[i];\nsum += v[i];\n}\nsort(v.begin(), v.begin() + n, greater&lt;int&gt;());\navg = sum / 4;\nused.reset();\nif (sum % 4 || v[0] &gt; avg || !dfs(0, 0, 0))\ncout &lt;&lt; \"no\\n\";\nelse\ncout &lt;&lt; \"yes\\n\";\n}\n</code></pre>"},{"location":"algorithm/enumerate/#_9","title":"\u5ef6\u4f38\u95b1\u8b80","text":"<ul> <li>\u4ece\u679a\u4e3e\u5230 K \u77ed\u8def</li> </ul>"},{"location":"algorithm/enumerate/#_10","title":"\u66f4\u591a\u984c\u76ee","text":"<ul> <li>\u6298\u534a\u679a\u8209\uff1aNCPC 2017 \u6c7a\u8cfd PF</li> </ul>"},{"location":"algorithm/greedy/","title":"\u8caa\u5fc3","text":"<p>\u8caa\u5fc3\u6f14\u7b97\u6cd5\u7684\u6838\u5fc3\u70ba\uff0c\u63a1\u53d6\u5728\u76ee\u524d\u72c0\u614b\u4e0b\u6700\u597d\u6216\u6700\u4f73\uff08\u5373\u6700\u6709\u5229\uff09\u7684\u9078\u64c7\u3002</p> <p>\u8caa\u5fc3\u6f14\u7b97\u6cd5\u96d6\u7136\u80fd\u7372\u5f97\u7576\u524d\u6700\u4f73\u89e3\uff0c\u4f46\u4e0d\u4fdd\u8b49\u80fd\u7372\u5f97\u6700\u5f8c\uff08\u5168\u57df\uff09\u6700\u4f73\u89e3\uff0c\u63d0\u51fa\u60f3\u6cd5\u5f8c\u53ef\u4ee5\u5148\u8a66\u5716\u5c0b\u627e\u6709\u6c92\u6709\u80fd\u63a8\u7ffb\u539f\u672c\u7684\u60f3\u6cd5\u7684\u53cd\u4f8b\uff0c\u78ba\u8a8d\u7121\u8aa4\u518d\u5be6\u4f5c\u3002</p>"},{"location":"algorithm/greedy/#scarecrow","title":"Scarecrow","text":"UVa 12405 - Scarecrow <p>\u6709\u4e00\u500b  \u7684\u7a3b\u7530\uff0c\u6709\u4e9b\u7a3b\u7530\u73fe\u5728\u6709\u7a2e\u690d\u4f5c\u7269\uff0c\u70ba\u4e86\u907f\u514d\u88ab\u52d5\u7269\u7834\u58de\uff0c\u9700\u8981\u653e\u7f6e\u7a3b\u8349\u4eba\uff0c\u7a3b\u8349\u4eba\u53ef\u4ee5\u4fdd\u8b77\u8a72\u584a\u7a3b\u7530\u548c\u5de6\u53f3\u5169\u584a\u7a3b\u7530\uff0c\u8acb\u554f\u6700\u5c11\u9700\u8981\u591a\u5c11\u7a3b\u8349\u4eba\u624d\u80fd\u4fdd\u8b77\u6240\u6709\u7a3b\u7530?</p> <p>\u5f9e\u5de6\u5230\u53f3\u6383\u63cf\u7a3b\u7530\uff0c\u5982\u679c\u7b2c  \u584a\u7a3b\u7530\u6709\u4f5c\u7269\uff0c\u5c31\u628a\u7a3b\u8349\u4eba\u653e\u5230\u7b2c  \u584a\u7a3b\u7530\uff0c\u9019\u6a23\u80fd\u4fdd\u8b77\u7b2c  \u584a\u7a3b\u7530\uff0c\u63a5\u8457\u5f9e\u7b2c  \u584a\u7a3b\u7530\u7e7c\u7e8c\u6383\u63cf\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int main(){\nstring s;\nint i, n, t, tc = 1;\ncin &gt;&gt; t;\nwhile (t--){\ncin &gt;&gt; n &gt;&gt; s;\nint nc = 0;\nfor (i = 0; i &lt; n; i++)\nif (s[i] == '.')i += 2, nc++;\ncout &lt;&lt; \"Case \" &lt;&lt; tc++ &lt;&lt; \": \" &lt;&lt; nc &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#_2","title":"\u970d\u592b\u66fc\u6a39","text":"\u970d\u592b\u66fc\u6a39 <p>\u7d66\u5b9a  \u500b\u6709\u6b0a\u91cd  \u7684\u8449\u7bc0\u9ede\uff0c\u8acb\u69cb\u51fa\u4e00\u9846\u6709  \u500b\u8449\u7bc0\u9ede\u7684\u4e8c\u5143\u6a39 \uff0c \u7684  \u8981\u6700\u5c0f\uff0c \u4ee3\u8868\u8449\u7bc0\u9ede\u7684\u6df1\u5ea6\u3002 </p> <p>\u8b93\u6b0a\u91cd\u6bd4\u8f03\u5927\u7684\u8449\u7bc0\u9ede\u8d8a\u4e0a\u5c64\u8d8a\u597d\u3002\u5c07\u6bcf\u500b\u9ede\u8996\u70ba\u4e00\u68f5\u6a39\uff0c\u6bcf\u6b21\u5c07\u6700\u5c0f\u6b0a\u91cd\u7684\u5169\u68f5\u6a39\u5408\u4f75\u8d77\u4f86\uff0c\u76f4\u5230\u6700\u5f8c\u5408\u4f75\u6210\u4e00\u68f5\u6a39\u3002</p> UVa 10954 Add All <p>\u7d66\u5b9a  \u500b\u6578\uff0c\u6bcf\u6b21\u5c07\u5169\u500b\u6578  \u5408\u4f75\u6210 \uff0c\u53ea\u5230\u6700\u5f8c\u53ea\u5269\u4e00\u500b\u6578\uff0c\u5408\u4f75\u6210\u672c\u70ba\u5169\u6578\u548c\uff0c\u554f\u6700\u5c0f\u5408\u4f75\u6210\u672c\u70ba\u591a\u5c11\u3002</p> <p>\u5efa\u69cb\u970d\u592b\u66fc\u6a39\u7684\u8b8a\u5f62\u984c\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int main()\n{\n\nint n, x;\nwhile (cin &gt;&gt; n, n)\n{\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\nwhile (n--)\n{\ncin &gt;&gt; x;\nq.push(x);\n}\nlong long ans = 0;\nwhile (q.size() &gt; 1)\n{\nx = q.top();\nq.pop();\nx += q.top();\nq.pop();\nq.push(x);\nans += x;\n}\ncout &lt;&lt; ans &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#commando-war","title":"Commando War","text":"UVa 11729 - Commando War <p>\u6709  \u500b\u90e8\u4e0b\uff0c\u6bcf\u500b\u90e8\u4e0b\u8981\u82b1  \u5206\u9418\u4ea4\u5f85\u4efb\u52d9\uff0c\u518d\u82b1  \u5206\u9418\u57f7\u884c\u4efb\u52d9\uff0c\u4e00\u6b21\u53ea\u80fd\u5c0d\u4e00\u4f4d\u90e8\u4e0b\u4ea4\u4ee3\u4efb\u52d9\uff0c\u4f46\u53ef\u4ee5\u591a\u4eba\u540c\u6642\u57f7\u884c\u4efb\u52d9\uff0c\u554f\u6700\u5c11\u8981\u82b1\u591a\u5c11\u6642\u9593\u5b8c\u6210\u4efb\u52d9\u3002</p> <p>\u57f7\u884c\u6642\u9593\u9577\u7684\u4eba\u5148\u4ea4\u4ee3\u4efb\u52d9\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Data\n{\nint b, j;\nbool operator&lt;(const Data &amp;rhs) const { return j &gt; rhs.j; }\n};\n\nint main()\n{\nint n, ti = 0;\nData a[1005];\nwhile (cin &gt;&gt; n, n)\n{\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; a[i].b &gt;&gt; a[i].j;\nsort(a, a + n);\nint ans = 0, sum = 0;\nfor (int i = 0; i &lt; n; ++i)\n{\nsum += a[i].b;\nans = max(ans, sum + a[i].j);\n}\ncout &lt;&lt; \"Case \" &lt;&lt; ++ti &lt;&lt; \": \" &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#_3","title":"\u522a\u6578\u5b57\u554f\u984c","text":"\u522a\u6578\u5b57\u554f\u984c <p>\u7d66\u5b9a\u4e00\u500b\u6578\u5b57 \uff0c\u9700\u8981\u522a\u9664  \u500b\u6578\u5b57\uff0c\u8acb\u554f\u522a\u9664  \u500b\u6578\u5b57\u5f8c\u6700\u5c0f\u7684\u6578\u5b57\u70ba\u4f55?</p> <p>\u7b2c\u4e00\u7a2e\u60f3\u6cd5\u662f\u5c07\u6700\u5927\u7684\u6578\u5b57\u79fb\u9664\uff0c\u4f46\u9019\u7a2e\u60f3\u6cd5\u5b58\u5728\u53cd\u4f8b()\u3002</p> <p>\u7b2c\u4e8c\u7a2e\u60f3\u6cd5\u662f\u522a\u9664\u6eff\u8db3\u7b2c  \u4f4d\u6578\u5927\u65bc\u7b2c  \u4f4d\u6578\u7684\u6700\u5de6\u908a\u7b2c  \u4f4d\u6578\uff0c\u6263\u9664\u9ad8\u4f4d\u6578\u7684\u5f71\u97ff\u8f03\u6263\u9664\u4f4e\u4f4d\u6578\u7684\u5927\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int main()\n{\nstring s;\nint k;\ncin &gt;&gt; s &gt;&gt; k;\nfor (int i = 0; i &lt; k; ++i)\n{\nif ((int)s.size() == 0)\nbreak;\nint pos = (int)s.size() - 1;\nfor (int j = 0; j &lt; (int)s.size() - 1; ++j)\n{\nif (s[j] &gt; s[j + 1])\n{\npos = j;\nbreak;\n}\n}\ns.erase(pos, 1);\n}\nwhile ((int)s.size() &gt; 0 &amp;&amp; s[0] == '0')\ns.erase(0, 1);\nif ((int)s.size())\ncout &lt;&lt; s &lt;&lt; '\\n';\nelse\ncout &lt;&lt; 0 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/greedy/#_4","title":"\u63db\u786c\u5e63\u554f\u984c","text":"\u63db\u786c\u5e63\u554f\u984c <p>\u7d66\u5b9a\u786c\u5e63\u5e63\u503c  and \uff0c\u8acb\u554f\u6700\u5c11\u9700\u8981\u5e7e\u500b\u786c\u5e63\u624d\u80fd\u6e4a\u51fa  \u5143?</p> <p>\u5f9e\u5927\u5e63\u503c\u7684\u786c\u5e63\u958b\u59cb\u4f7f\u7528\uff0c\u5982\u679c\u7528\u5269\u9918\u7684\u518d\u7528\u66f4\u5c0f\u7684\u9918\u984d\uff0c\u4ee5\u6b64\u985e\u63a8\u3002</p> <p>\u5982\u679c\u5e63\u503c\u4e4b\u9593\u6c92\u6709\u6574\u9664\uff0c\u8981\u4f7f\u7528\u5230\u52d5\u614b\u898f\u5283\u3002</p>"},{"location":"algorithm/greedy/#_5","title":"\u5340\u9593\u8986\u84cb\u76f8\u95dc\u554f\u984c","text":"<p>\u9019\u985e\u984c\u76ee\u6703\u9700\u8981\u4e00\u500b\u7d00\u9304\u8d77\u9ede\u3001\u7d42\u9ede\u548c\u652f\u63f4\u6392\u5e8f\u7684\u8cc7\u6599\u7d50\u69cb\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Line\n{\nint L, R;\nbool operator&lt;(const Line &amp;rhs) const\n{\n...\n}\n};\n</code></pre>"},{"location":"algorithm/greedy/#_6","title":"\u5340\u9593\u8986\u84cb\u9577\u5ea6","text":"zerojudge b966 - \u5340\u9593\u8986\u84cb\u9577\u5ea6 <p>\u7d66\u5b9a  \u689d\u7dda\u6bb5\u5340\u9593\u70ba \uff0c\u8acb\u554f\u9019\u4e9b\u7dda\u6bb5\u7684\u8986\u84cb\u6240\u8986\u84cb\u7684\u9577\u5ea6? </p> <p>\u5148\u5c07\u6240\u6709\u5340\u9593\u4f9d\u7167\u5de6\u754c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5de6\u754c\u76f8\u540c\u4f9d\u7167\u53f3\u754c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7528\u4e00\u500b\u8b8a\u6578  \u7d00\u9304\u76ee\u524d\u6700\u5927\u53ef\u4ee5\u8986\u84cb\u5230\u7684\u53f3\u754c\u3002\u5982\u679c\u76ee\u524d\u5340\u9593\u5de6\u754c \uff0c\u4ee3\u8868\u8a72\u5340\u9593\u53ef\u4ee5\u548c\u524d\u9762\u7684\u7dda\u6bb5\u5408\u4f75\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Line\n{\nint L, R;\nbool operator&lt;(const Line &amp;rhs) const\n{\nif (L != rhs.L)\nreturn L &lt; rhs.L;\nreturn R &lt; rhs.R;\n}\n};\n\nint main()\n{\nint n;\nLine a[10005];\nwhile (cin &gt;&gt; n)\n{\nfor (int i = 0; i &lt; n; i++)\ncin &gt;&gt; a[i].L &gt;&gt; a[i].R;\nsort(a, a + n);\nint ans = 0, L = a[0].L, R = a[0].R;\nfor (int i = 1; i &lt; n; i++)\n{\nif (a[i].L &lt; R)\nR = max(R, a[i].R);\nelse\n{\nans += R - L;\nL = a[i].L;\nR = a[i].R;\n}\n}\ncout &lt;&lt; ans + (R - L) &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#_7","title":"\u6700\u5c0f\u5340\u9593\u8986\u84cb\u554f\u984c","text":"\u6700\u5c0f\u5340\u9593\u8986\u84cb\u554f\u984c <p>\u7d66\u5b9a  \u689d\u7dda\u6bb5\u5340\u9593\u70ba \uff0c\u8acb\u554f\u6700\u5c11\u8981\u9078\u5e7e\u500b\u5340\u9593\u624d\u80fd\u5b8c\u5168\u8986\u84cb ?  </p> <p>\u5148\u5c07\u6240\u6709\u5340\u9593\u4f9d\u7167\u5de6\u754c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5c0d\u65bc\u7576\u524d\u5340\u9593 \uff0c\u8981\u5f9e\u5de6\u754c  \u7684\u6240\u6709\u5340\u9593\u4e2d\uff0c\u627e\u5230\u6709\u8457\u6700\u5927\u7684\u53f3\u754c\u7684\u5340\u9593\uff0c\u9023\u63a5\u7576\u524d\u5340\u9593\u3002</p> Codeforces 1066B - Heaters <p>\u9577\u5ea6  \u7684\u76f4\u7dda\u4e2d\u6709\u6578\u500b\u52a0\u71b1\u5668\uff0c\u5728  \u7684\u52a0\u71b1\u5668\u53ef\u4ee5\u8b93  \u5167\u7684\u7269\u54c1\u52a0\u71b1\uff0c\u554f\u6700\u5c11\u8981\u5e7e\u500b\u52a0\u71b1\u5668\u53ef\u4ee5\u628a  \u7684\u7bc4\u570d\u52a0\u71b1\u3002</p> <p>\u5c0d\u65bc\u6700\u5de6\u908a\u6c92\u52a0\u71b1\u7684\u9ede \uff0c\u9078\u64c7\u6700\u9060\u53ef\u4ee5\u52a0\u71b1  \u7684\u52a0\u71b1\u5668\uff0c\u66f4\u65b0\u5df2\u52a0\u71b1\u7bc4\u570d\uff0c\u91cd\u8907\u4e0a\u8ff0\u52d5\u4f5c\u7e7c\u7e8c\u5c0b\u627e\u52a0\u71b1\u5668\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int main()\n{\nint n, r;\nint a[1005];\ncin &gt;&gt; n &gt;&gt; r;\nfor (int i = 1; i &lt;= n; ++i)\ncin &gt;&gt; a[i];\nint i = 1, ans = 0;\nwhile (i &lt;= n)\n{\nint R = min(i + r - 1, n), L = max(i - r + 1, 0), nextR = -1;\nfor (int j = R; j &gt;= L; --j)\n{\nif (a[j])\n{\nnextR = j;\nbreak;\n}\n}\nif (nextR == -1)\n{\nans = -1;\nbreak;\n}\n++ans;\ni = nextR + r;\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/greedy/#_8","title":"\u6700\u591a\u4e0d\u91cd\u758a\u5340\u9593","text":"\u6700\u591a\u4e0d\u91cd\u758a\u5340\u9593 <p>\u7d66\u4f60  \u689d\u7dda\u6bb5\u5340\u9593\u70ba \uff0c\u8acb\u554f\u6700\u591a\u53ef\u4ee5\u9078\u64c7\u5e7e\u689d\u4e0d\u91cd\u758a\u7684\u7dda\u6bb5(\u982d\u5c3e\u53ef\u76f8\u9023)? </p> <p>\u4f9d\u7167\u53f3\u754c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6bcf\u6b21\u53d6\u5230\u4e00\u500b\u4e0d\u91cd\u758a\u7684\u7dda\u6bb5\uff0c\u7b54\u6848 \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Line\n{\nint L, R;\nbool operator&lt;(const Line &amp;rhs) const { return R &lt; rhs.R; }\n};\n\nint main()\n{\nint t;\ncin &gt;&gt; t;\nLine a[30];\nwhile (t--)\n{\nint n = 0;\nwhile (cin &gt;&gt; a[n].L &gt;&gt; a[n].R, a[n].L || a[n].R)\n++n;\nsort(a, a + n);\nint ans = 1, R = a[0].R;\nfor (int i = 1; i &lt; n; i++)\n{\nif (a[i].L &gt;= R)\n{\n++ans;\nR = a[i].R;\n}\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#_9","title":"\u5340\u9593\u9078\u9ede\u554f\u984c","text":"\u5340\u9593\u9078\u9ede\u554f\u984c <p>\u7d66\u4f60  \u689d\u7dda\u6bb5\u5340\u9593\u70ba \uff0c\u8acb\u554f\u81f3\u5c11\u8981\u53d6\u5e7e\u500b\u9ede\u624d\u80fd\u8b93\u6bcf\u500b\u5340\u9593\u81f3\u5c11\u5305\u542b\u4e00\u500b\u9ede? </p> <p>\u5c07\u5340\u9593\u4f9d\u7167\u53f3\u754c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c \u7b2c\u4e00\u500b\u5340\u9593\u7684\u53f3\u754c\uff0c\u904d\u6b77\u6240\u6709\u5340\u6bb5\uff0c\u5982\u679c\u7576\u524d\u5340\u9593\u5de6\u754c  \u4ee3\u8868\u5fc5\u9808\u591a\u9078\u4e00\u500b\u9ede ()\uff0c\u4e26\u5c07  \u7576\u524d\u5340\u9593\u53f3\u754c\u3002</p> UVa 1615 - Highway <p>\u7d66\u5b9a  \u500b\u5ea7\u6a19\uff0c\u8981\u5728  \u8ef8\u627e\u5230\u6700\u5c0f\u7684\u9ede\uff0c\u8b93\u6bcf\u500b\u5ea7\u6a19\u81f3\u5c11\u548c\u4e00\u500b\u9ede\u8ddd\u96e2 \u3002</p> <p>\u4ee5\u6bcf\u500b\u9ede  \u70ba\u5713\u5fc3\u534a\u5f91\u70ba  \u7684\u5713 \uff0c\u6c42\u51fa  \u548c  \u8ef8\u7684\u4ea4\u9ede \uff0c\u984c\u76ee\u8f49\u8b8a\u6210\u5340\u9593\u9078\u9ede\u554f\u984c\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Line\n{\ndouble L, R;\nbool operator&lt;(const Line &amp;rhs) const { return R &lt; rhs.R; }\n};\n\nint main()\n{\ndouble L, d;\nint n;\nLine a[100005];\nwhile (cin &gt;&gt; L)\n{\ncin &gt;&gt; d &gt;&gt; n;\nfor (int i = 0; i &lt; n; ++i)\n{\ndouble x, y;\ncin &gt;&gt; x &gt;&gt; y;\ndouble r = sqrt(d * d - y * y);\na[i].L = max(0.0, x - r);\na[i].R = min(L, x + r);\n}\nsort(a, a + n);\nint ans = 1, R = a[0].R;\nfor (int i = 1; i &lt; n; ++i)\n{\nif(a[i].L &gt; R)\n{\nR = a[i].R;\n++ans;\n}\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#_10","title":"\u5de5\u4f5c\u6392\u7a0b\u76f8\u95dc\u554f\u984c","text":""},{"location":"algorithm/greedy/#_11","title":"\u6700\u5c0f\u5316\u6700\u5927\u5ef6\u9072\u554f\u984c","text":"\u6700\u5c0f\u5316\u6700\u5927\u5ef6\u9072\u554f\u984c <p>\u7d66\u5b9a  \u9805\u5de5\u4f5c\uff0c\u6bcf\u9805\u5de5\u4f5c\u7684\u9700\u8981\u8655\u7406\u6642\u9577\u70ba \uff0c\u671f\u9650\u662f \uff0c\u7b2c  \u9805\u5de5\u4f5c\u5ef6\u9072\u7684\u6642\u9593\u70ba \uff0c\u539f\u672c \u70ba\u7b2c  \u9805\u5de5\u4f5c\u7684\u5b8c\u6210\u6642\u9593\uff0c\u6c42\u4e00\u7a2e\u5de5\u4f5c\u6392\u5e8f\u4f7f  \u6700\u5c0f\u3002</p> <p>\u6309\u7167\u5230\u671f\u6642\u9593\u5f9e\u65e9\u5230\u665a\u8655\u7406\u3002</p> \u8b49\u660e <p>\u5047\u8a2d\u7b2c  \u9805\u5de5\u4f5c\u548c\u7b2c  \u9805\u5de5\u4f5c\u76f8\u9130 ()\uff0c\u4e14 \uff0c\u6211\u5011\u7a31  \u662f\u76f8\u9130\u9006\u5e8f\u5c0d\u3002</p> <ul> <li>\u5c07  \u5169\u9805\u5de5\u4f5c\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u5de5\u4f5c\u7684\u5ef6\u9072\u6642\u9593 \u3002</li> <li> </li> <li> </li> </ul> <p>\u7531\u4e0a\u9762\u4e09\u9ede\u53ef\u4ee5\u63a8\u5f97\u4ea4\u63db\u662f\u76f8\u9130\u9006\u5e8f\u5c0d\u4e26\u4e0d\u6703\u589e\u52a0 \uff0c\u900f\u904e\u4e0d\u65b7\u4ea4\u63db\u76f8\u9130\u9006\u5e8f\u5c0d\uff0c\u6700\u5f8c\u8b49\u660e\u63d0\u51fa\u7684\u60f3\u6cd5\u662f\u5c0d\u7684\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Work\n{\nint t, d;\nbool operator&lt;(const Work &amp;rhs) const { return d &lt; rhs.d; }\n};\n\nint main()\n{\nint n;\nWork a[10000];\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; a[i].t &gt;&gt; a[i].d;\nsort(a, a + n);\nint maxL = 0, sumT = 0;\nfor (int i = 0; i &lt; n; ++i)\n{\nsumT += a[i].t;\nmaxL = max(maxL, sumT - a[i].d);\n}\ncout &lt;&lt; maxL &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/greedy/#_12","title":"\u6700\u5c11\u5ef6\u9072\u6578\u91cf\u554f\u984c","text":"\u6700\u5c11\u5ef6\u9072\u6578\u91cf\u554f\u984c/\u70cf\u9f9c\u5854\u554f\u984c <p>\u7d66\u5b9a  \u500b\u5de5\u4f5c\uff0c\u6bcf\u500b\u5de5\u4f5c\u7684\u9700\u8981\u8655\u7406\u6642\u9577\u70ba \uff0c\u671f\u9650\u662f \uff0c\u6c42\u4e00\u7a2e\u5de5\u4f5c\u6392\u5e8f\u4f7f\u5f97\u903e\u671f\u5de5\u4f5c\u6578\u91cf\u6700\u5c0f\u3002</p> <p>\u671f\u9650\u8d8a\u65e9\u5230\u671f\u7684\u5de5\u4f5c\u8d8a\u5148\u505a\u3002\u5c07\u5de5\u4f5c\u4f9d\u7167\u5230\u671f\u6642\u9593\u5f9e\u65e9\u5230\u665a\u6392\u5e8f\uff0c\u4f9d\u5e8f\u653e\u5165\u5de5\u4f5c\u5217\u8868\u4e2d\uff0c\u5982\u679c\u767c\u73fe\u6709\u5de5\u4f5c\u9810\u671f\uff0c\u5c31\u5f9e\u76ee\u524d\u9078\u64c7\u7684\u5de5\u4f5c\u4e2d\uff0c\u79fb\u9664\u8017\u6642\u6700\u9577\u7684\u5de5\u4f5c\u3002</p> <p>\u4e0a\u8ff0\u65b9\u6cd5\u70ba Moore-Hodgson's Algorithm\u3002</p> UVa 10154 - Weights and Measures <p>\u7d66\u5b9a\u70cf\u9f9c\u7684\u91cd\u91cf\u548c\u53ef\u627f\u53d7\u91cd\u91cf\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u758a\u5e7e\u96bb\u70cf\u9f9c?</p> <p>\u548c\u6700\u5c11\u5ef6\u9072\u6578\u91cf\u554f\u984c\u662f\u76f8\u540c\u7684\u554f\u984c\uff0c\u53ea\u8981\u5c07\u984c\u6558\u505a\u8f49\u63db\u3002</p> <ul> <li>\u5de5\u4f5c\u8655\u88e1\u6642\u9577  \u70cf\u9f9c\u91cd\u91cf</li> <li>\u5de5\u4f5c\u671f\u9650  \u70cf\u9f9c\u53ef\u627f\u53d7\u91cd\u91cf</li> <li>\u591a\u5c11\u5de5\u4f5c\u4e0d\u5ef6\u671f  \u53ef\u4ee5\u758a\u5e7e\u96bb\u70cf\u9f9c</li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Work{\nint t, d;\nbool operator&lt;(const Work &amp;rhs) const { return d &lt; rhs.d; }\n};\n\nint main()\n{\nint n = 0;\nWork a[10000];\npriority_queue&lt;int&gt; pq;\nwhile(cin &gt;&gt; a[n].t &gt;&gt; a[n].d)\n++n;\nsort(a, a + n);\nint sumT = 0, ans = n;\nfor (int i = 0; i &lt; n; ++i)\n{\npq.push(a[i].t);\nsumT += a[i].t;\nif(a[i].d&lt;sumT)\n{\nint x = pq.top();\npq.pop();\nsumT -= x;\n--ans;\n}   }\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/greedy/#_13","title":"\u4efb\u52d9\u8abf\u5ea6\u554f\u984c","text":"\u4efb\u52d9\u8abf\u5ea6\u554f\u984c <p>\u7d66\u5b9a  \u9805\u5de5\u4f5c\uff0c\u6bcf\u9805\u5de5\u4f5c\u7684\u9700\u8981\u8655\u7406\u6642\u9577\u70ba \uff0c\u671f\u9650\u662f \uff0c\u5982\u679c\u7b2c  \u9805\u5de5\u4f5c\u5ef6\u9072\u9700\u8981\u53d7\u5230  \u55ae\u4f4d\u61f2\u7f70\uff0c\u8acb\u554f\u6700\u5c11\u6703\u53d7\u5230\u591a\u5c11\u55ae\u4f4d\u61f2\u7f70\u3002</p> <p>\u4f9d\u7167\u61f2\u7f70\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u9805\u5de5\u4f5c\u4f9d\u5e8f\u5617\u8a66\u53ef\u4e0d\u53ef\u4ee5\u653e\u5728 \uff0c\u5982\u679c\u6709\u7a7a\u9592\u5c31\u653e\u9032\u53bb\uff0c\u5426\u5247\u5ef6\u5f8c\u57f7\u884c\u3002</p> Zerojudge a567 - \u6b7b\u7dda\u6392\u7a0b <p>\u7d66\u5b9a  \u9805\u5de5\u4f5c\uff0c\u6bcf\u9805\u5de5\u4f5c\u7684\u9700\u8981\u8655\u7406\u6642\u9577\u70ba \uff0c\u671f\u9650\u662f \uff0c\u5982\u679c\u7b2c  \u9805\u5de5\u4f5c\u5728\u671f\u9650\u5167\u5b8c\u6210\u6703\u7372\u5f97  \u55ae\u4f4d\u734e\u52f5\uff0c\u8acb\u554f\u6700\u591a\u6703\u7372\u5f97\u591a\u5c11\u55ae\u4f4d\u734e\u52f5\u3002</p> <p>\u548c\u4e0a\u984c\u76f8\u4f3c\uff0c\u9019\u984c\u8b8a\u6210\u4f9d\u7167\u734e\u52f5\u7531\u5927\u5230\u5c0f\u6392\u5e8f\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>struct Work\n{\nint d, p;\nbool operator&lt;(const Work &amp;rhs) const { return p &gt; rhs.p; }\n};\n\nint main()\n{\nint n;\nWork a[100005];\nbitset&lt;100005&gt; ok;\nwhile (cin &gt;&gt; n)\n{\nok.reset();\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; a[i].d &gt;&gt; a[i].p;\nsort(a, a + n);\nint ans = 0;\nfor (int i = 0; i &lt; n; ++i)\n{\nint j = a[i].d;\nwhile (j--)\nif (!ok[j])\n{\nans += a[i].p;\nok[j] = true;\nbreak;\n}\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"algorithm/greedy/#_14","title":"\u591a\u6a5f\u8abf\u5ea6\u554f\u984c","text":"\u591a\u6a5f\u8abf\u5ea6\u554f\u984c <p>\u7d66\u5b9a  \u9805\u5de5\u4f5c\uff0c\u6bcf\u9805\u5de5\u4f5c\u7684\u9700\u8981\u8655\u7406\u6642\u9577\u70ba \uff0c\u6709  \u53f0\u6a5f\u5668\u53ef\u57f7\u884c\u591a\u9805\u5de5\u4f5c\uff0c\u4f46\u4e0d\u80fd\u5c07\u5de5\u4f5c\u62c6\u5206\uff0c\u6700\u5feb\u53ef\u4ee5\u5728\u4ec0\u9ebc\u6642\u5019\u5b8c\u6210\u6240\u6709\u5de5\u4f5c?</p> <p>\u5c07\u5de5\u4f5c\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u9805\u5de5\u4f5c\u4ea4\u7d66\u6700\u5feb\u7a7a\u9592\u7684\u6a5f\u5668\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int main()\n{\nint n, m;\nint a[10000];\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; a[i];\nsort(a, a + n,greater&lt;int&gt;());\nint ans = 0;\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;pq;\nfor (int i = 0; i &lt; m &amp;&amp; i &lt; n; ++i)\n{\nans = max(ans, a[i]);\npq.push(a[i]);\n}\nfor (int i = m; i &lt; n; ++i)\n{\nint x = pq.top();\npq.pop();\nx += a[i];\nans = max(ans, x);\npq.push(x);\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/greedy/#_15","title":"\u76f8\u95dc\u984c\u76ee","text":"<ul> <li>\u5340\u9593\u9078\u9ede\u554f\u984c<ul> <li>UVa 10148 - Advertisement</li> </ul> </li> <li>\u6700\u5c0f\u5340\u9593\u8986\u84cb\u554f\u984c<ul> <li>UVa 221 - Urban Elevations</li> <li>UVa 10020 - Minimal coverage</li> <li>UVa 10382 - Watering Grass</li> </ul> </li> </ul> <ol> <li> <p>Moore-Hodgson's Algorithm \u21a9</p> </li> </ol>"},{"location":"algorithm/prefixsum/","title":"\u524d\u7db4\u548c","text":"\u524d\u7db4\u548c <p>\u7d66\u5b9a\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217 \uff0c\u7d66\u5b9a  \u7b46\u67e5\u8a62\uff0c\u6bcf\u7b46\u67e5\u8a62\u8981\u6c42\u51fa \u3002</p> <p>\u5982\u679c\u6bcf\u4e00\u6b21\u90fd\u7528\u8ff4\u5708\u7d2f\u52a0\u7b54\u6848\uff0c\u55ae\u6b21\u67e5\u8a62\u5f97\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u8981\u662f  \u7bc4\u570d\u90fd\u5728  \u4ee5\u5167\uff0c\u5f88\u5bb9\u6613\u8d85\u51fa\u6642\u9650\u3002</p>"},{"location":"algorithm/prefixsum/#_2","title":"\u63a8\u5c0e","text":"<p>\u4ee4\u524d  \u9805\u7684\u548c\u70ba \uff0c\u3002</p> <p>\u90a3\u9ebc\u524d  \u9805\u7684\u548c \u3002</p> <p>\u5f97\u51fa \u3002</p> <p>\u7b97\u51fa  \u5f8c\uff0c\u5982\u679c\u8981\u8a08\u7b97 \uff0c\u540c\u6a23\u5c07\u516c\u5f0f\u505a\u6574\u7406\uff1a</p> <p> \u3002</p> <p>\u8a08\u7b97  \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u55ae\u6b21\u67e5\u8a62\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <pre><code>int A[100], S[100];\n\nvoid generatePrefixSum(int n)\n{\nfor(int i = 1; i &lt;= n; ++i)\nS[i] = S[i - 1] + A[i];\n}\n\nint getSum(int i, int j)\n{\nreturn S[j] - S[i];\n}\n</code></pre>"},{"location":"algorithm/prefixsum/#_3","title":"\u4e8c\u7dad\u524d\u7db4\u548c","text":"<p>\u4e8c\u7dad\u524d\u7db4\u548c\u7684\u57fa\u790e\uff0c\u6392\u5bb9\u539f\u7406\uff1a\u3002</p> <p>\u5047\u8a2d \uff0c\u5c07\u8981\u8a08\u7b97\u7684\u7bc4\u570d\u756b\u5728\u4e8c\u7dad\u5e73\u9762\u4e0a\uff0c\u5047\u8a2d \uff0c\u90a3\u9ebc \uff0c\u6839\u64da\u6392\u5bb9\u539f\u7406\uff0c\u3002\uff0c\u6240\u4ee5 \u3002</p> <p>\u4eca\u5929\u8981\u67e5\u8a62  \u4e5f\u8981\u7528\u76f8\u540c\u7684\u65b9\u5f0f\uff0c\u4ee4 \uff0c\u3002</p> <p>\u8a08\u7b97  \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u55ae\u6b21\u67e5\u8a62\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <pre><code>int A[100][100], S[100][100];\n\nvoid build()\n{\nfor(int i = 0; i &lt; n; ++i)\nfor(int j = 0; j &lt; n; ++j)\nS[i][j] = S[i-1][j] + S[i][j-1] - S[i-1][j-1] + A[i][j];\n}\n\nint sum(int x1, int x2, int y1, int y2)\n{\nreturn S[x2][y2] - S[x1-1][y2] - S[x2][y1-1] + S[x1 - 1][y1 - 1];\n}\n</code></pre> <p>\u6839\u64da\u4ee5\u4e0a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u63a8\u5ee3\u5230\u4e09\u7dad\u4ee5\u4e0a\u7684\u524d\u7db4\u548c\u3002</p>"},{"location":"algorithm/prefixsum/#_4","title":"\u5dee\u5206","text":"<p>\u5047\u8a2d   </p> <p>\u90a3\u9ebc  \u5c31\u662f  \u7684\u524d  \u9805\u4e4b\u548c\uff1a\u3002</p> <p>\u7528  \u8868\u793a  \u7684\u524d  \u9805\u4e4b\u548c\uff1a </p> \u5340\u9593\u52a0\u503c <p>\u7d66\u5b9a\u5e8f\u5217 \uff0c\u7d66\u5b9a  \u6b21\u5340\u9593\u52a0\u503c\u64cd\u4f5c(\u5728  \u52a0\u4e0a )\uff0c\u8f38\u51fa\u6700\u5f8c\u7684 \u3002</p> <p>\u6bcf\u6b21\u64cd\u4f5c\uff0c\u53ea\u6703\u5f71\u97ff  \u548c  \u9019\u5169\u5c0d\u76f8\u9130\u9805\u7684\u5dee\uff0c\u5982\u679c\u4f7f\u7528\u5dee\u5206\u5e8f\u5217  \u7dad\u8b77 \uff0c\u53ea\u8981\u4fee\u6539  \u548c \u3002</p>"},{"location":"algorithm/prefixsum/#_5","title":"\u76f8\u95dc\u984c\u76ee","text":"<ul> <li>\u524d\u7db4\u548c<ul> <li>Zerojudge e339 - \u524d\u7db4\u548c\u7df4\u7fd2</li> </ul> </li> <li>\u5dee\u5206<ul> <li>Leetcode 1109 - Corporate Flight Bookings</li> </ul> </li> </ul>"},{"location":"contest/icpctaiwan2021/","title":"ICPC \u53f0\u7063\u8cfd\u5340 2021","text":"<ul> <li>\u5b98\u7db2</li> <li>\u7dda\u4e0a\u63d0\u4ea4</li> </ul>"},{"location":"contest/icpctaiwan2021/#c-community-service","title":"C - Community Service","text":"<p>\u984c\u610f\uff1a\u7d66\u5b9a\u5340\u9593  \u548c  \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u985e\u578b\u64cd\u4f5c\u3002</p> <ul> <li><code>1 name L R</code>\uff1a\u5728  \u4e4b\u9593\u63d2\u5165 <code>name</code>\u3002</li> <li><code>2 L R</code>\uff1a\u67e5\u8a62  \u4e4b\u9593\u6700\u665a\u51fa\u73fe\u7684\u540d\u5b57\uff0c\u4e26\u5c07\u5176\u522a\u9664\u3002</li> </ul> <p>\u4f5c\u6cd5\uff1a\u5c07\u6bcf\u500b <code>name</code> \u7de8\u865f\uff0c\u5229\u7528\u7dda\u6bb5\u6a39\u7dad\u8b77\u7de8\u865f\uff0c\u6bcf\u500b\u7bc0\u9ede\u9664\u4e86\u7d00\u9304\u4ee3\u8868\u5340\u9593\u5916\uff0c\u9084\u8981\u8a18\u9304 1) \u6240\u6709\u5b8c\u5168\u8986\u84cb\u8a72\u7bc0\u9ede\u5340\u9593\u7684\u7de8\u865f <code>vector&lt;int&gt; semiStack</code> 2) \u7d00\u9304\u6240\u6709\u5b50\u7bc0\u9ede\u7684 <code>semiStack</code> \u4e2d\u6700\u5927\u7684\u7de8\u865f (<code>mx</code>)\u3002\u6709\u5169\u7a2e\u4fee\u6539\u64cd\u4f5c <code>update</code> \u548c <code>rePushup</code>\uff0c\u4ed6\u5011\u5169\u500b\u7684\u552f\u4e00\u5dee\u7570\u662f\uff0c\u524d\u8005\u5728 <code>semiStack</code> \u65b0\u589e\u7de8\u865f\uff0c\u5f8c\u8005\u5728 <code>semiStack</code> \u522a\u9664\u7de8\u865f\uff0c\u5169\u7a2e\u64cd\u4f5c\u53ef\u4ee5\u5206\u958b\u5beb\u6210\u5169\u500b\u51fd\u5f0f\uff0c\u6216\u5408\u4f75\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u5982\u679c\u5408\u4f75\u6210\u4e00\u500b\u51fd\u5f0f\u6bd4\u8f03\u597d\u7dad\u8b77\uff0c<code>update/rePushup</code> \u7684 <code>pull</code>\uff0c\u5c07 <code>sumUp</code> \u66f4\u65b0\u6210\u5de6\u53f3\u5b50\u7bc0\u9ede\u7684 <code>sumUp</code> \u548c <code>mx</code>\u3002\u6709\u4e00\u7a2e\u67e5\u8a62\u64cd\u4f5c <code>query</code> \u67e5\u8a62  \u4e4b\u9593\u6700\u5927\u7684\u7de8\u865f\uff0c\u67e5\u8a62\u9664\u4e86\u53d6\u6240\u6709\u5b8c\u5168\u8986\u84cb\u8a72\u7bc0\u9ede\u5340\u9593\u7684 <code>sumUp</code> \u548c <code>mx</code>\uff0c\u9084\u8981\u53d6\u6cbf\u8def\u4e0a\u6240\u6709\u62dc\u8a2a\u904e\u9ede\u7684 <code>mx</code>\uff0c\u4f8b\u5982\u4e0b\u5716\u4e2d\u8981\u67e5\u8a62  \u7684\u6700\u5927\u503c\uff0c\u9664\u4e86\u8981\u53c3\u8003  \u548c  \u7684 <code>sumUp</code> \u548c <code>mx</code>\uff0c\u9084\u8981\u53c3\u8003 \u3001\u3001 \u548c \u7684 <code>mx</code>\u3002</p> <p></p> <p>\u8907\u96dc\u5ea6\u5206\u6790\uff1a\u6240\u6709\u64cd\u4f5c\u7684\u8907\u96dc\u5ea6\u70ba \uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <p>\u5f8c\u8a18\uff1a\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u7528\u6307\u6a19\u5beb\u7684\uff0c\u539f\u672c\u6bd4\u8f03\u559c\u6b61\u6307\u6a19\u7684\u5beb\u6cd5\uff0c\u4f46\u53c3\u8003\u5225\u4eba\u7684\u7a0b\u5f0f\u78bc\u5f8c\uff0c\u767c\u73fe\u9663\u5217\u6bd4\u8f03\u597d\u5beb\uff0c\u9664\u975e\u8981\u52d5\u614b\u958b\u9ede\uff0c\u4e0d\u7136\u4e0d\u9700\u8981\u7528\u6307\u6a19\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc ( <code>update</code> \u548c <code>rePushup</code> \u5206\u958b\u5beb) <pre><code>#pragma GCC optimize(\"O2\")\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nusing PII = pair&lt;int, int&gt;;\nusing PLL = pair&lt;LL, LL&gt;;\nusing VI = vector&lt;int&gt;;\nusing VVI = vector&lt;vector&lt;int&gt;&gt;;\nconst int INF = 1e9;\nconst int MXN = 2e5 + 5;\nconst int MXV = 0;\nconst double EPS = 1e-9;\nconst int MOD = 1e9 + 7;\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define FOR(i, L, R) for (int i = L; i &lt; (int)R; ++i)\n#define FORD(i, L, R) for (int i = L; i &gt; (int)R; --i)\n#define IOS                                                                    \\\n    cin.tie(nullptr);                                                          \\\n    cout.tie(nullptr);                                                         \\\n    ios_base::sync_with_stdio(false);\nstruct Node\n{\nint sumUp;\nNode *lc, *rc;\nvector&lt;int&gt; semiStack;\nNode() : sumUp(0), lc(nullptr), rc(nullptr) {}\n};\nbitset&lt;MXN&gt; isUsed;\n\nint getMax(Node *node)\n{\nif (!node-&gt;semiStack.empty())\nreturn max(node-&gt;sumUp, node-&gt;semiStack.back());\nreturn node-&gt;sumUp;\n}\n\nint getTop(Node *node)\n{\nreturn (node-&gt;semiStack.size() ? node-&gt;semiStack.back() : 0);\n}\n\nNode *update(Node *node, int L, int R, int qL, int qR, int val)\n{\nif(!node-&gt;lc)\nnode-&gt;lc = new Node();\nif(!node-&gt;rc)\nnode-&gt;rc = new Node();\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nif (val)\nnode-&gt;semiStack.push_back(val);\nreturn node;\n}\nint M = (L + R) &gt;&gt; 1;\nif (qL &lt;= M)\nnode-&gt;lc = update(node-&gt;lc, L, M, qL, qR, val);\nif (M &lt; qR)\nnode-&gt;rc = update(node-&gt;rc, M + 1, R, qL, qR, val);\nnode-&gt;sumUp = max(getMax(node-&gt;lc), getMax(node-&gt;rc));\nreturn node;\n}\n\nint query(Node *node, int L, int R, int qL, int qR)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nreturn node-&gt;sumUp;\n}\nint M = (L + R) &gt;&gt; 1, ret;\nif (qR &lt;= M)\nret = max(getTop(node-&gt;lc), query(node-&gt;lc, L, M, qL, qR));\nelse if (M &lt; qL)\nret = max(getTop(node-&gt;rc), query(node-&gt;rc, M + 1, R, qL, qR));\nelse\nret = max(max(getTop(node-&gt;lc), query(node-&gt;lc, L, M, qL, qR)),\nmax(getTop(node-&gt;rc), query(node-&gt;rc, M + 1, R, qL, qR)));\nreturn ret;\n}\n\nNode *rePushUp(Node *node, int L, int R, int qL, int qR, int val)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nwhile (!node-&gt;semiStack.empty() &amp;&amp; isUsed[node-&gt;semiStack.back()])\nnode-&gt;semiStack.pop_back();\nreturn node;\n}\nint M = (L + R) &gt;&gt; 1;\nif (qL &lt;= M)\nnode-&gt;lc = rePushUp(node-&gt;lc, L, M, qL, qR, val);\nif (M &lt; qR)\nnode-&gt;rc = rePushUp(node-&gt;rc, M + 1, R, qL, qR, val);\nnode-&gt;sumUp = max(getMax(node-&gt;lc), getMax(node-&gt;rc));\nreturn node;\n}\n\nint main()\n{\nIOS;\nint n, m;\nNode *root = new Node();\ncin &gt;&gt; n &gt;&gt; m;\nvector&lt;string&gt; name(m + 5);\nvector&lt;int&gt; L(m + 5), R(m + 5);\nFOR(i, 0, n) root = update(root, 0, n - 1, i, i, 0);\nisUsed.reset();\nFOR(i, 1, m + 1)\n{\nint typeID;\ncin &gt;&gt; typeID;\nif (typeID == 1)\n{\nstring s;\ncin &gt;&gt; name[i] &gt;&gt; L[i] &gt;&gt; R[i];\nroot = update(root, 0, n - 1, L[i], R[i], i);\n}\nelse\n{\ncin &gt;&gt; L[i] &gt;&gt; R[i];\nint res = max(getTop(root),query(root, 0, n - 1, L[i], R[i]));\nif (res)\n{\nisUsed[res] = true;\ncout &lt;&lt; name[res] &lt;&lt; '\\n';\nroot = rePushUp(root, 0, n - 1, L[res], R[res], res);\n}\nelse\n{\ncout &lt;&lt; \"&gt;_&lt;\\n\";\n}\n}\n}\n}\n</code></pre> \u53c3\u8003\u7a0b\u5f0f\u78bc ( <code>update</code> \u548c <code>rePushup</code> \u5408\u4f75) <pre><code>#pragma GCC optimize(\"O2\")\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nusing PII = pair&lt;int, int&gt;;\nusing PLL = pair&lt;LL, LL&gt;;\nusing VI = vector&lt;int&gt;;\nusing VVI = vector&lt;vector&lt;int&gt;&gt;;\nconst int INF = 1e9;\nconst int MXN = 2e5 + 5;\nconst int MXV = 0;\nconst double EPS = 1e-9;\nconst int MOD = 1e9 + 7;\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define FOR(i, L, R) for (int i = L; i &lt; (int)R; ++i)\n#define FORD(i, L, R) for (int i = L; i &gt; (int)R; --i)\n#define IOS                                                                    \\\n    cin.tie(nullptr);                                                          \\\n    cout.tie(nullptr);                                                         \\\n    ios_base::sync_with_stdio(false);\nstruct Node\n{\nint sumUp;\nNode *lc, *rc;\nvector&lt;int&gt; semiStack;\nNode() : sumUp(0), lc(nullptr), rc(nullptr) {}\n};\nbitset&lt;MXN&gt; isUsed;\n\nint getMax(Node *node)\n{\nif (!node-&gt;semiStack.empty())\nreturn max(node-&gt;sumUp, node-&gt;semiStack.back());\nreturn node-&gt;sumUp;\n}\n\nint getTop(Node *node)\n{\nreturn (node-&gt;semiStack.size() ? node-&gt;semiStack.back() : 0);\n}\n\nNode *update(Node *node, int L, int R, int qL, int qR, int val)\n{\nif (!node-&gt;lc)\nnode-&gt;lc = new Node();\nif (!node-&gt;rc)\nnode-&gt;rc = new Node();\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nif (val &gt; 0)\nnode-&gt;semiStack.push_back(val);\nelse if (val &lt; 0)\nwhile (!node-&gt;semiStack.empty() &amp;&amp; isUsed[node-&gt;semiStack.back()])\nnode-&gt;semiStack.pop_back();\nreturn node;\n}\nint M = (L + R) &gt;&gt; 1;\nif (qL &lt;= M)\nnode-&gt;lc = update(node-&gt;lc, L, M, qL, qR, val);\nif (M &lt; qR)\nnode-&gt;rc = update(node-&gt;rc, M + 1, R, qL, qR, val);\nnode-&gt;sumUp = max(getMax(node-&gt;lc), getMax(node-&gt;rc));\nreturn node;\n}\n\nint query(Node *node, int L, int R, int qL, int qR)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nreturn node-&gt;sumUp;\n}\nint M = (L + R) &gt;&gt; 1, ret;\nif (qR &lt;= M)\nret = max(getTop(node-&gt;lc), query(node-&gt;lc, L, M, qL, qR));\nelse if (M &lt; qL)\nret = max(getTop(node-&gt;rc), query(node-&gt;rc, M + 1, R, qL, qR));\nelse\nret = max(max(getTop(node-&gt;lc), query(node-&gt;lc, L, M, qL, qR)),\nmax(getTop(node-&gt;rc), query(node-&gt;rc, M + 1, R, qL, qR)));\nreturn ret;\n}\n\nint main()\n{\nIOS;\nint n, m;\nNode *root = new Node();\ncin &gt;&gt; n &gt;&gt; m;\nvector&lt;string&gt; name(m + 5);\nvector&lt;int&gt; L(m + 5), R(m + 5);\nFOR(i, 0, n) root = update(root, 0, n - 1, i, i, 0);\nisUsed.reset();\nFOR(i, 1, m + 1)\n{\nint typeID;\ncin &gt;&gt; typeID;\nif (typeID == 1)\n{\nstring s;\ncin &gt;&gt; name[i] &gt;&gt; L[i] &gt;&gt; R[i];\nroot = update(root, 0, n - 1, L[i], R[i], i);\n}\nelse\n{\ncin &gt;&gt; L[i] &gt;&gt; R[i];\nint res = max(getTop(root), query(root, 0, n - 1, L[i], R[i]));\nif (res)\n{\nisUsed[res] = true;\ncout &lt;&lt; name[res] &lt;&lt; '\\n';\nroot = update(root, 0, n - 1, L[res], R[res], -1);\n}\nelse\n{\ncout &lt;&lt; \"&gt;_&lt;\\n\";\n}\n}\n}\n}\n</code></pre>"},{"location":"contest/icpctaiwan2021/#d-largest-remainder","title":"D - Largest Remainder","text":"<p>\u984c\u610f\uff1a\u7d66\u5b9a  \u500b\u5404\u4f4d\u6578\u5b57\uff0c\u53ef\u4ee5\u96a8\u610f\u6392\u5e8f\uff0c\u6c42\u51fa\u4e00\u500b\u6578\u5b57\uff0c\u5728  \u4e4b\u4e0b\u6709\u6700\u5927\u7684\u503c\uff0c\u5982\u679c\u6709\u591a\u7d44\u6578\u5b57\u7b26\u5408\uff0c\u8f38\u51fa\u6700\u5927\u7684\u503c\u3002</p> <p>\u89e3\u6cd5\uff1a\u72c0\u614b DP\uff0c \u4ee3\u8868\u5728\u9078\u53d6\u5b50\u96c6\u5408  \u60c5\u6cc1\u4e0b\uff0c\u662f\u5426\u6709  \u7684\u6392\u5217\uff0c\u6700\u5927\u7684\u9918\u6578\u662f \uff0c\u53e6\u5916\u7dad\u8b77  \u70ba\u5728\u9078\u53d6\u5b50\u96c6\u5408  \u60c5\u6cc1\u4e0b\uff0c\u6709  \u7684\u6700\u5927\u6578\u5b57\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f \u3002</p> <p>\u8907\u96dc\u5ea6\u5206\u6790\uff1a\u6709  \u500b\u72c0\u614b\uff0c\u6bcf\u500b\u72c0\u614b\u9700\u8981  \u6b21\u8f49\u79fb\uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#pragma GCC optimize(\"O2\")\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nusing PII = pair&lt;int, int&gt;;\nusing PLL = pair&lt;LL, LL&gt;;\nusing VI = vector&lt;int&gt;;\nusing VVI = vector&lt;vector&lt;int&gt;&gt;;\nconst int INF = 1e9;\nconst int MXN = 0;\nconst int MXV = 0;\nconst double EPS = 1e-9;\nconst int MOD = 1e9 + 7;\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define FOR(i, L, R) for (int i = L; i &lt; (int)R; ++i)\n#define FORD(i, L, R) for (int i = L; i &gt; (int)R; --i)\n#define IOS                                                                    \\\n    cin.tie(nullptr);                                                          \\\n    cout.tie(nullptr);                                                         \\\n    ios_base::sync_with_stdio(false);\nint a[16];\nbool dp[(1 &lt;&lt; 16)][205];\nLL ans[(1 &lt;&lt; 16)][205];\n\nint main()\n{\n// IOS;\nint d, k;\ncin &gt;&gt; d &gt;&gt; k;\nmemset(dp, 0, sizeof(dp));\ndp[0][0] = 1;\nFOR(i, 0, d) cin &gt;&gt; a[i];\nFOR(i, 0, d + 1) FOR(j, 0, (1 &lt;&lt; d))\n{\nif (__builtin_popcount(j) != i)\ncontinue;\nbitset&lt;20&gt; used(j);\nFOR(s, 0, d) if (used[s] == false)\n{\nint nj = (j + (1 &lt;&lt; s));\nFOR(r, 0, k)\n{\nint nr = (r * 10 + a[s]) % k;\nif (dp[j][r] == false)\ncontinue;\ndp[nj][nr] = true;\nLL tmp = ans[j][r] * 10 + a[s];\nif (ans[nj][nr] &lt; tmp)\nans[nj][nr] = tmp;\n}\n}\n}\nFORD(i, k - 1, 0 - 1)\n{\nif (dp[(1 &lt;&lt; d) - 1][i])\n{\ncout &lt;&lt; ans[(1 &lt;&lt; d) - 1][i];\nbreak;\n}\n}\n}\n</code></pre>"},{"location":"dataStructure/bitindextree/","title":"\u6a39\u72c0\u6578\u7d44 (Bit Index Tree, BIT)","text":"\u652f\u63f4\u55ae\u9ede\u4fee\u6539\u7684\u5340\u9593\u548c\u67e5\u8a62 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \u548c  \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 x v</code>\uff1a\u5c07  \u52a0\u4e0a \u3002</li> <li><code>2 x y</code>\uff1a\u8a62\u554f  \u4e4b\u9593\u7684\u548c\u3002</li> </ul> <p>\u652f\u63f4\u4fee\u6539\u53ca\u67e5\u8a62\u5340\u9593\u8a0a\u606f\u7684\u984c\u76ee\u53ef\u4ee5\u7528\u7dda\u6bb5\u6a39\u5be6\u4f5c\uff0c\u7136\u800c\u6bd4\u7dda\u6bb5\u6a39\u5bb9\u6613\u5be6\u4f5c\u7684\u6a39\u72c0\u6578\u7d44\u4e5f\u53ef\u89e3\u6c7a\u9019\u985e\u554f\u984c\u3002\u6a39\u72c0\u6578\u7d44\u53ea\u9700\u8981\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u9663\u5217 \uff0c \u7684\u6bcf\u4e00\u500b\u4f4d\u7f6e\u5b58\u653e\u7684\u8cc7\u6599\u548c\u7de8\u865f\u6709\u95dc\uff1a</p> <ul> <li>  \u5b58\u653e  \u5230  \u7684\u8cc7\u8a0a\u3002</li> <li> \uff0c\u70ba  \u5728\u4e8c\u9032\u4f4d\u4e0b\u7684\u6700\u4f4e\u70ba  \u7684\u4f4d\u6578\u3002</li> <li>\u7bc0\u9ede  \u7684\u7236\u7bc0\u9ede\u70ba \uff0c\u7236\u7bc0\u9ede\u6709\u5b50\u7bc0\u9ede\u7684\u8cc7\u8a0a\u3002</li> </ul> <p></p> lowbit \u8a08\u7b97\u539f\u7406 <p>\u6574\u6578  \u7684\u4e8c\u88dc\u6578\uff0c\u662f\u5148\u628a  \u7684\u4e8c\u9032\u4f4d\u4e2d <code>01</code> \u4e92\u63db\uff0c\u518d\u52a0\u4e0a  \u5f97\u4f86\u7684\u3002\u5c07  \u548c  \u76f8\u6bd4\uff0c\u5927\u65bc  \u7684\u6bcf\u4e00\u4f4d\u6578\uff0c\u5982\u679c  \u662f \uff0c\u5728  \u6703\u662f \uff0c\u5982\u679c  \u662f \uff0c\u5728  \u6703\u662f \uff1b\u5c0f\u65bc  \u7684\u6bcf\u4e00\u4f4d\u6578\uff0c\u5728  \u548c  \u90fd\u6703\u662f \uff1b\u53ea\u6709  \u6240\u5c0d\u61c9\u7684\u4f4d\u6578\u5728  \u548c  \u90fd\u6703\u662f \u3002\u56e0\u6b64  \u7684\u7d50\u679c\u6703\u662f \u3002\u4e0b\u9762\u4ee5  \u70ba\u4f8b\u3002  </p>"},{"location":"dataStructure/bitindextree/#_1","title":"\u55ae\u9ede\u4fee\u6539","text":"<p>\u55ae\u9ede\u4fee\u6539 \uff0c\u9700\u66f4\u65b0\u6240\u6709\u5305\u542b  \u7684\u8cc7\u8a0a\uff0c\u5f9e  \u958b\u59cb\uff0c\u4f9d\u5e8f\u66f4\u65b0  \u548c  \u7684\u6240\u6709\u7956\u5148\u3002</p> <pre><code>void update(int i)\n{\nwhile (i &lt; N)\n{\n++BIT[i];\ni += lowbit(i);\n}\n}\n</code></pre> <p>  \u6703\u4e0d\u65b7\u589e\u52a0\uff0c\u5728\u4e8c\u9032\u4f4d\u4e0b\uff0c\u6bcf\u6b21\u81f3\u5c11\u6703\u53f3\u79fb\u4e00\u4f4d\uff0c\u4e00\u6b21\u67e5\u8a62\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p>"},{"location":"dataStructure/bitindextree/#_2","title":"\u5340\u9593\u67e5\u8a62","text":"<p>\u5340\u9593\u67e5\u8a62  \u5230  \u7684\u8cc7\u8a0a\uff0c\u5f9e  \u7372\u5f97  \u5230  \u7684\u8cc7\u8a0a\uff0c\u518d\u5230  \u7372\u5f97\u4e0b\u4e00\u500b\u5340\u9593\u7684\u8cc7\u8a0a\uff0c\u4ee5\u6b64\u985e\u63a8\u3002</p> <pre><code>int query(int i)\n{\nint ans = 0;\nwhile (i)\n{\nans += BIT[i];\ni -= lowbit(i);\n}\nreturn ans;\n}\n</code></pre> <p>  \u6703\u4e0d\u65b7\u6e1b\u5c11\uff0c\u5728\u4e8c\u9032\u4f4d\u4e0b\uff0c\u6bcf\u6b21\u6703\u5c07\u6700\u4f4e\u70ba  \u7684\u4f4d\u6578\u8b8a\u6210 \uff0c\u4e00\u6b21\u4fee\u6539\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p>"},{"location":"dataStructure/bitindextree/#_3","title":"\u61c9\u7528","text":"<p>\u53ef\u7528\u4f86\u7dad\u8b77\u53ef\u4fee\u6539\u7684\u5340\u9593\u548c\u8207\u5340\u9593\u7a4d\u67e5\u8a62\uff0c\u4e0d\u652f\u63f4\u5340\u9593\u6975\u503c\u67e5\u8a62\u3002</p> <ul> <li>  \u7684\u5340\u9593\u548c\uff08\u7a4d\uff09\u53ef\u7531  \u548c  \u7684\u5340\u9593\u548c\uff08\u7a4d\uff09\u76f8\u6e1b\uff08\u9664\uff09\u6c42\u5f97\u3002</li> <li>  \u548c  \u7684\u5340\u9593\u6975\u503c\u4e0d\u80fd\u63a8\u51fa  \u7684\u5340\u9593\u6975\u503c\u3002</li> </ul>"},{"location":"dataStructure/bitindextree/#_4","title":"\u652f\u63f4\u5340\u9593\u52a0\u503c","text":"\u652f\u63f4\u5340\u9593\u52a0\u503c\u7684\u5340\u9593\u548c\u67e5\u8a62 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \u548c  \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 x y v</code>\uff1a\u5c07  \u4e4b\u9593\u7684\u5143\u7d20\u52a0\u4e0a \u3002</li> <li><code>2 x y</code>\uff1a\u8a62\u554f  \u4e4b\u9593\u7684\u548c\u3002</li> </ul> <p>\u5340\u9593\u52a0\u503c\u53ef\u4ee5\u642d\u914d\u5dee\u5206\u6280\u5de7\u5be6\u73fe\uff0c\u4ee4  \u70ba\u5dee\u5206\u6578\u5217\uff1a</p> <p> </p> <p>\u5340\u9593\u548c\u5c31\u8b8a\u6210\uff1a</p> <p> </p> <p>\u5982\u6b64\u4e00\u4f86\uff0c\u53ea\u8981\u7dad\u8b77  \u548c \uff0c\u5c31\u80fd\u5be6\u73fe\u5340\u9593\u4fee\u6539\u7684\u529f\u80fd\u3002</p> \u9006\u5e8f\u6578\u5c0d <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217 \uff0c\u6c42\u6709\u5e7e\u7d44\u6578\u5c0d  \u6eff\u8db3  \u4e14  \u3002</p> <p>\u5c0d\u65bc\u6bcf\u500b\u4f4d\u7f6e \uff0c\u8a08\u7b97\u51fa\u6709\u5e7e\u500b  \u6eff\u8db3  \u4e14 \uff0c\u9006\u5e8f\u6578\u5c0d\u7dad\u8b77\u6bcf\u4e00\u500b\u6578\u5b57\u5404\u51fa\u73fe\u5e7e\u6b21\uff0c\u5f9e\u5de6\u5230\u53f3\u62dc\u8a2a\uff0c\u6bcf\u6b21\u627e\u51fa\u76ee\u524d\u6709\u5e7e\u500b\u6578\u5b57  (\u5168\u90e8\u7684\u500b\u6578 -  \u7684\u500b\u6578)\uff0c\u518d\u628a  \u51fa\u73fe\u500b\u6578 \u3002</p> <pre><code>#define lowbit(x) ((x) &amp; (-x))\nvoid update(int x)\n{\nwhile (x &lt; MXN)\n{\n++BIT[x];\nx += lowbit(x);\n}\n}\n\nint query(int x)\n{\nint ans = 0;\nwhile (x)\n{\nans += BIT[x];\nx -= lowbit(x);\n}\nreturn ans;\n}\n\nint main()\n{\nwhile (cin &gt;&gt; n)\n{\nint ans = 0, x;\nmemset(BIT, 0, sizeof(BIT));\nfor(int i = 1; i &lt;= n; ++i)\n{\ncin &gt;&gt; x;\n++x;\nupdate(x);\nans += i - query(x);\n}\n}\n}\n</code></pre> <ol> <li> <p>\u6a39\u72c0\u6578\u7d44 - WiwiHo \u7684\u7af6\u7a0b\u7b46\u8a18 \u21a9</p> </li> <li> <p>\u524d\u7f00\u548c &amp; \u5dee\u5206 - OI Wiki \u21a9</p> </li> </ol>"},{"location":"dataStructure/bst/","title":"\u4e8c\u5143\u5e73\u8861\u6a39 (Balanced Binary Search Tree)","text":""},{"location":"dataStructure/bst/#_1","title":"\u4e8c\u5143\u641c\u5c0b\u6a39","text":"<p>\u4e8c\u5143\u641c\u5c0b\u6a39\u53ef\u5728  \u6642\u9593\u5167\u5728\u5927\u5c0f\u70ba  \u7684\u8cc7\u6599\u4e2d\u627e\u5c0b\u5143\u7d20\u7684\u4e8c\u5143\u6a39\u3002</p> <ul> <li>\u5b9a\u7fa9\uff1a<ul> <li>\u7bc0\u9ede\u7684\u503c &gt; \u5de6\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c</li> <li>\u7bc0\u9ede\u7684\u503c&lt;\u53f3\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c</li> <li>\u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u5de6\u53f3\u5b50\u6a39\uff0c\u4e5f\u662f\u4e8c\u5143\u641c\u5c0b\u6a39</li> </ul> </li> </ul> <p>\u4e8c\u5143\u641c\u5c0b\u6a39\u5169\u500b\u91cd\u8981\u7684\u6307\u4ee4\u70ba\u63d2\u5165\u548c\u641c\u5c0b\u3002</p>"},{"location":"dataStructure/bst/#_2","title":"\u63d2\u5165","text":"<ol> <li>\u5c0d\u65bc\u6bcf\u500b\u8981\u63d2\u5165\u7684\u503c  </li> <li>\u5f9e\u6839\u7bc0\u9ede\u958b\u59cb</li> <li>\u5982\u679c\u8a72\u7bc0\u9ede\u70ba\u7a7a\uff0c\u958b\u4e00\u500b\u65b0\u7bc0\u9ede\uff0c\u4e26\u5b58\u503c  </li> <li>\u5982\u679c\u8a72\u7bc0\u9928\u7684\u503c &gt;  \uff0c  \u548c\u8a72\u7bc0\u9ede\u7684\u5de6\u5b50\u7bc0\u9ede\u6bd4\u8f03\uff0c\u53cd\u4e4b\u548c\u8a72\u7bc0\u9ede\u7684\u53f3\u5b50\u7bc0\u9ede\u6bd4\u8f03</li> </ol>"},{"location":"dataStructure/bst/#_3","title":"\u6642\u9593\u8907\u96dc\u5ea6","text":"<p>\u6bcf\u4e00\u6b21\u63d2\u5165\u67e5\u8a62\u7684\u6642\u9593\u548c\u6df1\u5ea6\u6709\u95dc\uff0c\u6df1\u5ea6\u8d8a\u9ad8\uff0c\u6548\u7387\u8d8a\u4f4e\uff0c\u7406\u60f3\u5728\u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u6df1\u5ea6\u70ba  \uff0c\u4f46\u6700\u5dee\u72c0\u6cc1\u6703\u662f  </p>"},{"location":"dataStructure/bst/#_4","title":"\u641c\u5c0b","text":"<ol> <li>\u5f9e\u6839\u7bc0\u9ede\u958b\u59cb\u641c\u5c0b</li> <li>\u6bd4\u8f03\u7bc0\u9ede\u503c\u548c\u641c\u5c0b\u503c</li> <li>\u5982\u679c\u6c92\u7bc0\u9ede\uff0c\u4ee3\u8868\u627e\u4e0d\u5230</li> <li>\u5982\u679c\u7bc0\u9ede\u503c = \u641c\u5c0b\u503c\uff0c\u4ee3\u8868\u627e\u5230</li> <li>\u5982\u679c\u7bc0\u9ede\u503c&lt;\u641c\u5c0b\u503c\uff0c\u5411\u53f3\u5b50\u7bc0\u9ede\u8d70\uff0c\u56de\u5230 2.</li> <li>\u5982\u679c\u7bc0\u9ede\u503c &gt; \u641c\u5c0b\u503c\uff0c\u5411\u5de6\u5b50\u7bc0\u9ede\u8d70\uff0c\u56de\u5230 2.</li> </ol>"},{"location":"dataStructure/bst/#_5","title":"\u4e8c\u5143\u5e73\u8861\u6a39","text":"<p>\u4e8c\u5143\u5e73\u8861\u6a39\u6703\u81ea\u52d5\u8abf\u6574\u9ad8\u5ea6\uff0c\u5e38\u898b\u7684\u6709\uff1a\u7d05\u9ed1\u6a39\u3001AVL \u6a39\u7b49\u3002</p>"},{"location":"dataStructure/bst/#stl","title":"STL","text":"<p>set \u548c map \u7686\u70ba\u7d05\u9ed1\u6a39\u5be6\u4f5c\uff0c\u652f\u63f4\u63d2\u5165\u3001\u522a\u9664\u53ca\u67e5\u8a62\u4e00\u500b\u503c\uff0c\u4e0d\u540c\u7684\u662f\uff0cset \u6703\u56de\u50b3\u9375\u503c\uff0cmap \u5247\u662f\u56de\u50b3\u5c0d\u61c9\u503c\uff0c\u4e5f\u53ef\u4ee5\u8aaa set \u7684\u9375\u503c\u548c\u5c0d\u61c9\u503c\u4e00\u6a23</p>"},{"location":"dataStructure/bst/#set","title":"set","text":"<ul> <li>\u6a19\u982d\u6a94\uff1a <code>&lt;set&gt;</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>set &lt;T1&gt; s</code> </li> <li><code>s.size()</code> \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.empty()</code> \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.clear()</code> \uff1a\u6e05\u9664\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.insert(T1 a)</code> \uff1a\u52a0\u5165\u5143\u7d20 a, \u8907\u96dc\u5ea6  \u3002</li> <li><code>s.erase(iterator first,iterator last)</code> \uff1a\u522a\u9664  , \u82e5\u6c92\u6709\u6307\u5b9a last \u5247\u53ea\u522a\u9664 first, \u8907\u96dc\u5ea6  \u8207\u52a0\u4e0a\u5143\u7d20\u500b\u6578\u6709\u95dc\u4fc2\u3002</li> <li><code>s.erase(T1 a)</code> \uff1a\u522a\u9664\u9375\u503c a, \u8907\u96dc\u5ea6  \u3002</li> <li><code>s.find(T1 a)</code> \uff1a\u56de\u50b3\u6307\u5411\u9375\u503c a \u7684\u8fed\u4ee3\u5668\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 s.end (), \u8907\u96dc\u5ea6  \u3002</li> <li><code>s.count(T a)</code> \uff1a\u8a08\u7b97\u6709\u5e7e\u500b\u5143\u7d20 <code>a</code> \u3002</li> <li><code>s.lower_bound(T1 a)</code> \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc\u7b49\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6  \u3002</li> <li><code>s.upper_bound(T1 a)</code> \uff1a\u56de\u50b3\u6307\u5411\u7b2c\u4e00\u500b\u9375\u503c\u5927\u65bc a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6  \u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nint main()\n{\nset&lt;int&gt; sb;\nsb.insert(1);\nsb.insert(2);\nsb.insert(3);\n\ncout &lt;&lt; \"1 : \" &lt;&lt; (sb.find(1) != sb.end() ? \"find\\n\" : \"not find\\n\");\ncout &lt;&lt; \"1 : \" &lt;&lt; (sb.count(1) ? \"find\\n\" : \"not find\\n\");\n\nsb.erase(1);\ncout &lt;&lt; \"1 : \" &lt;&lt; (sb.find(1) != sb.end() ? \"find\\n\" : \"not find\\n\");\ncout &lt;&lt; \"1 : \" &lt;&lt; (sb.count(1) ? \"find\\n\" : \"not find\\n\");\n}\n\n/*\n1 : find\n1 : find\n1 : not find\n1 : not find\n*/\n</code></pre>"},{"location":"dataStructure/bst/#pair","title":"pair","text":"<ul> <li>\u5c07\u5169\u500b\u8cc7\u6599\u7d81\u5728\u4e00\u8d77</li> <li>\u5236\u9020 <code>pair</code> \uff1a <code>make_pair</code> </li> </ul>"},{"location":"dataStructure/bst/#insert","title":"insert \u56de\u50b3","text":"<ul> <li><code>pair</code> </li> <li>\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\uff1afirst \u662f\u6307\u5411\u525b\u63d2\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3001second \u662f true;</li> <li>\u5982\u679c\u5143\u7d20\u5b58\u5728\uff1afirst \u662f\u6307\u5411\u9375\u503c\u70ba k.first \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0csecond \u662f false\u3002</li> </ul>"},{"location":"dataStructure/bst/#map","title":"map","text":"<ul> <li>\u4e0b\u5217\u540c <code>set</code> <ul> <li><code>m.size()</code> </li> <li><code>m.empty()</code> </li> <li><code>m.clear()</code> </li> <li><code>m.count()</code> </li> <li><code>m.erase(iterator first, iterator last)</code> </li> <li><code>m.erase(T1 a)</code> </li> <li><code>m.find(T1 a)</code> </li> <li><code>m.lower_bound(T1 a)</code> </li> <li><code>m.upper_bound(T1 a)</code> </li> </ul> </li> <li><code>m[a]</code> \uff1a\u5b58\u53d6\u9375\u503c a \u5c0d\u61c9\u7684\u503c\uff0c\u82e5 a \u6c92\u6709\u5c0d\u61c9\u7684\u503c\uff0c\u6703\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u4f7f a \u5c0d\u61c9\u5230\u9810\u8a2d\u503c\u4e26\u56de\u50b3\u4e4b\u3002\u8907\u96dc\u5ea6  \u3002</li> <li><code>m.insert(pair&lt;T1,T2&gt; a)</code> \uff1a\u52a0\u5165\u5143\u7d20 a\uff0c\u5305\u542b\u9375\u503c\u548c\u5c0d\u61c9\u503c\uff0c\u8907\u96dc\u5ea6  \u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint main()\n{\nmap&lt;string, int&gt; tb;\ntb[\"123\"] = 1;\ntb[\"owowowo\"] = 2;\ntb[\"omomo\"] = 3;\ncout &lt;&lt; \"tb[\\\"123\\\"]: \" &lt;&lt; tb[\"123\"] &lt;&lt; '\\n';\ncout &lt;&lt; \"tb[\\\"owowowo\\\"]: \" &lt;&lt; tb[\"owowowo\"] &lt;&lt; '\\n';\ncout &lt;&lt; \"tb[\\\"omomo\\\"]: \" &lt;&lt; tb[\"omomo\"] &lt;&lt; '\\n';\n\ncout &lt;&lt; \"123 : \" &lt;&lt; (tb.find(\"123\") != tb.end() ? \"find\\n\" : \"not find\\n\");\ncout &lt;&lt; \"123 : \" &lt;&lt; (tb.count(\"123\") ? \"find\\n\" : \"not find\\n\");\n\ntb.clear();\ncout &lt;&lt; \"123 : \" &lt;&lt; (tb.find(\"123\") != tb.end() ? \"find\\n\" : \"not find\\n\");\ncout &lt;&lt; \"123 : \" &lt;&lt; (tb.count(\"123\") ? \"find\\n\" : \"not find\\n\");\n\ncout &lt;&lt; \"owo : \" &lt;&lt; (tb.find(\"owo\") != tb.end() ? \"find\\n\" : \"not find\\n\");\ntb.insert(make_pair(\"owo\", 659));\ncout &lt;&lt; \"owo : \" &lt;&lt; (tb.find(\"owo\") != tb.end() ? \"find\\n\" : \"not find\\n\");\n}\n\n/*\ntb[\"123\"]: 1\ntb[\"owowowo\"]: 2\ntb[\"omomo\"]: 3\n123 : find\n123 : find\n123 : not find\n123 : not find\nowo : not find\nowo : find\n*/\n</code></pre>"},{"location":"dataStructure/bst/#multi-","title":"multi - \u7cfb\u5217","text":"<p>\u53ef\u63d2\u5165\u91cd\u8907\u5143\u7d20\uff0c\u4ee3\u50f9\u70ba map \u7121\u6cd5\u7528\u4e0b\u6a19\u904b\u7b97\u5b50</p> <ul> <li>equal_range (T1 a)\uff1a\u56de\u50b3 iterator \u7684 <code>pair&lt;lower_bound (a),upper_bound (a)&gt;</code> \uff0c\u70ba a \u6240\u5728\u7bc4\u570d</li> <li>erase (T1 a)\uff1a\u522a\u9664\u6240\u6709\u5143\u7d20 a\uff0c\u5982\u679c\u53ea\u8981\u522a\u9664\u4e00\u500b\uff0c\u7528 <code>s.erase (s.find (a))</code> </li> </ul>"},{"location":"dataStructure/bst/#unorder-","title":"unorder - \u7cfb\u5217","text":"<p>\u964d\u4f4e\u5e38\u6578\uff0c\u671f\u671b\u8907\u96dc\u5ea6\u5c11\u4e00\u500b log\uff0c\u4ee3\u50f9\u70ba\u4e0d\u6703\u6392\u5e8f\uff0c\u6c92\u6709 <code>lower_bound/upper_bound</code> \uff0c\u4e5f\u4e0d\u6703\u4f9d\u9375\u503c\u5927\u5c0f\u904d\u6b77\u3002\u8fed\u4ee3\u5668\u70ba\u55ae\u5411\u3002</p>"},{"location":"dataStructure/heap/","title":"\u5806 (Heap)","text":"<p>\u7c21\u4ecb\uff1a\u5728  \u6642\u9593\u7dad\u8b77\u6700\u5927/\u6700\u5c0f\u503c \u7e3d\u985e\uff1a\u914d\u5c0d\u5806\u3001\u4e8c\u5143\u5806\u3001\u5de6\u504f\u6a39\u3001\u4e8c\u9805\u5806\u3001\u8cbb\u6ce2\u90a3\u5951\u5806</p>"},{"location":"dataStructure/heap/#_1","title":"\u4e8c\u5143\u5806","text":"<ul> <li>\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709 2 \u500b\u5b50\u7bc0\u9ede</li> <li>\u7bc0\u9ede\u7684\u503c &gt; \u5de6\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c</li> <li>\u7bc0\u9ede\u7684\u503c &gt; \u53f3\u5b50\u6a39\u6bcf\u500b\u7bc0\u9ede\u7684\u503c</li> <li>\u4e8c\u5143\u5806\u7684\u5de6\u53f3\u5b50\u6a39\uff0c\u4e5f\u662f\u4e8c\u5143\u5806</li> <li>\u4e8c\u5143\u5806\u4e5f\u662f\u4e00\u9846 Complete Binary Tree</li> </ul> <p>\u91cd\u8981\u64cd\u4f5c\u70ba\u63d2\u5165\u548c\u522a\u9664\uff0c\u64cd\u4f5c\u904e\u7a0b\u4e2d\u8981\u4fdd\u6301\u662f\u4e00\u9846 Complete Binary Tree\uff0c\u4e0b\u9762\u8aaa\u660e\u4ee5\u7dad\u8b77\u6700\u5927\u503c\u7684 Heap \u4f86\u8aaa\u660e\uff1a</p>"},{"location":"dataStructure/heap/#_2","title":"\u63d2\u5165","text":"<ol> <li>\u63d2\u5728\u6a39\u7684\u6700\u5f8c\u9762</li> <li>\u8ddf\u7236\u7bc0\u9ede\u6bd4\u8f03\uff0c\u5982\u679c\u7236\u7bc0\u9ede\u7684\u503c&lt;\u8a72\u7bc0\u9ede\u7684\u503c\u5c31\u4ea4\u63db\uff0c\u4ee5\u6b64\u985e\u63a8</li> </ol>"},{"location":"dataStructure/heap/#_3","title":"\u522a\u9664","text":"<ol> <li>\u522a\u9664\u6839\u7bc0\u9ede\u5f8c\uff0c\u628a\u6700\u5f8c\u4e00\u500b\u7bc0\u9ede\u79fb\u5230\u6700\u4e0a\u982d</li> <li>\u8a72\u7bc0\u9ede\u548c\u5169\u500b\u5b50\u7bc0\u9ede\u6bd4\u8f03\uff0c\u5169\u7bc0\u9ede\u5176\u4e2d\u503c\u8f03\u5927\u7684\u90a3\u4e00\u500b\uff08\u6211\u5011\u7a31\u70ba  )\u3002\u5982\u679c\u8a72\u7bc0\u9ede\u7684\u503c\u5c0f\u65bc  \u7684\u503c\uff0c\u5c31\u4ea4\u63db\u5169\u7bc0\u9ede\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u985e\u63a8</li> </ol> <pre><code>int heap[N], top = 0;\nvoid push(int v)\n{\nheap[++top] = v;\nfor (int i = top; i &gt; 1;)\n{\nif (heap[i] &lt;= heap[i / 2])\nbreak;\nswap(heap[i], heap[i / 2]);\ni &lt;&lt;= 1;\n}\n}\nvoid pop()\n{\nheap[1] = heap[top--];\nfor (int i = 1; (i &lt;&lt; 1) &lt;= top;)\n{\nif (heap[i] &lt; heap[i &lt;&lt; 1])\n{\nswap(heap[i], heap[i &lt;&lt; 1]);\ni &lt;&lt;= 1;\n}\nelse if ((i &lt;&lt; 1) &lt; top &amp;&amp; heap[i] &lt; heap[(i &lt;&lt; 1) + 1])\n{\nswap(heap[i], heap[(i &lt;&lt; 1) + 1]);\ni = (i &lt;&lt; 1) + 1;\n}\nelse\n{\nbreak;\n}\n}\n}\n</code></pre>"},{"location":"dataStructure/heap/#stl","title":"STL","text":"<p>C++ \u7684 <code>priorty_queue</code> \uff08\u512a\u5148\u968a\u5217\uff09\uff0c\u662f\u4e00\u7a2e Heap \u7684\u5be6\u4f5c\u3002</p> <ul> <li>\u6a19\u982d\u6a94\uff1a <code>&lt;queue&gt;</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>priorty_queue &lt;T&gt; pq</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>priorty_queue &lt;T,Con,Cmp&gt; pq</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>priorty_queue &lt;T,Con,Cmp&gt; pq(iterator first, iterator seecond)</code> \u63d2\u5165  \u5167\u7684\u6771\u897f</li> <li><code>pq.push(T a)</code> \uff1a\u63d2\u5165\u5143\u7d20  \uff0c\u8907\u96dc\u5ea6  </li> <li><code>pq.pop()</code> \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>pq.top()</code> \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>pq.size()</code> \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6  </li> <li><code>pq.empty()</code> \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6  </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint main()\n{\npriority_queue&lt;int&gt; Q;\nQ.push(2);\ncout &lt;&lt; Q.top() &lt;&lt; '\\n';\nQ.push(5);\ncout &lt;&lt; Q.top() &lt;&lt; '\\n';\nQ.pop();\ncout &lt;&lt; Q.top() &lt;&lt; '\\n';\nQ.push(3);\ncout &lt;&lt; Q.top() &lt;&lt; '\\n';\n}\n\n/*\n2\n5\n2\n3\n*/\n</code></pre>"},{"location":"dataStructure/list/","title":"List","text":"<p>\u9663\u5217\u5982\u679c\u8981\u5f9e\u4e2d\u9593\u63d2\u5165\u4e00\u500b\u5143\u7d20\uff0c\u9700\u8981\u5c07\u5176\u5f8c\u9762\u6240\u6709\u5143\u7d20\u642c\u79fb\u4e00\u683c\uff0c\u9700\u8017\u8cbb  \uff0c\u9023\u7d50\u4e32\u5217\uff08 <code>linklist</code> \uff09\u80fd\u53ea\u82b1  \u5b8c\u6210\u63d2\u5165\u3002</p> <pre><code>struct Node\n{\nint v;\nNode *next = nullptr, *prev = nullptr;\n};\n</code></pre> <p>\u53ef\u4ee5\u5229\u7528\u9663\u5217\u53d6\u4ee3\u6307\u6a19\u4f86\u5be6\u4f5c <code>linklist</code> \u3002 C++ \u63d0\u4f9b list \u51fd\u5f0f\u5eab\u5be6\u4f5c\u96d9\u5411\u4e32\u5217\u3002</p> <ul> <li>\u6a19\u982d\u6a94\uff1a <code>&lt;list&gt;</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>list &lt;T&gt; L</code> </li> <li><code>L.size()</code> \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6  </li> <li><code>L.empty()</code> \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6  </li> <li><code>L.push_front(T a),L.push_back(T a)</code> \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>L.pop_front(),L.pop_back()</code> \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>L.insert(iterator it,size_type n,T a)</code> \uff1a\u5728 it \u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u63d2\u5165 n \u500b a \u4e26\u56de\u50b3\u6307\u5411 a \u7684\u8fed\u4ee3\u5668\u3002\u8907\u96dc\u5ea6  \u3002</li> <li><code>L.erase(iterator first,iterator last)</code> \uff1a\u628a  \u6307\u5230\u7684\u6771\u897f\u5168\u90e8\u522a\u6389\uff0c\u56de\u50b3 last\u3002\u8907\u96dc\u5ea6\u8207\u780d\u6389\u7684\u6578\u91cf\u5448\u7dda\u6027\u95dc\u4fc2\uff0c\u5982\u679c\u6c92\u6709\u6307\u5b9a last, \u90a3\u6703\u81ea\u52d5\u8996\u70ba\u53ea\u522a\u9664 first \u90a3\u9805\u3002</li> <li><code>L.splice(iterator it,list &amp;x,iterator first,iterator last)</code> \uff1afirst \u548c last \u662f x \u7684\u8fed\u4ee3\u5668\u3002\u6b64\u51fd\u5f0f\u6703\u628a  \u6307\u5230\u7684\u6771\u897f\u5f9e x \u4e2d\u526a\u4e0b\u4e26\u52a0\u5230 it \u6240\u6307\u7684\u90a3\u9805\u7684\u524d\u9762\u3002x \u6703\u56e0\u70ba\u9019\u9805\u51fd\u5f0f\u800c\u6539\u8b8a\u3002\u82e5\u672a\u6307\u5b9a last, \u90a3\u53ea\u6703\u5c07 first \u6240\u6307\u7684\u6771\u897f\u79fb\u5230 it \u524d\u65b9\u3002\u8907\u96dc\u5ea6\u8207\u8f49\u79fb\u500b\u6578\u5448\u7dda\u6027\u95dc\u4fc2\u3002</li> </ul> <pre><code>// adapt from cppreference\n#include &lt;iostream&gt;\n#include &lt;list&gt;\n\nint main()\n{\nstd::list&lt;char&gt; letters{'o', 'm', 'g', 'w', 't', 'f'};\n\nif (!letters.empty())\n{\ncout &lt;&lt; letters.front() &lt;&lt; '\\n';\ncout &lt;&lt; letters.back() &lt;&lt; '\\n';\n}\n}\n\n/*\no\nf\n*/\n</code></pre>"},{"location":"dataStructure/queue/","title":"\u4f47\u5217 (Queue)","text":"<p>\u6709\u5169\u500b\u7aef\u53e3\uff0c\u4e00\u500b\u8ca0\u8cac\u63d2\u5165\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb</p> <p></p> <pre><code>struct Queue\n{\nint q[N], head, tail;\nQueue() : head(0), tail(0) {}\nint size() { return tail - head; }\nvoid push(int x) { q[tail++] = x; }\nint front() { return q[head]; }\nvoid pop() { head++; }\n}\n</code></pre>"},{"location":"dataStructure/queue/#stl","title":"STL","text":"<ul> <li>\u6a19\u982d\u6a94\uff1a <code>&lt;queue&gt;</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>queue &lt;T&gt; q</code> </li> <li><code>q.push(T a)</code> \uff1a\u63d2\u5165\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>q.pop()</code> \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>q.front()</code> \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>q.size()</code> \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6  </li> <li><code>q.empty()</code> \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6  </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint main()\n{\nqueue&lt;int&gt; st;\nst.push(1);\ncout &lt;&lt; st.front() &lt;&lt; '\\n';\nst.push(2);\ncout &lt;&lt; st.front() &lt;&lt; '\\n';\nst.push(3);\ncout &lt;&lt; st.front() &lt;&lt; '\\n';\nst.pop();\ncout &lt;&lt; st.front() &lt;&lt; '\\n';\n}\n\n/*\n1\n1\n1\n2\n*/\n</code></pre>"},{"location":"dataStructure/queue/#deque","title":"deque \u96d9\u5411\u4f47\u5217","text":"<p>\u6709\u5169\u500b\u7aef\u53e3\uff0c\u7686\u8ca0\u8cac\u522a\u9664\u3001\u63d2\u5165\u7684\u8cc7\u6599\u7d50\u69cb</p> <ul> <li>\u6a19\u982d\u6a94\uff1a <code>&lt;deque&gt;</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>deque &lt;T&gt; dq</code> </li> <li><code>dq.push_front(T a),dq.push_back(T a)</code> \uff1a\u63d2\u5165\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>dq.pop_front(),dq.pop_back()</code> \uff1a\u522a\u9664\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>dq.front(),dq.back()</code> \uff1a\u56de\u50b3\u9802\u7aef/\u5c3e\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>dq.size()</code> \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6  </li> <li><code>dq.empty()</code> \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6  </li> </ul>"},{"location":"dataStructure/segmenttree/","title":"\u7dda\u6bb5\u6a39 (Segment Tree)","text":"\u652f\u63f4\u55ae\u9ede\u4fee\u6539\u7684\u5340\u9593\u548c\u67e5\u8a62 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \u548c  \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 x v</code>\uff1a\u5c07  \u6539\u6210 \u3002</li> <li><code>2 x y</code>\uff1a\u8a62\u554f  \u4e4b\u9593\u7684\u548c\u3002</li> </ul> <p>\u7dda\u6bb5\u6a39\u662f\u4e00\u7a2e\u5e38\u7528\u4f86\u65bc\u8655\u7406\u5340\u9593\u67e5\u8a62\u53ca\u4fee\u6539\u7684\u984c\u76ee\uff0c\u6839\u7bc0\u9ede\u7d00\u9304  \u4e4b\u9593\u7684\u6578\u64da\uff0c\u4ee4\u6bcf\u500b\u7d00\u9304  \u7bc0\u9ede \uff0c\u4ee4 \uff0c\u5de6\u5b50\u7bc0\u9ede\u70ba \uff0c\u53f3\u5b50\u7bc0\u9ede\u70ba \u3002</p> <ul> <li></li> <li></li> </ul>"},{"location":"dataStructure/segmenttree/#_1","title":"\u5132\u5b58","text":"<p>\u7dda\u6bb5\u6a39\u53ef\u4ee5\u7528\u548c Complete Binary Tree \u4e00\u6a23\u7684\u65b9\u5f0f\u5132\u5b58\uff08\u96d6\u7136\u4e0d\u5b8c\u5168\u662f Complete Binary Tree\uff09\uff0c\u4e00\u822c\u4f86\u8aaa\u6703\u958b\u5927\u5c0f\u70ba  \u7684\u9663\u5217\u907f\u514d\u7de8\u865f\u8d85\u51fa\u9663\u5217\u7bc4\u570d\u3002</p> <p>\u9664\u4e86\u9663\u5217\uff0c\u6307\u6a19\u4e5f\u53ef\u7528\u4f86\u5be6\u4f5c\u7dda\u6bb5\u6a39\uff0c\u4f46\u6307\u6a19\u5be6\u4f5c\u8f03\u5bb9\u6613\u51fa\u932f\uff0c\u5efa\u8b70\u975e\u5fc5\u8981\u4e0d\u7528\u6307\u6a19\u5be6\u4f5c\u3002</p> <pre><code>// \u9663\u5217\u7248\u672c\n#define LC(x) ((x &lt;&lt; 1))     // \u5de6\u5b50\u7bc0\u9ede\u7684 ID\n#define RC(x) ((LC(x)) | 1)  // \u5de6\u5b50\u7bc0\u9ede\u7684 ID\nint seg[(N &lt;&lt; 4)];\n\n// \u6307\u6a19\u7248\u672c\nstruct Node{\nNode *lc, *rc;\n};\n</code></pre>"},{"location":"dataStructure/segmenttree/#_2","title":"\u55ae\u9ede\u4fee\u6539","text":"<p>\u5047\u8a2d\u8981\u66f4\u65b0\u7684\u4f4d\u7f6e\u70ba \uff0c\u90a3\u9ebc\u6240\u6709\u5305\u542b  \u7684\u7bc0\u9ede\u5c31\u8981\u66f4\u65b0\u3002\u5f9e\u8d77\u9ede\u958b\u59cb\uff0c\u904d\u6b77\u6240\u6709\u5305\u542b  \u7684\u7bc0\u9ede\uff0c\u6700\u6df1\u7684\u7bc0\u9ede\u70ba \u3002 \u76f4\u63a5\u66f4\u65b0\u503c\uff0c\u5176\u4ed6\u904d\u6b77\u7684\u7bc0\u9ede  \u5247\u662f\u6839\u64da  \u548c  \u7684\u503c\u5408\u4f75\u3002</p> <pre><code>void update(int rt, int L, int R, int qL, int qR, int val)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nseg[rt] = val;\nreturn;\n}\nint M = (L + R) &gt;&gt; 1;\nif (qL &lt;= M)\nupdate(LC(rt), L, M, qL, qR, val);\nif (M + 1 &lt;= qR)\nupdate(RC(rt), M + 1, R, qL, qR, val);\nseg[rt] = seg[LC(rt)] + seg[RC(rt)];\n}\n</code></pre> <p>\u6bcf\u6b21\u5f80\u4e0b\u4e00\u5c64\u7bc0\u9ede\u5340\u9593\u9577\u5ea6\u6703\u6e1b\u534a\uff0c\u6700\u591a\u5f80\u4e0b  \u5c64\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> \u521d\u59cb\u5316\u5beb\u6cd5 <p>\u6709\u4e00\u4e9b\u4eba\u6703\u5beb\u4e00\u500b <code>build</code> \u51fd\u5f0f\u904d\u6b77\u4e26\u66f4\u65b0\u6240\u6709\u7bc0\u9ede\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <pre><code>void build(int rt, int L, int R, vector&lt;int&gt; &amp;v)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nseg[rt] = v[L];\nreturn;\n}\nint M = (L + R) &gt;&gt; 1;\nbuild(LC(rt), L, M, v);\nbuild(RC(rt), M + 1, R, v);\nseg[rt] = seg[LC(rt)] + seg[RC(rt)];\n}\n</code></pre> <p></p> <p>\u53e6\u4e00\u7a2e\u65b9\u5f0f\u662f\u5229\u7528  \u6b21\u55ae\u9ede\u4fee\u6539\u521d\u59cb\u5316\u7dda\u6bb5\u6a39\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <p>\u4e0d\u8ad6\u54ea\u7a2e\u5beb\u6cd5\uff0c\u90fd\u4e0d\u6703\u5f71\u97ff\u6700\u7d42\u7684\u6642\u9593\u8907\u96dc\u5ea6\u3002</p>"},{"location":"dataStructure/segmenttree/#_3","title":"\u5340\u9593\u67e5\u8a62","text":"\u652f\u63f4\u5340\u9593\u4fee\u6539\u7684\u5340\u9593\u548c\u67e5\u8a62 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \u548c  \u7b46\u64cd\u4f5c\uff0c\u6709\u5169\u7a2e\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 x y v</code>\uff1a\u5c07  \u5230  \u6539\u6210 \u3002</li> <li><code>2 x y</code>\uff1a\u8a62\u554f  \u4e4b\u9593\u7684\u548c\u3002</li> </ul> <p>\u5047\u8a2d\u8981\u67e5\u8a62\u7684\u7bc4\u570d \uff0c\u8981\u627e\u51fa\u6240\u6709\u7bc0\u9ede  \u5176\u4e2d \u3002</p> <ul> <li></li> <li></li> </ul> <pre><code>int query(int rt, int L, int R, int qL, int qR)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\nreturn seg[rt];\nint M = (L + R) &gt;&gt; 1;\nif (qR &lt; M + 1)\nreturn query(LC(rt), L, M, qL, qR);\nelse if (M &lt; qL)\nreturn query(RC(rt), M + 1, R, qL, qR);\nelse\nreturn query(LC(rt), L, M, qL, qR) + query(RC(rt), M + 1, R, qL, qR);\n}\n</code></pre> <p>\u7b26\u5408\u7684\u5340\u9593\u6700\u591a\u6709  \u500b\uff0c\u6700\u591a\u6703\u62dc\u8a2a  \u500b\u7bc0\u9ede<sup>1</sup>\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \u3002</p>"},{"location":"dataStructure/segmenttree/#_4","title":"\u5340\u9593\u4fee\u6539","text":"<p>\u5047\u8a2d\u8981\u4fee\u6539\u7684\u7bc4\u570d \uff0c\u4eff\u6548\u5340\u9593\u67e5\u8a62\u7684\u601d\u7dad\uff0c\u66f4\u65b0\u6240\u6709\u7bc0\u9ede  \u5176\u4e2d \uff0c\u4e26\u5728\u8a72\u7bc0\u9ede\u4e0a\u65b0\u589e\u4e00\u500b\u61f6\u4eba\u6a19\u8a18\uff0c\u7576\u8981\u62dc\u8a2a  \u7684\u5b50\u7bc0\u9ede\u6642\uff0c\u6703\u5c07\u61f6\u4eba\u6a19\u8a18\u50b3\u905e\u7d66  \u7684\u5b50\u7bc0\u9ede\u3002</p> <pre><code>void push(int rt, int L, int R)\n{\nif(tag[rt]==-1)\nreturn;\nint M = (L + R) &gt;&gt; 1;\ntag[LC(rt)] = tag[rt];\nseg[LC(rt)] = (M - L + 1) * tag[rt];\ntag[RC(rt)] = tag[rt];\nseg[RC(rt)] = (R - M) * tag[rt];\ntag[rt] = -1;\n}\n\nvoid update(int rt, int L, int R, int qL, int qR, int val)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\n{\nseg[rt] = (R - L + 1) * val;\ntag[rt] = val;\nreturn;\n}\npush(rt, L, R);\nint M = (L + R) &gt;&gt; 1;\nif (qL &lt;= M)\nupdate(LC(rt), L, M, qL, qR, val);\nif (M + 1 &lt;= qR)\nupdate(RC(rt), M + 1, R, qL, qR, val);\nseg[rt] = seg[LC(rt)] + seg[RC(rt)];\n}\n\nint query(int rt, int L, int R, int qL, int qR)\n{\nif (qL &lt;= L &amp;&amp; R &lt;= qR)\nreturn seg[rt];\npush(rt, L, R);\nint M = (L + R) &gt;&gt; 1;\nif (qR &lt; M + 1)\nreturn query(LC(rt), L, M, qL, qR);\nelse if (M &lt; qL)\nreturn query(RC(rt), M + 1, R, qL, qR);\nelse\nreturn query(LC(rt), L, M, qL, qR) + query(RC(rt), M + 1, R, qL, qR);\n}\n</code></pre> <p>\u6642\u9593\u8907\u96dc\u5ea6 \uff0c\u539f\u56e0\u548c\u5340\u9593\u67e5\u8a62\u76f8\u540c\u3002</p>"},{"location":"dataStructure/segmenttree/#_5","title":"\u61c9\u7528","text":"<p>\u53ef\u7528\u4f86\u67e5\u8a62\u5340\u9593\u7e3d\u548c\u6216\u6975\u503c\uff0c\u652f\u63f4\u5340\u9593\u4fee\u6539\uff0c\u4e0d\u652f\u63f4\u5340\u9593\u522a\u9664\u3001\u7ffb\u8f49\u3002</p>"},{"location":"dataStructure/segmenttree/#_6","title":"\u4f8b\u984c\u7df4\u7fd2","text":"Codeforces 747F - Igor and Interesting Numbers <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u6578\u5217 \uff0c\u7d66\u5b9a  \u7b46\u8a62\u554f  \u4e4b\u9593\u6709\u5e7e\u500b\u6578\u4e0d\u80fd\u6574\u9664\u8a72\u5340\u9593\u81f3\u5c11\u4e00\u500b\u6578\u3002</p> <p>\u80fd\u6574\u9664\u6240\u6709\u7684\u6578\uff0c\u53ea\u6709\u8a72\u5340\u9593\u6700\u5927\u516c\u56e0\u6578\uff0c\u5229\u7528\u7dda\u6bb5\u6a39\u7dad\u8b77\u5340\u9593 GCD\uff0c\u67e5\u8a62\u6642\u8a08\u7b97  \u4e4b\u9593\u6709\u5e7e\u500b\u6578\u5b57  \u8a72\u5340\u9593\u7684 GCD\u3002</p> <ol> <li> <p>Implementation - Competitive Programming Algorithms \u21a9</p> </li> </ol>"},{"location":"dataStructure/sparetable/","title":"Sparse Table","text":"\u5340\u9593\u548c\u67e5\u8a62 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \u548c  \u7b46\u67e5\u8a62\uff1a</p> <ul> <li><code>x y</code>\uff1a\u8a62\u554f  \u4e4b\u9593\u7684\u6700\u5927\u503c\u3002</li> </ul> <p>Sparse Table \u9069\u5408\u7528\u65bc\u67e5\u8a62\u5340\u9593\u8a0a\u606f\uff0c\u4f46\u4e0d\u5e36\u4efb\u4f55\u4fee\u6539\u64cd\u4f5c\u7684\u554f\u984c\u3002Sparse Table \u9700\u8981  \u7684\u7a7a\u9593\u3002</p>"},{"location":"dataStructure/sparetable/#_1","title":"\u5efa\u8868","text":"<p>\u5229\u7528\u500d\u589e\u6cd5\u7684\u6982\u5ff5\u5efa\u8868\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u8a18\u9304\u7b2c  \u4e4b\u9593\u7684\u7b54\u6848\u3002</li> <li>\u8f49\u79fb\uff1a </li> <li>  \u7684\u4f5c\u7528\u548c\u984c\u76ee\u6709\u95dc\uff0c\u4f8b\u5982\u4e0a\u6558\u554f\u984c\u6c42\u5340\u9593\u6700\u5927\u503c\uff0c\u90a3\u9ebc \u3002</li> </ul> <p></p> <pre><code>for (int i = 0; i &lt; N; ++i)\ncin &gt;&gt; sp[0][i];\nfor (int i = 1; i &lt; LOG; ++i)\n{\nfor (int j = 0; j + p2[i] - 1 &lt; n; ++j)\n{\nsp[i][j] = max(sp[i - 1][j], sp[i - 1][j + p2[i - 1]]);\n}\n}\n</code></pre> <p>\u7e3d\u5171\u6709  \u500b\u72c0\u614b\uff0c\u6bcf\u500b\u72c0\u614b\u6703\u82b1  \u6642\u9593\u8f49\u79fb\uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p>"},{"location":"dataStructure/sparetable/#_2","title":"\u67e5\u8a62","text":"<p>\u5047\u8a2d\u8981\u67e5\u8a62\u7684\u5340\u9593 \uff0c\u73fe\u5728\u8981\u9069\u5408\u7684\u5169\u500b\u9577\u5ea6\u70ba  \u7684\u5340\u9593\u525b\u597d\u8986\u84cb\u4f4f \uff0c\u5169\u500b\u5340\u9593\u53ef\u80fd\u91cd\u758a\uff0c\u4f46\u4e0d\u80fd\u8d85\u51fa  \u4e4b\u5916\u3002 \u6703\u662f \uff0c\u9019\u5169\u500b\u5340\u9593\u7684\u8d77\u9ede\u6703\u662f  \u548c \u3002</p> <pre><code>// \u9810\u8655\u7406\np2[0] = 1;\nlg2[1] = 0;\nlg2[2] = 1;\nfor(int i = 0; i &lt; LOG; ++i) p2[i] = p2[i - 1] &lt;&lt; 1;\nfor(int i = 3; i &lt; MXN; ++i) lg2[i] = lg2[(i &gt;&gt; 1)] + 1;\n\n// \u67e5\u8a62\nint L, R;\ncin &gt;&gt; L &gt;&gt; R;\nint lg = lg2[R - L + 1];\ncout &lt;&lt; max(sp[lg][L], sp[lg][R - p2[lg] + 1]) &lt;&lt; '\\n';\n</code></pre> <p>\u67e5\u8a62\u6642\u9593\u8907\u96dc\u5ea6\u662f \uff0c \u548c  \u53ef\u4ee5\u5148\u9810\u8655\u7406\u3002</p>"},{"location":"dataStructure/sparetable/#_3","title":"\u61c9\u7528","text":"<p>\u53ef\u7528\u4f86\u67e5\u8a62\u5340\u9593\u6975\u503c\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\uff08\u540c\u500b\u5143\u7d20\u6703\u5305\u542b\u5728\u8a31\u591a\u5340\u9593\uff09\u3002</p> <ol> <li> <p>Sparse Table - WiwiHo \u7684\u7af6\u7a0b\u7b46\u8a18 \u21a9</p> </li> </ol>"},{"location":"dataStructure/stack/","title":"stack \u5806\u758a","text":"<p>\u6709\u5169\u500b\u7aef\u53e3\uff0c\u5176\u4e2d\u4e00\u500b\u5c01\u9589\uff0c\u53e6\u4e00\u500b\u7aef\u53e3\u8ca0\u8cac\u63d2\u5165\u3001\u522a\u9664\u7684\u8cc7\u6599\u7d50\u69cb</p> <p></p> <pre><code>struct stack\n{\nint st[N], top;\nStack() : top(0) {}\nint size() { return top; }\nvoid push(int x) { st[++top] = x; }\nint top() { assert(top &gt; 0) return st[top]; }\nvoid pop()\n{\nif (top)\n--top;\n}\n}\n</code></pre> <ul> <li>\u6a19\u982d\u6a94\uff1a <code>&lt;stack&gt;</code> </li> <li>\u5efa\u69cb\u5f0f\uff1a <code>stack &lt;T&gt; s</code> </li> <li><code>s.push(T a)</code> \uff1a\u63d2\u5165\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.pop()</code> \uff1a\u522a\u9664\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.top()</code> \uff1a\u56de\u50b3\u9802\u7aef\u5143\u7d20\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.size()</code> \uff1a\u56de\u50b3\u5143\u7d20\u500b\u6578\uff0c\u8907\u96dc\u5ea6  </li> <li><code>s.empty()</code> \uff1a\u56de\u50b3\u662f\u5426\u70ba\u7a7a\uff0c\u8907\u96dc\u5ea6  </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nint main()\n{\nstack&lt;int&gt; st;\nst.push(1);\ncout &lt;&lt; st.top() &lt;&lt; '\\n';\nst.push(2);\ncout &lt;&lt; st.top() &lt;&lt; '\\n';\nst.push(3);\ncout &lt;&lt; st.top() &lt;&lt; '\\n';\nst.pop();\ncout &lt;&lt; st.top() &lt;&lt; '\\n';\n}\n\n/*\n1\n2\n3\n2\n*/\n</code></pre>"},{"location":"dataStructure/stl/","title":"\u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Template Libiary, STL)","text":""},{"location":"dataStructure/stl/#stl","title":"\u4ec0\u9ebc\u662f STL?","text":"<p>C++ \u5167\u5efa\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5c07\u4e00\u4e9b\u5e38\u898b\u5beb\u6210\u6a21\u677f\uff0c\u53ef\u4ee5\u65b9\u4fbf\u4f7f\u7528\u3002</p>"},{"location":"dataStructure/stl/#_1","title":"\u578b\u614b\u6a21\u677f <code>&lt;&gt;</code>","text":"<p>\u7576\u4f60\u8981\u4f7f\u7528\u5bb9\u5668\u6642\uff0c\u4f60\u5fc5\u9808\u8981\u544a\u8a34 C++ \u8aaa\uff0c\u4f60\u7684\u8cc7\u6599\u578b\u614b\u662f\u4ec0\u9ebc\uff0c\u578b\u614b\u6a21\u677f\u7684\u7528\u9014\u5c31\u662f\u5728\u65bc\u6b64\u3002 \u7528\u6cd5\uff1a <code>C &lt;T&gt; name</code> \u800c\u5bb9\u5668\u5167\u90e8\u6771\u897f\u4e0d\u6703\u53ea\u6709\u4e00\u500b\uff0c\u50cf map \u5c31\u9700\u8981\u5169\u7a2e\u578b\u614b\u3002 <code>map &lt;T1, T2&gt; name</code> \u6709\u6642\u5019\u53c3\u6578\u4e0d\u9808\u5beb\u6eff\uff0c\u4e0d\u5beb\u6eff\u7684\u5730\u65b9\u7684\u503c\u70ba\u9810\u8a2d\u503c\u3002</p>"},{"location":"dataStructure/stl/#iterator","title":"\u8fed\u4ee3\u5668 (Iterator)","text":"<p>\u5982\u679c\u4f60\u60f3\u5728\u5bb9\u5668\u4e2d\u904d\u6b77\uff0c\u4f60\u53ef\u80fd\u60f3\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 <code>[]</code> \uff0c\u4f46\u4e0d\u662f\u6240\u6709\u5bb9\u5668\u90fd\u50cf\u9663\u5217\uff0c\u90fd\u6709\u652f\u63f4\u4e0b\u6a19\u904b\u7b97\u5b50\uff0c\u6240\u4ee5 C++ \u70ba\u6bcf\u500b\u5bb9\u5668\u90fd\u63d0\u4f9b\u4e00\u500b\u8cc7\u6599\u578b\u614b\u53eb \"\u8fed\u4ee3\u5668\"\uff0c\u4f60\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u7576\u6210\u4e00\u7a2e\u6307\u6a19\uff0c\u5047\u8a2d\u6709\u4e00\u500b\u8fed\u4ee3\u5668 it\uff0c\u52a0\u4e0a\u661f\u865f <code>*</code> \u53ef\u4ee5\u5b58\u53d6 IT \u6240\u6307\u5411\u7684\u5167\u5bb9\uff0c\u4f9d\u64da\u8fed\u4ee3\u5668\u7684\u5f37\u5230\u5f31\u53ef\u5206\u70ba\u4e09\u7a2e\uff1a</p> <ul> <li>\u96a8\u6a5f\u5b58\u53d6\uff08Random Access)\uff1a\u53ef\u8207\u6574\u6578\u505a +- \u6cd5\u3001\u905e\u589e\u53ca\u905e\u6e1b</li> <li>\u96d9\u5411\uff08Bidirectional\uff09\u8fed\u4ee3\u5668\uff1a\u905e\u589e\u53ca\u905e\u6e1b</li> <li>\u55ae\u5411\uff08Forward\uff09\u8fed\u4ee3\u5668\uff1a\u53ea\u80fd\u905e\u589e     \u6839\u64da\u7528\u6cd5\u53ef\u5206\u70ba\u5169\u7a2e\uff1a</li> <li>\u8f38\u5165\uff08Input\uff09\u8fed\u4ee3\u5668\uff1a\u8b80\u53d6\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u5165\u8fed\u4ee3\u5668\u3002</li> <li>\u8f38\u51fa\uff08Output\uff09\u8fed\u4ee3\u5668\uff1a\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\u6642\uff0c\u9664\u4e86\u5e38\u6578\uff08const\uff09\u8fed\u4ee3\u5668\uff08\u4e5f\u5c31\u662f\u898f\u5b9a\u4e0d\u80fd\u66f4\u52d5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5167\u5bb9\uff09\u4ee5\u5916\uff0c\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u7576\u4f5c\u8f38\u51fa\u8fed\u4ee3\u5668\u3002     C++ \u5728\u8a31\u591a\u5bb9\u5668\u4e2d\u63d0\u4f9b\u6b63\u5411\u548c\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u524d\u8005\u7531\u524d\u5f80\u5f8c\uff0c\u5f8c\u8457\u7531\u5f8c\u5f80\u524d\uff0c\u5ba3\u544a\u6642\u5206\u5225\u70ba <code>C::iterator</code> \u53ca <code>C::reverse\\_iterator</code> \uff0c\u6bcf\u7a2e\u8fed\u4ee3\u5668\u5206\u5225\u6709\u4e00\u5c0d\u8fed\u4ee3\u5668\u4ee3\u8868\u982d\u5c3e\uff0c\u5982\u4e0b\u8868\uff0c\u6ce8\u610f end \u7cfb\u5217\u6307\u5411\u8a72\u5bb9\u5668\u6700\u5f8c\u4e00\u9805\u7684\u5f8c\u4e00\u9805\uff0c\u4e0d\u8981\u5c0d\u4ed6\u505a\u4eba\u548c\u53d6\u503c\u6216\u4fee\u6539\u3002</li> </ul> \u6b63\u5411 \u9006\u5411 \u53ef\u6539\u503c C.begin(), C.end() C.rbegin(), C.rend() \u4e0d\u53ef\u6539\u503c C.cbegin(), C.cend() C.crbegin(),C.crend()"},{"location":"dynamicProgramming/basic/","title":"\u57fa\u790e\u984c\u76ee","text":"UVa 00900 - Brick Wall Patterns  <p>\u7d66\u5b9a  \u7684\u78da\u982d\uff0c\u53ef\u4ee5\u76f4\u653e\u6216\u6a6b\u653e\uff0c\u554f\u6709\u5e7e\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u62fc\u6eff  \u7684\u5e73\u9762\u3002</p> <p>\u7528\u905e\u8ff4\u6a39\u5c07\u4e00\u90e8\u5206\u7684\u89e3\u5217\u51fa\u4f86\uff0c\u5c07\u89e3\u5206\u6210 \uff0c\u4f9d\u7167\u7bad\u982d\u7684\u8d77\u9ede\u548c\u7d42\u9ede\u505a\u6574\u7406\uff0c\u53ef\u4ee5\u767c\u73fe  \u7684\u89e3\u4f86\u81ea  \u548c  \u7684\u89e3\uff0c \u7684\u89e3\u4f86\u81ea  \u548c  \u7684\u89e3...\uff0c\u63a8\u51fa  \u4f86\u81ea  \u548c  \u7684\u89e3\u3002</p> <p>\u7528\u4e00\u500b\u5f0f\u5b50\u6574\u7406\u4e0a\u9762\u6558\u8ff0\u5c31\u662f \uff0c \u4ee3\u8868\u62fc\u6eff  \u7684\u65b9\u6cd5\u6578\u3002</p> <p></p> <p>\u52d5\u614b\u898f\u5283\u5c31\u662f\u5c07\u6240\u6709\u89e3\u5206\u985e\uff0c\u518d\u627e\u51fa\u6240\u6709\u5206\u985e\u9593\u7684\u95dc\u4fc2\uff0c\u5728\u52d5\u614b\u898f\u5283\u4e2d\uff0c\u5206\u985e\u88ab\u7a31\u70ba\u300c\u72c0\u614b\u300d\uff0c\u95dc\u4fc2\u88ab\u7a31\u70ba\u300c\u8f49\u79fb\u300d\u3002</p> <p>\u52d5\u614b\u898f\u5283\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ul> <li>\u5b9a\u7fa9\u72c0\u614b\uff1a\u8cc7\u6599\u8981\u600e\u9ebc\u88ab\u5206\u985e\uff0c\u5206\u985e\u4e4b\u9593\u53ef\u7528  \u5230\u591a\u500b\u7279\u5fb5\u5206\u958b\uff0c\u6211\u5011\u7528\u51fd\u6578  \u8868\u793a\u4e00\u500b\u5206\u985e\u3002</li> <li>\u8a02\u51fa\u521d\u59cb\u72c0\u614b\uff1a\u6c92\u6709\u88ab\u6307\u5230\u6216\u662f\u7279\u6b8a\u7684\u5206\u985e\u8981\u8a2d\u521d\u59cb\u503c\u3002</li> <li>\u8a02\u51fa\u8f49\u79fb\u5f0f\uff1a\u95dc\u4fc2\u7684\u8d77\u9ede\u548c\u7d42\u9ede\u3002</li> </ul> <p>\u6642\u9593\u8907\u96dc\u5ea6\u70ba\u95dc\u4fc2\u7684\u6578\u91cf\u4e0a\u9650\uff0c\u5206\u985e\u6578\u91cf\u4e58\u4e0a\u4e00\u500b\u5206\u985e\u6700\u591a\u7684\u95dc\u4fc2\u6578\uff0c\u7a7a\u9593\u8907\u96dc\u5ea6\u70ba\u5206\u985e\u6578\u91cf\u3002</p>"},{"location":"dynamicProgramming/basic/#_2","title":"\u8cbb\u5f0f\u6578\u5217","text":"<p>\u4e0a\u9762\u63d0\u5230\u7684\u984c\u76ee\u662f\u8cbb\u5f0f\u6578\u5217\uff0c\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u7528\u52d5\u614b\u898f\u5283\u8a08\u7b97\u8cbb\u5f0f\u6578\u5217\u3002</p> \u8cbb\u5f0f\u6578\u5217 <p>\u8cbb\u5f0f\u6578\u5217\u7684\u5b9a\u7fa9\uff1a  \u3002 \u7d66\u5b9a  \uff0c\u8acb\u6c42\u51fa  \u3002</p> <p>\u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u8cbb\u5f0f\u6578\u5217\u7b2c  \u9805\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> <li>\u8f49\u79fb\uff1a  \u3002</li> </ul> <p>\u4e0b\u5217\u5c55\u793a\u56db\u7a2e\u8a08\u7b97\u8cbb\u5f0f\u6578\u5217\u7684\u7248\u672c\uff1a</p>"},{"location":"dynamicProgramming/basic/#_3","title":"\u905e\u8ff4\uff08\u672a\u642d\u914d\u9663\u5217\uff09","text":"<pre><code>int f(int n)\n{\nif (n &lt; 2)\n{\nreturn n;\n}\nreturn f(n - 1) + f(n - 2);\n}\n</code></pre> <p>\u9019\u7a2e\u7248\u672c\u7684\u6642\u9593\u8907\u96dc\u5ea6  \uff0c\u548c\u8cbb\u5f0f\u6578\u5217\u6210\u9577\u901f\u5ea6\u76f8\u540c\uff0c\u6642\u9593\u6548\u7387\u975e\u5e38\u4f4e\u3002</p> <p></p>"},{"location":"dynamicProgramming/basic/#_4","title":"\u905e\u8ff4\uff08\u642d\u914d\u9663\u5217\uff09","text":"<p>\u9019\u7a2e\u7248\u672c\u5efa\u7acb\u4e0a\u500b\u7248\u672c\u7684\u57fa\u790e\uff0c\u589e\u52a0\u4e86\u9663\u5217\u7d00\u9304\u5df2\u8a08\u7b97\u51fa\u7684\u7b54\u6848\u3002</p> <pre><code>int dp[30];\nint f(int n)\n{\nif (dp[n] != -1)\n{\nreturn dp[n];\n}\nreturn dp[n] = f(n - 1) + f(n - 2);\n}\n\nint main()\n{\nmemset(dp, -1, sizeof(dp));\ndp[0] = 0;\ndp[1] = 1;\ncout &lt;&lt; f(25) &lt;&lt; '\\n';\n}\n</code></pre> <p>\u4e00\u958b\u59cb\u5c07\u6bcf\u500b  \u8a2d\u70ba  \uff0c\u4ee3\u8868\u8a72\u72c0\u614b\u672a\u88ab\u8a08\u7b97\u3002</p> \u6280\u5de7\uff1a\u8868\u793a\u672a\u8a08\u7b97\u72c0\u614b <p>\u5c07\u9663\u5217\u7684\u6578\u503c\u521d\u59cb\u5316\u4e00\u500b\u4e0d\u53ef\u80fd\u6210\u70ba\u7b54\u6848\u7684\u6578\u5b57 (\u4f8b\u5982\uff1a)\uff0c\u4ee3\u8868\u8a72\u72c0\u614b\u672a\u88ab\u8a08\u7b97\u3002</p> <p>\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> \u6642\u9593\u8907\u96dc\u5ea6\u8b49\u660e <p>\u9019\u7a2e\u7248\u672c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u6211\u5011\u7528\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u89e3\u91cb\uff1a</p> <pre><code>int dp[30];\nint f(int p, int n)\n{\ncout &lt;&lt; p &lt;&lt; \" call \" &lt;&lt; n &lt;&lt; '\\n';\nif (dp[n] != -1)\n{\nreturn dp[n];\n}\nreturn dp[n] = f(n, n - 1) + f(n, n - 2);\n}\n\nint main()\n{\nmemset(dp, -1, sizeof(dp));\ndp[0] = 0;\ndp[1] = 1;\nf(-1, 5);\n}\n\n/*\n-1 call 5\n5 call 4\n4 call 3\n3 call 2\n2 call 1\n2 call 0\n3 call 1\n4 call 2\n5 call 3\n*/\n</code></pre> <p>\u7576\u547c\u53eb \uff0c\u6bcf\u500b \uff0c\u81f3\u591a\u6703\u88ab\u547c\u53eb\u5169\u6b21\uff0c\u7b2c\u4e00\u6b21  \u88ab  \u547c\u53eb\uff0c\u9019\u6642  \u9084\u6c92\u88ab\u8a08\u7b97\uff0c\u56e0\u6b64\u6703\u7e7c\u7e8c\u905e\u8ff4\u6c42\u503c\uff1b\u7b2c\u4e8c\u6b21  \u88ab  \u547c\u53eb\uff0c\u9019\u6642  \u5df2\u88ab\u8a08\u7b97\uff0c\u76f4\u63a5\u56de\u50b3\u7d50\u679c\u3002\u6bcf\u500b  \u6700\u591a\u547c\u53eb\u5169\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <p></p>"},{"location":"dynamicProgramming/basic/#_5","title":"\u8ff4\u5708\uff08\u5f80\u524d\u770b\uff09","text":"<p>\u7576\u524d\u72c0\u614b\u662f\u5f9e\u90a3\u4e9b\u72c0\u614b\u5f97\u5230\u3002</p> <pre><code>int main()\n{\nint dp[30];\ndp[0] = 0;\ndp[1] = 1;\nfor (int i = 2; i &lt; 30; ++i)\n{\ndp[i] = dp[i - 1] + dp[i - 2];\n}\ncout &lt;&lt; dp[5] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"dynamicProgramming/basic/#_6","title":"\u8ff4\u5708\uff08\u5f80\u5f8c\u770b\uff09","text":"<p>\u7576\u524d\u72c0\u614b\u6703\u5f71\u97ff\u90a3\u4e9b\u72c0\u614b\u3002</p> <pre><code>int main()\n{\nint dp[30];\nmemset(dp, 0, sizeof(dp));\ndp[0] = 0;\ndp[1] = 1;\nfor (int i = 0; i &lt; 30; ++i)\n{\nif (i + 1 &lt; 30)\n{\ndp[i + 1] += dp[i];\n}\nif (i + 2 &lt; 30)\n{\ndp[i + 2] += dp[i];\n}\n}\ncout &lt;&lt; dp[5] &lt;&lt; '\\n';\n}\n</code></pre> DP \u5be6\u4f5c\u8fa6\u6cd5 <ul> <li>\u905e\u8ff4</li> <li>\u8ff4\u5708 (\u5411\u524d\u770b)</li> <li>\u8ff4\u5708 (\u5411\u5f8c\u770b)</li> </ul> <p>\u9664\u4e86\u8cbb\u5f0f\u6578\u5217\uff0c\u4efb\u4f55\u6578\u5217\u53ef\u4ee5\u5beb\u6210  \u7684\u5f62\u5f0f\uff0c\u7686\u53ef\u5229\u7528 DP \u4f86\u89e3\u51fa\u3002</p>"},{"location":"dynamicProgramming/basic/#pascals-triangle","title":"\u5e15\u65af\u5361\u4e09\u89d2\u5f62 (Pascal's triangle)","text":"Question <p>\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c  \u5c64\u7b2c  \u9805  \uff0c\u7d66\u5b9a  \uff0c\u8acb\u6c42\u51fa\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c  \u5c64\u7b2c  \u9805\u3002</p> <p>\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u6709\u4ee5\u4e0b\u6027\u8cea\uff1a  \uff0c\u6839\u64da\u6027\u8cea\u8a2d\u8a08\u51fa\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7684\u7b2c  \u5c64\u7b2c  \u9805\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> <li>\u8f49\u79fb\uff1a  \u3002</li> </ul> <pre><code>int main()\n{\nint dp[30][30];\nmemset(dp, 0, sizeof(dp));\nfor (int i = 0; i &lt; 30; ++i)\n{\ndp[i][0] = dp[i][i] = 1;\n}\nfor (int i = 1; i &lt; 30; ++i)\n{\nfor (int j = 1; j &lt; 30; ++j)\n{\ndp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n}\n}\n}\n</code></pre>"},{"location":"dynamicProgramming/basic/#atcoder-educational-dp-contest-a-frog-1","title":"AtCoder Educational DP Contest A - Frog 1","text":"Frog <p>\u6709\u96bb\u9752\u86d9\u8981\u5f9e\u7b2c  \u584a\u77f3\u982d\u8df3\u5230\u7b2c  \u584a\u77f3\u982d\uff0c\u6bcf\u584a\u77f3\u982d\u90fd\u6709\u9ad8\u5ea6  \uff0c\u6bcf\u4e00\u6b21\u53ef\u4ee5\u5f9e\u7b2c  \u584a\u8df3\u5230\u7b2c  \u584a\uff0c\u6210\u672c\u70ba\u5169\u584a\u77f3\u982d\u7684\u9ad8\u4f4e\u5dee\uff0c\u6c42\u6700\u5c0f\u6210\u672c\u3002</p> <p>\u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u5f9e\u7b2c  \u584a\u77f3\u982d\u8df3\u5230\u7b2c  \u584a\u77f3\u982d\u7684\u6700\u5c0f\u6210\u672c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> <li>\u8f49\u79fb\uff1a  \u3002</li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <p>\u4f5c\u8005\uff1a allem40306 </p> <pre><code>int main()\n{\nint n;\ncin &gt;&gt; n;\nvector&lt;int&gt; h(n + 5), dp(n + 5);\nFOR(i, 0, n) { cin &gt;&gt; h[i]; }\nfill(dp.begin(), dp.end(), INF);\ndp[0] = 0;\nFOR(i, 1, n) FOR(j, 1, 3)\n{\nif (i - j &lt; 0)\n{\nbreak;\n}\ndp[i] = min(dp[i], dp[i - j] + abs(h[i] - h[i - j]));\n}\ncout &lt;&lt; dp[n - 1] &lt;&lt; '\\n';\n}\n</code></pre> \u6280\u5de7\uff1a (\u524d\u7db4\u72c0\u614b) <p>\u4e00\u7dad DP \u5e38\u7528\u72c0\u614b\uff0c\u7d93\u5178\u7684\u4f8b\u5b50\u70ba\u524d\u7db4\u548c\u3002</p>"},{"location":"dynamicProgramming/basic/#_7","title":"\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c","text":"\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \uff0c\u6c42\u51fa\u4e00\u7d44  \uff0c\u4f7f\u5f97  \u6700\u5927\u3002</p>"},{"location":"dynamicProgramming/basic/#1-ij","title":"\u65b9\u6cd5 1\uff1a\u679a\u8209","text":"<p>\u70ba\u4e86\u80fd\u5feb\u901f\u7b2c  \u9805\u5230\u7b2c  \u9805\u7684\u548c\uff0c\u9019\u88e1\u5229\u7528\u524d\u7db4\u548c\u52a0\u901f\u8a08\u7b97\u3002</p> <pre><code>int ans = A[1];\nsum[1] = A[1];\n\nfor (int i = 2; i &lt;= n; ++i)\n{\nsum[i] = A[i] + sum[i - 1];\n}\n\nfor (int i = 2; i &lt;= n; ++i)\n{\nfor (int j = i; j &lt; n; ++j)\n{\nans = max(sum[j] - sum[i - 1]);\n}\n}\n</code></pre>"},{"location":"dynamicProgramming/basic/#2","title":"\u65b9\u6cd5 2","text":"<ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u524d  \u9805\u7684\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> <li>\u8f49\u79fb\uff1a  \u3002</li> </ul> <pre><code>int ans = A[1], dp[N];\n\nfor (int i = 2; i &lt;= n; ++i)\n{\ndp[i] = max(dp[i - 1], 0) + A[i];\nans = max(ans, dp[i]);\n}\n</code></pre> <p>\u53ea\u6709  \u7684\u8cc7\u8a0a\u6703\u88ab\u7528\u5230\uff0c\u53c8  \u53ef\u88ab  \u8986\u84cb\uff0c\u6545\u53ef\u53ea\u7528\u4e00\u500b\u8b8a\u6578\u7d00\u9304\uff0c\uff08\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff09\u3002</p> <pre><code>int ans = A[1], mx = A[1];\n\nfor (int i = 2; i &lt;= n; ++i)\n{\nmx = max(mx, 0) + A[i];\nans = max(ans, mx);\n}\n</code></pre>"},{"location":"dynamicProgramming/basic/#3","title":"\u65b9\u6cd5 3","text":"<ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u524d  \u9805\u7684\u6700\u5c0f\u7684\u524d\u7db4\u548c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> <li>\u8f49\u79fb\uff1a  \u3002</li> </ul> <p>\u7b54\u6848\u70ba  \uff08\u7d50\u5c3e\u70ba\u7b2c  \u9805\u7684\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c\uff09\u3002</p> <pre><code>int ans = A[1];\nsum[1] = dp[1] = A[1];\n\nfor (int i = 2; i &lt;= n; ++i)\n{\nsum[i] = A[i] + sum[i - 1];\ndp[i] = min(dp[i - 1], sum[i]);\nans = max(ans, sum[i] - dp[i - 1]);\n}\n</code></pre>"},{"location":"dynamicProgramming/basic/#_8","title":"\u52a0\u4e0a\u9577\u5ea6\u9650\u5236","text":"\u6700\u5927\u9023\u7e8c\u5340\u9593\u548c 2 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u5e8f\u5217  \uff0c\u6c42\u51fa\u4e00\u7d44  \uff0c\u4f7f\u5f97  \u6700\u5927\u3002</p> <p>\u4e00\u6a23\u5148\u8a08\u7b97\u51fa\u524d\u7db4\u548c\uff0c\u5c0d\u65bc\u6bcf\u500b  \uff0c\u627e\u51fa  \uff0c\u76f4\u63a5\u679a\u8209\u7684\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p> <p>\u89c0\u5bdf\u4ee5\u4e0b\u6027\u8cea\uff1a\u5047\u8a2d  \u4e14  \uff0c\u7576\u904d\u6b77\u5230  \uff0c  \u9019\u9805\u8cc7\u6599\u56e0\u70ba\u4f4d\u7f6e\u548c\u672c\u8eab\u6578\u503c\u5169\u9805\u56e0\u7d20\uff0c\u4e0d\u53ef\u80fd\u6bd4  \u9084\u8981\u597d\uff0c\u56e0\u6b64\u4e0d\u518d\u9700\u8981\u8003\u616e  \u662f\u5426\u70ba\u89e3\u3002</p> <p>\u6839\u64da\u4ee5\u4e0a\u89c0\u5bdf\uff0c\u53ef\u4ee5\u7528\u8cc7\u6599\u7d50\u69cb\uff08deque\uff09\u7dad\u8b77\u53ef\u80fd\u89e3\uff0c\u7576\u9047\u5230\u4ee5\u4e0b\u60c5\u6cc1\uff0c  \u518d\u4e5f\u4e0d\u80fd\u6210\u70ba\u6700\u4f73\u89e3\u3002</p> <ul> <li>\u9577\u5ea6\u8d85\u904e  </li> <li>\u53f3\u908a\u51fa\u73fe\u4e00\u500b\u66f4\u597d\u7684\u89e3</li> </ul> <p></p> <p>\u6bcf\u500b\u89e3\u6700\u591a\u88ab\u63d2\u5165\u548c\u522a\u9664\u4e00\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[15] = {0, 6, -8, 4, -10, 7, 9, -6, 4, 5, -1};\nint sum[15];\n\nint main()\n{\nint L = 3, ans = 0;\nfor (int i = 1; i &lt;= 10; ++i)\n{\nsum[i] = a[i] + sum[i - 1];\n}\ndeque&lt;int&gt; dq;\ndq.push_back(0);\nfor (int i = 1; i &lt;= 10; ++i)\n{\nif (i - dq.front() &gt; L)\ndq.pop_front();\nans = max(ans, sum[i] - sum[dq.front()]);\nwhile (!dq.empty() &amp;&amp; sum[i] &lt; sum[dq.back()])\n{\ndq.pop_back();\n}\ndq.push_back(i);\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u6280\u5de7\uff1a\u55ae\u8abf\u5c0d\u5217\u512a\u5316 <p>\u5229\u7528\u984c\u76ee\u4e2d\u7684\u300c\u55ae\u8abf\u6027\u300d\uff0c\u5229\u7528\u8cc7\u6599\u7d50\u69cb\u7dad\u8b77\u53ef\u80fd\u7684\u89e3\uff0c\u901a\u5e38\u53ef\u4ee5\u8b93\u6642\u9593\u8907\u96dc\u5ea6\u964d\u4f4e  \u500b\u7dad\u5ea6 (e.g. )\u3002</p>"},{"location":"dynamicProgramming/basic/#_9","title":"\u6700\u5927\u77e9\u5f62\u9762\u7a4d","text":"\u6700\u5927\u77e9\u5f62\u9762\u7a4d <p>\u7d66\u5b9a  \u689d\u76f8\u9023\u7684\u9577\u689d\u5716\uff0c\u6c42\u5716\u5167\u6700\u5927\u9577\u65b9\u5f62\u9762\u7a4d\u3002</p> <p></p> <p>\u5c0d\u65bc\u6bcf\u500b\u9ad8\u5ea6  \uff0c\u8a08\u7b97\u5de6\u53f3\u908a\u754c  \uff0c\u9762\u7a4d  </p> <p>\u7528\u8ff4\u5708\u679a\u8209\u627e\u5230\u7b54\u6848\uff0c\u6642\u9593\u8907\u96dc\u5ea6  \uff0c\u7528\u4e0a\u6587\u63d0\u5230\u7684\u55ae\u8abf\u968a\u5217\u512a\u5316\uff0c\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p> <p>\u8a08\u7b97  \u70ba\u4f8b\uff0c\u5c0d\u65bc\u6bcf\u500b\u4f4d\u7f6e  \uff0c\u548c\u5806\u758a  \uff0c\u5f9e\u53f3\u5230\u5de6\u904d\u6b77\u5143\u7d20\uff1a</p> <ul> <li>\u5982\u679c  \u70ba\u7a7a\uff0c  </li> <li>\u5982\u679c  \uff0c  </li> <li>\u5982\u679c  \uff0c  \u3001  </li> </ul> <p>\u904d\u6b77\u6240\u6709\u5143\u7d20\u5f8c\uff0c\u5982\u679c  \u9084\u6709\u5143\u7d20\uff0c\u5c0d\u65bc\u6bcf\u500b\u5143\u7d20  \uff0c  </p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 25;\n\nint main()\n{\nint n;\ncin &gt;&gt; n;\nvector&lt;int&gt; H(n + 5), L(n + 5), R(n + 5);\nfor (int i = 0; i &lt; n; ++i)\ncin &gt;&gt; H[i];\nstack&lt;int&gt; st;\n// calculate R[]\nfor (int i = 0; i &lt; n; ++i)\n{\nwhile (!st.empty() &amp;&amp; H[st.top()] &gt; H[i])\n{\nR[st.top()] = i - 1;\nst.pop();\n}\nst.push(i);\n}\nwhile (!st.empty())\n{\nR[st.top()] = n - 1;\nst.pop();\n}\n// calculate L[]\nfor (int i = n - 1; i &gt;= 0; --i)\n{\nwhile (!st.empty() &amp;&amp; H[st.top()] &gt; H[i])\n{\nL[st.top()] = i + 1;\nst.pop();\n}\nst.push(i);\n}\nwhile (!st.empty())\n{\nL[st.top()] = 0;\nst.pop();\n}\nint ans = 0;\nfor (int i = 0; i &lt; n; ++i)\n{\nans = max(ans, H[i] * (R[i] - L[i] + 1));\ncout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; L[i] &lt;&lt; ' ' &lt;&lt; R[i] &lt;&lt; '\\n';\n}\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"dynamicProgramming/basic/#_10","title":"\u5ef6\u4f38\u984c\u76ee","text":"\u6700\u5927\u77e9\u5f62\u9762\u7a4d 2 <p>\u7d66\u5b9a  \u7684\u683c\u5b50  \uff0c\u6bcf\u683c\u683c\u5b50\u53ea\u6709\u6578\u5b57  \u6216  \uff0c\u8acb\u6c42\u51fa\u53ea\u5305\u542b  \u7684\u6700\u5927\u77e9\u5f62\u3002</p> <pre><code>0 0 0 0 0\n0 1 0 0 1\n1 1 1 0 1\n1 1 1 1 1\n0 0 0 0 0\n</code></pre> <p>\u6211\u5011\u5148\u7b97\u51fa\u4ee5\u4e0b\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u7531  \u5f80\u4e0a\u9023\u7e8c\u6709\u5e7e\u500b  </li> <li>\u521d\u59cb\u72c0\u614b\uff1a  </li> <li>\u8f49\u79fb\uff1a      </li> </ul> <p>\u4ee5\u984c\u76ee\u7bc4\u4f8b\u70ba\u4f8b\u5b50\uff0c  \u70ba\uff1a</p> <pre><code>0 0 0 0 0\n0 1 0 0 1\n1 2 1 0 2\n2 3 2 1 3\n0 0 0 0 0\n</code></pre> <p>\u5982\u679c\u55ae\u6c42\u77e9\u5f62\u5e95\u90e8\u843d\u5728\u67d0\u4e00\u689d\u6c34\u5e73\u7dda\u4e0a\u7684\u6700\u5927\u77e9\u5f62\u9762\u7a4d\uff0c\u53ef\u5229\u7528\u4e0a\u6587\u63d0\u904e\u7684\u55ae\u8abf\u968a\u5217\u512a\u5316\u6c42\u5f97\uff1b\u5c0d\u6bcf\u4e00\u689d\u6c34\u5e73\u7dda\u6c42\u4e00\u6b21\u6700\u5927\u77e9\u5f62\u9762\u7a4d\uff0c\u518d\u53d6\u6700\u5927\u503c\uff0c\u5c31\u6703\u662f\u672c\u984c\u7b54\u6848\u3002</p>"},{"location":"dynamicProgramming/basic/#_11","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u6578\u5217<ul> <li>Zerojudge d212 - \u6771\u6771\u722c\u968e\u68af </li> </ul> </li> <li>\u6a5f\u5668\u4eba\u5f80\u53f3\u4e0b\u8d70\u554f\u984c<ul> <li>UVa 00825 - Walking on the Safe Side </li> </ul> </li> <li>DAG DP<ul> <li>UVA 10000 - Longest Paths </li> </ul> </li> <li>AtCoder Educational DP Contest B - Frog 2 </li> <li>AtCoder Educational DP Contest C - Vacation </li> </ul>"},{"location":"dynamicProgramming/digit/","title":"\u6578\u4f4d DP (\u4f4d\u6578 DP)","text":"<p>\u5f9e  \u5230  \u6709\u591a\u5c11\u6578\u5b57\u6eff\u8db3\u984c\u76ee\u689d\u4ef6\u3002</p> <p>\u5e38\u898b\u7684\u72c0\u614b\u7dad\u5ea6\u70ba (1) \u524d  \u4f4d\u6578 (2) \u6700\u5f8c\u4e00\u4f4d\u653e\u7684\u6578\u5b57 (3) \u524d  \u4f4d\u6578\u662f\u5426\u548c  \u7684\u524d  \u4f4d\u4e00\u81f4\u3002</p> <p>\u984c\u76ee\u8b8a\u5f62\uff0c\u8a62\u554f  \u4e4b\u9593\u6709\u591a\u5c11\u6578\u5b57\u6eff\u8db3\u984c\u76ee\u689d\u4ef6\uff1a\u5206\u5225\u505a  \u548c  \u7684\u7d50\u679c\u518d\u76f8\u6e1b\u3002</p> AtCoder Beginner Contest 154E \u2013 Almost Everywhere Zero <p>  \u5230  \u4e2d\u6709\u5e7e\u500b\u6578\u5b57\u5305\u542b  \u500b\u975e  \u6578\u5b57\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u4ee3\u8868\u524d  \u4f4d\u6578\uff0c\u6709  \u500b\u975e  \u6578\u5b57\uff0c \u4ee3\u8868\u524d  \u4f4d\u525b\u597d\u662f  \u7684\u524d  \u4f4d\u7684\u72c0\u6cc1\uff0c \u5247\u70ba\u81f3\u5c11\u4e00\u4f4d\u6578\u5c0f\u65bc N \u7684\u76f8\u5c0d\u4f4d\u6578\u7684\u72c0\u6cc1\uff0c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a </li> <li>\u8f49\u79fb\uff1a\u5047\u8a2d\u73fe\u5728\u8981\u586b\u5165 \u3002<ul> <li> </li> <li>\u5982\u679c \uff0c\uff0c\u5426\u5247\u4e0d\u8b8a\u3002</li> <li> </li> <li>\u5982\u679c  \u4e14 \uff0c \u662f\u975e\u6cd5\u7684\u3002</li> </ul> </li> </ul> <p>\u7b2c\u4e09\u500b\u72c0\u614b\u7528\u4f86\u5224\u65b7\u7b2c  \u4f4d\u6578\u7684\u5408\u6cd5\u7bc4\u570d\uff1a</p> <ul> <li>\u5047\u8a2d  <ul> <li>\u5982\u679c\u524d  \u4f4d\u6578\u5b57\u70ba \uff0c\u7b2c  \u4f4d\u6578\u53ef\u4ee5\u662f  </li> <li>\u5982\u679c\u524d  \u4f4d\u6578\u5b57\u70ba \uff0c\u7b2c  \u4f4d\u6578\u53ef\u4ee5\u662f  </li> </ul> </li> <li>\u73fe\u5728\u8981\u586b\u5165\u7b2c  \u4f4d\uff0c <ul> <li>\u5982\u679c\u524d  \u4f4d\u6578\u5b57\u548c  \u7684\u524d  \u4f4d\u6578\u5b57\u76f8\u540c\uff0c\u7b2c  \u4f4d\u6578\u53ef\u4ee5\u662f \u3002</li> <li>\u5982\u679c\u524d  \u4f4d\u6578\u5b57\u548c  \u7684\u524d  \u4f4d\u6578\u5b57\u4e0d\u540c\uff0c\u7b2c  \u4f4d\u6578\u53ef\u4ee5\u662f \u3002</li> </ul> </li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#define FOR(i, L, R) for (int i = L; i != (int)R; ++i)\nint dp[105][4][2];\n\nint main()\n{\nstring s;\nint n, K;\ncin &gt;&gt; s &gt;&gt; K;\nn = (int)s.size();\ndp[0][0][0] = 1;\nFOR(i, 0, n) FOR(j, 0, 4) FOR(k, 0, 2)\n{\nint nd = (s[i] - '0');\nFOR(d, 0, 10)\n{\nint ni = i + 1, nj = j, nk = k;\nif (d != 0)\n++nj;\nif (nj &gt; K)\ncontinue;\nif(k == 0)\n{\nif(d &gt; nd)\ncontinue;\nif(d &lt; nd)\nnk = 1;\n}\ndp[ni][nj][nk] += dp[i][j][k];\n}\n}\nint ans = dp[n][K][0] + dp[n][K][1];\ncout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> AtCoder Educational DP Contest S <p>\u554f\u5f9e  \u5230  \u4e2d\uff0c\u7528\u5341\u4f4d\u6578\u8868\u793a\uff0c\u4f4d\u6578\u548c\u662f  \u7684\u500d\u6578\u5f97\u6709\u591a\u5c11\u6578\u5b57\u3002</p> <ul> <li>\u72c0\u614b\uff1a  \u4f4d\u6578\u6578\u5b57\uff0c\u5c0d  \u53d6\u9918\u6578\u7d50\u679c\u70ba \uff0c\u524d  \u4f4d\u6578\u548c  \u7684\u524d  \u4f4d\u6578 ( \u4e0d\u540c\uff0c \u76f8\u540c)\uff0c\u6709\u5e7e\u500b\u6578\u5b57 </li> <li>\u8f49\u79fb\uff1a\u5047\u8a2d\u73fe\u5728\u8981\u586b\u5165 \u3002<ul> <li> </li> <li> </li> <li> </li> <li>\u5982\u679c  \u4e14 \uff0c \u662f\u975e\u6cd5\u7684\u3002</li> </ul> </li> </ul>"},{"location":"dynamicProgramming/interval/","title":"\u5340\u9593 DP","text":"<p>  \u4ee3\u8868  \u4e4b\u9593\u7684\u6240\u6709\u72c0\u614b\u7684\u6574\u5408\u7d50\u679c\u3002</p> <p>\u905e\u8ff4\u548c\u8ff4\u5708\u90fd\u662f\u5e38\u898b\u5be6\u4f5c\u65b9\u6cd5\u3002</p> <pre><code>int dp[N][N];\n\n// \u905e\u8ff4\nvoid f(int L, int R)\n{\nif (L &gt; R)\nreturn;\nif (dp[L][R] != 0)\nreturn;\nfor (int i = L; i &lt;= R; ++i)\n{\nf(L, i);\nf(i, R);\ndp[L][R] = ...;\n}\nreturn;\n}\n\n// \u8ff4\u5708\n\nfor (int i = 1; i &lt; N; ++i)\nfor (int L = 0; L + i &lt; N; ++L)\n{\nR = L + i;\nfor (int k = L; k &lt;= R; ++k)\n{\ndp[L][R] = ...;\n}\n}\n</code></pre> UVa 10003 - Cutting Sticks <p>\u6709\u4e00\u6839\u6728\u68cd\u9577\u5ea6\u70ba  \u8981\u5f80  \u500b\u9ede  \u5207\u958b\uff0c\u5207\u6728\u68cd\u7684\u6210\u672c  \u6728\u68cd\u9577\u5ea6\uff0c\u554f\u6700\u5c0f\u6210\u672c\u70ba\u591a\u5c11?</p> <p>\u5148\u589e\u52a0\u5169\u500b\u9ede  </p> <ul> <li>\u72c0\u614b\uff1a \u5207\u958b  \u9019\u6bb5\u6728\u68cd\u7684\u6700\u5c0f\u6210\u672c</li> <li>\u8f49\u79fb\uff1a </li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int c[N], dp[N][N];\n\nint f(int L, int R)\n{\nif (dp[L][R] != -1)\nreturn dp[L][R];\nif (L == R - 1)\nreturn dp[L][R] = 0;\ndp[L][R] = INT_MAX;\nfor (int i = L + 1; i &lt; R; ++i)\ndp[L][R] = min(dp[L][R], f(L, i) + f(i, R) + (c[R] - c[L]));\nreturn dp[L][R];\n}\n</code></pre> \u77e9\u9663\u76f8\u4e58\u554f\u984c <p>\u5169\u500b\u77e9\u9663  \u76f8\u4e58\u9700\u8981\u64cd\u4f5c  \u6b21\u3002\u7d66\u5b9a  \u500b\u77e9\u9663 \uff0c\u77e9\u9663\u76f8\u4e58\u9806\u5e8f\u4e0d\u5f71\u97ff\u7d50\u679c\uff0c\u8acb\u554f\u6700\u5c11\u76f8\u4e58\u6b21\u6578\u70ba\u4f55?</p> <ul> <li>\u72c0\u614b\uff1a \u5f9e\u7b2c  \u500b\u77e9\u9663\u76f8\u4e58\u5230\u7b2c  \u500b\u77e9\u9663\u7684\u6700\u5c11\u76f8\u4e58\u6b21\u6578</li> <li>\u521d\u59cb\u72c0\u614b\uff1a </li> <li>\u8f49\u79fb\u5f0f\u5b50\uff1a </li> </ul> UVa 00348 - Optimal Array Multiplication Sequence <p>\u627f\u63a5\u77e9\u9663\u76f8\u4e58\u554f\u984c\uff0c\u9700\u8981\u8f38\u51fa\u512a\u5148\u76f8\u4e58\u9806\u5e8f\uff0c\u7528\u62ec\u865f\u8868\u793a\u3002</p> <p>\u5728\u8f49\u79fb\u904e\u7a0b\u4e2d\u591a\u7dad\u8b77\u4e00\u500b\u9663\u5217  \u7d00\u9304\u6bcf\u500b\u5340\u9593\u7684\u6700\u4f73\u5206\u5272\u9ede\uff0c\u8f38\u51fa\u7684\u6642\u5019\u6839\u64da  \u7684\u7d50\u679c\u905e\u8ff4\u8f38\u51fa\u7b54\u6848\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>int f(int L, int R)\n{\nif (L == R)\nreturn dp[L][R] = 0;\nif (dp[L][R] != -1)\nreturn dp[L][R];\ndp[L][R] = INT_MAX;\nfor (int i = L; i &lt; R; ++i)\n{\nint res = f(L, i) + f(i + 1, R) + x[L] * x[i + 1] * x[R + 1];\nif(res &lt; dp[L][R])\n{\ndp[L][R] = res;\nto[L][R] = i;\n}\n}\nreturn dp[L][R];\n}\n\nvoid dfs(int L, int R)\n{\nif(L==R)\n{\ncout &lt;&lt; \"A\" &lt;&lt; L + 1;\nreturn;\n}\nif(L==R-1)\n{\ncout &lt;&lt; \"(A\" &lt;&lt; L + 1 &lt;&lt; \" x A\" &lt;&lt; R + 1 &lt;&lt; \")\";\nreturn;\n}\ncout &lt;&lt; \"(\";\ndfs(L, to[L][R]);\ncout &lt;&lt; \" x \";\ndfs(to[L][R] + 1,R);\ncout &lt;&lt; \")\";\n}\n</code></pre> \u6700\u4f73\u4e8c\u5143\u641c\u5c0b\u6a39 <p>\u7d66\u5b9a  \u500b\u5143\u7d20\u7684\u641c\u5c0b\u983b\u7387(\u6a5f\u7387) \uff0c\u5047\u8a2d\u5143\u7d20\u5728\u4e8c\u5143\u641c\u5c0b\u6a39\u7684\u6df1\u5ea6 \uff0c\u8acb\u627e\u51fa\u4e00\u9846\u4e8c\u5143\u641c\u5c0b\u6a39\u8b93  \u6700\u5c0f\u3002</p> <ul> <li>\u548c\u970d\u592b\u66fc\u6a39\u7684\u5dee\u7570\uff1a\u5143\u7d20\u7684\u76f8\u5c0d\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff0c\u6c92\u8fa6\u6cd5\u79fb\u52d5\u3002</li> <li>\u72c0\u614b\uff1a \u7531\u7b2c  \u500b\u5143\u7d20\u5230\u7b2c  \u500b\u5143\u7d20\u5f62\u6210\u7684(\u5b50)\u6a39\u6700\u5c0f cost\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a </li> <li>\u8f49\u79fb\u5f0f\u5b50\uff1a <ul> <li>\u679a\u8209\u5b50\u6a39\u7684\u6839\uff0c\u905e\u8ff4\u8a08\u7b97\u5de6\u53f3\u5b50\u6a39\u7684  </li> </ul> </li> </ul>"},{"location":"dynamicProgramming/interval/#_1","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>UVa 10559</li> <li>UVa 1351</li> <li>UVa 1626</li> <li>UVa 1630</li> <li>AtCoder Educational DP Contest - N</li> <li>AtCoder Educational DP Contest - L</li> </ul>"},{"location":"dynamicProgramming/intro/","title":"\u52d5\u614b\u898f\u5283\u7c21\u4ecb (Dynamic Programming Intro)","text":"<p>\u52d5\u614b\u898f\u5283 (Dynamic Programming, DP) \u548c\u5206\u6cbb\u6cd5\u76f8\u4f3c\uff0c\u6703\u628a\u554f\u984c\u5206\u89e3\u6210\u82e5\u5e72\u500b\u5b50\u554f\u984c\uff0c\u4e0d\u540c\u7684\u662f\uff0cDP \u7684\u5b50\u554f\u984c\u5f80\u5f80\u90fd\u662f\u4e0d\u7368\u7acb\uff0c\u5b50\u554f\u984c\u9700\u8981\u4f9d\u9760\u5176\u4ed6\u5b50\u554f\u984c\u7684\u89e3\u3002</p>"},{"location":"dynamicProgramming/intro/#_1","title":"\u6027\u8cea","text":"<ul> <li>\u91cd\u8907\u5b50\u554f\u984c\uff1a\u76f8\u540c\u7684\u4e00\u500b\u5b50\u554f\u984c\uff0c\u6703\u88ab\u91cd\u8907\u8a08\u7b97\u591a\u6b21\u3002</li> <li>\u6700\u4f73\u5b50\u7d50\u69cb\uff1a\u554f\u984c\u7684\u6700\u4f73\u89e3\u5305\u542b\u5b50\u554f\u984c\u7684\u6700\u4f73\u89e3\u3002</li> <li>\u7121\u5f8c\u6548\u6027\uff1a\u5b50\u554f\u984c\u4e00\u65e6\u78ba\u88ab\u5b9a\u5f8c\uff0c\u5c31\u4e0d\u6703\u88ab\u6539\u8b8a\uff0c\u4e0d\u6703\u88ab\u4e4b\u5f8c\u66f4\u5927\u7684\u554f\u984c\u6240\u5f71\u97ff\u3002</li> </ul> \u6280\u5de7\uff1a\u7a7a\u9593\u63db\u53d6\u6642\u9593(\u8a18\u61b6\u5316\u641c\u7d22) <p>\u70ba\u907f\u514d\u76f8\u540c\u5b50\u554f\u984c\u591a\u6b21\u8a08\u7b97\uff0c\u6703\u4f7f\u7528\u9663\u5217(\u8a18\u61b6\u9ad4)\u8a18\u4f4f\u7b54\u6848\uff0c\u63d0\u9ad8\u8a08\u7b97\u6548\u7387\u3002</p>"},{"location":"dynamicProgramming/intro/#_2","title":"\u6b65\u9a5f","text":"<ul> <li>\u5b9a\u7fa9\u72c0\u614b\uff1a\u8981\u5982\u4f55\u8a18\u9304\u554f\u984c\u7684\u7b54\u6848\u3002\u901a\u5e38\u5b9a\u7fa9  \uff0c\u70ba\u7b97\u51fa\u7b54\u6848\u7684\u51fd\u6578\u3002</li> <li>\u8a02\u51fa\u521d\u59cb\u72c0\u614b\u3002</li> <li>\u8a02\u51fa\u8f49\u79fb\u5f0f\uff1a\u5982\u4f55\u5f9e\u5176\u4ed6\u72c0\u614b\u8f49\u79fb\u5230\u7576\u524d\u72c0\u614b\u3002</li> </ul> \u6642\u9593/\u7a7a\u9593\u8907\u96dc\u5ea6\u8a08\u7b97 <p>\u6642\u9593\u8907\u96dc\u5ea6\uff1a\u72c0\u614b\u500b\u6578  \u8f49\u79fb\u8907\u96dc\u5ea6\u3002 \u72c0\u614b\u500b\u6578\u7d55\u5927\u591a\u6578\u53ef\u7531\u958b\u7684\u9663\u5217\u5927\u5c0f\u5f97\u77e5\u3002 \u8f49\u79fb\u8907\u96dc\u5ea6\uff1a\u6700\u591a\u4e00\u500b\u72c0\u614b\u9700\u8981\u82b1\u8cbb\u591a\u5c11\u6642\u9593\u8a08\u7b97\u3002</p>"},{"location":"dynamicProgramming/knapsack/","title":"\u80cc\u5305 DP (Knapsack DP)","text":""},{"location":"dynamicProgramming/knapsack/#0-1","title":"0-1 \u80cc\u5305\u554f\u984c","text":"0-1 \u80cc\u5305\u554f\u984c <p>\u7d66\u5b9a  \u500b\u7269\u54c1\u7684\u91cd\u91cf  \u548c\u50f9\u503c \uff0c\u548c\u4e00\u500b\u5bb9\u91cf\u70ba  \u7684\u80cc\u5305\u3002\u9078\u53d6\u82e5\u5e72\u4ef6\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u5728\u4e0d\u8d85\u904e\u80cc\u5305\u5bb9\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u80cc\u5305\u5167\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u70ba\u4f55?</p> <p>\u6bcf\u7a2e\u7269\u54c1\u6709\u5169\u500b\u72c0\u614b\u4e0d\u653e\u8207\u653e\uff0c\u53ef\u5c0d\u61c9\u4e8c\u9032\u4f4d\u7684  \u548c  \uff0c\u6545\u7a31\u70ba\u300c0-1 \u80cc\u5305\u554f\u984c\u300d\u3002</p> <p>\u984c\u76ee\u6709\u4e09\u9805\u8cc7\u6599\uff0c\u7269\u54c1\u500b\u6578\u3001\u7269\u54c1\u91cd\u91cf\u3001\u7269\u54c1\u50f9\u503c\uff0c\u5229\u7528\u9019\u4e9b\u8cc7\u6599\u8a2d\u8a08\u51fa\u72c0\u614b\u5f0f\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u524d  \u6a23\u7269\u54c1\u5728\u91cd\u91cf\u7e3d\u548c  \u7684\u60c5\u6cc1\u4e0b\uff0c\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u503c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> </ul> <p>\u7576\u7b97\u597d  \u500b\u7269\u54c1\u7684\u72c0\u614b\uff0c\u5c0d\u65bc\u7b2c  \u500b\u7269\u54c1\u6709\u5169\u7a2e\u9078\u64c7</p> <ul> <li>\u4e0d\u653e\uff1a\u91cd\u91cf\u548c\u50f9\u503c\u4e0d\u8b8a   \u3002</li> <li>\u653e\uff1a\u91cd\u91cf  \uff0c\u50f9\u503c   \u3002</li> </ul> <p>\u8f49\u79fb\u5f0f\u5c31\u7531\u4e0a\u9762\u5169\u7a2e\u9078\u64c7\u6b78\u7d0d\u51fa\uff1a</p> <ul> <li>  \u3002</li> </ul> <p>\u4ee5\u4e0b\u70ba\u5229\u7528\u4e8c\u7dad\u9663\u5217\u5132\u5b58\u7b54\u6848\u7684\u7bc4\u4f8b\uff1a</p> <pre><code>int dp[MXN + 1][MXW + 1];\nmemset(dp, 0, sizeof(dp));\nfor (int i = 1; i &lt;= MXN; ++i)\n{\nfor (int j = 0; j &lt; w[i]; ++j)\n{\ndp[i][j] = dp[i - 1][j];\n}\nfor (int j = w[i]; j &lt;= MXW; ++j)\n{\ndp[i][j] = max(dp[i - 1][j - w[i]] + v[i], dp[i - 1][j]);\n}\n}\n\ncout &lt;&lt; dp[MXN][MXW] &lt;&lt; '\\n';\n</code></pre>"},{"location":"dynamicProgramming/knapsack/#_1","title":"\u6efe\u52d5\u9663\u5217","text":"<p>\u7a7a\u9593\u8907\u96dc\u5ea6  \uff0c\u63a1\u7528\u300c\u6efe\u52d5\u9663\u5217\u300d\uff0c\u53ef\u4ee5\u964d\u4f4e\u7a7a\u9593\u8907\u96dc\u5ea6</p> <p></p> <p>\u7531\u4e0a\u5716\u53ef\u5f97\u77e5\uff0c\u7576\u5728\u8a08\u7b97  \u6642\uff0c\u53ea\u6703\u7528\u5230\u4e0a\u4e00\u5217\u7684\u8cc7\u6599\uff0c\u56e0\u6b64\u6211\u5011\u7684\u9700\u8981\u9663\u5217\u5927\u5c0f\u964d\u5230  \u3002</p> <pre><code>int dp[2][MXW + 1];\nmemset(dp, 0, sizeof(dp));\nfor (int i = 0; i &lt; N; ++i)\n{\nfor (int j = 0; j &lt; w[i]; ++j)\n{\ndp[i &amp; 1][j] = dp[(i &amp; 1) ^ 1][j];\n}\nfor (int j = w[i]; j &lt;= MXW; ++j)\n{\ndp[i &amp; 1][j] =\nmax(dp[(i &amp; 1) ^ 1][j - w[i]] + v[i], dp[(i &amp; 1) ^ 1][j]);\n}\n}\n</code></pre> <p>\u518d\u4f86\uff0c\u5982\u679c\u6211\u5011\u5c07  \u7576\u4e2d\u7684  \u7531\u5927\u5230\u5c0f\u8a08\u7b97\u3002</p> <p></p> <p>\u6703\u767c\u73fe\u8a08\u7b97  \u6642\uff0c  \u4e5f\u4e0d\u6703\u7528\u5230\uff0c\u53ef\u4ee5\u5c07  \u8986\u84cb\u5230  \u4e0a\u9762\u3002\u6211\u5011\u53ef\u4ee5\u518d\u6b21\u7e2e\u5c0f\u9663\u5217\uff0c\u8b8a\u6210\u5927\u5c0f\u70ba  \u7684\u4e00\u7dad\u9663\u5217\u3002</p> <pre><code>int dp[MXW + 1];\nmemset(dp, 0, sizeof(dp));\nfor (int i = 0; i &lt; N; ++i)\n{\nfor (int j = MXW; j &gt;= w[i]; --j)\n{\ndp[j] = max(dp[j - w[i]] + v[i], dp[j]);\n}\n}\n</code></pre> \u6efe\u52d5\u9663\u5217 <p>\u8986\u84cb\u4e0d\u6703\u7528\u5230\u7684\u8cc7\u8a0a\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002</p> <p>0-1 \u80cc\u5305\u554f\u984c\u6642\u9593\u8907\u96dc\u5ea6  \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6  \u3002</p> UVa 10664 - Luggage <p>\u7d66\u5b9a  \u6a23\u7269\u54c1\uff0c\u6bcf\u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u70ba \uff0c\u554f\u53ef\u4e0d\u53ef\u4ee5\u5c07\u7269\u54c1\u5206\u6210\u7b49\u91cd\u7684\u5169\u5806\u3002</p> <p>\u9700\u8981\u7528 <code>stringstream</code> \u8655\u88e1\u8f38\u5165\u3002</p> <p>\u5047\u8a2d\u7e3d\u91cd \uff0c\u5982\u679c  \u70ba\u5947\u6578\u7121\u89e3\uff0c\u5426\u5247\u7528 0/1 \u80cc\u5305 DP \u5224\u65b7\u662f\u5426\u53ef\u4ee5\u62ff\u7e3d\u91cd  \u7684\u7269\u54c1\u3002</p> AtCoder Educational DP Contest E - Knapsack 2 <p>\u627f 0/1 \u80cc\u5305 DP\uff0c \u7bc4\u570d\u5728 \u3002</p> <p>\u539f\u672c\u7684\u72c0\u614b\u5f0f\u6703\u8d85\u904e\u6642\u9593\u9650\u5236\uff0c\u7528\u50f9\u503c\u53d6\u4ee3\u91cd\u91cf\u7576\u4f5c\u72c0\u614b\uff0c\u518d\u9593\u63a5\u53d6\u5f97\u7b54\u6848\u3002</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\u524d  \u6a23\u7269\u54c1\u5728\u50f9\u503c\u7e3d\u548c\u70ba  \u7684\u60c5\u6cc1\u4e0b\uff0c\u91cd\u91cf\u7e3d\u548c\u6700\u5c0f\u503c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  \u3002</li> <li>\u8f49\u79fb\uff1a </li> </ul> <p>\u6700\u5f8c\u627e\u51fa\uff1a </p> \u6280\u5de7\uff1a\u8868\u793a(\u8ca0)\u7121\u9650\u5927 <p>(\u8ca0)\u7121\u9650\u5927\u53ea\u8981\u8a2d\u6210\u4e00\u500b\u6bd4\u6700\u5927(\u5c0f)\u7b54\u6848\u9084\u8981\u5927(\u5c0f)\u7684\u503c\u5c31\u884c\u4e86\u3002</p> UVa 10616 - Divisible Group Sums <p>\u7d66\u5b9a  \u500b\u6578\u5b57\uff0c\u6c42\u53d6  \u500b\u6578\u5b57\u7e3d\u548c\u70ba  \u7684\u500d\u6578\u7684\u65b9\u6cd5\u6578\u3002</p> <p>\u5148\u5c07\u6240\u6709\u6578\u5b57\u5c0d  \u53d6\u9918\u6578(\u8ca0\u6578 \uff1a)\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u524d  \u500b\u6578\u5b57\u53d6  \u500b\u6578\u5b57  \u7684\u65b9\u6cd5\u6578\u3002</li> <li>\u7b54\u6848  </li> </ul>"},{"location":"dynamicProgramming/knapsack/#_2","title":"\u7121\u9650\u80cc\u5305\u554f\u984c","text":"\u7121\u9650\u80cc\u5305\u554f\u984c <p>\u7d66\u5b9a  \u7a2e\u7269\u54c1\u7684\u91cd\u91cf  \u548c\u50f9\u503c \uff0c\u548c\u4e00\u500b\u5bb9\u91cf\u70ba  \u7684\u80cc\u5305\u3002\u6bcf\u7a2e\u7269\u54c1\u53ef\u9078\u53d6\u4efb\u610f\u500b\u653e\u5165\u80cc\u5305\uff0c\u5728\u4e0d\u8d85\u904e\u80cc\u5305\u5bb9\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u80cc\u5305\u5167\u7269\u54c1\u50f9\u503c\u7e3d\u548c\u6700\u5927\u70ba\u4f55?</p> <p>\u7121\u9650\u80cc\u5305\u554f\u984c\u548c 0-1 \u80cc\u5305\u554f\u984c\u7684\u72c0\u614b\u5f0f\u76f8\u540c\uff0c\u4ee5\u4e0b\u70ba\u8f49\u79fb\u5f0f\uff1a</p> <p>\u53ef\u4ee5\u7c21\u5316\u6210\uff1a</p> <ul> <li>  \u3002</li> <li>  \u3002</li> </ul> <p>\u70ba\u4ec0\u9ebc\u53ef\u4ee5\u9019\u6a23\u512a\u5316\uff1f\u662f\u56e0\u70ba\u7576  \u7576\u4e2d\u7684  \u7531\u5c0f\u5230\u5927\u8a08\u7b97\u6642\uff0c  \u5df2\u88ab  \u66f4\u65b0\u904e\uff0c\u90a3\u9ebc  \u5c31\u662f\u9078\u64c7\u7b2c  \u7a2e\u7269\u54c1\u6578\u6b21\u7684\u6700\u4f73\u7d50\u679c\u3002</p> <p>\u63db\u8a00\u4e4b\uff0c\u6211\u5011\u901a\u904e\u5c40\u90e8\u6700\u512a\u5b50\u7d50\u69cb\u7684\u6027\u8cea\u91cd\u8907\u4f7f\u7528\u4e86\u4e4b\u524d\u7684\u679a\u8209\u904e\u7a0b\uff0c\u512a\u5316\u4e86\u679a\u8209\u7684\u8907\u96dc\u5ea6\u3002(from \u80cc\u5305 DP - OI Wiki )</p> <p>\u4e0b\u9762\u70ba\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff0c\u4e00\u6a23\u6709\u7528\u5230\u6efe\u52d5\u9663\u5217\u7684\u6280\u5de7\uff1a</p> <pre><code>int dp[MXW + 1];\nmemset(dp, 0, sizeof(dp));\nfor (int i = 0; i &lt; N; ++i)\n{\nfor (int j = w[i]; j &lt;= MXW; ++j)\n{\ndp[j] = max(dp[j \u2212 w[i]] + v[i], dp[j]);\n}\n}\n</code></pre> <p>\u7121\u9650\u80cc\u5305\u554f\u984c\u6642\u9593\u8907\u96dc\u5ea6  \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6  \u3002</p> UVa 00674 - Coin Change <p>\u6709  \u4e94\u7a2e\u786c\u5e63\uff0c\u6709\u591a\u5c11\u7a2e\u65b9\u6cd5\u6e4a\u51fa  \u5143?</p> <ul> <li>\u72c0\u614b\uff1a  \u524d  \u7a2e\u786c\u5e63\u624d\u80fd\u6e4a\u51fa  \u5143\u7684\u65b9\u6cd5\u6578</li> <li>\u521d\u59cb\u72c0\u614b\uff1a </li> <li>\u8f49\u79fb\uff1a </li> </ul> <pre><code>int coin[6] = {0, 1, 5, 10, 25, 50};\nunsigned long long int poss[6][7500];\n\nint main()\n{\nposs[0][0] = 1;\nfor (int i = 1; i &lt; 6; i++)\n{\nfor (int j = 0; j &lt; coin[i]; j++)\nposs[i][j] = poss[i - 1][j];\nfor (int j = coin[i]; j &lt; 7500; j++)\nposs[i][j] = poss[i - 1][j] + poss[i][j - coin[i]];\n}\nint a;\nwhile (cin &gt;&gt; a)\ncout &lt;&lt; poss[5][a] &lt;&lt; endl;\n}\n</code></pre> UVa 12955 - Factorial <p>\u7d66\u5b9a\u4e00\u500b\u6578\u5b57 \uff0c\u6700\u5c11\u53ef\u4ee5\u4f7f\u7528\u5e7e\u500b  \u7684\u548c\u8868\u793a?</p> <p>\u548c UVa 00674 - Coin Change \u76f8\u4f3c\uff0c\u5e63\u503c\u6539\u6210 \u3002</p>"},{"location":"dynamicProgramming/knapsack/#_3","title":"\u4e8c\u7dad\u80cc\u5305\u554f\u984c","text":"<p>\u9650\u5236\u8b8a\u70ba\u5169\u9805\u3002</p> HDU - 2159 FATE <p>\u6253\u602a\u904a\u6232\uff0c\u6bcf\u7a2e\u602a\u7269\u6709\u5fcd\u8010\u5ea6  \u548c\u7d93\u9a57\u503c \uff0c\u7d66\u5b9a\u6578\u91cf\u548c\u5fcd\u8010\u5ea6\u9650\u5236\uff0c\u662f\u5426\u53ef\u4ee5\u7372\u5f97\u81f3\u5c11  \u7d93\u9a57\u503c?</p> <ul> <li>\u72c0\u614b\uff1a\uff1a\u5728\u524d  \u7a2e\u602a\u7269\u9078  \u96bb\u653b\u64ca\uff0c\u5fcd\u8010\u5ea6  \u7684\u60c5\u6cc1\u4e0b\u7684\u6700\u5927\u7d93\u9a57\u503c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a </li> <li>\u8f49\u79fb\uff1a </li> </ul> OpenJ_Bailian 1948 - Triangular Pastures <p>\u7d66\u5b9a  \u6839\u68cd\u5b50\uff0c\u7b2c  \u6839\u68cd\u5b50\u9577\u5ea6\u70ba \uff0c\u554f  \u6839\u68cd\u5b50\u7d44\u6210\u6700\u5927\u4e09\u89d2\u5f62\u9762\u7a4d\u70ba\u4f55(\u6bcf\u6839\u68cd\u5b50\u90fd\u8981\u7528\u5230)?</p> <p>\u5148\u7528\u52d5\u614b\u898f\u5283\u627e\u51fa\u6240\u6709\u53ef\u80fd\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u524d  \u6839\u68cd\u5b50\u662f\u5426\u53ef\u4ee5\u5f62\u6210\u7b2c\u4e00\u689d\u908a\u9577\u70ba \uff0c\u7b2c\u4e8c\u689d\u908a\u9577\u70ba  \u7684\u60c5\u6cc1\u3002<ul> <li>boolean \u51fd\u6578</li> </ul> </li> <li>\u521d\u59cb\u72c0\u614b\uff1a\u3002</li> <li>\u8f49\u79fb\u5f0f\u5b50\uff1a\u3002<ul> <li>\u8a66\u8457\u628a\u7b2c  \u6839\u68cd\u5b50\u653e\u5230\u7b2c\u4e00\u689d\u908a\u6216\u7b2c\u4e8c\u689d\u908a\u3002</li> </ul> </li> </ul> <p>\u679a\u8209\u4e09\u908a\u9577 \uff0c\u908a\u9577\u6700\u5927\u70ba\u68cd\u5b50\u548c \uff0c\u6aa2\u67e5\u662f\u5426\u6709\u89e3\uff0c\u5982\u679c\u6709\u89e3\u66f4\u65b0\u6700\u5927\u9762\u7a4d\u3002</p>"},{"location":"dynamicProgramming/knapsack/#_4","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>0-1 \u80cc\u5305\u554f\u984c <ul> <li>UVa 10130 - SuperSale </li> <li>AtCoder Educational DP Contest D - Knapsack 1 </li> </ul> </li> <li>\u7121\u9650\u80cc\u5305\u554f\u984c<ul> <li>UVa 10465 - Homer Simpson</li> <li>UVa 00357 - Let Me Count The Ways </li> </ul> </li> </ul>"},{"location":"dynamicProgramming/lcsandlis/","title":"LCS \u548c LIS","text":"\u5b50\u5e8f\u5217 <p>\u5b50\u5e8f\u5217\u662f\u6307\u4e00\u500b\u5e8f\u5217\u53bb\u9664\u4efb\u610f\u500b(\u5305\u542b )\u5143\u7d20\u5f8c\u6240\u5f62\u6210\u7684\u65b0\u5e8f\u5217\u3002 \u4f8b\u5982\uff1a \u90fd\u662f  \u7684\u5b50\u5e8f\u5217\uff0c\u4f46  \u4e0d\u662f</p>"},{"location":"dynamicProgramming/lcsandlis/#longest-common-subsequence","title":"\u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217 (Longest Common Subsequence)","text":"\u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217 <p>\u7d66\u5b9a\u5169\u5e8f\u5217  \uff0c\u6c42\u6700\u9577\u7684\u5e8f\u5217  \uff0c  \u540c\u6642\u70ba  \u7684\u5b50\u5e8f\u5217\u3002</p> <ul> <li>\u72c0\u614b\uff1a  \u8868\u793a\u4f7f\u7528  \u548c  \u7684 LCS \u9577\u5ea6\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  when  </li> <li>\u8f49\u79fb\uff1a      <ul> <li>  \u4ee3\u8868\u53ef\u4ee5\u5f9e  \u548c  \u6240\u5f62\u6210\u7684 LCS\uff0c\u518d\u52a0\u4e0a  \u6210\u70ba\u65b0\u7684 LCS\u3002</li> <li></li> </ul> </li> </ul> <p>\u6c42\u51fa LCS \u7684\u6642\u9593\u3001\u7a7a\u9593\u8907\u96dc\u5ea6\u90fd\u662f  \uff0c\u4f7f\u7528\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff0c\u53ef\u5c07\u7a7a\u9593\u8907\u96dc\u5ea6\u964d\u81f3  \u3002</p>"},{"location":"dynamicProgramming/lcsandlis/#longest-increasing-subsequence","title":"\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217 (Longest Increasing Subsequence)","text":"\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217 <p>\u7d66\u4f60\u4e00\u500b\u5e8f\u5217  \uff0c\u6c42\u6700\u9577\u7684\u5e8f\u5217  \uff0c  \u662f\u4e00\u500b\uff08\u975e\uff09\u56b4\u683c\u905e\u589e\u5e8f\u5217\uff0c\u4e14\u70ba  \u7684\u5b50\u5e8f\u5217\u3002</p> <ul> <li>\u72c0\u614b\uff1a  \uff1a\u7b2c  \u5230  \u500b\u6578\u5b57\u6240\u5f62\u6210\u6700\u9577\u905e\u589e\u5b50\u5e8f\u5217\u7684\u9577\u5ea6</li> <li>\u8f49\u79fb\uff1a  </li> <li>\u521d\u59cb\u5316\uff1a  </li> </ul> <p>\u6c42\u51fa LIS \u7684\u6642\u9593\u8907\u96dc\u5ea6  \uff0c\u7a7a\u9593\u8907\u96dc\u5ea6  </p>"},{"location":"dynamicProgramming/lcsandlis/#lcs-lis_1","title":"LCS \u548c LIS \u984c\u76ee\u8f49\u63db","text":"<ul> <li>LIS \u8f49\u6210 LCS<ul> <li>  \u70ba\u539f\u5e8f\u5217\uff0c  </li> <li>\u5c0d  \u505a LCS</li> </ul> </li> <li>LCS \u8f49\u6210 LIS<ul> <li>  \u70ba\u539f\u672c\u7684\u5169\u5e8f\u5217</li> <li>\u6700  \u5e8f\u5217\u4f5c\u7de8\u865f\u8f49\u63db\uff0c\u5c07\u8f49\u63db\u898f\u5247\u5957\u7528\u5728  </li> <li>\u5c0d  \u505a LIS</li> <li>\u91cd\u8907\u7684\u6578\u5b57\u5728\u7de8\u865f\u8f49\u63db\u6642\u5f8c\u8981\u8b8a\u6210\u4e0d\u540c\u7684\u6578\u5b57\uff0c\u8d8a\u65e9\u51fa\u73fe\u7684\u6578\u5b57\u8981\u8d8a\u5c0f</li> <li>\u5982\u679c\u6709\u6578\u5b57\u5728  \u88e1\u9762\u800c\u4e0d\u5728  \u88e1\u9762\uff0c\u76f4\u63a5\u5ffd\u7565\u9019\u500b\u6578\u5b57\u4e0d\u505a\u8f49\u63db\u5373\u53ef</li> </ul> </li> </ul>"},{"location":"dynamicProgramming/lcsandlis/#lis","title":"LIS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u512a\u5316","text":"<p>LIS \u9084\u6709\u53e6\u4e00\u7a2e\u72c0\u614b\u8f49\u79fb\u5f0f\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u8868\u793a\u4f7f\u7528\u524d  \u500b\u6578\u5b57\u6e4a\u51fa\u9577\u5ea6  \u7684 LIS, \u672b\u7aef\u6578\u5b57\u6700\u5c0f\u70ba\u4f55\u3002</li> <li>\u8f49\u79fb\uff1a      </li> <li>\u521d\u59cb\u72c0\u614b\uff1a  when  </li> </ul> <p></p> <p>\u9019\u6a23\u7684\u72c0\u614b\u8f49\u79fb\u5f0f\u6642\u9593\u548c\u7a7a\u9593\u8907\u96dc\u5ea6\u4f9d\u820a\u662f  \uff0c\u4e0d\u904e\uff0c\u6709\u5e7e\u9ede\u503c\u5f97\u89c0\u5bdf\uff1a</p> <p>\u4ee4  , where  \uff0c\u5ffd\u7565  \uff0c  \u70ba\u4e00\u500b\u56b4\u683c\u905e\u589e\u5e8f\u5217\uff0c\u7576  \u6bcf\u6b21  \uff0c  \u6bcf\u6b21\u90fd\u6709\u4e00\u500b\u6578\u5b57\u6539\u8b8a\uff0c\u6539\u8b8a\u7684\u6578\u5b57\u7686\u70ba  \uff0c\u88ab\u6539\u7684\u6578\u5b57\u70ba  \u3002</p> <p>\u6839\u64da\u4e0a\u8ff0\u6027\u8cea\uff0c\u53ef\u7528\u4e8c\u5206\u641c\u66f4\u65b0  \uff0c\u85c9\u6b64\u627e\u5230 LIS \u7684\u9577\u5ea6\u3002\u6bcf\u6b21\u4e8c\u5206\u641c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> <pre><code>int main()\n{\nint n;\nwhile (cin &gt;&gt; n)\n{\nvector&lt;int&gt; v;\nfor (int i = 0, x; i &lt; n; i++)\n{\ncin &gt;&gt; x;\nif (!v.size() || x &gt; v.back())\nv.push_back(x);\nelse\n*lower_bound(v.begin(), v.end(), x) = x;\n}\ncout &lt;&lt; v.size() &lt;&lt; '\\n';\n}\n}\n</code></pre>"},{"location":"dynamicProgramming/lcsandlis/#_1","title":"\u76f8\u95dc\u984c\u76ee","text":"UVa 10534 - Wavio Sequence <p>\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 \uff0c\u8981\u6c42\u4e00\u500b\u6700\u8178\u5b50\u5e8f\u5217\uff0c\u9577\u5ea6\u70ba \uff0c\u524d  \u500b\u6578\u5b57\u905e\u589e\uff0c\u5f8c  \u500b\u6578\u5b57\u905e\u6e1b\u3002</p> <p>\u5f9e\u5de6\u5230\u53f3\u548c\u5f9e\u53f3\u5230\u5de6\u505a\u5169\u6b21 LIS \u5f97\u5230 \uff0c\u63a5\u8457\u679a\u8209\u6240\u6709\u9ede\u70ba\u4e2d\u5fc3\uff0c\u4ee5\u7b2c  \u500b\u9ede\u70ba\u4e2d\u5fc3\u7684\u6700\u9577\u5b50\u5e8f\u5217\u9577\u5ea6\u70ba \u3002</p>"},{"location":"dynamicProgramming/lcsandlis/#_2","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>UVa 10405 - Longest Common Subsequence </li> <li>UVa 00481 - What Goes Up </li> </ul>"},{"location":"dynamicProgramming/probability/","title":"\u6a5f\u7387 DP","text":"<p>\u8ddf\u6a5f\u7387\u6709\u95dc\u7684 DP\uff0c\u5305\u542b\u6a5f\u7387\u548c\u671f\u671b\u503c\u3002</p>"},{"location":"dynamicProgramming/probability/#_1","title":"\u8a08\u7b97\u6a5f\u7387","text":"AtCoder Educational DP Contest I. Coins <p>\u6709  \u679a\u786c\u5e63\uff0c \u662f\u5947\u6578\u3002\u7b2c  \u679a\u4e1f\u7684\u6642\u5019\u6b63\u2faf\u6a5f\u7387\u662f \uff0c\u53cd\u2faf\u6a5f\u7387\u662f \u3002\u73fe\u5728\u60f3\u8981\u2f00\u6b21\u4e1f\u9019  \u500b\u786c\u5e63\uff0c\u554f\u6709\u591a\u5c11\u6a5f\u7387\u6b63\u2faf\u7684\u786c\u5e63\u500b\u6578\u6bd4\u53cd\u2faf\u7684\u500b\u6578\u9084\u8981\u66f4\u591a\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u4ee3\u8868\u524d  \u679a\u786c\u5e63\uff0c \u679a\u6b63\u9762\u786c\u5e63\uff0c \u679a\u53cd\u9762\u786c\u5e63\u7684\u6a5f\u7387\u3002<ul> <li> \uff0c\u6700\u5f8c\u4e00\u500b\u7dad\u5ea6\u53ef\u4ee5\u53bb\u9664\u3002</li> </ul> </li> <li>\u8f49\u79fb<ul> <li> </li> <li> </li> </ul> </li> <li>\u7b54\u6848\uff1a </li> </ul>"},{"location":"dynamicProgramming/probability/#_2","title":"\u8a08\u7b97\u671f\u671b\u503c","text":"\u843d\u8c37 P1291 - \u767e\u4e8b\u4e16\u754c\u76c3\u4e4b\u65c5 <p>\u6bcf\u74f6\u98f2\u6599\u4e0a\u6709  \u540d\u7403\u661f\u7684\u540d\u5b57\uff0c\u6bcf\u4f4d\u7403\u661f\u51fa\u7dda\u6a5f\u7387\u76f8\u540c\uff0c\u5e73\u5747\u9700\u8981\u5e7e\u74f6\u98f2\u6599\u624d\u80fd\u6536\u96c6\u5b8c\u6240\u6709  \u4f4d\u7403\u661f\u7684\u540d\u5b57\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u5df2\u6536\u96c6  \u4f4d\u7403\u661f\u7684\u671f\u671b\u503c\u3002</li> <li>\u8f49\u79fb\uff1a <ul> <li>\u8cb7\u5230\u65b0\u7684\u7403\u661f\uff1a </li> <li>\u8cb7\u5230\u91cd\u8907\u7684\u7403\u661f\uff1a </li> </ul> </li> </ul> UVa 12730 - Skyrk's Bar <p>\u7d33\u58eb\u5011\u4e0a\u5c0f\u4fbf\u7684\u6642\u5019\uff0c\u5f7c\u6b64\u4e4b\u9593\u6703\u9694\u8457  \u500b\u5c0f\u4fbf\u6597 (\u7a7a\u8457\u4eba\u7684\u5c0f\u4fbf\u6597)\uff0c\u8acb\u554f\u7576\u6709  \u500b\u4e00\u6392\u7684\u5c0f\u4fbf\u6597\uff0c\u8acb\u554f\u58c5\u585e\u500b\u6578\u7684\u671f\u671b\u503c\u70ba\u4f55 (\u4e00\u6b21\u5e73\u5747\u53ef\u4ee5\u591a\u5c11\u4eba\u4e0a\u5c0f\u4fbf)\u3002<sup>1</sup></p> <ul> <li>\u72c0\u614b\uff1a\uff1a \u500b\u5c0f\u4fbf\u6597\u58c5\u585e\u500b\u6578\u7684\u671f\u671b\u503c\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a </li> <li>\u8f49\u79fb\uff1a\u3002</li> </ul> <p>\u679a\u8209\u6700\u5f8c\u4e00\u500b\u4eba\u9032\u5165\u7684\u4f4d\u7f6e \uff0c\u671f\u671b\u503c\u70ba \u3002</p> <p></p> <p>\u5c07\u6240\u6709\u53ef\u80fd\u72c0\u6cc1\u52a0\u7e3d\uff0c\u53ef\u5f97\u8f49\u79fb\u5f0f \u3002</p> <p>\u7576  \u6642\uff0c\u540c\u6642\u53ea\u80fd\u6709  \u500b\u5c0f\u4fbf\u6597\u4f7f\u7528\uff0c\u9019\u6642 \u3002</p> UVa 10529 - Dumb Bones <p>\u8981\u64fa\u653e\u9aa8\u724c\uff0c\u653e\u4e00\u5f35\u9aa8\u724c\u5de6\u5012\u6a5f\u7387\u70ba \uff0c\u53f3\u5012\u6a5f\u7387\u70ba \uff0c\u554f\u653e  \u5f35\u9023\u7e8c\u9aa8\u724c\u7684\u671f\u671b\u6b21\u6578\u6700\u5c0f\u70ba\u4f55?</p> <p>\u8a2d  \u70ba\u653e  \u5f35\u9023\u7e8c\u9aa8\u724c\u7684\u6700\u5c0f\u671f\u671b\u6b21\u6578\uff0c\u679a\u8209\u6700\u5f8c\u4e00\u5f35\u653e\u9aa8\u724c\u7684\u4f4d\u7f6e \uff0c\u8a66  \u6b21\u7684\u671f\u671b\u503c\u70ba \uff0c \u70ba\u5e73\u5747\u8981\u5617\u8a66\u7684\u6b21\u6578\u3002</p> AtCoder Educational DP Contest J. Sushi <p>\u6709  \u500b\u76e4\u5b50\uff0c\u6bcf\u500b\u76e4\u5b50\u4e2d\u6709  \u5230  \u500b\u58fd\u53f8\uff0c\u6bcf\u6b21\u96a8\u6a5f\u9078\u4e00\u76e4\u5403\u5230\u4e00\u500b\u58fd\u53f8\uff0c\u5982\u679c\u6c92\u58fd\u53f8\u5c31\u4e0d\u5403\uff0c\u554f\u628a\u6240\u6709\u58fd\u53f8\u5403\u5b8c\u82b1\u8cbb\u6b21\u6578\u7684\u671f\u671b\u503c\u662f\u591a\u5c11?</p> <ul> <li>\u72c0\u614b\uff1a \u58fd\u53f8\u6578\u91cf\u70ba  \u7684\u76e4\u5b50\u6578\u6642\uff0c\u6240\u9700\u6b21\u6578\u7684\u671f\u671b\u503c\u3002</li> </ul> <p>\u4e00\u7a2e\u72c0\u614b\u5b9a\u7fa9\u70ba \uff0c\u4f46\u72c0\u614b\u6578\u592a\u591a\u4e14\u4e0d\u56fa\u5b9a\u5728\u9019\u88e1\u4e0d\u8003\u616e\uff0c\u5728\u9019\u88e1\u5b9a\u7fa9  \u70ba\u58fd\u53f8\u6578\u91cf\u70ba  \u7684\u76e4\u5b50\u6578\u6642\uff0c\u6240\u9700\u6b21\u6578\u7684\u671f\u671b\u503c\uff0c\u53c8 \uff0c\u53ef\u4ee5\u53bb\u9664\u4e00\u500b\u72c0\u614b\u3002</p> <ul> <li>\u8f49\u79fb\uff1a\u3002</li> </ul> <p>\u628a\u8f49\u79fb\u5f0f\u79fb\u9805\u8b8a\u6210 \uff0c\u7b97\u5b8c\u53f3\u5f0f\u5f8c\u518d\u9664\u4ee5  \u5373\u70ba\u6240\u6c42\u3002</p> <ol> <li> <p>UVa 12730 in Morris' Blog \u21a9</p> </li> </ol>"},{"location":"dynamicProgramming/state/","title":"\u72c0\u614b\u58d3\u7e2e DP","text":"<p>\u9047\u5230\u591a\u500b\u72c0\u614b()\u7684\u984c\u76ee\uff0c\u5982\u679c\u4f9d\u7136\u7528\u591a\u7dad\u9663\u5217\uff0c\u5728\u9664\u932f\u65b9\u9762\u6703\u6709\u56f0\u96e3\uff0c\u70ba\u4e86\u907f\u514d\u5728\u9664\u932f\u82b1\u8cbb\u5927\u91cf\u6642\u9593\u548c\u9069\u7576\u6e1b\u5c11\u7a0b\u5f0f\u78bc\u9577\u5ea6\uff0c\u53ef\u4ee5\u5c07\u6bcf\u500b\u72c0\u614b\u7528\u7de8\u865f\u4f86\u8868\u793a\u3002</p> UVa 10898 - Combo Deal <p>\u7d66\u5b9a\u6bcf\u7a2e\u55ae\u9ede\u548c\u5957\u9910\u7684\u50f9\u9322\uff0c\u73fe\u5728\u554f\u6bcf\u7a2e\u98df\u7269\u5206\u5225\u8cb7  \u4efd\u6700\u5c11\u9700\u8981\u591a\u5c11\u9322\u3002</p> <p>\u6700\u591a\u7a2e\u6709  \u7a2e\u98df\u7269\uff0c\u6bcf\u7a2e\u6700\u591a\u9700\u8981  \u4efd\uff0c\u53ef\u5229\u7528  \u5230  \u9019\u4e9b\u6578\u5b57\u8868\u793a\u6bcf\u7a2e\u7d44\u5408\uff0c\u4f8b\u5982  \u4ee3\u8868\u516d\u7a2e\u98df\u7269\u5206\u5225\u6709  \u4efd\u3002</p>"},{"location":"dynamicProgramming/state/#_1","title":"\u4e8c\u9032\u4f4d","text":"<p>\u96c6\u5408\u5e38\u4ee5\u4e8c\u9032\u4f4d\u8868\u793a\u53d6\u6216\u4e0d\u53d6\uff0c\u6bd4\u8cfd\u4e2d\u5e38\u898b\u4ee5\u96c6\u5408\u7576\u70ba\u72c0\u614b\u7684\uff0c\u5728\u72c0\u614b\u58d3\u7e2e DP \u4e2d\u5e38\u6703\u7528\u5230 <code>&amp;</code>\u3001<code>&gt;&gt;</code>\u3001<code>&lt;&lt;</code> \u9019\u4e09\u7a2e\u4e8c\u5143\u904b\u7b97\u5b50</p> <pre><code>(n&gt;&gt;i)&amp;1; // get i-th bit of n\nn=n&amp;(1&lt;&lt;i); // set i-th bit of n = 1\n</code></pre> UVa 10944 (TSP \u65c5\u884c\u92b7\u552e\u54e1\u554f\u984c) <p>\u7d66\u5b9a\u4eba\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c  \u500b\u7269\u54c1\u4f4d\u7f6e\uff0c\u554f\u6536\u96c6\u6240\u6709\u7269\u54c1\u518d\u56de\u5230\u539f\u9ede\u7684\u6700\u77ed\u8ddd\u96e2\u3002</p> <p>\u8a2d\u4f4d\u7f6e  \u662f\u4eba\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5148\u8a08\u7b97\u6bcf\u500b\u7269\u54c1(\u5305\u542b\u4eba\u7684\u8d77\u59cb\u4f4d\u7f6e)\u4e4b\u9593\u7684\u8ddd\u96e2\u3002</p> <p>  \u76ee\u524d\u5df2\u7d93\u6536\u96c6 \uff0c\u76ee\u524d\u5728\u7b2c  \u6a23\u7269\u54c1\u7684\u4f4d\u7f6e\uff0c\u6bcf\u500b\u72c0\u614b  \u679a\u8209\u6240\u6709\u672a\u8d70\u904e\u7684\u9ede\uff0c\u5f97\u5230\u65b0\u7684\u72c0\u614b \uff0c\u8f49\u79fb\u65b9\u5411\u4f9d\u4e8c\u9032\u4f4d\u4f4d\u5143\u6578\u7531\u5c11\u5230\u591a\u3002</p> UVa 11795 - Mega Man's Mission <p>\u4eca\u5929\u6709  \u500b\u6575\u4eba\u8981\u64ca\u6557\uff0c\u4e00\u958b\u59cb\u62ff\u7684\u6b66\u5668\u4e0d\u53ef\u4ee5\u64ca\u6557\u6240\u6709\u4eba\uff0c\u4f46\u662f\u64ca\u6557\u6575\u4eba\u5f8c\u53ef\u4ee5\u5f37\u596a\u4ed6\u7684\u6b66\u5668\u653b\u64ca\u5225\u4eba\uff0c\u6bcf\u7a2e\u6b66\u5668\u53ef\u4ee5\u64ca\u6557\u4e0d\u540c\u6575\u4eba\uff0c\u554f\u6709\u5e7e\u7a2e\u653b\u64ca\u9806\u5e8f\u53ef\u4ee5\u64ca\u6557\u6240\u6709\u6575\u4eba\u3002</p> <p>\u5148\u628a\u6bcf\u500b\u6b66\u5668\u53ef\u4ee5\u64ca\u6557\u7684\u6575\u4eba\u7528\u4e8c\u9032\u4f4d\u8868\u793a\uff0c \u4ee3\u8868\u64ca\u6557\u96c6\u5408  \u7684\u65b9\u6cd5\u6578\uff0c \u4ee3\u8868\u64ca\u6557\u96c6\u5408  \u5f8c\u53ef\u4ee5\u64ca\u6557\u54ea\u4e9b\u6575\u4eba\uff0c\u6bcf\u500b\u72c0\u614b  \u53ef\u4ee5\u653b\u64ca\u7684\u58eb\u5175  \u672a\u8d70\u904e\u7684\u548c  \u7684\u4ea4\u96c6\u3002</p> <p>\u53ef\u53c3\u8003 NaiveRed's Blog \u7684\u984c\u89e3\u3002</p> Atcoder Beginner Contest 213 G Connectivity 2 <p>\u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u554f\u6709\u5e7e\u5f35\u5b50\u5716\u5176\u4e2d\u9ede  \u548c\u9ede  \u76f8\u9023\u3002</p> <p>\u4ee4 \uff0c\u662f\u9ede\u96c6\u7684\u4e00\u500b\u5b50\u96c6\u5408\uff0c \u9ede\u96c6  \u7684\u5b50\u5716\u6578\uff0c \u9ede\u96c6  \u7684\u9023\u901a\u5b50\u5716\u6578\uff0c\u9ede  \u548c\u9ede  \u76f8\u9023\u7684\u5b50\u5716\u6578 \u3002</p> <p> \uff0c \u70ba  \u5167\u7684\u908a\u6578\u3002</p> <p>  \u70ba\u6240\u6709\u9ede\u96c6  \u7684\u5b50\u5716\u6578\uff0c\u6263\u5230\u6240\u6709  \u7684\u975e\u9023\u901a\u5716\uff0c\u6839\u64da\u6392\u5bb9\u539f\u7406\uff0c\uff0c\u9019\u88e1\u7279\u5225\u63d0\u4e00\u9ede\uff0c\u9019\u500b\u5f0f\u5b50\u5176\u5be6\u662f\u5f9e  \u88e1\u9762\u9078\u4e00\u4e9b\u9ede\u7576  \u518d\u5f9e  \u9078\u4e00\u5806\u9ede\u7576 \uff0c\u4e5f\u5c31\u662f\u628a\u9ede\u5206\u4e09\u5806\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \u3002</p>"},{"location":"dynamicProgramming/tree/","title":"\u6a39 DP","text":"<p>\u5728\u6a39\u4e0a DP\uff0c\u901a\u5e38\u6703\u4f7f\u7528 DFS\uff08\u905e\u8ff4\uff09\uff0c\u5f9e\u7236\u7bc0\u9ede\u905e\u8ff4\u5230\u5b50\u7bc0\u9ede\uff0c\u518d\u5408\u4f75\u5b50\u7bc0\u9ede\u7684\u7b54\u6848\u3002</p> \u6700\u5c0f\u9ede\u8986\u84cb <p>\u7d66\u5b9a\u4e00\u68f5\u6a39  \uff0c\u6a39\u4e0a\u6240\u6709\u9ede\u4e00\u958b\u59cb\u70ba\u767d\u8272\uff0c\u8981\u6c42\u5c07\u4e00\u4e9b\u9ede\u5857\u6210\u9ed1\u8272\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u908a\u81f3\u5c11\u8207\u4e00\u500b\u9ed1\u8272\u9ede\u76f8\u9023\uff0c\u6c42\u6700\u5c11\u8981\u5857\u5e7e\u500b\u9ede\uff1f</p> <ul> <li> <p>\u72c0\u614b\uff1a  \u4ee3\u8868\u4ee5  \u70ba\u6839\u7684\u5b50\u6a39\uff0c\u5728\u9ede  \u70ba (0: \u767d\u8272\uff1b1: \u9ed1\u8272\uff09\uff0c\u6700\u5c0f\u9700\u8981\u5e7e\u500b\u9ede\u70ba\u9ed1\u8272\u3002</p> </li> <li> <p>\u521d\u59cb\u72c0\u614b\uff1a\u5982\u679c  \u662f\u8449\u7bc0\u9ede\uff0c  \u3002</p> </li> <li> <p>\u8f49\u79fb</p> <ul> <li>\u7576  \u70ba\u767d\u8272\uff0c  \u7684\u5b50\u7bc0\u9ede\u61c9\u70ba\u9ed1\u8272</li> <li>\u7576  \u70ba\u9ed1\u8272\uff0c  \u7684\u5b50\u7bc0\u9ede\u53ef\u70ba\u767d\u8272\u6216\u9ed1\u8272</li> <li> </li> <li> </li> </ul> </li> </ul> \u6700\u5927\u7368\u7acb\u96c6 / AtCoder Educational DP Contest P <p>\u7d66\u5b9a\u4e00\u68f5\u6a39  \uff0c\u6a39\u4e0a\u6240\u6709\u9ede\u4e00\u958b\u59cb\u70ba\u767d\u8272\uff0c\u8981\u6c42\u5c07\u4e00\u4e9b\u9ede\u5857\u6210\u9ed1\u8272\uff0c\u4efb\u5169\u500b\u76f8\u9130\u9ede\u4e0d\u80fd\u7686\u70ba\u9ed1\u8272\uff0c\u554f\u6709\u5e7e\u7a2e\u5857\u6cd5\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u4ee3\u8868\u4ee5  \u70ba\u6839\u7684\u5b50\u6a39\uff0c\u5728\u9ede  \u70ba ( 0: \u767d\u8272\uff1b1: \u9ed1\u8272\uff09\uff0c\u5408\u6cd5\u7684\u5857\u6cd5\u6578\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a\u5982\u679c  \u662f\u8449\u7bc0\u9ede\uff0c  \u3002</li> <li>\u8f49\u79fb<ul> <li>\u7576  \u70ba\u767d\u8272\uff0c  \u7684\u5b50\u7bc0\u9ede\u61c9\u70ba\u767d\u8272\u6216\u9ed1\u8272\uff1a </li> <li>\u7576  \u70ba\u9ed1\u8272\uff0c  \u7684\u5b50\u7bc0\u9ede\u53ef\u70ba\u767d\u8272\uff1a </li> </ul> </li> </ul>"},{"location":"dynamicProgramming/tree/#dp-dp","title":"\u63db\u6839 DP\uff08\u5168\u65b9\u4f4d\u6a39 DP)","text":"<p>\u9032\u884c\u5169\u6b21 DFS\uff0c\u7b2c\u4e00\u6b21\u6c42\u5b50\u7bc0\u9ede\u5c0d\u7576\u524d\u7bc0\u9ede\u7684\u8ca2\u737b\uff08\u6a39 DP)\uff0c\u7b2c\u4e8c\u6b21\uff1a\u6839\u64da\u6c42\u7236\u7bc0\u9ede\u9ede\u5c0d\u7576\u524d\u7bc0\u9ede\u7684\u8ca2\u737b\u3002</p>"},{"location":"dynamicProgramming/tree/#_1","title":"\u6a39\u76f4\u5f91","text":"\u6a39\u76f4\u5f91 <p>\u4e00\u68f5\u6a39\u4e2d\uff0c\u6700\u9577\u7684\u8def\u5f91\u7a31\u70ba\u6a39\u76f4\u5f91\u3002\u7d66\u5b9a\u4e00\u9846\u6a39\uff0c\u6c42\u76f4\u5f91\u9577\u5ea6\u3002</p> <p>\u7b2c\u4e00\u7a2e\u505a\u6cd5\u662f\u679a\u8209\u6240\u6709\u7684\u9ede\u70ba\u6839\uff0c\u6c42\u51fa\u5169\u9846\u6df1\u5ea6\u6700\u6df1\u7684\u5b50\u6a39  \uff0c\u627e\u51fa\u6700\u5927\u7684  \uff0c\u4e00\u6b21 DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p> <p>\u7b2c\u4e8c\u7a2e\u505a\u6cd5\u662f\u7528\u63db\u6839 DP\u3002\u7b2c\u4e00\u6b21 DFS \u56fa\u5b9a\u4e00\u9ede\u70ba\u6839\uff0c\u6c42\u51fa\u6bcf\u500b\u9ede\u6700\u6df1\u7684\u5169\u9846\u5b50\u6a39\u9ad8\u5ea6 (  )\u3002\u7b2c\u4e8c\u6b21 DFS \u5c0d\u65bc\u6bcf\u500b\u9ede  \uff0c\u6c42\u51fa\u7d93\u904e\u7236\u7bc0\u9ede\u6700\u9577\u7684\u8def\u5f91 (  )\u3002\u53d6  \u524d\u5169\u5927\u6578\u503c\u548c\u518d\u52a0  \u5373\u70ba\u7b54\u6848\u3002\u9019\u7a2e\u4f5c\u6cd5\u4f7f\u7528\u4e86\u5169\u6b21 DFS\uff0c\u6642\u9593\u8907\u96dc\u5ea6  </p> <p></p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MXV = 15;\nvector&lt;int&gt; G[MXV];\nint high[MXV][2];\nint ans[MXV], height[MXV];\n\nvoid dfs(int u)\n{\nheight[u] = 1;\nfor (int v : G[u])\n{\ndfs(v);\nheight[u] = max(height[u], height[v] + 1);\nif (high[u][0] == 0 || height[high[u][0]] &lt; height[v])\n{\nhigh[u][1] = high[u][0];\nhigh[u][0] = v;\n}\nelse if (high[u][1] == 0 || height[high[u][1]] &lt; height[v])\n{\nhigh[u][1] = v;\n}\n}\n}\n\nvoid dfs2(int u, int legnth)\n{\nans[u] = height[high[u][0]] + max(height[high[u][1]], legnth) + 1;\nfor (int v : G[u])\n{\nif (v == high[u][0])\n{\ndfs2(v, max(height[high[u][1]], legnth) + 1);\n}\nelse\n{\ndfs2(v, max(height[high[u][0]], legnth) + 1);\n}\n}\n}\n\nint main()\n{\nint n;\ncin &gt;&gt; n;\nfor (int i = 1; i &lt; n; ++i)\n{\nint x, y;\ncin &gt;&gt; x &gt;&gt; y;\nG[x].emplace_back(y);\n}\ndfs(1);\ndfs2(1, 0);\nfor (int i = 1; i &lt;= n; ++i)\n{\ncout &lt;&lt; ans[i] &lt;&lt; '\\n';\n}\n}\n</code></pre> AtCoder Educational DP Contest V - Subtree <p>\u7d66\u5b9a\u4e00\u68f5\u6a39  \uff0c\u6a39\u4e0a\u6240\u6709\u9ede\u4e00\u958b\u59cb\u70ba\u767d\u8272\uff0c\u8981\u6c42\u5c07\u4e00\u4e9b\u9ede\u5857\u6210\u9ed1\u8272\uff0c\u6eff\u8db3\u4efb\u5169\u500b\u9ed1\u9ede\u4e4b\u9593\u6c92\u6709\u767d\u9ede\u3002\u5c0d\u65bc\u4efb\u610f\u9ede \uff0c\u8f38\u51fa\u9ede  \u5857\u9ed1\u9ede\u7684\u65b9\u6cd5\u6578\u3002</p> <p>\u7b2c\u4e00\u6b21 DFS \u505a\u6a39 DP\u3002</p> <ul> <li>\u72c0\u614b\uff1a \u9ede  \u70ba\u9ed1\u8272\uff0c\u6240\u6709\u5b50\u6a39\u7684\u5857\u6cd5\u6578\u3002</li> <li>\u8f49\u79fb\uff1a\u3002</li> </ul> <p>\u7b2c\u4e8c\u6b21 DFS \u8a08\u7b97\u7236\u89aa  \u5c0d\u9ede  \u8ca2\u737b\uff0c\u5c07\u6240\u6709  \u7684\u4e0d\u6240\u6709\u5b50\u6a39\u4f46\u5305\u542b\u9ede  \u7684\u7b54\u6848\u76f8\u4e58 ()\uff0c\u7528\u8ff4\u5708\u6383\u63cf\u6240\u6709\u5b50\u6a39\u4e00\u6b21\u9700\u8981 \uff0c \u500b\u5b50\u6a39\u9700\u8981 \uff0c\u6703\u8d85\u904e\u6642\u9593\u9650\u5236\uff1b\u53d6\u6a21\u6578\u4e0d\u4e00\u5b9a\u662f\u8cea\u6578\uff0c\u4e0d\u80fd\u7528\u6a21\u9006\u5143\uff1b\u5229\u7528\u524d\u7db4\u7a4d\u548c\u5f8c\u7db4\u7a4d\uff0c\u5206\u5225\u4ee3\u8868\u70ba  \u524d  \u9846\u5b50\u6a39\u7b54\u6848\u4e58\u7a4d\u4ee5\u53ca  \u524d  \u9846\u5b50\u6a39\u7b54\u6848\u4e58\u7a4d\uff0c\u6c42\u51fa\u524d\u7db4\u7a4d\u548c\u5f8c\u7db4\u7a4d\u7684\u6642\u9593\u8907\u96dc\u5ea6\u662f \uff0c\u8a08\u7b97  \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p>"},{"location":"dynamicProgramming/tree/#dag-dp","title":"DAG DP","text":"<p>\u5c07\u9ede\u7576\u6210\u72c0\u614b\uff0c\u908a\u7576\u6210\u8f49\u79fb\u65b9\u5411\uff0c\u5be6\u4f5c\u5f9e\u62d3\u8b5c\u6392\u5e8f\u5ef6\u4f38\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> DAG \u4e0a\u6700\u9577\u8def\u5f91 / AtCoder Educational DP Contest G <p>\u7d66\u5b9a\u4e00\u9846\u6709\u5411\u7121\u74b0\u5716\uff0c\u6c42\u51fa\u5716\u4e0a\u6700\u9577\u7684\u8def\u5f91\u3002</p> <p>\u72c0\u614b\u8f49\u79fb\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>\u72c0\u614b\uff1a  : \u7d42\u9ede\u70ba  \u7684\u60c5\u6cc1\u4e0b\uff0c\u8def\u5f91\u9577\u5ea6\u6700\u9577\u70ba\u4f55\uff1f</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  </li> <li>\u8f49\u79fb\uff1a  </li> </ul> <p>\u7b54\u6848\u70ba  \u3002</p>"},{"location":"dynamicProgramming/tree/#_2","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u6700\u5c0f\u9ede\u8986\u84cb<ul> <li>UVa 01292 - Strategic game </li> </ul> </li> </ul>"},{"location":"graph/bigraph/","title":"\u4e8c\u5206\u5716\uff08Bipartite graph)","text":"<p>\u5982\u679c\u4e00\u5f35\u5716\u7684\u9ede\u53ef\u4ee5\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u96c6\u5408\u5167\u7684\u9ede\u5f7c\u6b64\u6c92\u6709\u908a\u76f8\u9023\u3002</p>"},{"location":"graph/bigraph/#_1","title":"\u57fa\u672c\u4ecb\u7d39","text":"<ul> <li>\u4e0d\u5b58\u5728\u5947\u74b0\uff0c\u5947\u74b0\u70ba\u908a\u6578\u70ba\u5947\u6578\u7684\u74b0\u3002</li> <li>\u7528\u5169\u7a2e\u984f\u8272\u5857\u6240\u6709\u7684\u9ede\uff0c\u5b58\u5728\u81f3\u5c11\u4e00\u7a2e\u8fa6\u6cd5\u4f7f\u5f97\u4efb\u5169\u76f8\u9130\u9ede\u5c0d\u984f\u8272\u76f8\u7570\u3002\uff08\u8457\u8272\u554f\u984c\uff09</li> <li>\u73fe\u5be6\u4e2d\u4e8c\u5206\u5716\u61c9\u7528\u7bc4\u570d<ul> <li>\u914d\u5c0d\uff1a\u7537\u5973\u914d\u5c0d\uff0c\u6a5f\u5668\u4eba\u5206\u914d\u5de5\u4f5c</li> <li>\u8f2a\u66ff\uff1a\u4e8c\u7dad\u5ea7\u6a19\u3001\u68cb\u76e4\uff0c\u5ea7\u6a19\u662f\u9ede\uff0c\u9130\u5c45\u95dc\u4fc2\u662f\u908a</li> <li>\u4ea4\u932f\uff1a\u4e8c\u7dad\u5ea7\u6a19\u3001\u68cb\u76e4\uff0c\u884c\u5217\u5f0f\u9ede\uff0c\u5ea7\u6a19\u662f\u908a</li> </ul> </li> </ul>"},{"location":"graph/bigraph/#_2","title":"\u8457\u8272\u554f\u984c","text":"\u8457\u8272\u554f\u984c <p>\u7d66\u5b9a\u4e00\u5f35\u5716 \uff0c\u7528\u5169\u7a2e\u984f\u8272(\u9ed1\u8272\u548c\u7d05\u8272)\u5857\u6240\u6709\u7684\u9ede\uff0c\u662f\u5426\u5b58\u5728\u81f3\u5c11\u4e00\u7a2e\u8fa6\u6cd5\uff0c\u4f7f\u5f97\u4efb\u5169\u76f8\u9130\u9ede\u5c0d\u984f\u8272\u76f8\u7570?</p> <p>\u9019\u984c\u5176\u5be6\u4e5f\u5728\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u70ba\u4e8c\u5206\u5716\uff1a\u4e00\u5f35\u5716\u6709\u5947\u74b0\uff0c\u8868\u793a\u81f3\u5c11\u6709\u4e00\u5c0d\u76f8\u9130\u7684\u9ede\u540c\u8272\u3002</p>"},{"location":"graph/bigraph/#_3","title":"\u7b97\u6cd5","text":"<p>\u7528 <code>color</code> \u7d00\u9304\u6bcf\u500b\u9ede\u7684\u984f\u8272\uff08\u7121\u8272 <code>-1</code> \u3001\u7d05\u8272 <code>0</code> \u3001\u9ed1\u8272 <code>1</code> )\uff0c\u4e00\u958b\u59cb\u6bcf\u500b\u9ede\u7d00\u9304\u70ba\u7121\u8272\u3002\u5229\u7528 BFS \u6216 DFS \u904d\u6b77\u6240\u6709\u9ede\uff0c\u9996\u5148\uff0c\u5224\u65b7\u4e00\u500b\u9ede\u662f\u5426\u6709\u984f\u8272\uff0c\u5982\u679c\u9ede\u70ba\u7121\u8272\uff0c\u5c31\u8b93\u9019\u500b\u9ede\u8b8a\u6210\u7d05\u8272\uff0c\u5426\u5247\u7167\u820a\u3002\u63a5\u8457\uff0c\u8b93\u5176\u4ed6\u76f8\u9130\u4e14\u7121\u8272\u7684\u9ede  \u7684\u984f\u8272\u548c\u9019\u500b\u984f\u8272\u76f8\u7570\uff0c\u4e26\u904d\u6b77\u9ede \uff0c\u5982\u679c\u5728\u904d\u6b77\u9014\u4e2d\u767c\u73fe\u6709\u4efb\u610f\u76f8\u9130\u9ede\u5c0d\u540c\u8272\uff0c\u5247\u8a72\u5716\u4e0d\u662f\u4e8c\u5206\u5716\u3002</p> <p>\u6240\u6709\u9ede\u548c\u908a\u6700\u591a\u904d\u6b77\u4e00\u6b21\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 305;\nint color[N];\nvector&lt;int&gt; v[N];\n\nbool dfs(int s)\n{\nfor (auto it : v[s])\n{\nif (color[it] == -1)\n{\ncolor[it] = 3 - color[s];\nif (!dfs(it))\nreturn false;\n}\nif (color[s] == color[it])\nreturn false;\n}\nreturn true;\n}\n\nvoid isBipatirate()\n{\nbool ok = true;\nfor (int i = 1; i &lt;= n; ++i)\n{\nif (color[i] == -1)\n{\ncolor[i] = 1;\nok &amp;= dfs(i);\n}\n}\nif (ok)\n{\ncout &lt;&lt; \"YES\\n\";\n}\nelse\n{\ncout &lt;&lt; \"NO\\n\";\n}\n}\n</code></pre>"},{"location":"graph/bigraph/#_4","title":"\u5339\u914d","text":"<ul> <li>\u5339\u914d\uff1a\u5728\u5716\u8ad6\u4e2d\u662f\u6307\u4e00\u500b\u908a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u4efb\u610f\u5169\u689d\u908a\u6c92\u6709\u5171\u540c\u9802\u9ede\u3002<ul> <li>\u5339\u914d\u9ede\u3001\u975e\u5339\u914d\u9ede\u3001\u5339\u914d\u908a\u3001\u975e\u5339\u914d\u908a</li> <li>\u6700\u5927\u5339\u914d\uff08\u6700\u5927\u908a\u7368\u7acb\u96c6\uff09\uff1a\u4e00\u5f35\u5716\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6709\u8457\u6700\u5927\u908a\u6578\u7684\u5339\u914d\u3002</li> <li>\u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u500b\u5339\u914d\u5305\u542b\u6240\u6709\u7684\u9ede\uff0c\u90a3\u9ebc\u8a72\u5339\u914d\u7a31\u70ba\u300c\u5b8c\u7f8e\u5339\u914d\u300d\u3002</li> <li>\u6700\u5927\u6b0a\u91cd\u5339\u914d\uff1a\u4e00\u5f35\u5716\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6709\u8457\u6700\u5927\u908a\u6b0a\u91cd\u548c\u7684\u5339\u914d\u3002</li> </ul> </li> </ul>"},{"location":"graph/bigraph/#_5","title":"\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d","text":"<p>\u5047\u8a2d\u4eca\u5929\u6709\u4e00\u500b\u914d\u5c0d\u7bc0\u76ee\uff0c\u9019\u500b\u74b0\u7bc0\u7537\u751f\u9078\u64c7\u4e00\u5230\u591a\u4f4d\u5973\u751f\uff0c\u5de5\u4f5c\u4eba\u54e1\u8981\u4f9d\u7167\u7537\u751f\u7684\u9078\u64c7\uff0c\u8b93\u8d8a\u591a\u5c0d\u7537\u5973\u914d\u5c0d\u8d8a\u597d\u3002</p> <p></p> <p>\u4e00\u958b\u59cb\u8b93\u4e00\u865f\u7537\u751f\u548c\u4e00\u865f\u5973\u751f\u914d\u5c0d\u3002</p> <p></p> <p>\u518d\u4f86\u8b93\u4e8c\u865f\u7537\u751f\u8ddf\u5176\u4ed6\u4eba\u914d\u5c0d\uff0c\u4f46\u5f88\u4e0d\u5de7\u4ed6\u552f\u4e00\u7684\u9078\u64c7\uff0c\u4e00\u865f\u5973\u751f\u5df2\u7d93\u548c\u4e00\u865f\u7537\u751f\u914d\u5c0d\uff0c\u70ba\u4e86\u8b93\u914d\u5c0d\u6578\u589e\u52a0\uff0c\u8b93\u4e00\u865f\u7537\u751f\u548c\u5176\u4ed6\u9078\u64c7(\u4e8c\u865f\u5973\u751f)\u914d\u5c0d\uff0c\u5982\u6b64\u4e00\u4f86\u914d\u5c0d\u6578\u589e\u52a0\u5230\u5169\u5c0d\u3002</p> <p> </p> <p>\u5339\u914d\u6f14\u7b97\u6cd5\u7684\u6982\u5ff5\u5c31\u662f\u5982\u6b64\uff1a\u70ba\u4e00\u689d\u5339\u914d\u908a\u7684\u5169\u500b\u9ede\uff0c\u5404\u81ea\u627e\u5230\u4e00\u500b\u975e\u5339\u914d\u9ede\uff0c\u8b93\u5169\u500b\u5339\u914d\u9ede\u6539\u6210\u548c\u975e\u5339\u914d\u9ede\u5339\u914d\uff0c\u589e\u52a0\u5339\u914d\u6578\u3002</p> \u4ea4\u932f\u8def (Alternating Path) \u53ca\u589e\u5ee3\u8def (Agumenting Path) <p>\u4ea4\u932f\u8def\uff1a\u4f9d\u5e8f\u7d93\u904e\u975e\u5339\u914d\u908a\u3001\u5339\u914d\u908a\u3001\u3002\u3002\u3002\u3001\u975e\u5339\u914d\u908a\u3001\u5339\u914d\u908a\u3001\u975e\u5339\u914d\u908a\u6240\u5f62\u6210\u7684\u8def\u5f91\u3002</p> <p>\u589e\u5ee3\u8def\uff1a\u5f9e\u975e\u5339\u914d\u9ede\u51fa\u767c\uff0c\u7d93\u904e\u4ea4\u932f\u8def\uff0c\u6700\u5f8c\u7d93\u904e\u53e6\u4e00\u500b\u96c6\u5408\u7684\u975e\u5339\u914d\u9ede\uff0c\u8a72\u8def\u5f91\u7a31\u70ba\u589e\u5ee3\u8def\u3002</p> <p>\u589e\u5ee3\u8def\u4e0a\u7684\u672a\u5339\u914d\u908a\u6703\u6bd4\u5339\u914d\u908a\u591a\u4e00\u689d\uff0c\u5c07\u672a\u5339\u914d\u908a\u8b8a\u6210\u5339\u914d\u908a\uff0c\u5339\u914d\u908a\u8b8a\u6210\u672a\u5339\u914d\u908a(\u5728\u9019\u88e1\u7a31\u70ba\u7ffb\u8f49)\uff0c\u5339\u914d\u6578\u91cf\u6703\u591a\u4e00\u689d\u3002</p> <p>\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5169\u689d\u8def\u5f91\u90fd\u662f\u589e\u5ee3\u8def\uff0c\u4f46\u53ea\u6709\u4e0a\u9762\u4e00\u689d\u8def\u5f91\u7a31\u70ba\u589e\u5ee3\u8def\u3002</p> <p></p> <p>\u5728\u5716\u4e0a\u6301\u7e8c\u5c0b\u627e\u589e\u5ee3\u8def\uff0c\u7ffb\u8f49\u589e\u5ee3\u8def\uff0c\u76f4\u5230\u7121\u6cd5\u518d\u627e\u5230\u4efb\u4f55\u4e00\u689d\u589e\u5ee3\u8def\uff0c\u5c31\u662f\u6700\u5927\u5339\u914d\u3002</p>"},{"location":"graph/bigraph/#hungarian-algorithm","title":"\u5308\u7259\u5229\u6f14\u7b97\u6cd5 (Hungarian algorithm)","text":"<p>\u8981\u4ecb\u7d39\u6f14\u7b97\u6cd5\u524d\uff0c\u5148\u5f15\u5165 Berge's Theorem\u3002</p> Berge's Theorem <p>\u5982\u679c\u4e00\u500b\u5339\u914d  \u627e\u4e0d\u5230\u4efb\u4f55\u589e\u5ee3\u8def\uff0c\u90a3\u9ebc  \u5c31\u662f\u4e00\u500b\u6700\u5927\u5339\u914d\u3002</p> <p>\u6b64\u5b9a\u7406\u53ef\u5ef6\u4f38\u51fa\uff0c\u5982\u679c\u4e00\u500b\u975e\u5339\u914d\u9ede  \u627e\u4e0d\u5230\u589e\u5ee3\u8def\uff0c\u90a3\u9ebc\u5b58\u5728\u4e0d\u5305\u542b  \u7684\u6700\u5927\u5339\u914d  \u3002</p> <p>\u6839\u64da Berge's Theorem\uff0c\u6211\u5011\u5f97\u5230\u4e00\u500b\u7b97\u6cd5\uff1a\u5047\u8a2d\u4e8c\u5206\u5716\u5206\u6210\u5169\u500b\u96c6\u5408 \uff0c\u679a\u8209\u96c6\u5408  \u672a\u5339\u914d\u7684\u9ede  \uff0c\u5982\u679c\u627e\u5230\u589e\u5ee3\u8def\uff0c\u5247\u7ffb\u8f49\u6240\u6709\u908a\uff0c\u5426\u5247\u5c31\u628a  \u79fb\u51fa\u5339\u914d\u3002\u627e\u51fa\u589e\u5ee3\u8def\u7684\u65b9\u5f0f\u70ba\uff1a - \u5f9e  \u96c6\u5408\u7684\u6bcf\u500b\u9ede  \u958b\u59cb DFS\uff0c\u53bb\u62dc\u8a2a\u96c6\u5408  \u7684\u6bcf\u500b\u548c  \u76f8\u9023\u7684\u9ede  \uff0c     - \u5982\u679c  \u662f\u672a\u5339\u914d\u9ede\uff0c\u5247\u627e\u5230\u4e00\u689d\u589e\u5ee3\u8def\u3002     - \u5982\u679c  \u662f\u5339\u914d\u9ede\uff0c\u5247\u5f9e\u548c  \u5339\u914d\u9ede  \u958b\u59cb DFS \u5c0b\u627e\u589e\u5ee3\u8def\u3002</p> <p>  \u96c6\u5408\u500b\u6bcf\u500b\u9ede\u90fd\u5339\u914d\u4e00\u6b21\uff0c\u6700\u591a\u6709  \u500b\u9ede\uff0c\u6bcf\u6b21 DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba  / \uff0c\u6574\u9ad4\u6642\u9593\u8907\u96dc\u5ea6\u70ba  / \u3002</p> <p></p> <pre><code>int lhs, rhs, Left[MXV], G[MXV][MXV];\nbitset&lt;MXV&gt; used;\n\nbool dfs(int s)\n{\nfor (int i = 1; i &lt;= rhs; i++)\n{\nif (!G[s][i] || used[i])\n{\ncontinue;\n}\nused[i] = true;\nif (Left[i] == -1 || dfs(Left[i]))\n{\nLeft[i] = s;\nreturn true;\n}\n}\nreturn false;\n}\n\nint sol()\n{\nint ret = 0;\nmemset(Left, -1, sizeof(Left));\nfor (int i = 1; i &lt;= lhs; i++)\n{\nused.reset();\nif (dfs(i))\n{\nret++;\n}\n}\nreturn ret;\n}\n</code></pre>"},{"location":"graph/bigraph/#_6","title":"\u5339\u914d\u76f8\u95dc\u554f\u984c","text":"<ul> <li>\u6700\u5927\u908a\u7368\u7acb\u96c6  \uff08\u6700\u5927\u5339\u914d\uff09\uff1a\u70ba\u5716\u4e0a\u6700\u5927\u7684\u908a\u96c6\u4f7f\u5f97\u6bcf\u500b\u9ede\u81f3\u591a\u548c\u4e00\u689d\u908a\u76f8\u9130\u3002</li> <li>\u6700\u5927\u9ede\u7368\u7acb\u96c6  \uff1a\u662f\u4e00\u5f35\u5716\u4e2d\uff0c\u6700\u591a\u6709\u5e7e\u500b\u9ede\u4e92\u4e0d\u76f8\u9130\u7684\u6700\u5927\u96c6\u5408\u3002</li> <li>\u6700\u5c0f\u9ede\u8986\u84cb  \uff1a\u6700\u5c0f\u7684\u9ede\u96c6\u4f7f\u5f97\u5716\u4e0a\u6bcf\u689d\u908a\u90fd\u81f3\u5c11\u8207\u9ede\u96c6\u4e2d\u4e00\u500b\u9ede\u76f8\u9130\u3002</li> <li>\u6700\u5c0f\u908a\u8986\u84cb  \uff1a\u6700\u5c0f\u7684\u908a\u96c6\u4f7f\u5f97\u5716\u4e0a\u6bcf\u500b\u9ede\u90fd\u81f3\u5c11\u8207\u908a\u96c6\u4e2d\u4e00\u689d\u908a\u76f8\u9130\u3002</li> </ul> <p>\u6839\u64da K\u00f6nig\u2019s theorem\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u4e0b\u5217\u4e8b\u9805\uff1a</p> <ul> <li> </li> <li> </li> </ul> <p>\u4e0b\u5217\u8aaa\u660e\uff0c\u5728\u627e\u51fa\u6700\u5927\u5339\u914d\u5f8c\uff0c\u5982\u4f55\u627e\u51fa\u9019\u4e9b\u554f\u984c\u7684\u4e00\u7d44\u89e3\uff1a</p>"},{"location":"graph/bigraph/#_7","title":"\u6700\u5c0f\u9ede\u8986\u84cb","text":"<p>\u5f9e  \u4e2d\u7684\u672a\u5339\u914d\u9ede DFS\uff0c\u4f9d\u5e8f\u7d93\u904e\u672a\u5339\u914d\u908a -&gt; \u5339\u914d\u908a -&gt; \u672a\u5339\u914d\u908a -&gt; \u5339\u914d\u908a -&gt; ...\uff0c\u6700\u5c0f\u9ede\u8986\u84cb\u5373\u70ba\u5de6\u5074\u6240\u6709\u672a\u62dc\u8a2a\u904e\u7684\u9ede + \u6240\u6709\u53f3\u5074\u62dc\u8a2a\u904e\u7684\u9ede\u3002</p> <p></p>"},{"location":"graph/bigraph/#_8","title":"\u6700\u5927\u9ede\u7368\u7acb\u96c6","text":"<p>\u525b\u597d\u8ddf\u6700\u5c0f\u9ede\u8986\u84cb\u4e92\u88dc\u3002</p>"},{"location":"graph/bigraph/#_9","title":"\u6700\u5c0f\u908a\u8986\u84cb","text":"<p>\u6700\u5927\u5339\u914d\u7684\u908a\uff0c\u52a0\u4e0a\u6bcf\u500b\u672a\u5339\u914d\u9ede\u6240\u9023\u63a5\u7684\u4efb\u610f\u4e00\u689d\u3002</p>"},{"location":"graph/bigraph/#_10","title":"\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d","text":"<p>KM \u6f14\u7b97\u6cd5 (Kuhn-Munkres Algorithm) \u7528\u65bc\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d\uff0c\u6b64\u6f14\u7b97\u6cd5\u5fc5\u9808\u61c9\u7528\u5230\u5b8c\u7f8e\u5339\u914d\u7684\u60c5\u6cc1\uff0c\u6211\u5011\u8981\u589e\u52a0\u4e00\u4e9b\u9ede\u6216\u908a\u4f86\u6eff\u8db3\uff1a</p> <ul> <li> <p>\u5169\u96c6\u5408\u7684\u9ede\u6578\u91cf\u8981\u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u6a23\u7684\u8a71\uff0c\u5c11\u7684\u96c6\u5408\u8981\u88dc\u591a\u4e00\u4e9b\u9ede\u3002</p> </li> <li> <p>\u6bcf\u500b\u9ede\u90fd\u8981\u548c\u53e6\u5916\u4e00\u500b\u96c6\u5408\u7684\u6240\u6709\u9ede\u76f8\u9023\uff0c\u5982\u679c\u908a\u4e0d\u5b58\u5728\uff0c\u8acb\u88dc\u4e0a\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\u3002</p> </li> </ul> <p>KM \u6f14\u7b97\u6cd5\u76f4\u63a5\u5728\u9ede\u4e0a\u8abf\u6574\u6b0a\u91cd\uff0c\u6bd4\u5728\u908a\u4e0a\u8abf\u6574\u6b0a\u91cd\u7c21\u55ae\uff0c\u4f5c\u6cd5\u662f\u5728\u6bcf\u500b\u9ede\u52a0\u4e0a\u4e00\u500b vertex labeling\uff0c  \u5206\u5225\u70ba  \u96c6\u5408\u7684 vertex labeling\u3002</p> <ul> <li> <p> </p> </li> <li> <p> </p> </li> </ul> <p>\u65bc\u662f\u9019\u500b\u554f\u984c\u5c31\u8b8a\u6210\u6700\u5c0f\u5316  \uff0c\u6211\u5011\u900f\u904e\u4e0d\u65b7\u8abf\u6574 vertex labeling\uff0c\u627e\u5230\u4e00\u689d\u5339\u914d\u908a\u7686\u6eff\u8db3  \u7684\u589e\u5ee3\u8def\uff0c\u6700\u5f8c\u5f97\u51fa\u7684\u5339\u914d\u908a\u5373\u70ba\u7b54\u6848\u3002\u628a\u4e00\u500b\u6700\u5927\u5316\u6240\u6709\u5339\u914d\u908a\u7684\u6b0a\u91cd\u548c\uff0c\u8f49\u63db\u6210\u6700\u5c0f\u5316\u6240\u6709\u9ede\u7684\u6b0a\u91cd\u548c\uff0c\u5728\u7dda\u6027\u898f\u5283\u4e2d\uff0c\u662f primal problem \u548c dual problem \u7684\u8f49\u63db\u3002</p> <pre><code>template &lt;typename T&gt; struct KM\n{\nint n;\nint Left[N];\nT w[N][N], Lx[N], Ly[N];\nbitset&lt;N&gt; vx, vy;\n\nvoid init(int _n) { n = _n; }\n\nbool match(int i)\n{\nvx[i] = true;\nfor (int j = 1; j &lt;= n; j++)\nif ((fabs(Lx[i] + Ly[j] - w[i][j]) &lt; 1e-9) &amp;&amp; !vy[j])\n{\nvy[j] = 1;\nif (!Left[j] || match(Left[j]))\n{\nLeft[j] = i;\nreturn true;\n}\n}\nreturn false;\n}\n\nvoid update()\n{\nT a = 1e9;\nfor (int i = 1; i &lt;= n; i++)if (vx[i])\nfor (int j = 1; j &lt;= n; j++)if (!vy[j])\na = min(a, Lx[i] + Ly[j] - w[i][j]);\nfor (int i = 1; i &lt;= n; i++)\n{\nif (vx[i])\nLx[i] -= a;\nif (vy[i])\nLy[i] += a;\n}\n}\n\nvoid hungarian()\n{\nfor (int i = 1; i &lt;= n; i++)\n{\nLeft[i] = Lx[i] = Ly[i] = 0;\nfor (int j = 1; j &lt;= n; j++)\nLx[i] = max(Lx[i], w[i][j]);\n}\nfor (int i = 1; i &lt;= n; i++)\n{\nwhile (1)\n{\nvx.reset();\nvy.reset();\nif (match(i))\nbreak;\nupdate();\n}\n}\n}\n};\n\n/*\nusage\nKM&lt;int&gt; km; // declare with weight type\nkm.init(n); // initialize with vertex\nkm.hungarian(); // calculate\nkm.w[][]; // weight array\nkm.Left[i] // y_i match x_Left[i]\n*/\n</code></pre> <p>\u66f4\u591a\u7684\u53c3\u8003\u7a0b\u5f0f\u78bc\u53ef\u53c3\u8003 \u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5b8c\u7f8e\u5339\u914d KM \u7b97\u6cd5 - \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab \u548c \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d - OI Wiki \u3002</p>"},{"location":"graph/bigraph/#_11","title":"\u76f8\u95dc\u984c\u76ee","text":"LibreOJ 6000 <p>\u6709  \u4f4d\u6b63\u99d5\u99db\u548c  \u4f4d\u526f\u99d5\u99db\uff0c\u4e00\u4f4d\u6b63\u99d5\u99db\u8981\u642d\u914d\u4e00\u4f4d\u526f\u99d5\u99db\uff0c\u7d66\u5b9a\u53ef\u4ee5\u4e00\u8d77\u57f7\u52e4\u7684\u540d\u55ae\uff0c\u8acb\u554f\u6700\u591a\u53ef\u4ee5\u4e00\u6b21\u51fa\u52d5\u5e7e\u7d44\u4eba\u54e1?</p> <p>\u6700\u5927\u4e8c\u5206\u5716\u5339\u914d\u7df4\u7fd2\u3002</p> LibreOJ - 6226 <p>\u7d66\u5b9a\u4e00\u5f35  \u7684\u68cb\u76e4\uff0c\u653e\u7f6e  \u500b\u969c\u7919\u7269\uff0c\u8acb\u554f\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u9a0e\u58eb\uff0c\u5f7c\u6b64\u4e4b\u9593\u4e0d\u6703\u4e92\u76f8\u653b\u64ca?(\u9a0e\u58eb\u8d70\u65e5\u5b57\u5f62)</p> <p>- \u9a0e\u58eb\u7684\u8d70\u6cd5\u4e0d\u5b58\u5728\u5947\u74b0\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u554f\u984c\u8f49\u6210\u4e8c\u5206\u5716\uff0c\u5c07\u5ea7\u6a19  \u548c\u6240\u6709\u9a0e\u58eb\u5f9e  \u53ef\u4ee5\u8d70\u5230\u7684\u9ede\u76f8\u9023\uff0c\u4e0d\u80fd\u4e92\u76f8\u653b\u64ca\u4ee3\u8868\u8981\u627e\u5230\u8d8a\u591a\u4e0d\u76f8\u9023\u7684\u9ede\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u9ede\u7368\u7acb\u96c6\u6578\u91cf\u3002</p>"},{"location":"graph/bigraph/#_12","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u4e8c\u5206\u5716\u5224\u5b9a<ul> <li>UVa 11396 - Claw Decomposition </li> </ul> </li> <li>\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d<ul> <li>UVa 12083 - Guardian of Decency </li> <li>UVa 12549 - Sentry Robots</li> </ul> </li> <li>\u7368\u7acb\u96c6\u548c\u8986\u84cb<ul> <li>UVa 11419 - SAM I AM </li> </ul> </li> <li>\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5339\u914d<ul> <li>UVa 01349 - Optimal Bus Route Design </li> </ul> </li> </ul> <ol> <li> <p>\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3001\u5b8c\u7f8e\u5339\u914d\u548c\u5308\u7259\u5229\u7b97\u6cd5 - Renfei Song's Blog \u21a9</p> </li> <li> <p>Matching - \u6f14\u7b97\u6cd5\u7b46\u8a18 \u21a9</p> </li> <li> <p>\u4e8c\u5206\u56fe - OI Wiki \u21a9</p> </li> <li> <p>\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d - OI Wiki \u21a9</p> </li> <li> <p>\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d - OI Wiki \u21a9</p> </li> <li> <p>\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u5b8c\u7f8e\u5339\u914d KM \u7b97\u6cd5 - \u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab \u21a9</p> </li> <li> <p>\u4e00\u822c\u5716\u6700\u5927\u6b0a\u5339\u914d - \u65e5\u6708\u5366\u9577 \u21a9</p> </li> <li> <p>\u9032\u968e\u5716\u8ad6 - \u677f\u4e2d\u57f9\u8a13\u8b1b\u7fa9 \u21a9</p> </li> </ol>"},{"location":"graph/concept/","title":"\u5716\u8ad6\u6982\u5ff5","text":"<p>\u5716\u662f\u7531\u908a\u96c6\u5408\u548c\u9ede\u96c6\u5408\u6240\u5f62\u6210\u7684\u5716\u5f62\uff0c\u9019\u7a2e\u5716\u5f62\u901a\u5e38\u7528\u4f86\u63cf\u8ff0\u67d0\u4e9b\u4e8b\u7269\u4e4b\u9593\u7684\u67d0\u7a2e\u7279\u5b9a\u95dc\u4fc2\u3002\u9802\u9ede\u7528\u65bc\u4ee3\u8868\u4e8b\u7269\uff0c\u9023\u63a5\u5169\u9802\u9ede\u7684\u908a\u5247\u7528\u65bc\u8868\u793a\u5169\u500b\u4e8b\u7269\u9593\u5177\u6709\u9019\u7a2e\u95dc\u4fc2\u3002</p> <p>\u6578\u5b78\u5f0f\u70ba  \u3002  \u4ee3\u8868\u5716\uff08Graph\uff09\uff0c  \u4ee3\u8868\u9ede\uff08vertex\uff09\uff0c  \u4ee3\u8868\u908a\uff08edge\uff09\u3002</p>"},{"location":"graph/concept/#_2","title":"\u8853\u8a9e","text":"<ul> <li> <p>\u7121\u5411\u908a\u3001\u6709\u5411\u908a\uff1a\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u7121\u5411\u908a\u4ee3\u8868\u908a\u6c92\u6709\u6307\u5b9a\u65b9\u5411\uff0c  \u548c  \u7b49\u50f9\uff1b\u6709\u5411\u908a\u5247\u6709\u6307\u5b9a\u65b9\u5411\uff0c  \u548c  \u662f\u4e0d\u540c\u7684\u3002</p> <ul> <li></li> </ul> </li> <li> <p>\u7121\u5411\u5716\u3001\u6709\u5411\u5716\u3001\u6df7\u5408\u5716\uff1a\u7121\u5411\u5716\u662f\u53ea\u6709\u7121\u5411\u908a\u7684\u5716\uff0c\u985e\u4f3c\u5730\uff0c\u6709\u5411\u5716\u662f\u53ea\u6709\u6709\u5411\u908a\u7684\u5716\uff0c\u6df7\u548c\u5716\u5247\u662f\u5305\u542b\u7121\u5411\u908a\u548c\u6709\u5411\u908a\u3002</p> <ul> <li></li> <li></li> </ul> </li> <li> <p>  \uff1a\u9ede\u6578\uff0c\u901a\u5e38\u7528  \u8868\u793a\u3002</p> </li> <li> <p>  \uff1a\u908a\u6578\uff0c\u901a\u5e38\u7528  \u8868\u793a\u3002</p> </li> <li> <p>\u6b0a\u91cd\uff08weight)\uff1a\u5728\u9ede\u6216\u908a\u4e0a\u9644\u5e36\u4e00\u500b\u6578\u5b57\u7a31\u505a\u300c\u6b0a\u91cd\u300d\uff0c\u908a\u4e0a\u6b0a\u91cd\u8f03\u5e38\u898b\uff0c\u6b0a\u91cd\u901a\u5e38\u4ee3\u8868\u4ee3\u50f9\uff0c\u4f8b\u5982\u6240\u9700\u82b1\u8cbb\u6642\u9593\u6216\u91d1\u9322\u3002</p> <ul> <li></li> </ul> </li> <li> <p>\u76f8\u9130 (adjacent)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u5169\u500b\u9ede  ,  \u76f8\u9130\u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a  \u3002</p> </li> <li> <p>\u6307\u5411 (consecutive)\uff1a\u6709\u5411\u5716\u4e2d\uff0c  \u6307\u5411  \u4ee3\u8868\u5b58\u5728\u4e00\u500b\u908a  \u3002</p> </li> <li> <p>\u5ea6\uff08degree)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4e00\u500b\u9ede\u9023\u5230\u7684\u908a\u6578\u7a31\u70ba \"\u5ea6\"\uff0c\u5728\u6709\u5411\u5716\u5206\u70ba\u51fa\u5ea6\uff08out-degree\uff0c\u7c21\u7a31  \uff09\u53ca\u5165\u5ea6\uff08in-degree\uff0c\u7c21\u7a31  )\uff0c\u5206\u5225\u4ee3\u8868\u8a72\u9ede\u6307\u5411\u5225\u9ede\u53ca\u88ab\u6307\u5411\u7684\u908a\u6578\u3002</p> </li> <li> <p>\u8def\u5f91\uff08walk)\uff1a\u4e00\u689d\u7531  \u5230  \u7684\u8def\u5f91  \u3002\u6839\u64da\u9650\u5236\u53ef\u4ee5\u5206\u70ba\u4e0b\u5217\u5e7e\u7a2e\uff1a</p> </li> </ul> \u958b\u653e \u5c01\u9589\uff08  ) \u7121\u9650\u5236 walk closed walk \u4e0d\u91cd\u8907\u908a trail circut\uff08\u8ff4\u8def\uff09 \u4e0d\u91cd\u8907\u9ede path cycle\uff08\u74b0\uff09 <ul> <li> <p>\u9023\u901a (connected)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u82e5  \u548c  \u5b58\u5728\u8def\u5f91\uff0c\u5247  \u548c  \u9023\u901a\u3002\u82e5\u4e00\u7fa4\u9ede\u5169\u5169\u9023\u901a\uff0c\u5247\u9019\u4e9b\u9ede\u90fd\u9023\u901a\u3002</p> <ul> <li>\u4e0b\u5716\u4e2d\uff0c</li> <li></li> </ul> </li> <li> <p>\u81ea\u74b0 (loop)\uff1a\u4e00\u689d\u908a  \u6eff\u8db3  ,  \u5373\u7a31\u70ba\u81ea\u74b0\u3002</p> <ul> <li></li> </ul> </li> <li> <p>\u91cd\u908a (multiple edge)\uff1a\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5b58\u5728  ,  \u6eff\u8db3  !=  and  \uff0c\u5247\u7a31\u70ba\u91cd\u908a\u3002</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"graph/concept/#_3","title":"\u7279\u6b8a\u7684\u5716","text":"<ul> <li> <p>\u7c21\u55ae\u5716\uff1a\u4e00\u500b\u6c92\u6709\u81ea\u74b0\u3001\u91cd\u908a\u7684\u9023\u901a\u5716\u7a31\u70ba\u7c21\u55ae\u5716\u3002</p> </li> <li> <p>\u9023\u901a\u5716\uff08connected Graph)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede\u7686\u53ef\u7d93\u904e\u4e00\u4e9b\u908a\u8a2a\u554f\u5f7c\u6b64\uff0c\u9019\u5f35\u5716\u5373\u70ba\u7121\u5411\u5716\u3002</p> </li> <li> <p>\u8acb\u898b \u6a39 \u7ae0\u7bc0\u3002</p> </li> <li> <p>\u5b8c\u5168\u5716\uff08Complete Graph)\uff1a\u7121\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede  \u7686\u5b58\u5728\u4e00\u689d\u908a  \uff0c\u7a31\u70ba\u5b8c\u5168\u5716\u3002\u4e00\u5f35 n \u500b\u9ede\u7684\u5b8c\u5168\u5716\u7c21\u8a18\u70ba  \uff0c\u5728\u96c6\u5408\u4e0a\u66fe\u70ba\u5b8c\u5168\u5716\u70ba \"\u5718\"</p> </li> <li> <p>\u7af6\u8cfd\u5716\uff08Tournament Graph)\uff1a\u6709\u5411\u5716\u4e2d\uff0c\u4efb\u610f\u5169\u9ede  \u7686\u5b58\u5728\u4e00\u689d\u908a  \uff0c\u7a31\u70ba\u7af6\u8cfd\u5716\u3002</p> </li> <li> <p>\u6709\u5411\u7121\u74b0\u5716\uff08Directed acyclic graph, DAG)\uff1a\u6c92\u6709\u74b0\u7684\u7121\u5411\u5716\u3002</p> </li> <li> <p>\u4e8c\u5206\u5716\uff08Bipartite Graph)\uff1a\u80fd\u5c07\u5716\u4e0a\u7684\u9ede\u5206\u6210\u5169\u500b\u96c6\u5408\uff0c\u4efb\u610f\u4e00\u689d\u908a  \u90fd\u6eff\u8db3\uff0c  \u5728\u4e0d\u540c\u96c6\u5408\u88e1\uff0c\u8a72\u5716\u7a31\u70ba\u4e8c\u5206\u5716\u3002</p> </li> <li> <p>\u5e73\u9762\u5716\uff08Planar Graph)\uff1a\u53ef\u756b\u5728\u5e73\u9762\u4e0a\uff0c\u4e14\u4efb\u610f\u5169\u689d\u908a\u7686\u4e0d\u91cd\u758a\u7684\u5716\u3002</p> </li> </ul>"},{"location":"graph/concept/#_4","title":"\u5716\u7684\u95dc\u4fc2","text":"<ul> <li> <p>\u5b50\u5716\uff08subgraph)\uff1a\u5982\u679c  \u662f  \u7684\u5b50\u5716\uff0c\u5247  \u4e14  \u3002</p> </li> <li> <p>\u88dc\u5716 (complement graph) graph)\uff1a\u4ee4  \u662f\u4e00\u500b\u5716\uff0c  \u5305\u542b\u6240\u6709  \u7684\u4e8c\u5143\u5b50\u96c6 (2-element subset)\u3002\u5247\u5716  \u662f  \u7684\u88dc\u5716\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u628a\u539f\u672c\u7684\u908a\u79fb\u9664\uff0c\u52a0\u5165\u539f\u672c\u4e0d\u5b58\u5728\u7684\u908a\u5373\u662f\u88dc\u5716\u3002</p> </li> <li> <p>\u540c\u69cb (isomorphic)\uff1a</p> </li> </ul>"},{"location":"graph/connectivity/","title":"\u9023\u901a\u6027 (Connectivity)","text":"<p>\u4e00\u5f35\u4efb\u610f\u5169\u9ede\u63a5\u9023\u901a\u7684\u5716\u53eb\u505a\u9023\u901a\u5716\uff0c\u5728\u5be6\u969b\u60c5\u6cc1\uff0c\u4f8b\u5982\u7db2\u8def\u6216\u96fb\u529b\u7684\u67b6\u8a2d\u90fd\u5e0c\u671b\u7dda\u8def\u662f\u9023\u901a\u7684\uff0c\u8981\u662f\u5730\u65b9\u58de\u6389\uff0c\u6211\u5011\u5e0c\u671b\u5f71\u97ff\u80fd\u8d8a\u5c0f\u8d8a\u597d\u3002\u5728\u5716\u8ad6\u4e2d\uff0c\u6709\u7b97\u6cd5\u53ef\u4ee5\u627e\u51fa\u53bb\u6389\u90a3\u4e9b\u90e8\u5206\u6703\u4f7f\u5f97\u5716\u8b8a\u6210\u4e0d\u9023\u901a\u7684\uff0c\u4ee5\u4e0b\u8a73\u7d30\u8aaa\u660e\u3002</p>"},{"location":"graph/connectivity/#dfs","title":"DFS \u908a\u5206\u985e","text":"<p>\u6839\u64da DFS \u7684\u9806\u5e8f\uff08\u6642\u9593\u6233\u8a18\uff09\uff0c\u5c0d\u908a\u9032\u884c\u5206\u985e\uff0c\u9019\u4e9b\u5206\u985e\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u7528\u5230\u3002</p> \u540d\u7a31 \u6307\u5411 \u7121\u5411\u5716 \u6709\u5411\u5716 \u6a39\u908a (Tree edge) \u5152\u5b50 \u6709 \u6709 \u56de\u908a (Back edge) \u7956\u5148 \u6709 \u6709 \u524d\u5411\u908a (Forward edge) \u975e\u5152\u5b50\u7684\u5b50\u5b6b \u7121 \u6709 \u4ea4\u932f\u908a (Cross edge) \u65c1\u7cfb\u8840\u89aa \u7121 \u6709 <p></p>"},{"location":"graph/connectivity/#_1","title":"\u7121\u5411\u5716\u7684\u96d9\u9023\u901a","text":"<ul> <li>\u9ede\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u500b\u9ede\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a\u3002</li> <li>\u908a\u9023\u901a\u5ea6\uff1a\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u689d\u908a\u624d\u6703\u8b93\u6574\u5f35\u5716\u4e0d\u518d\u9023\u901a\u3002</li> <li>\u9ede\u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b\u9ede\u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff08\u9ede\u9023\u901a\u5ea6  )\u3002</li> <li>\u908a\u96d9\u9023\u901a\uff1a\u79fb\u9664\u4efb\u610f\u4e00\u500b\u908a\u5f8c\uff0c\u5716\u4f9d\u7136\u662f\u9023\u901a\u7684\uff08\u908a\u9023\u901a\u5ea6  )\u3002</li> </ul> <p>\u5728\u4e4b\u524d\u63d0\u5230\u7684\u4f8b\u5b50\uff0c\u7db2\u8def\u7684\u67b6\u8a2d\uff0c\u9700\u8981\u7279\u5225\u6ce8\u610f\u96d9\u9023\u901a\u7684\u554f\u984c\uff0c\u842c\u4e00\u6709\u90e8\u5206\u7684\u7dda\u8def\uff08\u908a\uff09\u6216\u662f\u8a2d\u5099\uff08\u9ede\uff09\u640d\u58de\uff0c\u5c31\u6709\u53ef\u80fd\u5c0e\u81f4\u4e00\u90e8\u5206\u7684\u7db2\u8def\u4e0d\u9023\u901a\u3002\u4ee5\u4e0b\u5206\u5225\u5f9e\u9ede\u548c\u908a\u7684\u89d2\u5ea6\u63a2\u8a0e\u96d9\u9023\u901a\u3002</p>"},{"location":"graph/connectivity/#tarjan-low","title":"Tarjan \u7b97\u6cd5\uff1a\u627e  \u51fd\u6578","text":"<p>Tarjan \u7b97\u6cd5\uff0c\u53ef\u89e3\u6c7a\u8a31\u591a\u9023\u901a\u6027\u7684\u554f\u984c\uff0c\u6700\u6838\u5fc3\u7684\u662f\u627e\u51fa\u6bcf\u500b\u9ede  \u51fd\u6578\u3002</p> <ul> <li>  : \u9ede  \u7684\u6df1\u5ea6\u3002</li> <li>  :  \u5728\u4e0d\u7d93\u904e\u7236\u89aa\u9023\u5230\u81ea\u5df1\u7684 Tree Edge \u7684\u60c5\u6cc1\u4e0b\uff0c\u6240\u80fd\u5230\u9054\u7956\u5148\u7684\u6700\u6dfa\u6df1\u5ea6\u3002</li> </ul> <p>\u5728\u7121\u5411\u5716\u4e2d\uff0c\u53ea\u6703\u9047\u5230 Tree Edge \u548c Back Edge\uff0c\u4ee5\u4e0b\u91dd\u5c0d\u5169\u7a2e\u60c5\u6cc1\u8aaa\u660e\uff1a</p> <ul> <li> <p>Edge  is a tree edge:  \u662f  \u7684\u5152\u5b50\uff0c  \u53ef\u80fd\u7d93\u7531  \u8d70\u5230\u5176\u4ed6\u7956\u5148\uff0c\u905e\u8ff4\u627e\u5c0b  \uff0c\u518d\u66f4\u65b0  \u3002</p> </li> <li> <p>Edge  is a back edge:  \u662f  \u7684\u7956\u5148\uff0c\u66f4\u65b0  \u3002</p> </li> <li> <p></p> </li> </ul> <pre><code>int low[MXV], depth[MXV];\nbool visit[MXV];\nvector&lt;int&gt; G[MXV];\n\nvoid dfs(int now, int cur_depth)\n{\nvisit[now] = true;\ndepth[now] = low[now] = cur_depth;\nfor (auto i : G[now])\n{\nif (visit[i])\n{ // ancestor\nlow[now] = min(low[now], depth[i]);\n}\nelse\n{ // offspring\ndfs(i, cur_depth + 1);\nlow[now] = min(low[now], low[i]);\n}\n}\nreturn;\n}\n</code></pre>"},{"location":"graph/connectivity/#_2","title":"\u9ede\u96d9\u9023\u901a\uff1a\u627e\u5272\u9ede","text":"<p>\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u9ede\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u9ede\uff0c\u5982\u679c\u6c92\u6709\u5272\u9ede\uff0c\u5247\u9019\u5f35\u5716\u70ba\u9ede\u96d9\u9023\u901a\u3002</p> <p>\u5272\u9ede\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716  \uff0c\u5982\u679c\u79fb\u9664\u9ede  \u53ca\u9023\u63a5  \u7684\u908a\u4e4b\u5f8c\uff0c\u5716  \u4e0d\u518d\u9023\u901a\uff0c\u9ede  \u90fd\u88ab\u7a31\u70ba  \u7684\u4e00\u500b\u5272\u9ede\uff08cut-vertex\uff09\u6216\u95dc\u7bc0\u9ede\uff08articulation-vertex, articulation-point)\u3002</p> <p></p> <p>\u6839\u64da  \u51fd\u6578\uff0c\u4ee5\u4e0b\u5169\u7a2e\u60c5\u6cc1\u80fd\u5224\u65b7\u4e00\u500b\u9ede\u70ba\u5272\u9ede\uff1a</p> <ul> <li>\u975e\u6839\u7bc0\u9ede  \uff1a\u5b58\u5728\u4e00\u500b\u5b69\u5b50  \u3002</li> <li>\u6839\u7bc0\u9ede  \uff1a\u64c1\u6709  \u5169\u500b\u5152\u5b50\u3002</li> </ul> <pre><code>int low[MXV], depth[MXV];\nbool is_cut_vertex[MXV], visit[MXV];\nvector&lt;int&gt; G[MXV];\n\nvoid dfs(int now, int cur_depth)\n{\nvisit[now] = true;\ndepth[now] = low[now] = cur_depth;\nint cut_son = 0;\nfor (auto i : G[now])\n{\nif (visit[i])\n{ // ancestor\nlow[now] = min(low[now], depth[i]);\n}\nelse\n{ // offspring\ndfs(i, cur_depth + 1);\ncut_son += 1;\nlow[now] = min(low[now], low[i]);\nif (low[i] &gt;= depth[now])\nis_cut_vertex[now] = true;\n}\n}\nif (cur_depth == 0)\nis_cut_vertex[now] = (cut_son != 1);\nreturn;\n}\n</code></pre> <p>\u9019\u500b\u6f14\u7b97\u6cd5\u4e3b\u8981\u662f\u505a DFS\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u70ba  </p>"},{"location":"graph/connectivity/#_3","title":"\u908a\u96d9\u9023\u901a\uff1a\u627e\u5272\u908a","text":"<p>\u548c\u9ede\u9023\u901a\u76f8\u4f3c\uff0c\u8981\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u908a\u96d9\u9023\u901a\uff0c\u5c31\u8981\u6aa2\u67e5\u4ed6\u662f\u5426\u6709\u5272\u908a\uff0c\u5982\u679c\u6c92\u6709\u5272\u908a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u908a\u96d9\u9023\u901a\u3002</p> <p>\u5272\u908a\uff1a\u5272\u908a\uff1a\u7d66\u5b9a\u4e00\u5f35\u5716  \uff0c\u5982\u679c\u79fb\u9664\u908a  \uff0c\u5716  \u4e0d\u518d\u9023\u901a\uff0c\u908a  \u90fd\u88ab\u7a31\u70ba  \u7684\u4e00\u500b\u5272\u908a\uff08cut-edge\uff09\u6216\u6a4b\uff08bridge)\u3002</p> <p></p> <p>\u6a39\u908a\u624d\u6709\u53ef\u80fd\u662f\u6a4b\uff0c\u5176\u4ed6\u7684\u908a\u62d4\u9664\u4ecd\u7136\u53ef\u4ee5\u85c9\u7531\u6a39\u908a\u9023\u901a\u3002</p> <p>\u6839\u64da  \u51fd\u6578\uff0c\u4ee5\u4e0b\u60c5\u6cc1\u80fd\u5224\u65b7\u5272\u908a\uff1a</p> <ul> <li>\u6a39\u908a  \uff1a  \u3002<ul> <li>  \u4ee3\u8868\u6709  \u4e4b\u9593\u5b58\u5728\u81f3\u5c11\u5169\u689d\u8def\u5f91\u3002</li> </ul> </li> </ul> <pre><code>int low[MXV], depth[MXV];\nbool visit[MXV];\nvector&lt;int&gt; G[MXV];\nvector&lt;pair&lt;int, int&gt;&gt; my_cut_edge;\n\nvoid dfs(int now, int cur_depth, int parent)\n{\nvisit[now] = true;\ndepth[now] = low[now] = cur_depth;\n// int cut_son = 0;\nfor (auto i : G[now])\n{\nif (i != parent)\ncontinue;\nif (visit[i])\n{ // ancestor\nlow[now] = min(low[now], depth[i]);\n}\nelse\n{ // offspring\ndfs(i, cur_depth + 1, now);\n// cut_son += 1;\nlow[now] = min(low[now], low[i]);\nif (low[i] &gt; depth[now])\nmy_cut_edge.push_bach({now, i});\n}\n}\nreturn;\n}\n\nbool is_2_edge_connected(int n)\n{\nint cut_edge = 0;\nmemset(visit, 0, sizeof(visit));\ndfs(1, 0, -1);\nreturn my_cut_edge.size() == 0;\n}\n</code></pre> <p>\u548c\u524d\u9762\u9ede\u96d9\u9023\u901a\u76f8\u540c\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  </p> \u91cd\u908a\u8655\u7406 <p>\u5982\u679c\u4e0d\u8655\u7406\u91cd\u908a\uff0c\u6709\u53ef\u80fd\u8b93\u4e00\u689d\u908a\u5f9e\u975e\u5272\u908a\u5224\u6210\u5272\u908a\u3002 \u8655\u7406\u65b9\u5f0f\u70ba\u7528 <code>set,map</code> \u5b58\u908a\u7684\u5169\u9ede\u7de8\u865f\uff0c\u7576\u9047\u5230\u4e00\u689d\u5f80\u7236\u89aa\u7684\u908a  \uff0c\u5982\u679c\u51fa\u73fe\u904e\u76f8\u540c\u8d77\u59cb\u9ede\u7684\u908a  \uff0c\u90a3\u9ebc  \u4e0d\u662f\u6a39\u908a\uff0c\u53ef\u4ee5\u900f\u904e  \u56de\u5230\u7236\u89aa\u3002</p>"},{"location":"graph/connectivity/#_4","title":"\u96d9\u9023\u901a\u5143\u4ef6","text":"<ul> <li>\u9023\u901a\u5143\u4ef6\uff1a\u4e00\u5f35\u5716  \u6709\u5f88\u591a\u5b50\u5716\uff0c\u5982\u679c\u4e00\u500b\u5b50\u5716  \u662f\u9023\u901a\u7684\uff0c\u6211\u5011\u7a31\u4e4b\u70ba\u9023\u901a\u5143\u4ef6\uff08connected component)\uff0c\u5982\u679c\u4e00\u500b\u9023\u901a\u5143\u4ef6\u6eff\u8db3 \"\u52a0\u4e0a\u4efb\u610f\u4e00\u500b\u5176\u4ed6\u7684\u9ede\u5c31\u4e0d\u518d\u9023\u901a\"\uff0c\u5247\u7a31\u9019\u6a23\u7684\u9023\u901a\u5143\u4ef6\u662f \"\u6975\u5927\u7684\"(maximal)\u3002</li> <li>\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u908a\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u908a\u9023\u901a\u5143\u5b50\u5716\uff08bi-edge-connected graph\uff09\u6216\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-edge-connected component)\u3002</li> <li>\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u9ede\u96d9\u9023\u901a\u5716\uff0c\u6211\u5011\u5c31\u6210\u9019\u5f35\u5b50\u5716\u70ba\u9ede\u9023\u901a\u5143\u5b50\u5716\uff08bi-vertex-connected graph\uff09\u6216\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff08bi-vertex-connected component)\u3002</li> </ul> <p>\u4e00\u822c\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u8a0e\u8ad6\u6975\u5927\u7684\u9023\u901a\u5143\u4ef6\uff0c\u4ee5\u4e0b\u6240\u6709\u7684\u9023\u901a\u5143\u4ef6\u90fd\u662f\u6975\u5927\u7684\u3002</p> <p>\u8981\u6c42\u51fa\u4e00\u5f35\u5716\u7684\u6240\u6709\u908a\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u53ea\u8981\u62d4\u6389\u6240\u6709\u6a4b\uff0c\u5269\u4e0b\u7684\u5716\u5c31\u662f\u539f\u5716\u6240\u6709\u7684\u908a\u9023\u901a\u5143\u4ef6\u3002</p> <p>\u81f3\u65bc\u9ede\u9023\u901a\u5143\u4ef6\u5c31\u6c92\u90a3\u9ebc\u7c21\u55ae\u4e86\uff0c\u56e0\u70ba\u540c\u4e00\u500b\u5272\u9ede\u6709\u53ef\u80fd\u540c\u6642\u5b58\u5728\u591a\u7684\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u4e26\u4e14\u9ede\u7684\u76f8\u9130\u908a\u4e0d\u4e00\u5b9a\u4e0d\u540c\u7684\u9ede\u9023\u901a\u5143\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u4e0d\u80fd\u76f4\u63a5\u62d4\u9ede\u62d4\u6389\u4f86\u6c42\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002</p> <p>\u81f3\u65bc\u70ba\u4ec0\u9ebc\u6703\u6709\u9019\u6a23\u7684\u5dee\u7570\uff0c\u662f\u56e0\u70ba\u4e00\u822c\u7684\u5716\u662f\u4ee5\u9ede\u70ba\u4e3b\u984c\uff0c\u908a\u7528\u4f86\u63cf\u6558\u9ede\u548c\u9ede\u4e4b\u9593\u7684\u6771\u897f\u3002\u800c\u9ede\u9023\u901a\u554f\u984c\u5247\u662f\u4ee5\u908a\u70ba\u4e3b\u9ad4\uff0c\u9ede\u7528\u4f86\u63cf\u8ff0\u908a\u548c\u908a\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u5f8c\u8005\u63cf\u8ff0\u7684\u95dc\u4fc2\u4e0d\u662f\u4e8c\u5143\u95dc\u4fc2\uff0c\u6240\u4ee5\u8b93\u554f\u984c\u8b8a\u5f97\u8907\u96dc\u3002</p> <p>\u90a3\u6211\u5011\u5c31\u4ee5\u908a\u7684\u89d2\u5ea6\u4f86\u601d\u8003\u9ede\u96d9\u9023\u901a\u5143\u4ef6\uff0c\u5c0d\u65bc\u4e00\u500b\u9ede  \uff0c\u8207\u7236\u89aa\u9ede  \u4e4b\u9593\u6709\u689d\u908a  \uff0c\u8207\u5152\u5b50\u9ede  \u4e4b\u9593\u6709\u689d\u908a  \uff0c\u5982\u679c  \uff08\u4e0d\u8a08\u7b97\u6a39\u908a\uff09\uff0c\u5247  \u548c  \u4e0d\u5728\u540c\u4e00\u500b\u9ede\u9023\u901a\u5143\u4ef6\u5167\uff0c\u53cd\u4e4b  \u548c  \u5728\u540c\u4e00\u500b\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u5167\u3002\u6839\u64da\u4ee5\u4e0a\u6027\u8cea\uff0c\u6211\u5011\u53ef\u4ee5\u5728 DFS \u904e\u7a0b\u4e2d\u7dad\u8b77\u4e00\u500b <code>stack</code> \uff0c\u7d00\u9304\u76ee\u524d\u7d93\u904e\u7684\u908a\uff0c\u7576\u9047\u5230\u5272\u9ede\u6642\uff0c\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\u9ede\u96d9\u9023\u901a\u5143\u4ef6\u3002</p> <ul> <li></li> </ul> <pre><code>typedef pair&lt;int, int&gt; PII;\nint low[MXV], depth[MXV];\nbool is_cut_vertex[MXV], visit[MXV];\nvector&lt;int&gt; G[MXV];\nvector&lt;PII&gt; BCC[MXV];\nint bcc_cnt = 0;\nstack&lt;PII&gt; st;\n\nvoid dfs(int now, int cur_depth, int f)\n{\nvisit[now] = true;\ndepth[now] = low[now] = cur_depth;\nint cut_son = 0;\nfor (auto i : G[now])\n{\nif (i == f)\ncontinue;\nif (visit[i])\n{ // ancestor\nif (depth[i] &lt; depth[now])\n{\nlow[now] = min(low[now], depth[i]);\nst.push({now, i});\n}\n}\nelse\n{ // offspring\nst.push({now, i});\ndfs(i, cur_depth + 1, now);\ncut_son += 1;\nlow[now] = min(low[now], low[i]);\nif (low[i] &gt;= depth[now])\n{\nis_cut_vertex[now] = true;\nauto t = st.top();\nst.pop();\nwhile (t != make_pair(now, i))\n{\nBCC[bcc_cnt].push_back(t);\nt = st.top();\nst.pop();\n}\nBCC[bcc_cnt].push_back(t);\n++bcc_cnt;\n}\n}\n}\nif (cur_depth == 0)\nis_cut_vertex[now] = (cut_son != 1);\nreturn;\n}\n</code></pre> <p>\u9019\u500b\u6f14\u7b97\u6cd5\u4e00\u6a23\u6709\u505a DFS\uff0c\u4e26\u4e14\u7dad\u8b77\u4e00\u500b stack\uff0c\u6bcf\u689d\u908a\u90fd\u6703\u88ab\u4e1f\u9032\u53bb\u4e00\u6b21\uff0c\u56e0\u6b64\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p>"},{"location":"graph/connectivity/#_5","title":"\u6709\u5411\u5716\u7684\u5f37\u9023\u901a","text":"<p>\u8ac7\u5b8c\u4e86\u7121\u5411\u5716\uff0c\u5c31\u4f86\u8ac7\u8ad6\u6709\u5411\u5716\uff0c\u6709\u5411\u5716\u7684\u908a\u5177\u6709\u65b9\u5411\u6027\uff0c\u56e0\u6b64\u6bd4\u7121\u5411\u5716\u66f4\u96e3\u9054\u6210 \"\u9023\u901a\" \u7684\u6027\u8cea\uff0c\u65bc\u662f\u70ba\u4e86\u8ddf\u7121\u5411\u5716\u505a\u5340\u5206\uff0c\u8a02\u4e86\u4e00\u500b\u8853\u8a9e \"\u5f37\u9023\u901a\" \u4f86\u8868\u793a\u6709\u5411\u5716\u7684\u9023\u901a\u6027\u3002</p> <ul> <li>\u5f37\u9023\u901a\uff1a\u5c0d\u65bc\u6709\u5411\u5716\u4e0a\u7684\u5169\u9ede  \uff0c\u82e5\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e  \u5230  \uff0c\u4ee5\u53ca\u5b58\u5728\u4e00\u689d\u8def\u5f91\u5f9e  \u5230  \uff0c\u5247\u6211\u5011\u7a31  \u5169\u9ede\u5f37\u9023\u901a\uff08strongly connected)</li> <li>\u5f37\u9023\u901a\u5716\uff1a\u5982\u679c\u4e00\u5f35\u6709\u5411\u5716\u4e0a\u4efb\u610f\u5169\u9ede\u7686\u5f37\u9023\u901a\uff0c\u5247\u9019\u5f35\u5716\u70ba\u5f37\u9023\u901a\u5716\uff08strongly connected graph)</li> <li>\u5f37\u9023\u901a\u5143\u4ef6\uff1a\u5982\u679c\u4e00\u5f35\u5716\u4e2d\u7684\u67d0\u500b\u5b50\u5716\u662f\u4e00\u5f35\u5f37\u9023\u901a\u5716\uff0c\u6211\u5011\u7a31\u9019\u500b\u5b50\u5716\u70ba\u5f37\u9023\u901a\u5b50\u5716\uff08strongly connected subgraph)\uff0c\u6216\u662f\u5f37\u9023\u901a\u5143\u4ef6\uff08strongly connected component, SCC)</li> </ul> <p>\u5f37\u9023\u901a\u70ba\u6709\u5411\u5716\u4e2d\u5f88\u91cd\u8981\u7684\u6027\u8cea\uff0c\u5982\u679c\u5c07\u5f37\u9023\u901a\u5143\u4ef6\u5404\u81ea\u7e2e\u6210\u4e00\u9ede\uff0c\u65b0\u5716\u662f\u4e00\u5f35\u6709\u5411\u7121\u74b0\u5716\uff08Directed Acyclic Graph, DAG)\uff0cDAG \u6709\u8a31\u591a\u5f37\u529b\u6027\u8cea\uff0c\u53ef\u4ee5\u8b93\u5716\u4e0a\u7684\u554f\u984c\u8b8a\u5f97\u6709\u89e3\uff0c\u6709\u4e9b\u5716\u8ad6\u984c\u76ee\u4e00\u958b\u59cb\u6703\u5148\u627e\u51fa SCC \u4f86\u89e3\u984c\u3002</p>"},{"location":"graph/connectivity/#_6","title":"\u5f37\u9023\u901a\u5143\u4ef6","text":"<p>\u9019\u88e1\u6703\u4ecb\u7d39\u5169\u7a2e\u505a\u6cd5\uff0cTarjan \u548c Kosaraju's algorithm\u3002</p>"},{"location":"graph/connectivity/#tarjan","title":"Tarjan","text":"<p>Tarjan \u7684\u601d\u7dad\u5982\u4e0b\uff1aSCC \u662f\u7531\u4e00\u500b\u6216\u591a\u500b\u74b0\u7d44\u6210\uff0c  \u6539\u6210\u7dad\u8b77\u7bc0\u9ede\u7684\u6642\u9593\u6233\uff0c\u7576\u4e00\u500b\u7bc0\u9ede\u6df1\u5ea6\u7b49\u65bc  \u51fd\u6578\u6642\uff0c\u4ee3\u8868\u627e\u5230\u4e00\u500b SCC\u3002\u548c\u627e\u96d9\u9023\u901a\u5143\u4ef6\u76f8\u4f3c\uff0c\u958b\u4e00\u500b <code>stack</code> \u7dad\u8b77\u76ee\u524d\u8d70\u904e\u7684\u9ede\u3002</p> <p>\u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u548c\u4e0a\u8ff0\u76f8\u4f3c\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u4e00\u6b21  \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MXV = 100005;\nint sccCnt, sccNo[MXV];\nvector&lt;int&gt; G[MXV], dep(MXV), low(MXV);\nbitset&lt;MXV&gt; isStack, isRoot;\nstack&lt;int&gt; st;\nint t;\n\nvoid init(int n, int m)\n{\nt = 0;\nfill(dep.begin(), dep.end(), 0);\nsccCnt = 0;\nmemset(sccNo, 0, sizeof(sccNo));\nisStack.reset();\nisRoot.set();\nwhile (!st.empty())\n{\nst.pop();\n}\nfor (int i = 1; i &lt;= n; ++i)\n{\nG[i].clear();\n}\nfor (int i = 0, x, y; i != m; ++i)\n{\ncin &gt;&gt; x &gt;&gt; y;\nG[x].push_back(y);\n}\n}\n\nvoid tarjan(int u)\n{\ndep[u] = low[u] = ++t;\nst.push(u);\nisStack[u] = true;\nfor (auto v : G[u])\n{\nif (dep[v] == 0)\n{\ntarjan(v);\nlow[u] = min(low[u], low[v]);\n}\nelse if (isStack[v])\n{\nlow[u] = min(low[u], dep[v]);\n}\n}\nif (low[u] == dep[u])\n{\n++sccCnt;\nint tmp;\ndo\n{\ntmp = st.top();\nst.pop();\nisStack[tmp] = false;\nsccNo[tmp] = sccCnt;\n} while (tmp != u);\n}\n}\n\nint main()\n{\ninit(n, m); // |V| = n, |E| = m\nfor (int i = 1; i &lt;= n; ++i)\n{\nif (dep[i] == 0)\n{\ntarjan(i);\n}\n}\n}\n</code></pre>"},{"location":"graph/connectivity/#kosarajus-algorithm","title":"Kosaraju's algorithm","text":"<p>Kosaraju's algorithm \u57fa\u65bc\u89c0\u5bdf\u5230\u7684\u5169\u4ef6\u4e8b\u800c\u6210\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u70ba\u5c07\u539f\u5716\u6bcf\u689d\u908a\u90fd\u53cd\u5411\uff0c\u5f97\u5230\u7684\u65b0\u5716\uff0c\u6240\u6709 SCC \u7684\u4f4d\u7f6e\u4f9d\u820a\u76f8\u540c\u3002\u7b2c\u4e8c\u4ef6\u4e8b\u70ba\u5982\u679c\u6211\u5011\u7528 \"\u6b63\u78ba\u7684\" \u9806\u5e8f\u904d\u6b77\u5716\uff0c\u6bcf\u6b21\u904d\u6b77\u5230\u7684\u9ede\u8996\u70ba\u540c\u4e00\u500b SCC\uff0c\u90a3\u9ebc\u662f\u6709\u53ef\u80fd\u53ef\u4ee5\u627e\u51fa\u6b63\u78ba\u7684 SCC \u7684\u3002 \u6211\u5011\u5206\u6210\u4e09\u7a2e\u60c5\u6cc1\u4f86\u8a0e\u8ad6\u90a3\u6a23\u624d\u662f\u6b63\u78ba\u7684\u904d\u6b77\u9806\u5e8f\u3002</p> <ul> <li>  \u5728\u540c\u4e00\u500b SCC \u88e1\uff1a\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u53e6\u5916\u4e00\u500b\u9ede\u4e5f\u6703\u88ab\u62dc\u8a2a\u5230</li> <li>  \u4e92\u76f8\u90fd\u4e0d\u80fd\u8d70\u5230\u5c0d\u65b9\uff1a\u9019\u7a2e\u60c5\u6cc1\u4e5f\u662f\u5148\u62dc\u8a2a\u8ab0\u90fd\u53ef\u4ee5\uff0c\u53cd\u6b63\u6beb\u4e0d\u76f8\u5e72</li> <li>  \u8d70\u7684\u5230  \uff0c  \u8d70\u4e0d\u5230  \uff08\u55ae\u5411\u901a\u884c\uff09\uff1a\u9019\u7a2e\u60c5\u6cc1\u53ea\u80fd\u5148\u8d70  \u518d\u8d70  \uff0c\u5426\u5247\u5148\u8d70  \u7684\u8a71\uff0c  \u6703\u88ab\u8a8d\u70ba\u548c  \u5728\u540c\u4e00\u500b SCC \u5167</li> </ul> <p>\u6240\u4ee5\u53ea\u8981\u7d66\u51fa\u4e00\u500b\u9806\u5e8f\uff0c\u5c0d\u65bc\u6240\u6709\u53ea\u6709  \u8d70\u7684\u5230  \uff0c  \u8d70\u4e0d\u5230  \u7684\u9ede\u5c0d  \u90fd\u6eff\u8db3  \u6703\u6bd4  \u5148\u88ab\u8d70\u5230\uff0c\u9019\u500b\u6f14\u7b97\u6cd5\u5c31\u884c\u5f97\u901a\u4e86\u3002\u57fa\u65bc\u9019\u500b\u9053\u7406\uff0cKosaraju's algorithm \u5c31\u8a95\u751f\u4e86\uff1a</p> <ul> <li>\u5c07\u5716\u4e0a\u6240\u6709\u908a\u53cd\u5411\uff0c\u5f97\u5230\u65b0\u5716  </li> <li>\u5728\u5716  \u4e0a\u627e\u4e00\u500b\u672a\u62dc\u8a2a\u904e\u7684\u9ede DFS \u4e26\u4e14\u8a18\u9304\u96e2\u958b\u7684\u6642\u9593\u6233\uff0cDFS \u5b8c\u5f8c\uff0c\u5982\u679c\u9084\u6709\u9ede\u672a\u88ab DFS\uff0c\u518d\u9032\u884c\u524d\u8ff0\u52d5\u4f5c\u3002</li> <li>\u4f9d\u6642\u9593\u6233\u7684\u96e2\u958b\u6233\u8a18\u5c0d\u9ede\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6240\u5f97\u5e8f\u5217\u5373\u70ba\u6240\u6c42\u3002\u518d\u6839\u64da\u9019\u500b\u5e8f\u5217\u5728\u539f\u5716  \u505a DFS\uff0c\u6bcf\u6b21 DFS \u5230\u7684\u9ede\u5f62\u6210\u4e00\u500b SCC\u3002</li> </ul> <p>\u73fe\u5728\u4f86\u8b49\u660e\u9019\u500b\u5e8f\u5217\u6eff\u8db3\u6211\u5011\u7684\u8981\u6c42\uff1a</p> <ul> <li> <p>\u5c0d\u65bc\u5716 G \u4e0a\u4efb\u610f\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d  \uff0c\u5728  \u4e0a\u6703\u8b8a\u6210\u55ae\u5411\u901a\u884c\u7684\u9ede\u5c0d  \u3002</p> </li> <li> <p>\u5982\u679c  \u5148\u88ab\u62dc\u8a2a\uff0c\u56e0\u70ba  \u6c92\u8fa6\u6cd5\u505a\u5230  \uff0c\u6240\u4ee5  \u6703\u5148\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64  \u7684\u96e2\u958b\u6233\u8a18\u6703\u5c0f\u65bc  \u7684\u96e2\u958b\u6233\u8a18\u3002</p> </li> <li> <p>\u5982\u679c  \u5148\u88ab\u62dc\u8a2a\uff0c  \u4e00\u5b9a\u6703\u8d70\u5230  \uff0c  \u62dc\u8a2a\u5b8c\u7562\u6642\uff0c  \u4e00\u5b9a\u9084\u6c92\u62dc\u8a2a\u5b8c\u7562\uff0c\u56e0\u6b64  \u7684\u96e2\u958b\u6233\u8a18\u4f9d\u7136\u6703\u5c0f\u65bc  \u7684\u96e2\u958b\u6233\u8a18\u3002</p> </li> <li> <p>\u5f97\u8b49  \u7684\u96e2\u958b\u6233\u8a18\u4e00\u5b9a\u6703\u5c0f\u65bc  \u7684\u96e2\u958b\u6233\u8a18\uff0c\u5373  \u5728\u5e8f\u5217\u4e2d\u6703\u5728  \u524d\u9762\u3002</p> </li> <li> <p></p> </li> </ul> <p>\u4ee5\u4e0b\u662f\u7a0b\u5f0f\u78bc\uff0c\u6b64\u7b97\u6cd5\u6703\u505a\u5169\u6b21  \uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \uff0c\u6548\u7387\u6bd4 Tarjan \u4f4e\u4e00\u4e9b\uff0c\u4f46 Kosaraju's algorithm \u8f03\u5bb9\u6613\u5be6\u4f5c\u3002</p> <pre><code>vector&lt;int&gt; G[MXN];\nvector&lt;int&gt; rev_G[MXN];\nvector&lt;int&gt; leave;\nbitset&lt;MXN&gt; visit;\nint at_scc[MXN];\n\nvoid dfs_for_stamp(int now)\n{\nvisit[now] = true;\nfor (auto i : rev_G[now])\n{\nif (!visit[i])\n{\ndfs_for_stamp(i);\n}\n}\nleave.push_back(now);\n}\n\nvoid dfs_for_scc(int now, int cur_scc)\n{\nvisit[now] = true;\nat_scc[now] = cur_scc;\nfor (auto i : G[now])\n{\nif (!visit[i])\n{\ndfs_for_scc(i, cur_scc);\n}\n}\n}\n\nint kosaraju(int n)\n{\nvisit.reset();\nleave.clear();\nfor (int i = 0; i &lt; n; ++i)\n{\nif (!visit[i])\n{\ndfs_for_stamp(i);\n}\n}\nvisit.reset();\nint scc_count = 0;\nfor (int i = n - 1; i &gt;= 0; --i)\n{\nif (!visit[leave[i]])\n{\ndfs_for_scc(leave[i], scc_count++);\n}\n}\nreturn scc_count;\n}\n</code></pre>"},{"location":"graph/connectivity/#_7","title":"\u4f8b\u984c","text":"<ul> <li>\u5272\u9ede\u6a21\u677f\u984c<ul> <li>UVa 00796 - Critical Links </li> </ul> </li> <li>\u5272\u908a\u6a21\u677f\u984c<ul> <li>UVa 00315 - Network </li> </ul> </li> <li>\u96d9\u9023\u901a\u5143\u4ef6<ul> <li>UVa 10972 - RevolC FaeLoN </li> </ul> </li> <li>\u5f37\u9023\u901a\u5143\u4ef6<ul> <li>UVa 11504 - Dominos </li> <li>UVa 11324 - The Largest Clique </li> </ul> </li> </ul> <ol> <li> <p>\u6709\u5411\u5716\u5f37\u9023\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5 in https://byvoid.com/ \u21a9</p> </li> <li> <p>\u6709\u5411\u5716\u7684\u5f37\u9023\u901a\u5143\u4ef6 Strongly Connected Component in \u5929\u908a\u3002\u4e16\u754c \u21a9</p> </li> </ol>"},{"location":"graph/directedacyclicgraph/","title":"\u6709\u5411\u7121\u74b0\u5716 (Directed Acyclic Graph, DAG)","text":"<p>\u6709\u5411\u7121\u74b0\u5716\u53ef\u4ee5\u4ee3\u8868\u4e8b\u7269\u4e4b\u9593\u7684\u76f8\u4f9d\u95dc\u4fc2\uff0c\u4f8b\u5982\u64cb\u4fee\u6a5f\u5236\uff0c\u6216\u662f\u51fd\u793a\u5eab\u7684\u5957\u4ef6\u5b89\u88dd\u3002</p> <p>\u6709\u5169\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u6aa2\u67e5\u4e00\u5f35\u5716\u662f\u5426\u70ba\u6709\u5411\u7121\u74b0\u5716\u3002</p>"},{"location":"graph/directedacyclicgraph/#_1","title":"\u62d3\u8b5c\u6392\u5e8f","text":"<p>\u62d3\u6a38\u6392\u5e8f\u662f\u5c0d\u5c07\u6709\u5411\u5716\u8f49\u63db\u6210\u4e00\u500b\u7dda\u6027\u5e8f\u5217\uff0c\u4e5f\u7528\u4f86\u5224\u65b7\u4e00\u5f35\u5716\u662f\u5426\u70ba\u6709\u5411\u7121\u74b0\u5716\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u5c07\u5165\u5ea6 = 0 \u7684\u9ede\u52a0\u5165 queue</li> <li>\u5f9e queue \u7576\u4e2d\u62ff\u4e00\u500b\u9ede  </li> <li>\u62d4\u6389\u9ede  </li> <li>\u91cd\u8907\u4e0a\u6558\u6b65\u9a5f\uff0c\u76f4\u5230 queue \u88e1\u9762\u6c92\u6709\u9ede</li> </ul> <p></p> <p>\u505a\u5b8c\u62d3\u8b5c\u6392\u5e8f\u5f8c\uff0c\u5982\u679c\u6240\u6709\u9ede\u90fd\u88ab\u52a0\u5165\u904e queue \u904e\uff0c\u4ee3\u8868\u9019\u5f35\u5716\u662f DAG\uff0c\u53cd\u4e4b\uff0c\u5716\u4e2d\u6709\u74b0\u3002</p> <pre><code>int q[N], din[N];\nvector&lt;int&gt; G[N];\n\nbool topologicalSort(int n)\n{\nint head = -1, tail = -1;\nfor (int i = 0; i &lt; n; ++i)\n{\nif (din[i] == 0)\n{\nq[++head] = 1;\n}\n}\nwhile (head &gt; tail)\n{\nint s = q[++tail];\nfor (int i : G[s])\n{\nif (--din[i] == 0)\nq[++head] = i;\n}\n}\nreturn head == n;\n}\n</code></pre> <p>\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p>"},{"location":"graph/directedacyclicgraph/#_2","title":"\u62d3\u8b5c\u9806\u5e8f","text":"<p>\u62d3\u8b5c\u6392\u5e8f\u4e2d\uff0c\u5f9e queue \u62ff\u51fa\u7684\u9806\u5e8f\u7a31\u70ba\u62d3\u8b5c\u9806\u5e8f\uff0c\u62d3\u8b5c\u9806\u5e8f\u4e0d\u552f\u4e00\u3002</p>"},{"location":"graph/directedacyclicgraph/#dfs","title":"DFS + \u6642\u9593\u6233\u8a18","text":"<p>\u53e6\u4e00\u7a2e\u662f\u5229\u7528 DFS + \u6642\u9593\u6233\u8a18\uff0c\u5982\u679c\u767c\u73fe\u6709\u4efb\u4e00\u689d\u908a  \uff0c  \uff0c\u90a3\u5c31\u7121\u89e3\uff0c\u5426\u5247\u4f9d\u7167  \u7531\u5927\u5230\u5c0f\u5f62\u6210\u62d3\u8b5c\u6392\u5e8f\u3002</p> <p>\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p>"},{"location":"graph/directedacyclicgraph/#_3","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>UVa 10305 - Ordering Tasks </li> </ul>"},{"location":"graph/disjointset/","title":"\u4e26\u67e5\u96c6","text":"<p>\u4e26\u67e5\u96c6\u662f\u4e00\u7a2e\u6a39\u72c0\u7d50\u69cb\uff0c\u4ed6\u652f\u63f4\u5169\u4ef6\u4e8b</p> <ul> <li>\u67e5\u8a62\u6240\u96b8\u5c6c\u96c6\u5408</li> <li>\u5408\u4f75\u5169\u500b\u96c6\u5408</li> </ul> <p>\u6211\u5011\u628a\u96c6\u5408\u8f49\u5316\u6210\u6a39\uff0c\u4e00\u9846\u6a39\u4ee3\u8868\u4e00\u500b\u96c6\u5408\uff0c\u6a39\u6839\u4ee3\u8868\u96c6\u5408\u7684\u8001\u5927\uff0c\u67e5\u8a62\u96b8\u5c6c\u96c6\u5408\u5c31\u56de\u50b3\u6a39\u6839\u662f\u8ab0\uff08\u4e00\u500b\u6a39\u9914\u53ef\u80fd\u6709\u5169\u9846\u6a39\u6839\u5427\uff09\uff0c\u5408\u4f75\u7684\u6642\u4faf\uff0c\u5c31\u628a\u4e00\u9846\u6a39\u7684\u6a39\u6839\u53ea\u5230\u53e6\u4e00\u9846\uff0c\u4ee5\u4e0b\u70ba\u8a73\u7d30\u7684\u63cf\u8ff0\u3002</p>"},{"location":"graph/disjointset/#_2","title":"\u521d\u59cb","text":"<p>\u4e00\u958b\u59cb\u7684\u6642\u5019\uff0c\u6bcf\u500b\u9ede\u81ea\u6210\u4e00\u500b\u96c6\u5408\uff0c\u6240\u4ee5\u628a\u6a39\u6839\u90fd\u8a2d\u70ba\u81ea\u5df1\u3002</p>"},{"location":"graph/disjointset/#_3","title":"\u67e5\u8a62","text":"<p>\u67e5\u8a62\u7684\u6642\u5019\uff0c\u8981\u67e5\u5230\u6a39\u6839\u70ba\u81ea\u5df1\u7684\u9ede\uff0c\u70ba\u6b62\u5426\u5247\u7684\u8a71\u5c31\u8981\u7e7c\u7e8c\u67e5\u3002</p> <pre><code>int Find(int x)\n{\nif (x == p[x])\nreturn x;\nreturn find(p[x]);\n}\n</code></pre> <p>\u72c0\u614b\u58d3\u7e2e\uff1a\u5728\u5408\u4f75\u4e4b\u5f8c\u539f\u672c\u88ab\u6307\u5411\u7684\u6a39\u6839\u5c31\u6c92\u7528\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u4e00\u908a\u505a\u67e5\u8a62\u6642\uff0c\u4e00\u908a\u505a\u66f4\u65b0\u3002</p> <pre><code>int Find(int x)\n{\nif (x == p[x])\nreturn x;\nreturn p[x] = find(p[x]);\n}\n</code></pre> <p></p>"},{"location":"graph/disjointset/#_4","title":"\u5408\u4f75","text":"<p>\u627e\u51fa\u5169\u500b\u9ede\u7684\u6a39\u6839\uff0c\u5c07\u4e00\u500b\u6a39\u6839\u5408\u4f75\u6307\u5230\u53e6\u4e00\u500b\u6a39\u6839\u3002</p> <pre><code>void Union(int a, int b)\n{\na = Find(a);\nb = Find(b);\nif (a == b)\nreturn;\np[a] = b;\n}\n</code></pre> <p></p> <p>\u555f\u767c\u5f0f\u5408\u4f75\uff1a\u5efa\u7acb\u4e00\u500b  \u4ee3\u8868\u6a39\u7684\u9ad8\u5ea6\uff0c\u4ea6\u662f\u5143\u7d20\u6700\u5927\u905e\u8ff4\u6b21\u6578\uff0c  \u4e00\u958b\u59cb\u70ba  \u3002\u518d\u4f86\uff0c\u6211\u5011\u6bcf\u6b21\u90fd\u8b93\u9ad8\u5ea6\u5c0f\u7684\u9ad8\u5ea6\u5927\u7684\u5408\u4f75\uff0c\u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e00\u6a23\u7684\uff0c\u5c31\u8b93\u5408\u4f75\u5225\u4eba\u7684\u6a39\u9ad8\u5ea6\u52a0  \u3002\u5982\u679c\u8981\u628a\u9ad8\u5ea6\u8b8a\u70ba  \uff0c\u5247\u81f3\u5c11\u9700\u8981  \u500b\u9ede\uff0c\u7531\u6b64\u63a8\u51fa N \u500b\u9ede\u6240\u5f62\u6210\u6700\u9ad8\u4e4b\u9ad8\u5ea6\u70ba  \u3002</p> <pre><code>void Union(int a, int b)\n{\na = Find(a);\nb = Find(b);\nif (a == b)\nreturn;\nif (rank[a] &lt; rank[b])\np[a] = b;\nelse if (rank[a] &gt; rank[b])\np[b] = a;\nelse\n{\np[a] = b;\nrank[a]++;\n}\n}\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u7dad\u8b77\u4e26\u67e5\u96c6\u7684\u500b\u6578\uff0c\u500b\u6578\u5927\u7684\u5408\u4f75\u500b\u6578\u5c0f\u7684\u4e26\u67e5\u96c6\u3002</p> <pre><code>void Union(int a, int b)\n{\na = Find(a);\nb = Find(b);\nif (a == b)\nreturn;\nif (sz[a] &lt; sz[b])\nswap(a, b);\nsz[a] += sz[b];\np[b] = a;\n}\n</code></pre>"},{"location":"graph/disjointset/#_5","title":"\u5b8c\u6574\u7a0b\u5f0f\u78bc","text":"<pre><code>int p[N], rank[N];\nvoid init()\n{\nfor (int i = 0; i &lt; N; i++)\n{\np[i] = i;\nrnak[i] = 1;\n}\n}\nint Find(int x)\n{\nif (x == p[x])\nreturn x;\nreturn p[x] = find(p[x]);\n}\nvoid Union(int a, int b)\n{\na = Find(a);\nb = Find(b);\nif (a == b)\nreturn;\nif (rank[a] &lt; rank[b])\np[a] = b;\nelse if (rank[a] &gt; rank[b])\np[b] = a;\nelse\n{\np[a] = b;\nrank[a]++;\n}\n}\n</code></pre>"},{"location":"graph/disjointset/#_6","title":"\u76f8\u95dc\u984c\u76ee","text":"UVa 10608 - Friends <p>\u7d66\u5b9a  \u500b\u4eba\u7684\u670b\u53cb\u95dc\u4fc2\uff0c\u5982\u679c\u5169\u500b\u4eba\u662f\u670b\u53cb\uff0c\u4ed6\u5011\u5728\u540c\u4e00\u500b\u670b\u53cb\u5708\uff0c\u554f\u6709\u5e7e\u500b\u4eba\u5728\u6700\u5927\u7684\u670b\u53cb\u5708\u3002</p> UVa 11503 - Virtual Friends <p>\u7d66\u5b9a  \u500b\u4eba\u7684\u670b\u53cb\u95dc\u4fc2\uff0c\u5982\u679c\u5169\u500b\u4eba\u662f\u670b\u53cb\uff0c\u554f\u5169\u500b\u4eba\u6210\u70ba\u65b0\u670b\u53cb\uff0c\u4ed6\u5011\u7684\u670b\u53cb\u5708\u7e3d\u5171\u6709\u5e7e\u500b\u4eba\u3002</p> <p>\u9019\u5169\u984c\u984c\u76ee\u76f8\u4f3c\uff0c\u90fd\u8981\u7dad\u8b77\u6bcf\u500b\u96c6\u5408\u7684\u500b\u6578\uff0c\u6700\u5f8c\u7b54\u6848\u6703\u6839\u64da\u6bcf\u500b\u96c6\u5408\u7684\u6578\u91cf\u8a08\u7b97\u51fa\u4f86\u3002</p> <p>UVa 10608 \u9019\u984c\u9700\u8981\u6ce8\u610f\u6700\u5927\u7684\u670b\u53cb\u5708\u53ef\u80fd\u4e0d\u53ea\u4e00\u500b\uff0c\u5982\u679c\u6709\u591a\u500b\u96c6\u5408\u5927\u5c0f\u4e00\u6a23\uff0c\u9700\u8981\u7d2f\u52a0\u7b54\u6848\u3002</p> <p>UVa 11503 \u7d66\u5b9a\u670b\u53cb\u7684\u540d\u5b57\uff0c\u5728\u5be6\u4f5c\u4e0a\uff0c\u6703\u5229\u7528 <code>map</code> \u5c07\u540d\u5b57\u5c0d\u61c9\u6578\u5b57\u518d\u505a\u8a08\u7b97\u3002</p> UVa 00615 - Is It A Tree? <p>\u7d66\u4f60\u6578\u689d\u6709\u5411\u908a\uff0c\u5224\u65b7\u662f\u5426\u70ba\u4e00\u9846\u6a39?</p> <p>\u6709\u5411\u6a39\u6709\u5e7e\u500b\u689d\u4ef6\uff1a</p> <ul> <li>\u53ea\u6709\u4e00\u500b\u5165\u5ea6  \u7684\u9ede\uff0c\u5176\u4ed6\u90fd\u662f\u5165\u5ea6  \u7684\u9ede\u3002</li> <li>\u662f\u9023\u901a\u5716\u4e14\u7121\u74b0\u3002</li> </ul> <p>\u7b2c\u4e8c\u9805\u689d\u4ef6\u53ef\u4ee5\u7528\u4e26\u67e5\u96c6\u6216 DFS \u5224\u65b7\u3002</p>"},{"location":"graph/disjointset/#_7","title":"\u5e36\u6b0a\u4e26\u67e5\u96c6","text":"<p>\u5728\u4e26\u67e5\u96c6\u4e0a\u589e\u52a0\u6578\u503c\uff0c\u6578\u503c\u6703\u5728\u67e5\u8a62\u7684\u6642\u5019\u66f4\u65b0\uff0c\u8b93\u4e26\u67e5\u96c6\u80fd\u89e3\u6c7a\u66f4\u591a\u554f\u984c\u3002</p> <p>\u66f4\u65b0\u539f\u5247\uff1a\u6211\u5230\u6839\u7bc0\u9ede\u7684\u8ddd\u96e2=\u6211\u5230\u7236\u7bc0\u9ede\u7684\u8ddd\u96e2+\u7236\u7bc0\u9ede\u5230\u6839\u7bc0\u9ede\u7684\u8ddd\u96e2\u3002</p> <pre><code>int find(int u) // p[u]: \u7236\u7bc0\u9ede, root: \u6839\u7bc0\u9ede\n{\nif (u != p[u])\nreturn p[u];\nint f = p[u];\nint root = find(p[u]);\nv[u] += v[p[u]];\nreturn p[u] = root;\n}\n</code></pre> UVa 01329 - Corporative Network <p>\u7d66\u5b9a  \u500b\u7bc0\u9ede\u548c\u5169\u7a2e\u64cd\u4f5c\uff0c\u4e00\u958b\u59cb\u6bcf\u500b\u9ede\u90fd\u6c92\u6709\u7236\u7bc0\u9ede\u3002 - <code>E x</code>: \u8f38\u51fa <code>x</code> \u5230\u6839\u7bc0\u9ede\u7684\u8ddd\u96e2\u3002 - <code>I x y</code>: \u5c07 <code>x</code> \u7684\u7236\u7bc0\u9ede\u8a2d\u70ba <code>y</code>\uff0c\u8ddd\u96e2\u70ba \u3002</p>"},{"location":"graph/disjointset/#_8","title":"\u5e36\u522a\u9664\u4e26\u67e5\u96c6","text":"<p>\u522a\u9664\u64cd\u4f5c\u662f\u6307\u5c07\u7279\u5b9a\u9ede  \u5f9e\u7576\u524d\u96c6\u5408\u79fb\u9664\uff0c\u81ea\u5df1\u7368\u7acb\u4e00\u500b\u96c6\u5408\u6216\u662f\u52a0\u5165\u65b0\u7684\u96c6\u5408\uff0c\u5be6\u4f5c\u6b65\u9a5f\u5982\u4e0b\uff1a</p> <ul> <li>\u958b\u4e00\u500b\u9663\u5217  \u7dad\u8b77\u6bcf\u500b\u9ede\u7684\u7de8\u865f\u3002<ul> <li>\u67e5\u8a62 : <code>Find(id[x])</code>\u3002</li> <li>\u5408\u4f75 : <code>Union(id[x],id[y])</code>\u3002</li> </ul> </li> <li>\u5c07  \u5f9e\u7576\u524d\u96c6\u5408\u79fb\u9664<ul> <li>\u6263\u9664  \u5728\u539f\u672c\u96c6\u5408\u7684\u8ca2\u737b\u3002</li> <li>\u70ba  \u7522\u751f\u65b0\u7684\u7de8\u865f\u3002</li> <li>\u4fdd\u7559\u820a\u7de8\u865f\uff0c\u5426\u5247\u6703\u5f71\u97ff  \u539f\u672c\u7684\u5b50\u7bc0\u9ede\u3002</li> </ul> </li> </ul> UVa 11987 - Almost Union-Find <p>\u7d66\u5b9a  \u500b\u9ede\u548c  \u7b46\u64cd\u4f5c\uff0c\u4e00\u958b\u59cb\u6bcf\u500b\u9ede\u90fd\u662f\u81ea\u5df1\u4e00\u500b\u96c6\u5408\uff0c\u64cd\u4f5c\u6709\u4e09\u7a2e\uff1a - <code>1 p q</code>: \u5c07  \u6240\u5728\u7684\u96c6\u5408\u5408\u4f75\u3002 - <code>2 p q</code>: \u5c07  \u548c  \u6240\u5728\u7684\u96c6\u5408\u5408\u4f75\u3002 - <code>3 p</code>: \u8a62\u554f  \u6240\u5728\u7684\u96c6\u5408\u5143\u7d20\u500b\u6578\u548c\u7e3d\u548c\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MXV = 200000 + 5;\n\nint p[MXV], sum[MXV], sz[MXV];\nint tot = -1, id[MXV];\nstruct DisjointSet\n{\nvoid init(int n = MXV - 1)\n{\nfor (int i = 0; i &lt;= n; i++)\n{\nsz[i] = 1;\np[i] = i;\nsum[i] = i;\nid[i] = i;\n}\ntot = n;\n}\nint find(int u) { return u == p[u] ? u : find(p[u]); }\nvoid Union(int x, int y)\n{\nint fx = find(id[x]), fy = find(id[y]);\nif (fx == fy)\nreturn;\nsz[fy] += sz[fx];\nsum[fy] += sum[fx];\np[fx] = fy;\n}\n};\n\nint main()\n{\nint n, m;\nDisjointSet djs;\nwhile (cin &gt;&gt; n &gt;&gt; m)\n{\nint x, y, z;\ndjs.init(n);\nfor (int i = 0; i &lt; m; ++i)\n{\ncin &gt;&gt; x;\nif (x == 3)\n{\ncin &gt;&gt; y;\nint fy = djs.find(id[y]);\ncout &lt;&lt; sz[fy] &lt;&lt; ' ' &lt;&lt; sum[fy] &lt;&lt; '\\n';\ncontinue;\n}\ncin &gt;&gt; y &gt;&gt; z;\nint fy = djs.find(id[y]), fz = djs.find(id[z]);\nif (fy == fz)\ncontinue;\nif (x == 2)\n{\n// remove from old set\nsz[fy] -= 1;\nsum[fy] -= y;\n// create new set\nid[y] = ++tot;\np[id[y]] = id[y];\nsz[id[y]] = 1;\nsum[id[y]] = y;\n}\ndjs.Union(y, z);\n}\n}\n}\n</code></pre>"},{"location":"graph/dmst/","title":"\u6700\u5c0f\u6a39\u5f62\u5716","text":"<p>\u5728\u4e00\u5f35\u6709\u5411\u5716\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u4e00\u9ede root\uff0c\u6eff\u8db3\uff1a</p> <ul> <li>\u5f9e root \u53ef\u4ee5\u5230\u5716\u4e0a\u5176\u4ed6\u7bc0\u9ede\u3002</li> <li>root \u7684\u5165\u5ea6\u70ba 0\uff0c\u5176\u4ed6\u7bc0\u9ede\u5165\u5ea6\u70ba 1\u3002</li> </ul> <p>\u8a72\u5716\u7a31\u70ba\u6a39\u5f62\u5716\u3002</p> <p>\u5728\u4e00\u5f35\u5716\u88e1\uff0c\u908a\u6b0a\u91cd\u548c\u6700\u5c0f\u7684\u5b50\u5716\u7a31\u70ba\u6700\u5c0f\u6a39\u5f62\u5716\uff0c\u4e5f\u53ef\u4ee5\u8aaa\u662f\u6709\u5411\u5716\u7248\u7684\u6700\u5c0f\u751f\u6210\u6a39\u3002</p> <p>\u6f14\u7b97\u6cd5\u6b65\u9a5f\u5982\u4e0b\uff1a</p> <ul> <li>\u9664\u4e86 root \u4e4b\u5916\u7684\u6240\u6709\u9ede\u9078\u64c7\u6b0a\u91cd\u6700\u5c0f\u7684\u5165\u908a\uff0c\u5982\u679c\u6709\u9ede\u6c92\u6709\u5165\u908a\uff0c\u4ee3\u8868\u7121\u6cd5\u5f62\u6210\u6a39\u5f62\u5716\u3002</li> <li>\u5224\u65b7\u88ab\u9078\u9032\u7684\u908a\u4e2d\u6709\u6c92\u6709\u74b0\uff0c\u5982\u679c\u6709\u74b0\u5c07\u8a72\u9084\u7e2e\u6210\u4e00\u500b\u9ede\uff0c</li> <li>\u5982\u679c\u6c92\u51fa\u73fe\u74b0\u7d42\u6b62\u6f14\u7b97\u6cd5\uff0c\u5426\u5247\u56de\u5230\u6b65\u9a5f\u4e00\u3002</li> </ul> <p></p> <pre><code>struct Edge\n{\nint u, v, cost;\n};\n// in,pre: \u6bcf\u500b\u9ede\u6700\u5c0f\u6b0a\u91cd\u5165\u908a\u7684\u6b0a\u91cd\u548c\u9802\u9ede\n// id: \u9ede\u7684\u65b0\u7de8\u865f, vis: \u88ab\u8ab0\u8a2a\u554f\nvector&lt;int&gt; in(MXN), pre(MXN), id(MXN), vis(MXN);\nvector&lt;Edge&gt; E;\n\nint dmst(int root, int n, int m)\n{\nint res = 0;\nwhile (1)\n{\n// \u5c0b\u627e\u975e root \u7684\u6240\u6709\u9ede\u6b0a\u91cd\u6700\u5c0f\u7684\u5165\u908a\nfill(in.begin(), in.end(), INF);\nfor (Edge &amp;edge : E)\nif (edge.u != edge.v &amp;&amp; edge.cost &lt; in[edge.v])\n{\nin[edge.v] = edge.cost;\npre[edge.v] = edge.u;\n}\n// \u5982\u679c\u6709\u4e00\u500b\u9ede(\u9664\u4e86 root)\u6c92\u5165\u908a\uff0c\u5c31\u7121\u6cd5\u5f62\u6210\u6a39\u5f62\u5716\nfor (int i = 0; i &lt; n; ++i)\nif (i != root &amp;&amp; in[i] == INF)\nreturn -1;\n// \u627e\u74b0\u548c\u7e2e\u9ede\nint num = 0;\nfill(id.begin(), id.end(), -1);\nfill(vis.begin(), vis.end(), -1);\nin[root] = 0;\nfor (int i = 0; i &lt; n; ++i)\n{\nres += in[i];\nint v = i;\nwhile (vis[v] != i &amp;&amp; id[v] == -1 &amp;&amp; v != root)\n{\nvis[v] = i;\nv = pre[v];\n}\nif (v != root &amp;&amp; id[v] == -1)\n{\nfor (int j = pre[v]; j != v; j = pre[j])\nid[j] = num;\nid[v] = num++;\n}\n}\n// \u6c92\u6709\u74b0\u4ee3\u8868\u5df2\u5f62\u6210\u6a39\u5f62\u5716\nif (num == 0)\nbreak;\n// \u5c07\u6c92\u6709\u5f62\u6210\u74b0\u7684\u9ede\u548c\u6240\u6709\u908a\u91cd\u65b0\u7de8\u865f\nfor (int i = 0; i &lt; n; ++i)\nif (id[i] == -1)\nid[i] = num++;\nfor (int i = 0; i &lt; (int)E.size(); ++i)\n{\nEdge &amp;edge = E[i];\n// \u5047\u8a2d\u9ede v \u6709\u5169\u689d\u5165\u908a E1,E2\uff0c\u7b2c\u4e00\u6b21\u9078\u64c7 E1\uff0c\u5728\u7e2e\u9ede\u5f8c E2\n// \u88ab\u9078\u64c7\uff0c\u6240\u589e\u52a0\u7684 cost = E2 \u7684\u6b0a\u91cd - E1\n// \u7684\u6b0a\u91cd\uff0c\u70ba\u4e86\u907f\u514d\u91cd\u8907\u8a08\u7b97\u6b0a\u91cd\uff0c\u5c07\u908a\u91cd\u65b0\u7de8\u865f\u6642\u628a\u6240\u6709\u672a\u9078\u5165\u7684\u908a\u6b0a\u91cd\u6263\u9664\u3002\nif (id[edge.u] != id[edge.v])\nedge.cost -= in[edge.v];\nedge.u = id[edge.u];\nedge.v = id[edge.v];\n}\nn = num;\nroot = id[root];\n}\nreturn res;\n}\n</code></pre>"},{"location":"graph/dmst/#_2","title":"\u4f8b\u984c\u7df4\u7fd2","text":"UVa 11183 - Teen Girl Squad  <p>\u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6a39\u3002</p> UVa 11865 - Stream My Contest <p>\u7d66\u5b9a\u6709  \u500b\u9ede\u548c  \u689d\u908a\u7684\u7db2\u8def\uff0c\u6bcf\u689d\u908a\u6709\u8d77\u9ede\u3001\u7d42\u9ede\u548c\u5bec\u983b\uff0c\u8a0a\u865f\u6703\u5f9e\u9ede  \u50b3\u9001\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u5728\u5efa\u9020\u6210\u672c\u6700\u5927\u70ba  \u7684\u60c5\u6cc1\u4e0b\uff0c\u6700\u591a\u53ef\u9054\u5230\u591a\u5c11\u5bec\u983b\u901f\u5ea6?</p> <p>\u4e8c\u5206\u641c\u5bec\u983b\u901f\u5ea6 \uff0c \u4ee3\u8868\u53ea\u4f7f\u7528\u5bec\u983b  \u7684\u908a\uff0c\u5efa\u9020\u6210\u672c\u662f\u5426 \u3002</p>"},{"location":"graph/eulercircuit/","title":"\u6b50\u62c9\u8ff4\u8def","text":"\u6b50\u62c9\u8ff4\u8def <p>\u67ef\u5c3c\u65af\u5821\u4e03\u6a4b\u554f\u984c\u53ef\u8aaa\u662f\u5716\u8ad6\u6700\u65e9\u7684\u8d77\u6e90\uff0c\u554f\u984c\u5982\u4e0b\uff08from \u7dad\u57fa\u767e\u79d1\uff09\uff1a\"\u7576\u6642\u6771\u666e\u9b6f\u58eb\u67ef\u5c3c\u65af\u5821\uff08\u4eca\u65e5\u4fc4\u7f85\u65af\u52a0\u91cc\u5be7\u683c\u52d2\uff09\u5e02\u5340\u8de8\u666e\u5217\u6208\u5229\u4e9e\u6cb3\u5169\u5cb8\uff0c\u6cb3\u4e2d\u5fc3\u6709\u5169\u500b\u5c0f\u5cf6\u3002\u5c0f\u5cf6\u8207\u6cb3\u7684\u5169\u5cb8\u6709\u4e03\u689d\u6a4b\u9023\u63a5\u3002\u5728\u6240\u6709\u6a4b\u90fd\u53ea\u80fd\u8d70\u4e00\u904d\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u4f55\u624d\u80fd\u628a\u9019\u500b\u5730\u65b9\u6240\u6709\u7684\u6a4b\u90fd\u8d70\u904d\uff1f\" \u6b50\u62c9\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u5716\u8ad6\u4e5f\u56e0\u6b64\u8a95\u751f\u3002</p> <p>\u4e03\u6a4b\u554f\u984c\u6839\u64da\u8d77\u9ede\u8207\u7d42\u9ede\u662f\u5426\u76f8\u540c\uff0c\u5206\u6210 Euler path\uff08\u4e0d\u540c\uff09\u53ca Euler circuit\uff08\u76f8\u540c\uff09\u3002</p>"},{"location":"graph/eulercircuit/#_2","title":"\u5224\u65b7\u6cd5","text":"<p>\u7121\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u5947\u9ede\uff08\u5ea6\u6578\u70ba\u5947\u6578\uff09\u548c\u5076\u9ede\uff08\u5ea6\u6578\u70ba\u5076\u6578\uff09\u3002</p> <ul> <li>Euler path\uff1a\u5947\u9ede\u6578\u70ba 0 \u6216 2</li> <li>Euler circuit\uff1a\u6c92\u6709\u5947\u9ede</li> </ul> \u8b49\u660e from wiki <p>\u5fc5\u8981\u6027\uff1a\u5982\u679c\u4e00\u500b\u5716\u80fd\u4e00\u7b46\u756b\u6210\uff0c\u90a3\u9ebc\u5c0d\u6bcf\u4e00\u500b\u9802\u9ede\uff0c\u8981\u9ebc\u8def\u5f91\u4e2d\u300c\u9032\u5165\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\u7b49\u65bc\u300c\u96e2\u958b\u300d\u9019\u500b\u9ede\u7684\u908a\u6578\uff1a\u9019\u6642\u9ede\u7684\u5ea6\u70ba\u5076\u6578\u3002\u8981\u9ebc\u5169\u8005\u76f8\u5dee\u4e00\uff1a\u9019\u6642\u9019\u500b\u9ede\u5fc5\u7136\u662f\u8d77\u9ede\u6216\u7d42\u9ede\u4e4b\u4e00\u3002\u6ce8\u610f\u5230\u6709\u8d77\u9ede\u5c31\u5fc5\u7136\u6709\u7d42\u9ede\uff0c\u56e0\u6b64\u5947\u9802\u9ede\u7684\u6578\u76ee\u8981\u9ebc\u662f 0\uff0c\u8981\u9ebc\u662f 2\u3002 \u5145\u5206\u6027\uff1a\u5982\u679c\u5716\u4e2d\u6c92\u6709\u5947\u9802\u9ede\uff0c\u90a3\u9ebc\u96a8\u4fbf\u9078\u4e00\u500b\u9ede\u51fa\u767c\uff0c\u9023\u4e00\u500b\u74b0  \u3002\u5982\u679c\u9019\u500b\u74b0\u5c31\u662f\u539f\u5716\uff0c\u90a3\u9ebc\u7d50\u675f\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u9ebc\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u7684\uff0c \u548c\u539f\u5716\u7684\u5176\u5b83\u90e8\u5206\u5fc5\u7136\u6709\u516c\u5171\u9802\u9ede  \u3002\u5f9e\u9019\u4e00\u9ede\u51fa\u767c\uff0c\u5728\u539f\u5716\u7684\u5269\u9918\u90e8\u5206\u4e2d\u91cd\u8907\u4e0a\u8ff0\u6b65\u9a5f\u3002\u7531\u65bc\u539f\u5716\u662f\u9023\u901a\u5716\uff0c\u7d93\u904e\u82e5\u5e72\u6b65\u5f8c\uff0c\u5168\u5716\u88ab\u5206\u70ba\u4e00\u4e9b\u74b0\u3002\u7531\u65bc\u5169\u500b\u76f8\u9023\u7684\u74b0\u5c31\u662f\u4e00\u500b\u74b0\uff0c\u539f\u4f86\u7684\u5716\u4e5f\u5c31\u662f\u4e00\u500b\u6b50\u62c9\u74b0\u4e86\u3002\u5982\u679c\u5716\u4e2d\u6709\u5169\u500b\u5947\u9802\u9ede  \u548c  \uff0c\u90a3\u9ebc\u52a0\u591a\u4e00\u689d\u908a\u5c07\u5b83\u5011\u9023\u4e0a\u5f8c\u5f97\u5230\u4e00\u500b\u7121\u5947\u9802\u9ede\u7684\u9023\u901a\u5716\u3002\u7531\u4e0a\u77e5\u9019\u500b\u5716\u662f\u4e00\u500b\u74b0\uff0c\u56e0\u6b64\u53bb\u6389\u65b0\u52a0\u7684\u908a\u5f8c\u6210\u70ba\u4e00\u689d\u8def\u5f91\uff0c\u8d77\u9ede\u548c\u7d42\u9ede\u662f  \u548c  \u3002\u8b49\u7562\u3002</p> <p>\u6709\u5411\u5716\u90e8\u5206\uff0c\u5c07\u9ede\u5206\u6210\u51fa\u9ede\uff08\u51fa\u5ea6 - \u5165\u5ea6 = 1\uff09\u548c\u5165\u9ede\uff08\u5165\u5ea6 - \u51fa\u5ea6 = 1\uff09\u9084\u6709\u5e73\u8861\u9ede\uff08\u51fa\u5ea6 = \u5165\u5ea6\uff09\u3002</p> <ul> <li>Euler path\uff1a\u51fa\u9ede\u548c\u5165\u9ede\u500b\u6578\u540c\u6642\u70ba 0 \u6216 1\u3002</li> <li>Euler circuit\uff1a\u53ea\u6709\u5e73\u8861\u9ede\u3002</li> </ul> UVa 10129 - Play on Words <p>\u7d66\u5b9a  \u500b\u5b57\u4e32\uff0c\u5982\u679c\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u5c3e\u548c\u53e6\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u9996\u76f8\u540c\uff0c\u53ef\u4ee5\u628a\u9019\u5169\u500b\u5b57\u4e32\u76f8\u9023\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u5b57\u4e32\u76f8\u9023\u3002</p> <p>\u628a\u82f1\u6587\u5b57\u6bcd\u7576\u4f5c\u9ede\uff0c\u5c0d\u65bc\u6bcf\u500b\u5b57\u4e32  \uff0c\u5c07  \u982d\u5c3e\u5169\u500b\u5b57\u6bcd\u4e4b\u9593\u9023\u4e00\u689d\u6709\u5411\u908a\uff0c\u9019\u984c\u984c\u76ee\u5c31\u8f49\u6210\u5224\u65b7\u4e00\u5f35\u6709\u5411\u5716\u662f\u5426\u5b58\u5728 Euler path (circuit)\uff0c\u6b64\u5916\u8981\u5224\u65b7\u9019\u5f35\u5716\u662f\u5426\u70ba\u4e00\u5f35\u9023\u901a\u5716\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#pragma GCC optimize(\"O2\")\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nusing PII = pair&lt;int, int&gt;;\nusing PLL = pair&lt;LL, LL&gt;;\nusing VI = vector&lt;int&gt;;\nusing VVI = vector&lt;vector&lt;int&gt;&gt;;\nconst int INF = 1e9;\nconst int MXN = 0;\nconst int MXV = 30;\nconst double EPS = 1e-9;\nconst int MOD = 1e9 + 7;\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define FOR(i, L, R) for (int i = L; i &lt; (int)R; ++i)\n#define FORD(i, L, R) for (int i = L; i &gt; (int)R; --i)\n#define IOS                                                                    \\\n    cin.tie(nullptr);                                                          \\\n    cout.tie(nullptr);                                                         \\\n    ios_base::sync_with_stdio(false);\nvector&lt;int&gt; din(MXV), dout(MXV);\nvector&lt;int&gt; G[MXV];\nbitset&lt;MXV&gt; vis;\n\nvoid init()\n{\nfill(din.begin(), din.end(), 0);\nfill(dout.begin(), dout.end(), 0);\nFOR(i, 0, MXV) G[i].clear();\nvis.reset();\n}\n\nvoid dfs(int u)\n{\nvis[u] = true;\nfor (int v : G[u])\nif (!vis[v])\ndfs(v);\n}\n\nbool ok(int st)\n{\nint cnt1 = 0, cnt2 = 0;\nFOR(i, 0, MXV)\n{\nint d = dout[i] - din[i];\nif (d == 1)\n{\n++cnt1;\nst = i;\n}\nelse if (d == -1)\n++cnt2;\nelse if (d != 0)\nreturn false;\n}\nif (cnt1 != cnt2 || cnt1 &gt; 1)\nreturn false;\ndfs(st);\nFOR(i, 0, MXV)\n{\nif ((din[i] || dout[i]) &amp;&amp; !vis[i])\nreturn false;\n}\nreturn true;\n}\n\nint main()\n{\nIOS;\nint t;\ncin &gt;&gt; t;\nwhile (t--)\n{\nint n;\nstring s;\ncin &gt;&gt; n;\ninit();\nFOR(i, 0, n)\n{\ncin &gt;&gt; s;\nint u = s[0] - 'a', v = s.back() - 'a';\n++dout[u];\n++din[v];\nG[u].emplace_back(v);\n}\nif (ok(s[0] - 'a'))\ncout &lt;&lt; \"Ordering is possible.\\n\";\nelse\ncout &lt;&lt; \"The door cannot be opened.\\n\";\n}\n}\n</code></pre>"},{"location":"graph/eulercircuit/#_3","title":"\u6c42\u51fa\u4e00\u7d44\u89e3","text":"<p>\u7528 DFS \u904d\u6b77\u6574\u5f35\u5716\uff0c\u8a2d  \u70ba\u96e2\u958b\u7684\u9806\u5e8f\uff0c\u7121\u5411\u5716\u7684\u7b54\u6848\u70ba  \uff0c\u6709\u5411\u5716\u7684\u7b54\u6848\u70ba\u53cd\u5411\u7684  \u3002</p> <p>DFS \u8d77\u9ede\u9078\u5b9a\uff1a</p> <ul> <li>Euler path\uff1a\u7121\u5411\u5716\u9078\u64c7\u4efb\u610f\u4e00\u500b\u5947\u9ede\uff0c\u6709\u5411\u5716\u9078\u64c7\u51fa\u9ede\u3002</li> <li>Euler circuit\uff1a\u4efb\u610f\u4e00\u9ede\u3002</li> </ul> UVa 10441 - Catenyms <p>\u7d66\u5b9a  \u500b\u5b57\u4e32\uff0c\u5982\u679c\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u5c3e\u548c\u53e6\u4e00\u500b\u5b57\u4e32\u7684\u5b57\u9996\u76f8\u540c\uff0c\u53ef\u4ee5\u628a\u9019\u5169\u500b\u5b57\u4e32\u76f8\u9023\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u7a2e\u8fa6\u6cd5\u53ef\u4ee5\u628a\u6240\u6709\u5b57\u4e32\u76f8\u9023\u3002\u5982\u679c\u5b58\u5728\u89e3\uff0c\u8acb\u8f38\u51fa\u64c1\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u89e3\u3002</p> <p>\u9019\u984c\u5224\u65b7\u662f\u5426\u6709\u89e3\u7684\u505a\u6cd5\u548c\u4e0a\u7684\u4f8b\u984c\u76f8\u4f3c\uff0c\u5dee\u5225\u5728\u65bc\u9019\u88e1\u7528\u4e26\u67e5\u96c6\u5224\u65b7\u662f\u5426\u70ba\u9023\u901a\u5716\u3002\u9019\u984c\u9700\u6c42\u51fa\u64c1\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u89e3\uff0c\u56e0\u6b64\u8981\u628a\u5b57\u4e32\u6392\u5e8f\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int ALP = 30;\nconst int MXN = 1005;\nint n;\nint din[ALP], dout[ALP];\nint par[ALP];\nvector&lt;string&gt; vs[MXN], ans;\nbitset&lt;MXN&gt; vis, used[ALP];\n\nvoid djsInit()\n{\nfor (int i = 0; i != ALP; ++i)\n{\npar[i] = i;\n}\n}\n\nint Find(int x) { return (x == par[x] ? (x) : (par[x] = Find(par[x]))); }\n\nvoid init()\n{\ndjsInit();\nmemset(din, 0, sizeof(din));\nmemset(dout, 0, sizeof(dout));\nvis.reset();\nfor (int i = 0; i != ALP; ++i)\n{\nvs[i].clear();\nused[i].reset();\n}\nreturn;\n}\n\nvoid dfs(int u)\n{\nfor (int i = 0; i != (int)vs[u].size(); ++i)\n{\nif (used[u][i])\n{\ncontinue;\n}\nused[u][i] = 1;\nstring s = vs[u][i];\nint v = s[s.size() - 1] - 'a';\ndfs(v);\nans.push_back(s);\n}\n}\n\nbool solve()\n{\nint cnt = 1;\nfor (int i = 0; i != n; ++i)\n{\nstring s;\ncin &gt;&gt; s;\nint from = s[0] - 'a', to = s.back() - 'a';\n++din[to];\n++dout[from];\nvs[from].push_back(s);\nvis[from] = vis[to] = true;\nif ((from = Find(from)) != (to = Find(to)))\n{\npar[from] = to;\n++cnt;\n}\n}\nif ((int)vis.count() != cnt)\n{\nreturn false;\n}\nint root, st, pin = 0, pout = 0;\nfor (int i = ALP - 1; i &gt;= 0; --i)\n{\nsort(vs[i].begin(), vs[i].end());\nif (vs[i].size())\nroot = i;\nint d = dout[i] - din[i];\nif (d == 1)\n{\n++pout;\nst = i;\n}\nelse if (d == -1)\n{\n++pin;\n}\nelse if (d != 0)\n{\nreturn false;\n}\n}\nif (pin != pout || pin &gt; 1)\n{\nreturn false;\n}\nans.clear();\ndfs((pin ? st : root));\nreturn true;\n}\n\nint main()\n{\nint t;\ncin &gt;&gt; t;\nwhile (t--)\n{\ncin &gt;&gt; n;\ninit();\nif (!solve())\n{\ncout &lt;&lt; \"***\\n\";\ncontinue;\n}\nfor (int i = ans.size() - 1; i &gt;= 0; --i)\n{\ncout &lt;&lt; ans[i] &lt;&lt; \".\\n\"[i == 0];\n}\n}\n}\n</code></pre>"},{"location":"graph/eulercircuit/#_4","title":"\u54c8\u5bc6\u9813\u554f\u984c","text":"<p>\u8ddf\u6b50\u62c9\u8ff4\u8def\u5f88\u50cf\uff0c\u4e0d\u904e\u9019\u6b21\u4e0d\u80fd\u91cd\u8907\u7684\u662f\u9ede\u3002\u81f3\u65bc\u5224\u65b7\u662f\u5426\u5b58\u5728 Hamilton Circuit\u3001\u627e\u5230\u4e00\u500b Hamilton Circuit \u662f NP-complete \u554f\u984c\uff0c\u627e\u5230\u4e00\u500b\u6b0a\u91cd\u6700\u5c0f\u7684 Hamilton Circuit \u662f NP-hard \u554f\u984c\uff0c\u76ee\u524d\u5c1a\u672a\u51fa\u73fe\u6709\u6548\u7387\u7684\u6f14\u7b97\u6cd5\u3002</p> <p>\u7528 DP \u53ef\u4ee5\u505a\u5230  \u7684\u8907\u96dc\u5ea6\u3002</p>"},{"location":"graph/flow/","title":"\u7db2\u8def\u6d41","text":""},{"location":"graph/flow/#_2","title":"\u6027\u8cea\u548c\u4f8b\u5b50","text":"<p>\u7db2\u8def\u6d41\u7684\u6027\u8cea\uff1a\u6709\u8d77\u9ede\u548c\u7d42\u9ede\uff0c\u6709\u6d41\u91cf\u9650\u5236\u3002</p> <p>\u4f8b\u5b50\uff1a\u6c34\u6d41\u3001\u7db2\u901f\u3001\u9ad8\u901f\u516c\u8def\u3002</p>"},{"location":"graph/flow/#_3","title":"\u5b9a\u7fa9","text":"<p>\u7d66\u5b9a\u4e00\u5f35\u5716 \uff0c\u6bcf\u689d\u908a  \u6709\u5bb9\u91cf\\  \u548c\u6d41\u91cf \uff0c\u5269\u9918\u6d41\u91cf \u3002</p> <p>\u7d66\u5b9a  \u548c\u532f\u9ede \uff0c\u6211\u5011\u7a31\u7db2\u8def\u6d41\u70ba\u300c \u7db2\u8def\u6d41\u300d\uff0c \u7db2\u8def\u6d41\u7684\u6d41\u91cf  \u6e90\u9ede  \u6d41\u51fa\u7684\u6d41\u91cf\u548c\uff0c \u6d41\u9032\u532f\u9ede  \u7684\u6d41\u91cf\u548c\u3002</p>  \u53ef\u884c\u6d41 <p>\u7d66\u5b9a\u4e00\u500b  \u7db2\u8def\u6d41\uff0c\u5982\u679c\u7b26\u5408\u4ee5\u4e0b\u689d\u4ef6\uff0c\u7a31\u70ba\u300c \u53ef\u884c\u6d41\u300d\uff0c\u4e5f\u5c31\u662f\u5408\u6cd5\u7684  \u7db2\u8def\u6d41</p> <ul> <li>\u6d41\u91cf\u9650\u5236\uff1a </li> <li>\u6d41\u91cf\u5c0d\u7a31\uff1a </li> <li>\u6d41\u91cf\u5b88\u8861<ul> <li>\u975e\u6e90\u9ede  \u548c\u532f\u9ede \uff0c\u6d41\u5165\u7684\u6d41\u91cf\u548c\u7b49\u65bc\u6d41\u51fa\u7684\u6d41\u91cf\u548c \u6d41\u5165\u7684\u6d41\u91cf\u548c\u7b49\u65bc\u6d41\u51fa\u7684\u6d41\u91cf\u548c</li> <li>\u6e90\u9ede  \u6d41\u51fa\u7684\u6d41\u91cf\u548c\u7b49\u65bc\u6d41\u9032\u532f\u9ede  \u7684\u6d41\u91cf\u548c</li> </ul> </li> </ul> <p></p>"},{"location":"graph/flow/#_4","title":"\u6700\u5927\u6d41\u6f14\u7b97\u6cd5","text":"<p>\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u4e00\u500b  \u53ef\u884c\u6d41( \u7db2\u8def\u6d41)\u7684\u6d41\u91cf  \u6e90\u9ede  \u6d41\u51fa\u7684\u6d41\u91cf\u548c\uff0c \u6d41\u9032\u532f\u9ede  \u7684\u6d41\u91cf\u548c\u3002\u5728\u73fe\u5be6\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u5e0c\u671b  \u8d8a\u5927\u8d8a\u597d\u3002</p> <p>\u57fa\u672c\u60f3\u6cd5\uff1a\u91cd\u8907\u5c0b\u627e\u5f9e  \u5230  \u7684\u8def\u5f91\uff0c\u8a08\u7b97\u9019\u689d\u8def\u5f91\u6700\u5927\u6d41\u91cf \uff0c\uff0c\u4e26\u5c07\u9019\u689d\u8def\u5f91\u6240\u6709\u908a\u6263\u9664 \uff0c\u7121\u6cd5\u627e\u5230\u4e00\u689d\u8def\u5f91\u4f7f  \u589e\u52a0\u5c31\u505c\u6b62\u3002</p> <p></p> <p>\u4f46\u9019\u6a23\u7684\u6f14\u7b97\u6cd5\u4e0d\u4e00\u5b9a\u80fd\u627e\u5230\u6700\u5927\u6d41\u91cf\uff0c\u5982\u4e0b\u5716\u7684\u6700\u5927\u6d41\u91cf\u662f \uff0c\u4f46\u53ea\u627e\u5230  \u55ae\u4f4d\u7684\u6d41\u91cf\u3002</p> <p></p> <p>\u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u8b93\u6d41\u91cf\u53ef\u4ee5\u9006\u884c\uff0c\u6839\u64da\u6d41\u91cf\u9650\u5236\u548c\u6d41\u91cf\u5c0d\u7a31\uff0c\u4e00\u689d\u908a \uff0c\u53cd\u5411\u908a  \u7684\u5bb9\u91cf \uff0c\u6d41\u91cf \uff0c\u6240\u6709\u5269\u9918\u6d41\u91cf  \u7684\u908a\u5f62\u6210\u7684\u5716\u7a31\u70ba\u5269\u9918\u7db2\u8def \u3002</p> <p></p> <p>\u85c9\u7531\u9006\u884c\u7684\u6a5f\u5236\uff0c\u9078\u64c7\u8def\u5f91 \uff0c\u53ef\u4ee5\u518d\u627e\u5230  \u55ae\u4f4d\u7684\u6d41\u91cf\u3002</p> <p></p> <p>\u589e\u5ee3\u8def\u5f91 (Augmenting Path)</p> <ul> <li>\u5047\u8a2d  \u662f\u53ef\u884c\u6d41\uff0c \u662f  \u7684\u5269\u9918\u7db2\u8def</li> <li>  \u662f \u5728\u4e00\u689d\u5f9e  \u5230  \u7684\u8def\u5f91\uff0c\u7a31\u70ba\u64f4\u5145\u8def\u5f91\u3002</li> <li> </li> <li>\u4e00\u689d\u908a  \u589e\u52a0\u6d41\u91cf \uff0c\u4ee3\u8868<ul> <li> </li> <li> </li> <li> </li> <li> </li> </ul> </li> </ul> \u589e\u5ee3\u8def\u5f91 <p>\u5047\u8a2d  \u662f\u53ef\u884c\u6d41\u4e2d\u7684\u5269\u9918\u7db2\u8def\uff0c \u662f  \u5728\u4e00\u689d\u5f9e  \u5230  \u7684\u8def\u5f91\uff0c\u4e14\u6bcf\u4e00\u689d\u908a\u7684\u5269\u9918\u6d41\u91cf \uff0c\u7a31\u70ba\u64f4\u5145\u8def\u5f91\u3002</p> <p>\u4ee4  \u70ba\u64f4\u5145\u8def\u5f91\u7684\u74f6\u9838\u6d41\u91cf\uff0c\u4e5f\u5c31\u662f\u70ba\u53ef\u884c\u6d41\u518d\u627e\u5230  \u7684\u6d41\u91cf\u3002\u5047\u8a2d  \u70ba  \u4e0a\u5f80\u532f\u9ede  \u7684\u908a\u3002</p> <ul> <li>\u6240\u6709\u524d\u5f80\u532f\u9ede\u7684\u908a\u6d41\u91cf\u52a0\u4e0a :  </li> <li>\u6240\u6709\u96e2\u958b\u532f\u9ede\u7684\u908a\u6d41\u91cf\u6263\u9664 :  </li> </ul> <p>\u85c9\u7531\u52a0\u5165\u53cd\u5411\u908a\u6a5f\u5236\u548c\u5b9a\u7fa9\u589e\u5ee3\u8def\u5f91\uff0c\u627e\u6700\u5927\u6d41\u7684\u6f14\u7b97\u6cd5\u96db\u5f62\u8a95\u751f\uff1a\u5728\u5269\u9918\u7db2\u8def\u4e0a\u627e\u5230\u589e\u5ee3\u8def\u5f91\u4f86\u64f4\u5145\u6d41\u91cf\uff0c\u76f4\u5230\u5269\u9918\u7db2\u8def\u6c92\u6709\u5f9e  \u7684\u8def\u5f91\uff0c\u5373\u7372\u5f97\u6700\u5927\u6d41\u3002</p> <p>\u6839\u64da\u589e\u5ee3\u8def\u5f91\u7684\u627e\u6cd5\uff0c\u4e0b\u5217\u7c21\u8ff0\u4e09\u500b\u6f14\u7b97\u6cd5\uff1a</p> <ul> <li>Ford-fulkerson\uff1a\u5229\u7528 DFS \u679a\u8209\u589e\u5ee3\u8def\u5f91\uff0c\u5982\u679c\u6d41\u91cf\u70ba\u5be6\u6578\u57df\u7121\u6cd5\u4fdd\u8b49\u7a0b\u5f0f\u6703\u7d50\u675f\uff0c\u6d41\u91cf\u70ba\u6574\u6578\u57df\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</li> <li>Edmonds-karp\uff1a\u5229\u7528\u6700\u77ed\u8def\u679a\u8209\u589e\u5ee3\u8def\u5f91\uff0c\u6642\u9593\u8907\u96dc\u5ea6  </li> <li>Dinic\uff1a\u5148\u505a BFS \u5c07\u9ede\u5206\u5c64(\u6709\u5411\u7121\u74b0\u5716)\uff0c\u518d\u7528 DFS \u904d\u6b77\u641c\u5c0b\u589e\u5ee3\u8def\u5f91\uff0c\u4e00\u6b21\u627e\u5230\u591a\u689d\u589e\u5ee3\u8def\u5f91\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</li> </ul>"},{"location":"graph/flow/#dinic","title":"Dinic \u6f14\u7b97\u6cd5\u5be6\u4f5c","text":"<pre><code>using LL = long long;\nstruct Dinic\n{\nint n, s, t, level[MXV], now[MXV];\nstruct Edge\n{\nint v;\nLL rf; // rf: residual flow\nint re;\n};\nvector&lt;Edge&gt; e[MXV];\nvoid init(int _n, int _s, int _t)\n{\nn = _n;\ns = _s;\nt = _t;\nfor (int i = 0; i &lt;= n; i++)\ne[i].clear();\n}\nvoid add_edge(int u, int v, LL f)\n{\ne[u].push_back({v, f, (int)e[v].size()});\ne[v].push_back({u, f, (int)e[u].size() - 1});\n// for directional graph\n// e[v].push_back({u, 0, (int)e[u].size() - 1});\n}\nbool bfs()\n{\nfill(level, level + n + 1, -1);\nqueue&lt;int&gt; q;\nq.push(s);\nlevel[s] = 0;\nwhile (!q.empty())\n{\nint u = q.front();\nq.pop();\nfor (auto it : e[u])\n{\nif (it.rf &gt; 0 &amp;&amp; level[it.v] == -1)\n{\nlevel[it.v] = level[u] + 1;\nq.push(it.v);\n}\n}\n}\nreturn level[t] != -1;\n}\nLL dfs(int u, LL limit)\n{\nif (u == t)\nreturn limit;\nLL res = 0;\nwhile (now[u] &lt; (int)e[u].size())\n{\nEdge &amp;it = e[u][now[u]];\nif (it.rf &gt; 0 &amp;&amp; level[it.v] == level[u] + 1)\n{\nLL f = dfs(it.v, min(limit, it.rf));\nres += f;\nlimit -= f;\nit.rf -= f;\ne[it.v][it.re].rf += f;\nif (limit == 0)\nreturn res;\n}\nelse\n++now[u];\n}\nif (!res)\nlevel[u] = -1;\nreturn res;\n}\nLL flow(LL res = 0)\n{\nwhile (bfs())\n{\nmemset(now, 0, sizeof(now));\nres += dfs(s, INF);\n}\nreturn res;\n}\n};\n\n/*\nusage\nDinic dinic; // declare\ndinic.init(n, s, t); // initialize, n vertexs, start from s to t\ndinic.add_edge(x, y, z); // add edge from x to y, weight is z\ndinic.flow() // calculate max flow \n*/\n</code></pre> <p>\u8b8a\u6578\u89e3\u91cb</p> <ul> <li> \uff1a\u9ede\u7684\u500b\u6578\uff0c\u6e90\u9ede\u3001\u532f\u9ede\u3002</li> <li> \uff1aBFS \u88e1\u7528\u4f86\u8868\u793a\u9019\u6b21\u9ede  \u662f\u7b2c\u5e7e\u5c64\u3002</li> <li> \uff1aDFS \u88e1\u7528\u4f86\u8868\u793a\u9019\u6b21\u9ede  \u662f\u7b2c\u5e7e\u5c64\u3002</li> <li> \uff1a\u6709\u5411\u908a\uff0c\u5b58\u653e\u7d42\u9ede\u3001\u5269\u9918\u6d41\u91cf\uff0c\u53cd\u5411\u908a\u7684\u7de8\u865f\u3002\u53cd\u5411\u908a\u7684\u7de8\u865f\u7528\u5728 DFS \u66f4\u65b0\u53cd\u5411\u908a\u7684\u5269\u9918\u6d41\u91cf\u3002</li> </ul> <p>\u65b0\u589e\u908a</p> <ul> <li>\u7121\u5411\u908a\uff1a\u62c6\u6210\u5169\u689d\u65b9\u5411\u76f8\u53cd\uff0c\u5269\u9918\u6d41\u91cf\u76f8\u540c\u7684\u6709\u5411\u908a\u3002</li> <li>\u6709\u5411\u908a\uff1a\u589e\u52a0\u6b63\u5411\u908a\u548c\u53cd\u5411\u908a\u3002</li> </ul> <p>BFS</p> <ul> <li>\u8a2d\u6e90\u9ede  \u70ba\u7b2c  \u5c64\u3002</li> <li>\u5c07\u6240\u6709\u548c  \u76f8\u9023\u4e14\u5269\u9918\u6d41\u91cf  \u7684\u9ede\u8a2d\u70ba\u7b2c  \u5c64\u3002</li> <li>\u5c07\u6240\u6709\u548c\u7b2c  \u5c64\u7684\u9ede\u76f8\u9023\u4e14\u5269\u9918\u6d41\u91cf  \u7684\u9ede\u8a2d\u70ba\u7b2c  \u5c64\u3002</li> <li>\u4ee5\u6b64\u985e\u63a8\uff0c\u5df2\u7d93\u6a19\u8a18\u7684\u9ede\u4e0d\u6703\u518d\u6a19\u8a18\u7b2c  \u6b21\u3002</li> <li>\u5982\u679c\u532f\u9ede  \u6c92\u6709\u88ab\u6a19\u8a18\uff0c\u4ee3\u8868\u5df2\u7d93\u627e\u5230\u6700\u5927\u6d41\u4e86\u3002</li> </ul> <p>DFS</p> <ul> <li>\u4f9d\u64da BFS \u7684\u5206\u5c64\u6a19\u8a18\uff0c\u904d\u6b77\u5b8c\u6240\u6709\u6eff\u8db3  \u7b2c  \u5c64\u7684\u9ede  \u7b2c  \u5c64\u7684\u9ede  \u7684\u8def\u5f91\u3002</li> <li>\u5728\u5f80\u4e0b\u905e\u8ff4\u6642\u8a08\u7b97\u74f6\u9838\u6d41\u91cf\uff0c\u5f80\u4e0a\u6642\u66f4\u65b0\u76f8\u95dc\u908a\u7684\u5269\u9918\u6d41\u91cf\u3002</li> </ul>"},{"location":"graph/flow/#_5","title":"\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d","text":"<p>\u8a2d\u4e8c\u5206\u5716\u5169\u500b\u96c6\u5408\u70ba \uff0c \u96c6\u5408\u7684\u6240\u6709\u9ede\u548c\u6e90\u9ede\u9023\u63a5\u4e00\u689d\u5269\u9918\u6d41\u91cf\u7121\u9650\u5927\u7684\u908a\uff0c \u96c6\u5408\u7684\u6240\u6709\u9ede\u548c\u532f\u9ede\u9023\u63a5\u4e00\u689d\u5269\u9918\u6d41\u91cf\u7121\u9650\u5927\u7684\u908a\uff0c\u4e8c\u5206\u5716\u539f\u672c\u7684\u908a\u5269\u9918\u6d41\u91cf\u8a2d\u70ba \uff0c\u6700\u5927\u6d41\u5373\u70ba\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d\u3002</p>"},{"location":"graph/flow/#dag","title":"DAG \u7684\u6700\u5c0f\u8def\u5f91\u8986\u84cb","text":"DAG \u7684\u6700\u5c0f\u8def\u5f91\u8986\u84cb <p>\u7d66\u4f60\u4e00\u5f35 DAG\uff0c\u8acb\u554f\u554f\u6700\u5c11\u8981\u5e7e\u689d\u8def\u5f91\u624d\u80fd\u8986\u84cb\u6240\u6709\u9ede\u3002</p> <p>\u5206\u6210\u4e0d\u76f8\u4ea4\u8def\u5f91\u548c\u76f8\u4ea4\u8def\u5f91\u3002</p> <p>\u4e0d\u76f8\u4ea4\u8def\u5f91\uff1a \uff0c\u5171  \u689d\u3002</p> <p>\u76f8\u4ea4\u8def\u5f91\uff1a \uff0c\u5171  \u689d\u3002</p> <p></p> <p>\u4e0d\u76f8\u4ea4\u8def\u5f91\uff1a\u5c07\u4e00\u500b\u9ede\u62c6\u6210\u5169\u500b\u9ede\uff0c\u5206\u5225\u4ee3\u8868\u6307\u5411\u5225\u4eba\u7684\u9ede\u548c\u88ab\u5225\u4eba\u6307\u5411\u7684\u9ede\u3002</p> <p>\u4e00\u958b\u59cb\u6bcf\u500b\u9ede\u90fd\u662f\u7368\u7acb\u7684\u8def\u5f91\uff0c\u7e3d\u5171\u6709  \u689d\uff0c\u5728\u4e8c\u5206\u5716\u4e0a\u627e\u5230\u4e00\u689d\u5339\u914d\u908a\uff0c\u5c31\u7b49\u65bc\u628a\u5169\u689d\u8def\u5f91\u8b8a\u6210\u4e00\u689d\uff0c\u8def\u5f91\u6578 \u3002\u7b54\u6848\u70ba  \u6700\u5927\u5339\u914d\u6578\u3002</p> <p>\u76f8\u4ea4\u8def\u5f91\u7248\u672c\uff1a\u5148\u505a\u4e00\u6b21 Floyd-warshall\uff0c\u5982\u679c  \u53ef\u4ee5\u85c9\u7531\u5176\u4ed6\u9ede\u62b5\u9054 \uff0c\u5efa\u4e00\u689d  \u7684\u908a\u3002\u984c\u76ee\u8b8a\u6210\u9802\u9ede\u4e0d\u76f8\u4ea4\u7684\u6700\u5c0f\u8def\u5f91\u8986\u84cb\u3002</p> <p>\u4ee5\u4e0b\u5716\u70ba\u4f8b\uff0c\u5982\u679c\u9078\u5b9a\u4e86  \u4f5c\u70ba\u7b2c\u4e00\u689d\u8def\u5f91\uff0c \u53ef\u4ee5\u5728\u4e0d\u7d93\u904e  \u7684\u60c5\u6cc1\u4e0b\u9023\u5230 \u3002</p> <p></p>"},{"location":"graph/flow/#_6","title":"\u6700\u5c0f(\u5927)\u82b1\u8cbb\u6700\u5927\u6d41","text":"\u6700\u5c0f(\u5927)\u82b1\u8cbb\u6700\u5927\u6d41 <p>\u6bcf\u689d\u908a\u9664\u4e86\u6d41\u91cf\u4ee5\u5916\u9084\u6709\u55ae\u4f4d\u50f9\u9322 \u3002\u5c0d\u65bc\u6bcf\u689d\u908a\uff0c\u5982\u679c\u6d41\u4e86  \u7684\u6d41\u91cf\u5c31\u8981\u4ed8  \u7684\u6c34\u9053\u7dad\u8b77\u8cbb\uff0c\u5728\u6700\u5927\u6d41\u91cf\u7684\u60c5\u6cc1\u4e0b\uff0c\u8981\u8b93\u82b1\u8cbb\u6700\u5c0f(\u5927)\u3002</p> <p>\u6f14\u7b97\u6cd5\u548c Dinic \u76f8\u4f3c\uff0c\u6539\u7528\u6700\u77ed\u8def\u5f91\u6f14\u7b97\u6cd5\u627e\u5c0b\u589e\u5ee3\u8def\u5f91\uff0c\u56e0\u70ba\u8981\u8655\u88e1\u8ca0\u908a (\u53cd\u5411\u908a)\uff0c\u8981\u4f7f\u7528 SPFA\u3002\u5982\u679c\u8981\u8a08\u7b97\u6700\u5927\u82b1\u8cbb\uff0c\u5728\u4e00\u958b\u59cb\u628a\u82b1\u8cbb\u4e58\u4ee5 \uff0c\u7b97\u51fa\u7d50\u679c\u5f8c\u518d\u4e58\u4ee5 \u3002</p> <pre><code>using LL = long long;\nstruct MCMF\n{\nstruct Edge\n{\nint u, v;\nLL cost, cap;\n};\nint n, pre[MXV], cnt[MXV];\nvector&lt;Edge&gt; edges;\nvector&lt;int&gt; G[MXV];\nLL dis[MXV], ansFlow, ansCost;\nbitset&lt;MXV&gt; inque;\nvoid init(int _n)\n{\nn = _n;\nedges.clear();\nfor (int i = 0; i &lt;= n; ++i)\nG[i].clear();\n}\nvoid addEdge(int u, int v, LL cost, LL cap)\n{\nG[u].push_back(edges.size());\nedges.push_back({u, v, cost, cap});\nG[v].push_back(edges.size());\nedges.push_back({v, u, -cost, 0});\n}\nbool spfa(int s, int t)\n{\nqueue&lt;int&gt; q;\nbool negative = false;\nfill(begin(dis), end(dis), INF);\nfill(begin(pre), end(pre), -1);\nfill(begin(cnt), end(cnt), 0);\ninque.reset();\ndis[s] = 0;\ncnt[s] = 1;\nq.push(s);\ninque[s] = true;\nwhile (!q.empty() &amp;&amp; !negative)\n{\nint u = q.front();\nq.pop();\ninque[u] = false;\nfor (int i : G[u])\n{\nEdge &amp;e = edges[i];\nint v = e.v;\nLL cost = e.cost, cap = e.cap;\nif (dis[v] &gt; dis[u] + cost &amp;&amp; cap &gt; 0)\n{\ndis[v] = dis[u] + cost;\npre[v] = i;\nif (inque[v])\ncontinue;\nq.push(v);\ninque[v] = true;\n++cnt[v];\nif (cnt[v] == n + 2)\n{\nnegative = true;\nbreak;\n}\n}\n}\n}\nreturn dis[t] != INF;\n}\nLL update(int u, LL limit)\n{\nif (pre[u] == -1)\nreturn limit;\nint i = pre[u];\nEdge &amp;e = edges[i];\nLL f = update(e.u, min(limit, e.cap));\nansCost += f * e.cost;\nedges[i].cap -= f;\nedges[i ^ 1].cap += f;\nreturn f;\n}\nPLL sol(int s, int t)\n{\nansFlow = ansCost = 0;\nwhile (spfa(s, t))\nansFlow += update(t, INF);\nreturn make_pair(ansFlow, ansCost);\n}\n};\n\n/*\nusage\nMCMF&lt;int&gt; mcmf; // declare\nmcmf.init(n); // initialize, n vertexs\nmcmf.add_edge(x, y, z); // add edge from x to y, weight is z\nmcmf.sol(s, t, d) // calculate cost flow, start from s to t max flow \n*/\n</code></pre> <p>\u8b8a\u6578\u89e3\u91cb</p> <ul> <li> \uff1a\u6709\u5411\u908a\uff0c\u5b58\u653e\u6bcf\u689d\u908a\u7684\u5169\u7aef\u9ede\u3001\u8cbb\u7528\u548c\u5269\u9918\u6d41\u91cf\u3002</li> <li> \uff1a\u9ede\u7684\u500b\u6578</li> <li> \uff1aSPFA \u4e2d\uff0c\u7d00\u9304  \u662f\u88ab\u54ea\u500b\u9ede\u9b06\u5f1b\uff0c\u4e5f\u53ef\u4ee5\u8aaa\u662f\u5728\u6700\u77ed\u8def\u5f91\u4e2d\uff0c \u7684\u7236\u7bc0\u9ede\u3002</li> <li> \uff1aSPFA \u4e2d\uff0c\u7d00\u9304\u5f9e\u6e90\u9ede  \u6d41\u4e00\u55ae\u4f4d\u5230  \u7684\u6700\u5c0f(\u5927)\u6210\u672c\u3002</li> <li> \uff1a\u7528\u65bc SPFA\u3002</li> <li> \uff1a\u7d00\u9304\u6700\u5927\u6d41\u548c\u6700\u5c0f(\u5927)\u6210\u672c\u3002</li> </ul> <p>\u65b0\u589e\u908a</p> <ul> <li>\u548c Dinic \u65b0\u589e\u53cd\u5411\u908a\u7684\u60f3\u6cd5\u985e\u4f3c\uff0c\u5dee\u5225\u5728\u65bc\u53cd\u5411\u908a\u7684\u6210\u672c\u662f\u539f\u672c\u7684\u6210\u672c\u4e58\u4ee5 \u3002</li> </ul> <p>SPFA</p> <ul> <li>\u6839\u64da\u6210\u672c\u548c\u6d41\u91cf\u9b06\u5f1b\u3002</li> <li>\u5982\u679c\u532f\u9ede  \u7684\u6700\u5c0f\u6210\u672c \uff0c\u4ee3\u8868\u5df2\u7d93\u627e\u5230\u6700\u5c0f(\u5927)\u82b1\u8cbb\u6700\u5927\u6d41\u3002</li> </ul> <p>update</p> <ul> <li>\u6839\u64da \uff0c\u53ef\u4ee5\u627e\u5230\u4e00\u689d\u5f9e\u532f\u9ede  \u5230\u6e90\u9ede  \u7684\u8def\u5f91\uff0c\u5229\u7528\u905e\u8ff4\u627e\u5230\u74f6\u9838\u6d41\u91cf\uff0c\u518d\u66f4\u65b0\u6700\u5927\u6d41\u548c\u6700\u5c0f(\u5927)\u82b1\u8cbb\u3002</li> </ul>"},{"location":"graph/flow/#_7","title":"\u76f8\u95dc\u984c\u76ee","text":"LibreOJ 6013 <p>\u6709  \u500b\u74b0\u5f62\u5009\u5eab\uff0c\u6bcf\u500b\u5009\u5eab\u7269\u54c1\u6578\u91cf\u4e0d\u7b49\uff0c\u8ca8\u7269\u53ea\u80fd\u5f80\u76f8\u9130\u7684\u5009\u5eab\u79fb\u52d5\uff0c\u554f\u6700\u5c11\u8981\u642c\u904b\u591a\u5c11\u8ca8\u54c1\u8b93\u6bcf\u500b\u5009\u5eab\u7269\u54c1\u6578\u91cf\u76f8\u540c?</p> <p>\u7b97\u51fa  \u9593\u5009\u5eab\u7684\u5e73\u5747\u8ca8\u7269\u6578 \u3002</p> <p>\u5c0d\u65bc\u7b2c  \u9593\u5009\u5eab\u8ca8\u7269\u6578 \uff0c\u5982\u679c \uff0c\u5efa\u4e00\u689d\u5f9e  \u5230  \u7684\u5bb9\u91cf  \u82b1\u8cbb\u70ba  \u7684\u908a\uff0c\u5982\u679c \uff0c\u5efa\u4e00\u689d\u5f9e  \u5230  \u7684\u5bb9\u91cf  \u82b1\u8cbb\u70ba  \u7684\u908a\u3002</p> <p>\u70ba\u4e86\u9632\u6b62\u5f9e  \u5bb9\u51fa\u7684\u5bb9\u91cf\u76f4\u63a5\u8dd1\u5230 \uff0c\u5c07\u6240\u6709\u9ede\u62c6\u6210\u5169\u500b\u9ede \uff0c\u5c0d\u65bc\u6240\u6709\u7684 \uff0c\u5206\u5225\u548c  \u5efa\u7acb\u4e00\u689d\u5bb9\u91cf\u7121\u9650\u82b1\u8cbb\u70ba  \u7684\u908a\u3002</p> <p>\u6700\u5927\u82b1\u8cbb\u5373\u70ba\u7b54\u6848\u3002</p> <p></p> LibreOJ 6014 <p>\u7d66\u5b9a  \u500b\u5340\u9593 \uff0c\u9078\u5b9a\u4e00\u4e9b\u5340\u9593\uff0c\u5982\u679c\u96c6\u5408\u5167\u5305\u542b\u9ede  \u7684\u5340\u9593\u4e0d\u8d85\u904e  \u500b\uff0c\u7a31\u70ba\u5408\u6cd5\u96c6\u5408\uff0c\u554f\u5408\u6cd5\u96c6\u5408\u7684\u6700\u9577\u9577\u5ea6\u548c\u70ba\u591a\u5c11\u3002</p> <p>\u56e0\u70ba  \u7684\u7bc4\u570d\u904e\u5927\uff0c\u9808\u5c07  \u96e2\u6563\u5316\uff0c\u53e6\u5916\u8981\u53bb\u9664\u91cd\u8907\u5143\u7d20\uff0c\u5f97\u5230\u6642\u9593\u6bb5 \u3002</p> <p>\u5efa\u7acb\u4e00\u689d\u6e90\u9ede  \u5230  \u5bb9\u91cf\u70ba  \u82b1\u8cbb\u70ba  \u7684\u908a\uff0c\u5efa\u7acb\u4e00\u689d  \u5230\u532f\u9ede  \u5bb9\u91cf\u70ba  \u82b1\u8cbb\u70ba  \u7684\u908a\uff0c\u76f8\u9130\u5169\u500b\u6642\u9593\u6bb5\u5efa\u7acb\u4e00\u689d\u5bb9\u91cf\u7121\u9650\u82b1\u8cbb\u70ba  \u7684\u908a\u3002</p> <p>\u5c0d\u65bc\u6bcf\u500b\u5340\u9593 \uff0c\u5efa\u7acb\u4e00\u689d\u5f9e  \u5230  \u5bb9\u91cf\u70ba  \u82b1\u8cbb\u70ba  \u7684\u908a\u3002</p> <p>\u6700\u5927\u82b1\u8cbb\u5373\u70ba\u7b54\u6848\u3002</p> <p></p>"},{"location":"graph/flow/#_8","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>DAG \u7684\u6700\u5c0f\u8def\u5f91\u8986\u84cb<ul> <li>POJ 1422</li> <li>POJ 2594</li> <li>LibreOJ 6002</li> <li>LibreOJ 6003</li> </ul> </li> </ul>"},{"location":"graph/lca/","title":"\u6700\u4f4e\u5171\u540c\u7956\u5148 (Lowest Common Ancestor, LCA)","text":"\u6700\u4f4e\u5171\u540c\u7956\u5148 <p>\u5728\u6709\u6839\u6a39\u4e0a\u4efb\u610f\u5169\u9ede  \uff0c\u5169\u9ede\u7956\u5148\u4ea4\u96c6\u4e2d\uff0c\u6df1\u5ea6\u6700\u6df1\u7684\u4e00\u500b\u9ede\uff0c\u7a31\u70ba\u5169\u9ede\u7684\u6700\u4f4e\u5171\u540c\u7956\u5148 (Lowest Common Ancestor, LCA)\u3002</p> <p>\u7d66\u5b9a\u4e00\u9846\u6709\u6839\u6a39 ( \u500b\u9ede) \u548c  \u7b46\u8a62\u554f\uff0c\u6bcf\u7b46\u8a62\u554f\u8f38\u51fa\u5169\u9ede  \u7684\u6700\u4f4e\u5171\u540c\u7956\u5148\u3002</p> <p>\u76f4\u89c0\u7684\u505a\u6cd5\u662f\u5229\u7528 DFS \u5c0b\u627e\u5169\u9ede\u7684 LCA\uff0c\u6bcf\u6b21\u67e5\u8a62\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u9019\u7a2e\u8fa6\u6cd5\u5c31\u5bb9\u6613\u8d85\u904e\u6642\u9593\u9650\u5236\u3002</p> <p>\u9019\u88e1\u4ecb\u7d39\u5229\u7528\u500d\u589e\u6cd5\u627e\u5c0b\u4efb\u610f\u5169\u9ede\u7684\u6700\u4f4e\u5171\u540c\u7956\u5148\uff0c\u9019\u88e1\u7528\u8f49\u614b\u8f49\u79fb\u5f0f\u5b9a\u7fa9\u51fa\u5b9a\u7fa9 \uff1a</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868  \u7684\u7b2c  \u5c64\u7956\u5148\u3002</li> <li>\u521d\u59cb\u72c0\u614b\uff1a  ,  \u70ba  \u7684\u7236\u7bc0\u9ede\u3002</li> <li>\u8f49\u79fb\uff1a  \u3002</li> </ul> <p>\u548c\u4e00\u822c\u7684\u500d\u589e\u6cd5\u76f8\u540c\uff0c\u5c07\u7b97\u6cd5\u5206\u6210\u4e09\u500b\u6b65\u9a5f\u3002</p> <p>\u7b2c\u4e00\u6b65\u662f DFS\uff0c\u627e\u51fa\u6bcf\u500b\u9ede\u7684\u7236\u7bc0\u9ede\uff0c\u4ee5\u53ca\u7d00\u9304\u9032\u5165\u548c\u96e2\u958b\u7684\u6642\u9593\u6233\u8a18\u3002</p> <ul> <li></li> </ul> <p>\u7b2c\u4e8c\u6b65\u7528\u5169\u5c64\u8ff4\u5708\u7b97\u51fa  \u5269\u9918\u7b54\u6848\u3002</p> <p>\u6700\u5f8c\u6839\u64da \uff0c\u7528\u4e8c\u5206\u641c\u627e\u51fa  \u5169\u9ede\u7684\u6700\u4f4e\u5171\u540c\u7956\u5148\uff0c\u7531\u65bc\u4efb\u610f\u5169\u9ede  \u7684\u5171\u540c\u7956\u5148\u6709\u55ae\u8abf\u6027\uff0c  \u9ede\u7684\u6240\u6709\u7956\u5148\uff0c\u5728  \uff08\u5305\u542b\uff09\u4e4b\u4e0a\u7684\u7956\u5148\u662f\u5169\u9ede\u7684\u5171\u540c\u7956\u5148\uff0c\u5269\u4e0b\u7684\u53ea\u662f  \u7684\u7956\u5148\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8c\u5206\u641c\u679a\u8209  \u5c0b\u627e  \uff0c\u5728\u4e8c\u5206\u641c\u904e\u7a0b\uff0c\u6642\u9593\u6233\u8a18\u7528\u65bc\u5224\u65b7  \u662f\u5426\u70ba  \u7684\u7956\u5148\u3002</p> <p>DFS \u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u8a08\u7b97  \u5269\u9918\u7b54\u6848\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u6bcf\u6b21\u67e5\u8a62\u64cd\u4f5c\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \uff0c\u6574\u984c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \u3002</p> <pre><code>const int LOG = 20;\nint par[N][LOG];\nint tin[N], tout[N];\nint timer = 0;\n\nvoid dfs(int v, int p)\n{\ntin[v] = ++timer;\npar[v][0] = p;\nfor (int it : G[v])\n{\nif (it != p)\ndfs(it, v);\n}\ntout[v] = ++timer;\n}\n\nvoid Doubling()\n{\nfor (int i = 1; i &lt; N; ++i)\n{\nfor (int j = 1; j &lt; LOG; ++j)\n{\npar[i][j] = par[par[i][j - 1]][j - 1];\n}\n}\n}\n\nbool anc(int v, int u) { return tin[v] &lt;= tin[u] &amp;&amp; tout[u] &lt;= tout[v]; }\n\nint LCA(int v, int u)\n{\nif (anc(v, u))\nreturn v;\nfor (int j = LOG - 1; j &gt;= 0; --j)\n{\nif (!anc(par[v][j], u))\nv = par[v][j];\n}\nreturn par[v][0];\n}\n</code></pre> <p>\u627e\u51fa\u6700\u4f4e\u5171\u540c\u7956\u5148\u7684\u7b97\u6cd5\uff0c\u53ef\u63a8\u5ee3\u5230\u627e\u5c0b  \u8def\u5f91\u4e0a\u7684\u8cc7\u8a0a\uff0c\u4f8b\u5982\uff1a\u8def\u5f91\u9577\u5ea6\u3001\u6700\u5c0f\uff08\u5927\uff09\u6b0a\u91cd\u7684\u908a\u3002</p> <p>\u5047\u8a2d \uff0c\u628a  \u5230  \u7684\u8def\u5f91  \u53ef\u4ee5\u62c6\u6210  \u548c \u3002</p>"},{"location":"graph/lca/#_1","title":"\u4f8b\u984c\u7df4\u7fd2","text":"Atcoder Beginner Contest 209 D - Collision <p>\u7d66\u5b9a\u4e00\u68f5\u6a39\uff0c\u8acb\u554f  \u9700\u8981\u79fb\u52d5\u5076\u6578\u6b65\u9084\u662f\u5947\u6578\u6b65?</p> <p>\u7df4\u7fd2\u6a39\u4e0a\u4efb\u5169\u9ede\u4e4b\u9593\u7684\u8ddd\u96e2\uff0c\u4ee4  \u5f9e  \u5230  \u7684\u8ddd\u96e2\uff0c \u5230  \u7684\u8ddd\u96e2 \u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>void dfs(int v, int p)\n{\ntin[v] = ++timer;\npar[v][0] = p;\nif (v != p)\ndist[v] = dist[p] + 1;\nfor (int it : G[v])\n{\nif (it != p)\ndfs(it, v);\n}\ntout[v] = ++timer;\n}\n\nint main()\n{\nint q;\ncin &gt;&gt; n &gt;&gt; q;\nfor (int i = 0, u, v; i &lt; n - 1; ++i)\n{\ncin &gt;&gt; u &gt;&gt; v;\nG[u].emplace_back(v);\nG[v].emplace_back(u);\n}\ndist[1] = 1;\ndfs(1, 1);\nDoubling();\nfor (int i = 0, u, v; i &lt; q; ++i)\n{\ncin &gt;&gt; u &gt;&gt; v;\nint w = LCA(v, u);\nint res = (dist[u] + dist[v] - 2 * dist[w]) % 2;\nif (res)\ncout &lt;&lt; \"Road\\n\";\nelse\ncout &lt;&lt; \"Town\\n\";\n}\n}\n</code></pre> CodeForces 609E - Minimum spanning tree for each edge <p>\u7d66\u5b9a\u4e00\u5f35\u7121\u5411\u5716 \uff0c\u6c42\u5305\u542b\u908a  \u7684\u751f\u6210\u6a39\u4e2d\uff0c\u6b0a\u91cd\u6700\u5c0f\u7684\u751f\u6210\u6a39\u70ba\u4f55?</p> <p>\u5148\u6c42\u51fa\u4e00\u9846\u6700\u5c0f\u751f\u6210\u6a39 \uff0c\u6b0a\u91cd\u548c\u70ba \uff0c\u5229\u7528\u6700\u4f4e\u5171\u540c\u7956\u5148\u6c42\u51fa\u7bc0\u9ede  \u7bc0\u9ede  \u5230\u7b2c  \u500b\u7bc0\u9ede\u7684\u6700\u5927\u6b0a\u91cd\u8def\u5f91\uff0c\u5c0d\u65bc\u6bcf\u4e00\u689d\u908a \uff0c\u5728  \u4e2d\u627e\u5230\u5f9e  \u5230  \u7684\u6700\u5927\u6b0a\u91cd\u8def\u5f91 \u3002\u7b54\u6848 \uff08\u5982\u679c \uff0c\uff09\u3002</p> UVa 11354 - Bond <p>\u7d66\u5b9a\u4e00\u5f35\u7121\u5411\u5e36\u6b0a\u5716\uff0c\u6709\u591a\u7b46\u8a62\u554f\uff0c\u8a62\u554f  \u4e4b\u9593\u7684\u8def\u5f91\u6700\u5927\u6b0a\u91cd\u908a\u6b0a\u503c\u6700\u5c0f\u70ba\u4f55\u3002 \u4e5f\u5c31\u662f\u8a62\u554f\u6700\u5c0f\u74f6\u9838\u6a39\u4e2d\uff0c  \u4e4b\u9593\u7684\u8def\u5f91\u6700\u5927\u908a\u91cd\u6b0a\u70ba\u4f55\u3002</p> <p>\u9019\u984c\u8981\u5148\u5229\u7528 Krusal \u6c42\u51fa\u6700\u5c0f\u74f6\u9838\u6a39\uff0c\u63a5\u8457\u5229\u7528 LCA \u6c42\u51fa\u6bcf\u500b\u9ede  \u5230\u5b83\u7684\u7b2c  \u5c64\u7956\u5148\u7684\u8def\u5f91\u4e2d\u7684\u6700\u5927\u908a\u91cd\u6b0a\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 50010;\nconst int INF = 1e9;\nconst int LOG = 25;\n\nstruct Edge\n{\nint s, t, w;\nEdge(){};\nEdge(int _s, int _t, int _w) : s(_s), t(_t), w(_w) {}\nbool operator&lt;(const Edge &amp;rhs) const { return w &lt; rhs.w; }\n};\nint n, m, djs[N], depth[N], par[N][LOG], maxcost[N][LOG];\nvector&lt;Edge&gt; edges;\nvector&lt;int&gt; G[N];\n\nvoid init()\n{\nmemset(par, -1, sizeof(par));\nmemset(maxcost, -1, sizeof(maxcost));\nedges.clear();\nfor (int i = 0; i &lt; N; i++)\n{\ndjs[i] = i;\nG[i].clear();\n}\n}\n\nint query(int x) { return (x == djs[x] ? x : djs[x] = query(djs[x])); }\n\nvoid MST()\n{\nfor (int i = 0; i &lt; m; i++)\n{\nint fa = query(edges[i].s), fb = query(edges[i].t);\nif (fa != fb)\n{\ndjs[fa] = fb;\nG[edges[i].s].push_back(i);\nG[edges[i].t].push_back(i);\n}\n}\n}\n\nvoid dfs(int s, int f)\n{\ndepth[s] = depth[f] + 1;\npar[s][0] = f;\nfor (auto i : G[s])\n{\n// \u4e0d\u77e5\u9053 s \u5b58\u5728\u9019\u689d\u908a\u7684\u54ea\u500b\u4f4d\u7f6e\uff0c\u7528 xor \u6d88\u9664\u540c\u6a23\u7684\u6578\u5b57\uff0c\u7559\u4e0b\u4f86\u7684\u5c31\u662f\u53e6\u5916\u4e00\u500b\u9ede\nint t = edges[i].s ^ edges[i].t ^ s; if (t != f)\n{\nmaxcost[t][0] = edges[i].w;\ndfs(t, s);\n}\n}\n}\n\nvoid preprocess()\n{\nfor (int i = 1; i &lt;= LOG; i++)\nfor (int j = 1; j &lt;= n; j++)\n{\nif (par[j][i - 1] == -1 || par[par[j][i - 1]][i - 1] == -1)\ncontinue;\npar[j][i] = par[par[j][i - 1]][i - 1];\nmaxcost[j][i] =\nmax(maxcost[j][i - 1], maxcost[par[j][i - 1]][i - 1]);\n}\n}\n\nint solve(int p, int q)\n{\nif (depth[p] &lt; depth[q])\nswap(p, q);\nint hibit, ans = -INF;\nfor (hibit = 1; (1 &lt;&lt; hibit) &lt;= depth[p]; ++hibit)// p \u7684\u6df1\u5ea6\u4ee5\u4e8c\u9032\u4f4d\u8868\u793a\u7684\u6700\u9ad8\u4f4d\n;\n// \u628a p,q \u5169\u500b\u9ede\u7684\u6df1\u5ea6\u8abf\u6574\u5230\u4e00\u6a23\nfor (int i = hibit - 1; i &gt;= 0; i--)\nif (depth[p] - (1 &lt;&lt; i) &gt;= depth[q])\n{\nans = max(ans, maxcost[p][i]);\np = par[p][i];\n}\nif (p == q)\nreturn ans;\n// \u8b93 p,q \u8b8a\u6210\u6700\u4f4e\u5171\u540c\u7956\u5148\u7684\u5152\u5b50\nfor (int i = hibit - 1; i &gt;= 0; i--)\n{\nif (par[p][i] == -1 || par[p][i] == par[q][i])\ncontinue;\nans = max({ans, maxcost[p][i], maxcost[q][i]});\np = par[p][i];\nq = par[q][i];\n}\nreturn max({ans, maxcost[p][0], maxcost[q][0]});\n}\n\nint main()\n{\ncin.tie(NULL);\nfor (int ti = 0; cin &gt;&gt; n &gt;&gt; m; ++ti)\n{\nif (ti) cout &lt;&lt; '\\n';\ninit();\nfor (int i = 0; i &lt; m; i++)\n{\nint s, t, w;\ncin &gt;&gt; s &gt;&gt; t &gt;&gt; w;\nedges.emplace_back(s, t, w);\n}\nsort(edges.begin(), edges.end());\nMST();\ndfs(1, -1);\npreprocess();\nint q;\ncin &gt;&gt; q;\nfor (int i = 0; i &lt; q; i++)\n{\nint x, y;\ncin &gt;&gt; x &gt;&gt; y;\ncout &lt;&lt; solve(x, y) &lt;&lt; '\\n';\n}\n}\n}\n</code></pre> CodeForces 1328E - Tree Queries <p>\u7d66\u5b9a\u4e00\u68f5\u6a39\uff0c \u70ba\u6a39\u6839\uff0c\u6bcf\u6b21\u8a62\u554f\u7d66\u5b9a  \u500b\u9ede\uff0c\u6709\u6c92\u6709\u4e00\u689d\u8def\u5f91\u548c\u9019\u4e9b\u9ede\u7684\u8ddd\u96e2 ?</p> <p>\u5728  \u500b\u9ede\u4e2d\u627e\u51fa\u6700\u6df1\u7684\u9ede \uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede \uff0c\u5224\u65b7  \u7684\u7236\u7bc0\u9ede  \u662f\u5426\u70ba  \u7684\u7956\u5148\u3002</p>"},{"location":"graph/mst/","title":"\u6700\u5c0f\u751f\u6210\u6a39\uff08Minimun Spanning Tree, MST)","text":"<p>\u5728\u4e00\u5f35\u5716\u4e2d\uff0c\u5982\u679c\u6709\u5b50\u5716\u525b\u597d\u70ba\u4e5f\u70ba\u4e00\u9846\u6a39\uff0c\u6211\u5011\u5c31\u7a31\u8a72\u5b50\u5716\u70ba\u751f\u6210\u6a39\u3002\u73fe\u5728\u6211\u5011\u5728\u5716\u4e0a\u52a0\u4e0a\u6b0a\u91cd\uff0c\u800c\u5728\u6240\u6709\u7684\u751f\u6210\u6a39\u4e2d\uff0c\u6b0a\u91cd\u7e3d\u548c\u6700\u5c0f\u7684\uff0c\u6211\u5011\u7a31\u70ba \"\u6700\u5c0f\u751f\u6210\u6a39\"\uff0c\u6700\u5c0f\u751f\u6210\u6a39\u4e26\u4e0d\u552f\u4e00\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5e7e\u7a2e\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6f14\u7b97\u6cd5\u3002</p>"},{"location":"graph/mst/#kruskals-algorithm","title":"Kruskal\u2019s algorithm","text":"<p>Kruskal\u2019s algorithm \u7684\u6982\u5ff5\u662f\uff0c\u5408\u4f75\u5169\u9846 MST \u7684\u6642\u5019\uff0c\u52a0\u5165\u9023\u63a5\u5169\u9846\u6a39\u4e2d\uff0c\u6700\u5c0f\u6b0a\u91cd\u7684\u908a\u3002\u6240\u4ee5\u6211\u5011\u5c31\u5229\u7528 greedy\uff0c\u5c07\u908a\u4f9d\u6b0a\u91cd\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u908a\u7684\u5169\u908a\u662f\u5728\u4e0d\u540c\u7684 MST\uff0c\u6211\u5011\u5c31\u628a\u5408\u4f75\uff08\u4e26\u67e5\u96c6\u61c9\u7528\u65bc\u6b64\uff09\uff0c\u53cd\u4e4b\u5c31\u8df3\u904e\u3002</p> <p>\u6392\u5e8f\u9700\u82b1  \u7684\u6642\u9593\uff0c\u9078\u908a\u9700\u8981\u82b1  \u7684\u6642\u9593\uff0c\u7e3d\u5171\u6642\u9593\u8907\u96dc\u5ea6 \u3002Kruskal\u2019s algorithm \u5be6\u4f5c\u76f8\u5c0d\u7c21\u55ae\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u4e5f\u5728\u5408\u7406\u7bc4\u570d\uff0c\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\uff0c\u7d55\u5927\u90e8\u5206\u6700\u5c0f\u751f\u6210\u6a39\u7684\u554f\u984c\uff0c\u90fd\u662f\u5be6\u4f5c\u9019\u500b\u6f14\u7b97\u6cd5\u3002</p> <pre><code>struct Edge\n{\nint s, t, w;\nbool operaotr &lt; (const Edge &amp;rhs) const { return w &lt; rhs.w; }\n};\n\nvoid kruskal()\n{\nint cost = 0;\nvector&lt;Edge&gt; E;\ninit();\nfor (auto it : E)\n{\nit.s = Find(it.s);\nit.t = Find(it.t);\nif (it.s == it.t)\ncontinue;\ncost += it.w;\nUnion(it.s, it.t);\n}\n}\n</code></pre>"},{"location":"graph/mst/#prims-algorithm","title":"Prim\u2019s algorithm","text":"<p>Prim\u2019s algorithm \u7684\u601d\u7dad\u5247\u662f\uff0c\u5c07\u4e00\u68f5 MST \u9023\u51fa\u7684\u908a\u4e2d\uff0c\u52a0\u5165\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff08\u8ddd\u96e2\u6700\u8fd1\u7684\u9ede\uff09\uff0c\u91cd\u8907\u57f7\u884c\u5f8c\u5f97\u51fa\u6700\u5c0f\u7684\u751f\u6210\u6a39\u3002\u5728\u5be6\u4f5c\u4e0a\uff0c\u9996\u5148\u53d6\u4e00\u500b\u9ede\u7576 MST\uff0c\u66f4\u65b0\u6240\u6709\u8207\u5b83\u76f8\u9130\u7684\u9ede\uff0c\u66f4\u65b0\u5f8c\u628a\u8ddd\u96e2\u6700\u5c0f\u7684\u9ede\u52a0\u5165 MST\uff08\u4e0d\u7528\u4e26\u67e5\u96c6\uff09\uff0c\u6301\u7e8c\u57f7\u884c\u66f4\u65b0\u53ca\u52a0\u5165\u9ede\u7684\u52d5\u4f5c\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u5df2\u52a0\u5165 MST\u3002\u7dad\u8b77\u6700\u5c0f\u8ddd\u96e2\u7528 priority_queue \u7dad\u8b77\uff0c\u6bcf\u500b\u9ede\u53ea\u6703\u88ab\u5408\u4f75\u4e00\u6b21\uff0c\u6bcf\u689d\u908a\u90fd\u53ea\u6703\u904d\u6b77\u4e00\u6b21\uff0c\u8907\u96dc\u5ea6  \u3002\u53e6\u5916\u6709\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff08fibonacci heap\uff09\u53ef\u4ee5\u9054\u5230  \u3002\u4f46\u662f\u56e0\u70ba\u5b83\u5e38\u6578\u6bd4\u8f03\u5927\uff0c\u5be6\u4f5c\u8907\u96dc\uff0c\u6211\u5011\u4e0d\u6703\u4f7f\u7528\u5b83\u3002\u7e3d\u9ad4\u800c\u8a00\uff0cKruskal \u6bd4 Prim \u597d\u7528\u3002</p>"},{"location":"graph/mst/#boruvkas-algorithm","title":"Bor\u016fvka\u2019s algorithm","text":"<p>Bor\u016fvka\u2019s algorithm \u548c Prim \u4e00\u6a23\u90fd\u5728\u52a0\u5165 MST \u548c\u6700\u9130\u8fd1\u7684\u9ede\uff0c\u4e0d\u4e00\u6a23\u7684\u662f\uff0c\u5b83\u8b93\u6240\u6709\u7684 MST \u4e00\u8d77\u505a\u9019\u4ef6\u4e8b\u3002\u6bcf\u6b21\u627e\u51fa\u6bcf\u68f5 MST \u5916\u6b0a\u91cd\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u52a0\u5165 MST\uff08\u5982\u679c\u6b0a\u91cd\u4e00\u6a23\uff0c\u5c31\u627e\u7d22\u5f15\u503c\u6700\u5c0f\u7684\uff09\uff0c\u6aa2\u67e5\u662f\u5426\u53ea\u5269\u4e00\u68f5 MST\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u91cd\u8907\u6383\u63cf\u7684\u52d5\u4f5c\uff0c\u9019\u88e1\u4e00\u6a23\u7528\u4e26\u67e5\u96c6\u7dad\u8b77\u806f\u901a\u6027\u3002\\\u6700\u5dee\u7684\u60c5\u6cc1\u70ba\u6bcf\u6b21\u90fd\u525b\u597d\u5169\u5169\u6210\u5c0d\u5408\u4f75\uff0c\u9019\u6a23\u6700\u591a\u53ea\u6703\u57f7\u884c  \u6b21\uff0c\u6574\u984c\u8907\u96dc\u5ea6\u70ba  )\u3002\u671f\u671b\u8907\u96dc\u5ea6\u53ef\u4ee5\u9054\u5230  \uff08\u56e0\u70ba\u6bcf\u6b21\u4e26\u67e5\u96c6\u90fd\u6703\u88ab\u5408\u4f75 + \u67e5\u8a62\uff0c\u6240\u4ee5  \u53ef\u4ee5\u5b8c\u5168\u7701\u7565\uff09\u3002</p>"},{"location":"graph/mst/#minimum-bottleneck-spanning-tree","title":"\u6700\u5c0f\u74f6\u9838\u6a39 (Minimum Bottleneck Spanning Tree)","text":"\u6700\u5c0f\u74f6\u9838\u6a39 <p>\u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u6c42\u4e00\u9846\u751f\u6210\u6a39\uff0c\u6a39\u7684\u6700\u5927\u908a\u6b0a\u503c\u6700\u5c0f\u3002</p> <p>\u6700\u5c0f\u751f\u6210\u6a39\u5fc5\u5b9a\u662f\u4e00\u9846\u6700\u5c0f\u74f6\u9838\u6a39\uff08\u4f46\u6700\u5c0f\u74f6\u9838\u6a39\u4e0d\u4e00\u5b9a\u662f\u4e00\u9846\u6700\u5c0f\u751f\u6210\u6a39\uff09\uff0c\u56e0\u6b64\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6a39\u5373\u70ba\u7b54\u6848\u3002</p>"},{"location":"graph/mst/#_1","title":"\u76f8\u95dc\u984c\u76ee","text":"UVa 11631 - Dark roads <p>\u57ce\u5e02\u4e2d\u6709  \u689d\u9053\u8def\uff0c\u70ba\u4e86\u7bc0\u7701\u96fb\u8cbb\u9700\u8981\u95dc\u9589\u8def\u71c8\uff0c\u8def\u71c8\u7684\u8cbb\u7528\u7b49\u65bc\u9053\u8def\u7684\u9577\u5ea6\uff0c\u70ba\u4e86\u4e0d\u8b93\u6574\u500b\u57ce\u5e02\u90fd\u770b\u4e0d\u5230\uff0c\u6703\u4fdd\u7559\u4e00\u4e9b\u8def\u71c8\uff0c\u8b93\u4efb\u5169\u500b\u5730\u65b9\u4e4b\u9593\u90fd\u6709\u4e00\u500b\u660e\u4eae\u7684\u8def\u5f91\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u89e3\u7701\u591a\u5c11\u8cbb\u7528?</p> <p>\u628a\u5730\u65b9\u7576\u6210\u9ede\uff0c\u9053\u8def\u7576\u6210\u908a\uff0c\u300c\u4efb\u5169\u500b\u5730\u65b9\u4e4b\u9593\u90fd\u6709\u4e00\u500b\u660e\u4eae\u7684\u8def\u5f91\u300d\u6307\u7684\u662f\u5716\u8981\u662f\u4e00\u5f35\u9023\u901a\u5716\uff0c\u8981\u964d\u4f4e\u6210\u672c\uff0c\u9078\u64c7\u7684\u908a\u6578\u8981\u8d8a\u5c11\u8d8a\u597d\uff0c\u9ede\u6578\u56fa\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u908a\u6578\u6700\u5c11\u7684\u9023\u901a\u5716\u70ba\u6a39\uff0c\u6b0a\u91cd\u548c\u6700\u4f4e\u7684\u6a39\u662f\u6700\u5c0f\u751f\u6210\u6a39\u3002</p> <p>\u56e0\u6b64\uff0c\u9019\u984c\u8981\u627e\u6700\u5c0f\u751f\u6210\u6a39\uff0c\u5c07\u6240\u6709\u8def\u7684\u6b0a\u91cd\u548c\u6263\u9664\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6b0a\u91cd\uff0c\u5c31\u662f\u7b54\u6848\u3002</p> UVa 11747 - Heavy Cycle Edges <p>\u7d66\u5b9a\u4e00\u5f35\u5716 \uff0c\u8acb\u8f38\u51fa\u6240\u6709\u74b0\u4e0a\u6b0a\u91cd\u6700\u5927\u7684\u908a\u3002</p> <p>\u5176\u4e2d\u4e00\u500b\u6a39\u7684\u6027\u8cea\u662f\uff1a\u300c\u6c92\u6709\u74b0\uff0c\u4f46\u52a0\u4e0a\u4e00\u689d\u908a\u6703\u5f62\u6210\u74b0\u300d\uff0c\u53c8 Kruskal\u2019s algorithm \u662f\u5c07\u908a\u4f9d\u6b0a\u91cd\u5f9e\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u4e00\u689d\u908a  \u52a0\u5165\u6700\u5c0f\u751f\u6210\u6a39\u5f8c\u6703\u5f62\u6210\u74b0\uff0c\u90a3\u9ebc\u8a72\u689d\u908a  \u4e0d\u6703\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6a39\u88e1\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0c\u6240\u6709\u88ab\u5243\u9664\u7684\u908a  \u90fd\u662f\u81f3\u5c11\u4e00\u500b\u74b0\u4e0a\u6b0a\u91cd\u6700\u5927\u7684\u908a\u3002</p> <p>\u7528 Kruskal\u2019s algorithm \u627e\u51fa\u6240\u6709\u74b0\u4e0a\u6b0a\u91cd\u6700\u5927\u7684\u908a\u4e26\u8f38\u51fa\uff0c\u5373\u70ba\u7b54\u6848\u3002</p> TIOJ 1795 <p>\u7d66\u5b9a\u4e00\u5f35\u5716 \uff0c\u908a\u7684\u6b0a\u91cd\u975e  \u5373 \uff0c\u554f\u662f\u5426\u80fd\u627e\u51fa\u4e00\u9846\u6b0a\u91cd\u548c\u70ba  \u7684\u751f\u6210\u6a39\u3002</p> <p>\u7d50\u8ad6\uff1a \u7684\u6b0a\u91cd\u548c\u4ecb\u65bc\u6700\u5c0f\u751f\u6210\u6a39  \u548c\u6700\u5927\u751f\u6210\u6a39\u7684\u6b0a\u91cd\u548c  \u4e4b\u9593\u3002\u5982\u679c  \u5247\u7b26\u5408\u984c\u76ee\u689d\u4ef6\u3002</p> <p>\u4ee5\u4e0b\u89e3\u91cb\u70ba\u4ec0\u9ebc\u6703\u662f\u5c0d\u7684\uff1a\u5047\u8a2d\u5df2\u6c42\u51fa\u4e00\u7d44\u6700\u5c0f\u751f\u6210\u6a39\u7684\u908a\u96c6\uff0c\u8981\u627e\u5230\u6b21\u5c0f\u751f\u6210\u6a39\uff0c\u6bcf\u6b21\u9078\u64c7\u4ee5\u4e0b  \u689d\u52d5\u4f5c\u4e4b\u4e00\uff1a     - \u79fb\u9664\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\uff0c\u589e\u52a0\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\u3002     - \u79fb\u9664\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\uff0c\u589e\u52a0\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\u3002     - \u79fb\u9664\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\uff0c\u589e\u52a0\u4e00\u689d\u6b0a\u91cd\u70ba  \u7684\u908a\u3002</p> <p>\u524d\u9762\u5169\u7a2e\u9078\u64c7\u4e0d\u6703\u66f4\u52d5\u751f\u6210\u6a39\u7684\u6b0a\u91cd\u548c\uff0c\u5f8c\u9762\u4e00\u7a2e\u6703\u4f7f\u751f\u6210\u6a39\u7684\u6b0a\u91cd\u548c \uff0c\u4e26\u627e\u5230\u6b21\u5c0f\u751f\u6210\u6a39\u3002</p> <p>\u6839\u64da\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u53ef\u4ee5\u627e\u5230\u7b2c  \u5c0f\u751f\u6210\u6a39\uff0c\u6bcf\u6b21\u7684\u6b0a\u91cd\u548c\u90fd \uff0c\u751f\u6210\u6a39\u7684\u6b0a\u91cd\u548c\u6700\u5927\u70ba \u3002</p>"},{"location":"graph/mst/#_2","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>UVa 12176 - Bring Your Own Horse </li> <li>UVa 01234 - RACING </li> <li>\u6700\u5c0f\u74f6\u9838\u6a39<ul> <li>UVa 01395 - Slim Span </li> </ul> </li> </ul>"},{"location":"graph/save/","title":"\u5716\u7684\u5132\u5b58","text":"<p>\u81f3\u65bc\u5716\u8981\u600e\u9ebc\u5b58\u8d77\u4f86\u5462\uff0c\u4ee5\u4e0b\u4ecb\u7d39\u5169\u7a2e\u8fa6\u6cd5\u3002</p>"},{"location":"graph/save/#adjacency-matrix","title":"\u76f8\u9130\u77e9\u9663 (Adjacency Matrix)","text":"<p>\u958b\u4e00\u500b  \u7684\u8cc7\u6599\u7d50\u69cb  \uff08\u901a\u5e38\u6703\u7528\u4e8c\u7dad\u9663\u5217\uff09\uff0c  \u4ee3\u8868\u7684\u662f\u9ede  \u81f3  \u7684\u908a\u6578\u6216\u6b0a\u91cd\u3002\u7a7a\u9593\u8907\u96dc\u5ea6  \u3002\u52a0\u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p>"},{"location":"graph/save/#adjacency-list","title":"\u76f8\u9130\u4e32\u5217 (Adjacency List)","text":"<p>\u958b  \u500b\u53ef\u8b8a\u9577\u5ea6\u7684\u8cc7\u6599\u7d50\u69cb\uff08\u901a\u5e38\u5728 C++ \u7528 <code>vector</code> \u3001\u5728 C \u7528 <code>linked</code> list), \u7b2c  \u500b\u88e1\u9762\u653e\u6240\u6709\u7b2c  \u500b\u9ede\u6307\u5411\u7684\u9ede\u7684\u7de8\u865f\uff08\u548c\u908a\u6b0a\u6216\u5176\u4ed6\u908a\u7684\u8cc7\u8a0a\uff09\u3002\u7a7a\u9593\u8907\u96dc\u5ea6  , \u52a0\u908a\u6642\u9593\u8907\u96dc\u5ea6  \u3001\u522a\u908a\u6642\u9593\u8907\u96dc\u5ea6  \u3002</p>"},{"location":"graph/save/#_1","title":"\u4f8b\u984c","text":"Zerojudge f668 Adjacency Matrix \u548c Adjacency List \u7df4\u7fd2 <ul> <li>\u7b2c\u4e00\u884c\u7d66\u5b9a\u5169\u500b\u6578\u5b57 \uff0c\u8868\u793a\u6709  \u500b\u9ede\u548c  \u689d\u908a\uff0c\u7b2c  \u5230  \u884c\uff0c\u6bcf\u884c\u6709\u5169\u500b\u6578\u5b57 \uff0c\u4ee3\u8868  \u548c  \u4e4b\u9593\u6709\u4e00\u689d\u908a\uff0c\u6b64\u5716\u70ba\u7121\u5411\u7c21\u55ae\u5716(\u7c21\u55ae\u5716\uff1a\u7121\u81ea\u74b0\u3001\u7121\u91cd\u908a\u7684\u9023\u901a\u5716)</li> <li>\u8acb\u8f38\u51fa\u6bcf\u500b\u9ede\u7684\u76f8\u9130\u9ede</li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc \u7bc4\u4f8b1 (Adjacency Matrix) <pre><code>#include &lt;bitset&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint adj[105][105];\n\nint main()\n{\nint n, m;\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 0; i &lt; m; ++i)\n{\nint x, y;\ncin &gt;&gt; x &gt;&gt; y;\nadj[x][y] = adj[y][x] = 1;\n}\nfor (int i = 1; i &lt;= n; ++i)\n{\ncout &lt;&lt; i &lt;&lt; ':';\nfor (int j = 1; j &lt;= n; ++j)\n{\nif (adj[i][j])\n{\ncout &lt;&lt; ' ' &lt;&lt; j;\n}\n}\ncout &lt;&lt; '\\n';\n}\n}\n</code></pre> \u7bc4\u4f8b2 (Adjacency List) <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\nint n, m;\nvector&lt;int&gt; G[105];\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 0; i &lt; m; ++i)\n{\nint x, y;\ncin &gt;&gt; x &gt;&gt; y;\nG[x].emplace_back(y);\nG[y].emplace_back(x);\n}\nfor (int i = 1; i &lt;= n; ++i)\n{\ncout &lt;&lt; i &lt;&lt; ':';\nsort(G[i].begin(), G[i].end());\nfor (int j = 0; j != (int)G[i].size(); ++j)\n{\ncout &lt;&lt; ' ' &lt;&lt; G[i][j];\n}\ncout &lt;&lt; '\\n';\n}\n}\n</code></pre> <pre><code>== = \"\u7bc4\u4f8b3 (Adjacency Matrix)\"\n\n    ```cpp\n</code></pre>"},{"location":"graph/save/#include","title":"include","text":""},{"location":"graph/save/#include_1","title":"include","text":""},{"location":"graph/save/#include_2","title":"include  <pre><code>using namespace std;\n</code></pre> <p>int main() {     int n, m;     vector G[105];     cin &gt;&gt; n &gt;&gt; m;     for (int i = 0; i &lt; m; ++i)     {         int x, y;         cin &gt;&gt; x &gt;&gt; y;         G[x].emplace_back(y);         G[y].emplace_back(x);     }     for (int i = 1; i &lt;= n; ++i)     {         cout &lt;&lt; i &lt;&lt; ':';         sort(G[i].begin(), G[i].end());         /for(int j = 0; j != (int)G[i].size(); ++j)         {             int v = G[i][j];             cout &lt;&lt; ' ' &lt;&lt; v;         }/         for (auto v : G[i])         {             cout &lt;&lt; ' ' &lt;&lt; v;         }         cout &lt;&lt; '\\n';     } } ```","text":""},{"location":"graph/save/#_2","title":"\u4f7f\u7528\u6642\u6a5f","text":"<p>Adjacency Matrix \u5be6\u4f5c\u8f03\u7c21\u55ae\uff0c\u5728\u9ede\u6578\u5c0f\u7684\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\uff08\u5927\u7d04\u5728  \u5de6\u53f3\uff09\u3002\u5176\u9918\u60c5\u6cc1\u9700\u4f7f\u7528 Adjacency List\uff0c\u5426\u5247\u6703\u5c0e\u81f4\u8a18\u61b6\u9ad4\u904e\u5927\u3002</p>"},{"location":"graph/shortestpath/","title":"\u6700\u77ed\u8def\u5f91","text":""},{"location":"graph/shortestpath/#_2","title":"\u8853\u8a9e","text":"<ul> <li>\u8ca0\u908a\uff1a\u6b0a\u91cd\u70ba\u8ca0\u7684\u908a</li> <li>\u8ca0\u74b0\uff1a\u6b0a\u91cd\u548c\u70ba\u8ca0\u7684\u74b0</li> <li>\u9ede\u6e90\uff1a\u6210\u70ba\u8d77\u9ede\u7684\u9ede\uff0c\u5206\u6210\u55ae\u6e90\u982d\u53ca\u591a\u6e90\u982d\u3002</li> <li>\u9b06\u5f1b\uff1a\u55ae\u6e90\u982d\u6700\u77ed\u8def\u5f91\u4e2d\uff0c\u5c0d\u65bc\u4efb\u610f\u5169\u500b\u9ede  \uff0c\u8d77\u9ede  \u5230\u5b83\u5011\u7684\u8ddd\u96e2  \uff0c\u5982\u679c  \uff0c  \u70ba\u908a  \u7684\u6b0a\u91cd\uff0c\u6211\u5011\u53ef\u4ee5\u8b93  \u66f4\u65b0\u70ba  \uff0c\u8b93  \u5230  \u7684\u8ddd\u96e2\u7e2e\u77ed\uff0c\u9019\u500b\u52d5\u4f5c\u7a31\u70ba \"\u9b06\u5f1b\"\u3002</li> </ul>"},{"location":"graph/shortestpath/#floyd-warshall-algorithm","title":"Floyd-Warshall Algorithm","text":"<p>\u70ba\u591a\u6e90\u982d\u6700\u77ed\u8def\u5f91\uff0c\u6c42\u51fa\u6240\u6709\u9ede\u5c0d\u7684\u6700\u77ed\u8def\u5f91\u3002 Floyd-Warshall \u662f\u4e00\u7a2e\u52d5\u614b\u898f\u5283\u554f\u984c\uff0c\u4ee5\u4e0b\u662f\u4ed6\u7684 dp \u5f0f\u3002</p> <ul> <li>\u72c0\u614b\uff1a  \u4ee3\u8868\uff0c\u82e5\u53ea\u4ee5\u9ede  \u7576\u4e2d\u7e7c\u9ede\u7684\u8a71\uff0c  \u5230  \u7684\u6700\u77ed\u8def\u5f91\u9577\u3002</li> <li>\u8f49\u79fb\uff1a  </li> <li> <p>\u57fa\u5e95\uff1a      </p> </li> <li> <p></p> </li> </ul> <p>\u6642/\u7a7a\u9593\u8907\u96dc\u5ea6\u7686\u70ba  \uff0c\u5229\u7528\u6efe\u52d5\u9663\u5217\u6280\u5de7\uff0c\u7a7a\u9593\u8907\u96dc\u5ea6\u53ef\u512a\u5316\u81f3  </p> <pre><code>for (k = 0; k &lt; n; k++)\nfor (i = 0; i &lt; n; i++)\nfor (j = 0; j &lt; n; j++)\nw[i][j] = w[j][i] = min(w[i][j], w[i][k] + w[k][j]);\n</code></pre> <p>\u57f7\u884c\u7684\u6642\u5019\u5982\u679c  \uff0c\u4ee3\u8868\u5b58\u5728\u8ca0\u74b0\uff0cFloyd-Warshall \u662f\u53ef\u4ee5\u5224\u65b7\u8ca0\u74b0\u3002</p>"},{"location":"graph/shortestpath/#_3","title":"\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91","text":"<p>\u6c42\u51fa\u4e00\u500b\u9ede\u5230\u6240\u6709\u9ede\u7684\u6700\u77ed\u8def\u5f91\uff0c\u5176\u5be6\u5c31\u662f\u4ee5\u8d77\u9ede\u70ba\u6839\uff0c\u6700\u77ed\u8def\u5f91\u662f\u7531\u7236\u7bc0\u9ede\u9b06\u5f1b\u800c\u4f86\u7684\u6700\u77ed\u8def\u5f91\u6a39\u3002\u6211\u5011\u627e\u6700\u77ed\u8def\u5f91\uff0c\u5c31\u662f\u4e00\u76f4\u628a\u9b06\u5f1b\uff0c\u76f4\u5230\u6240\u6709\u9ede\u90fd\u4e0d\u80fd\u9b06\u5f1b\uff0c\u6240\u6709\u9ede\u90fd\u7372\u5f97\u6700\u77ed\u8def\u5f91\u4e86\u3002\u8981\u84cb\u51fa\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u53ea\u8981\u628a\u9ede\u6307\u5411\u6700\u5f8c\u4e00\u6b21\u88ab\u8ab0\u9b06\u5f1b\u5c31\u597d\u4e86\u3002</p>"},{"location":"graph/shortestpath/#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<p>\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u8a2d\u8d77\u9ede\u7684\u6700\u77ed\u8def\u5f91\u70ba 0\uff0c\u5176\u4ed6\u9ede\u70ba\u7121\u9650\u5927\uff0c\u6bcf\u6b21\u5c0d\u6240\u6709\u908a\u679a\u8209\uff0c\u56e0\u70ba\u6700\u77ed\u8def\u5f91\u4e0d\u6703\u7d93\u904e\u540c\u6a23\u7684\u908a\u7b2c\u4e8c\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u57f7\u884c  \u8f2a\uff0c\u8907\u96dc\u5ea6\u70ba  \u3002\u5982\u679c\u57f7\u884c\u7b2c  \u6b21\u6642\u9084\u6709\u908a\u53ef\u4ee5\u9b06\u5f1b\uff0c\u4ee3\u8868\u6709\u8ca0\u74b0\uff0cBellman-Ford \u4e5f\u53ef\u4ee5\u7576\u6210\u8ca0\u74b0\u7684\u5224\u65b7\u65b9\u6cd5\u3002</p> <pre><code>void bellman_ford(int s)\n{\nd[s] = 0;\np[s] = s;\nfor (int i = 0; i &lt; V - 1; i++)\n{\nfor (int ss = 0; ss &lt; V; ss++)\n{\nfor (auto tt : v[ss])\n{\nif (d[ss] + w[ss][tt] &lt; d[tt])\n{\nd[tt] = d[ss] + w[ss][tt];\np[tt] = ss;\n}\n}\n}\n}\n}\nbool has_negative_cycle()\n{\nfor (int i = 0; i &lt; V; i++)\n{\nfor (int j = 0; j &lt; V; j++)\n{\nif (d[i] + w[i][j] &lt; d[j])\nreturn true;\n}\n}\nreturn false;\n}\n</code></pre> <p>\u6b64\u6f14\u7b97\u6cd5\u9084\u6709\u4e00\u500b\u512a\u5316\u7248\u672c\u53eb\u505a Shortest Path Faster Algorithm (SPFA)\uff0c\u4ed6\u7684\u505a\u6cd5\u662f\u679a\u8209\u8d77\u9ede\u662f\u9b06\u5f1b\u904e\u7684\u908a\uff0c\u4ee5\u9b06\u5f1b\u904e\u7684\u9ede\u9664\u975e\u88ab\u91cd\u65b0\u9b06\u5f1b\uff0c\u5426\u5247\u4e0d\u6703\u66f4\u52d5\u3002\u9810\u671f\u8907\u96dc\u5ea6\u70ba  \uff0c\u4e0d\u904e\u6700\u5dee\u72c0\u6cc1\u4ecd\u70ba  \u3002</p> <pre><code>struct Edge\n{\nint t;\nlong long w;\nEdge(){};\nEdge(int _t, long long _w) : t(_t), w(_w) {}\n};\n\nbool SPFA(int st)\n{\nvector&lt;int&gt; cnt(n, 0);\nbitset&lt;MXV&gt; inq(0);\nqueue&lt;int&gt; q;\n\nq.push(st);\ndis[st] = 0;\ninq[st] = true;\nwhile (!q.empty())\n{\nint cur = q.front();\nq.pop();\ninq[cur] = false;\nfor (auto &amp;e : G[cur])\n{\nif (dis[e.t] &lt;= dis[cur] + e.w)\ncontinue;\ndis[e.t] = dis[cur] + e.w;\nif (inq[e.t])\ncontinue;\n++cnt[e.t];\nif (cnt[e.t] &gt; n)\nreturn false; // negtive cycle\ninq[e.t] = true;\nq.push(e.t);\n}\n}\nreturn true;\n}\n</code></pre>"},{"location":"graph/shortestpath/#dijkstras-algorithm","title":"Dijkstra\u2019s Algorithm","text":"<p>\u540c\u6a23\u70ba\u55ae\u9ede\u6e90\u6700\u77ed\u8def\u5f91\uff0c\u4ed6\u7684\u60f3\u6cd5\u548c Prim's Algorithm \u985e\u4f3c\uff0c\u6bcf\u6b21\u628a\u96e2\u6a39\u6839\u6700\u8fd1\u7684\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\u88e1\uff0c\u4e26\u628a\u6240\u6709\u8207\u8a72\u9ede\u76f8\u9023\u7684\u908a\u9b06\u5f1b\uff0c\u5df2\u7d93\u52a0\u5165\u7684\u9ede\u4e0d\u6703\u5728\u88ab\u9b06\u5f1b\u3002</p> <p>\u4f7f\u7528 <code>priority_queue</code> \u7684\u8907\u96dc\u5ea6\u70ba  \uff0c\u4f7f\u7528\u8cbb\u6ce2\u90a3\u5951\u5806\uff0c\u8907\u96dc\u5ea6\u70ba  </p> <pre><code>struct edge\n{\nint s, t;\nLL d;\nedge(){};\nedge(int s, int t, LL d) : s(s), t(t), d(d) {}\n};\n\nstruct heap\n{\nLL d;\nint p; // point\nheap(){};\nheap(LL d, int p) : d(d), p(p) {}\nbool operator&lt;(const heap &amp;b) const { return d &gt; b.d; }\n};\n\nint d[N], p[N];\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[N];\nbitset&lt;N&gt; vis;\n\nvoid dijkstra(int ss)\n{\npriority_queue&lt;heap&gt; Q;\nfor (int i = 0; i &lt; V; i++)\nd[i] = INF;\nd[ss] = 0;\np[ss] = -1;\nvis.reset() : Q.push(heap(0, ss));\nheap x;\nwhile (!Q.empty())\n{\nx = Q.top();\nQ.pop();\nint p = x.p;\nif (vis[p])\ncontinue;\nvis[p] = 1;\nfor (int i = 0; i &lt; G[p].size(); i++)\n{\nedge &amp;e = edges[G[p][i]];\nif (d[e.t] &gt; d[p] + e.d)\n{\nd[e.t] = d[p] + e.d;\np[e.t] = G[p][i];\nQ.push(heap(d[e.t], e.t));\n}\n}\n}\n}\n</code></pre> <p>\u800c Dijkstra\u2019s Algorithm \u4e0d\u80fd\u8655\u7406\u8ca0\u908a\uff0c\u539f\u56e0\u662f\u4e00\u65e6\u9ede\u52a0\u5165\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u5c31\u4e0d\u6703\u518d\u88ab\u66f4\u65b0\uff0c\u4ee5\u7dad\u6301\u826f\u597d\u8907\u96dc\u5ea6\uff0c\u8ca0\u908a\u6703\u7834\u58de\u6b64\u898f\u5247\u3002</p>"},{"location":"graph/shortestpath/#_4","title":"\u6574\u7406","text":"\u6f14\u7b97\u6cd5 Floyd-Warshall Bellman-Ford SPFA Dijkstra \u9ede\u6e90 \u591a\u9ede\u6e90 \u55ae\u9ede\u6e90 \u55ae\u9ede\u6e90 \u55ae\u9ede\u6e90 \u6642\u9593\u8907\u96dc\u5ea6 \u671f\u671b\u8907\u96dc\u5ea6  \u4f7f\u7528 priority_queue  \u5224\u65b7\u8ca0\u74b0 O O O X \u8655\u7406\u8ca0\u908a O O O X <ul> <li>\u5982\u679c \uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Floyd\uff0c\u6709\u6642\u5019\u9700\u8981\u8a08\u7b97\u8a31\u591a\u9ede\u5c0d\u7684\u8ddd\u96e2\u3002</li> <li>\u6c92\u6709\u8ca0\u908a\u4e14\u8d77\u9ede\u56fa\u5b9a(\u55ae\u9ede\u6e90)\u7684\u554f\u984c\u4f7f\u7528 Dijkstra\u3002</li> <li>\u5176\u4ed6\u72c0\u6cc1\u4f7f\u7528 Bellmam Ford / SPFA\u3002</li> </ul>"},{"location":"graph/shortestpath/#_5","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u5168\u9ede\u6e90<ul> <li>UVa 10803 - Thunder Mountain </li> <li>UVa 10724 - Road Construction </li> </ul> </li> <li>\u55ae\u9ede\u6e90<ul> <li>UVa 10917 - A Walk Through the Forest </li> </ul> </li> <li>\u5224\u65b7\u8ca0\u74b0<ul> <li>UVa 00558 - Wormholes </li> </ul> </li> </ul> UVa 12519 - The Farnsworth Parabox <p>\u5728\u591a\u91cd\u5b87\u5b99\u4e2d\u65c5\u884c\uff0c\u6709  \u689d\u8def\u7dda\uff0c\u7b2c  \u689d\u8def\u7dda\u53ef\u4ee5\u5f9e\u5b87\u5b99  \u5230  \u5e74\u5f8c\u7684\u5b87\u5b99 \uff0c\u4e5f\u53ef\u4ee5\u5f9e\u5b87\u5b99  \u5230  \u5e74\u524d\u7684\u5b87\u5b99 \uff0c\u554f\u6709\u6c92\u6709\u4e00\u7a2e\u8d70\u6cd5\u53ef\u4ee5\u5230\u540c\u4e00\u500b\u5b87\u5b99\u7684\u672a\u4f86?</p> <p>\u5982\u679c\u53ef\u4ee5\u6709\u4e00\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u5230\u540c\u4e00\u500b\u5b87\u5b99\u7684\u672a\u4f86\uff0c\u53cd\u904e\u4f86\u8d70\u53ef\u4ee5\u5230\u540c\u4e00\u500b\u5b87\u5b99\u7684\u904e\u53bb\uff0c\u5c07  \u7576\u6210\u908a\u7684\u6b0a\u91cd\uff0c\u9019\u984c\u8b8a\u6210\u5224\u65b7\u6709\u6c92\u6709\u8ca0\u74b0\u3002</p> AtCoder Beginner Contest 061D - Score Attack <p>\u7d66\u5b9a\u4e00\u5f35\u6709\u5411\u5716\uff0c\u6c42  \u8d70\u5230  \u7684\u8def\u5f91\u4e2d\uff0c\u6b0a\u91cd\u548c\u6700\u5927\u70ba\u4f55\uff0c\u5982\u679c\u70ba\u7121\u9650\u5927\uff0c\u8acb\u8f38\u51fa <code>inf</code>\u3002</p> <p>\u628a\u6240\u6709\u6b0a\u91cd\u4e58\u4e0a \uff0c\u5c31\u8b8a\u6210\u4e86\u6c42\u6700\u77ed\u8def\u5f91\uff0c\u548c\u5224\u65b7\u662f\u5426\u6709\u8ca0\u74b0\u3002\u627e\u5230\u8ca0\u74b0\uff0c\u9084\u8981\u5224\u65b7\u8ca0\u74b0\u662f\u4e0d\u662f\u5c0d\u7d42\u9ede\u6709\u5f71\u97ff\uff0c\u5982\u679c\u4e0d\u5f71\u97ff\u7d42\u9ede\uff0c\u7b54\u6848\u5c31\u4e0d\u662f <code>inf</code>\u3002</p> UVa 534 - Frogger <p>\u7d66\u5b9a  \u9846\u77f3\u982d\u7684\u4f4d\u7f6e\uff0c\u5047\u8a2d\u4e00\u689d\u8def\u5f91  \u7684 cost \uff0c\u8acb\u554f  \u865f\u77f3\u982d\u5230  \u865f\u77f3\u982d\u8def\u5f91 cost \u6700\u5c0f\u70ba\u4f55?</p> <p>\u9019\u984c\u53ef\u4ee5\u4fee\u6539 Floyd-Warshall \u7b97\u6cd5\uff0c\u5b9a\u7fa9  \u70ba\u5f9e  \u865f\u77f3\u982d\u5230  \u865f\u77f3\u982d\u8def\u5f91 cost \u6700\u5c0f\u503c\u3002</p> AtCoder Beginner Contest 243E - Edge Deletion <p>\u7d66\u5b9a\u4e00\u5f35\u5716\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u79fb\u9664\u5e7e\u689d\u908a\uff0c\u6eff\u8db3\uff1a1. \u539f\u5716\u662f\u9023\u901a\u5716 2. \u4efb\u5169\u9ede\u6700\u77ed\u8ddd\u96e2\u4e0d\u8b8a</p> <p>\u5148\u7528 Floyd-Warshall \u8a08\u7b97\u4efb\u5169\u9ede\u4e4b\u9593\u8ddd\u96e2\uff0c\u679a\u8209\u6bcf\u4e00\u689d\u908a \uff0c\u5982\u679c\u627e\u5230\u4e00\u500b   \u7684\u60c5\u6cc1\uff0c\u90a3\u9ebc\u9019\u689d\u908a\u53ef\u4ee5\u79fb\u9664\u3002</p>"},{"location":"graph/traverse/","title":"\u5716\u7684\u904d\u6b77","text":""},{"location":"graph/traverse/#_1","title":"\u6a39\u7684\u904d\u6b77","text":"<p>\u5b58\u597d\u5716\u5f8c\uff0c\u70ba\u4e86\u7372\u5f97\u67d0\u4e9b\u8cc7\u8a0a\uff0c\u9700\u8981\u904d\u6b77\u6216\u641c\u7d22\u5716\u3002</p> <ul> <li>\u865b\u64ec\u78bc</li> </ul> <pre><code>(1) \u628a\u8d77\u9ede\u653e\u5165\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u4e2d\n(2) \u7576\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u9084\u6709\u8cc7\u6599\u6642\uff0c\u57f7\u884c\u7b2c (3)\uff0c\u5426\u5247\u96e2\u958b\u7a0b\u5f0f\n(3) \u5f9e\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u62ff\u4e00\u500b\u9ede\u51fa\u4f86\uff0c\u8a2d\u8a72\u9ede\u70ba u\n(4) \u4e26\u6240\u6709\u548c u \u76f8\u9023\u4e26\u6c92\u62dc\u8a2a\u904e\u7684\u9ede\u52a0\u5165\u300c\u8cc7\u6599\u7d50\u69cb\u300d\n(5) \u56de\u5230 (2)\n</code></pre> <p>\u6839\u64da\u512a\u5148\u9806\u5e8f\u4e0d\u540c\uff0c\u6709\u5169\u7a2e\u505a\u6cd5</p> <ul> <li>\u6df1\u5ea6\u512a\u5148\u641c\u5c0b (Depth First Search, DFS)\uff1a\u6bcf\u6b21\u90fd\u5617\u8a66\u5f80\u66f4\u6df1\u9ede\u8d70\u3002<ul> <li></li> <li></li> </ul> </li> <li> <p>\u5ee3\u5ea6\u512a\u5148\u641c\u5c0b (Breadth First Search, BFS)\uff1a\u5148\u628a\u540c\u4e00\u5c64\u7684\u9ede\uff08\u76f8\u540c\u8ddd\u96e2\uff09\u8d70\u5b8c\uff0c\u5728\u8d70\u4e0b\u4e00\u5c64\u3002</p> <ul> <li></li> <li></li> </ul> </li> <li> <p>DFS v.s. BFS</p> <ul> <li></li> </ul> </li> <li> <p>\u9078\u7528\u8cc7\u6599\u7d50\u69cb</p> <ul> <li>DFS\uff1a\u8d8a\u65e9\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u52a0\u5165\u7684\u9ede\u6703\u8d8a\u5f8c\u9762\u62ff\u51fa\u4f86\uff0c\u56e0\u6b64\u8981\u7528 <code>stack</code> \u3002</li> <li>BFS\uff1a\u8d8a\u65e9\u300c\u8cc7\u6599\u7d50\u69cb\u300d\u52a0\u5165\u7684\u9ede\u6703\u8d8a\u524d\u9762\u62ff\u51fa\u4f86\uff0c\u56e0\u6b64\u8981\u7528 <code>queue</code> \u3002</li> </ul> </li> </ul>"},{"location":"graph/traverse/#_2","title":"\u7bc4\u4f8b\u7a0b\u5f0f\u78bc","text":"<ul> <li>DFS</li> </ul> <pre><code>vector&lt;int&gt; G[N];\nbitset&lt;N&gt; vis;\nvoid dfs(int s)\n{\nvis[s] = 1;\nfor (int t : G[s])\n{\nif (!vis[i])\ndfs(i);\n}\n}\n</code></pre> <ul> <li>BFS</li> </ul> <pre><code>vector&lt;int&gt; G[N];\nbitset&lt;N&gt; vis;\nvoid bfs(int s)\n{\nqueue&lt;int&gt; q;\nq.push(s);\nvis[s] = 1;\nwhile (!q.empty())\n{\nint v = q.front();\nq.pop();\nfor (int t : G[v])\n{\nif (!vis[t])\n{\nq.push(t);\nvis[t] = 1;\n}\n}\n}\n}\n</code></pre>"},{"location":"graph/traverse/#time-stamp","title":"\u6642\u9593\u6233\u8a18 (Time stamp)","text":"<p>\u5728 DFS \u904e\u7a0b\uff0c\u53ef\u4ee5\u8a18\u9304\u6bcf\u500b\u9ede\u9032\u5165\u548c\u96e2\u958b\u7684\u9806\u5e8f\uff0c\u6642\u9593\u6233\u8a18\u53ef\u8868\u793a\u5169\u9ede\u7684\u5148\u5f8c\u95dc\u4fc2\uff0c\u901a\u5e38\u7528\u5728\u4ee5\u4e0b\u5730\u65b9\uff1a</p> <ul> <li>\u6700\u4f4e\u5171\u540c\u7956\u5148</li> <li>\u6a39\u58d3\u5e73</li> <li>\u6709\u5411\u5716\u7684\u5f37\u9023\u901a\u5143\u4ef6</li> </ul> <pre><code>int tin[N], tout[N];\nint timer = 0;\n\nvoid dfs(int v, int p)\n{\ntin[v] = ++timer;\nfor (int it : G[v])\n{\nif (it != p)\ndfs(it, v);\n}\ntout[v] = ++timer;\n}\n</code></pre>"},{"location":"graph/traverse/#_3","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>UVa 00572 - Oil Deposits </li> <li>UVa 11624 - Fire! </li> <li>UVa 11953 - Battleships </li> <li>Codeforces 598D - Igor In the Museum </li> </ul>"},{"location":"graph/tree/","title":"\u6a39 (Tree)","text":"<p>\u6a39\u662f\u4e00\u5f35\u6c92\u6709\u74b0\u4e14\u9023\u901a\u7684\u5716\uff0c\u6709\u8a31\u591a\u7b97\u6cd5\u90fd\u662f\u7531\u6a39\u767c\u5c55\u51fa\u4f86\u3002</p>"},{"location":"graph/tree/#_1","title":"\u7279\u6027","text":"<ul> <li>  \u3002</li> <li>\u6c92\u6709\u74b0\uff0c\u4f46\u52a0\u4e0a\u4e00\u689d\u908a\u6703\u5f62\u6210\u74b0\u3002<ul> <li>\u4efb\u610f\u5169\u500b\u9ede\u4e4b\u9593\u5b58\u5728\u552f\u4e00\u8def\u5f91\u3002</li> </ul> </li> <li>\u70ba\u9023\u901a\u5716\uff0c\u4f46\u62d4\u6389\u4e00\u689d\u908a\u5373\u70ba\u4e0d\u9023\u901a\u3002</li> <li></li> </ul>"},{"location":"graph/tree/#_2","title":"\u8853\u8a9e","text":"<ul> <li>\u6839 (root)\uff1a\u6a39\u7684\u4e00\u500b\u4ee3\u8868\u6027\u7684\u9ede\uff0c\u901a\u5e38\u6703\u88ab\u7576\u904d\u6b77\u7684\u8d77\u9ede\uff0c\u6709\u7d66\u5b9a\u6839\u9ede\u7684\u6a39\u53eb \u6709\u6839\u6a39\uff0c\u53cd\u4e4b\u70ba\u7121\u6839\u6a39\u3002\u7121\u6839\u6a39\u6709\u6642\u4f9d\u7167\u984c\u76ee\u9700\u6c42\uff0c\u9700\u8981\u96a8\u6a5f\u627e\u4e00\u500b\u9ede\u7576\u6839\u3002</li> <li>\u8449\u7bc0\u9ede (leaf)\uff1a\u5ea6\u6578  \u7684\u7bc0\u9ede\u3002</li> <li>\u8ddd\u96e2 (distance)\uff1a\u70ba\u5169\u500b\u9ede\u6240\u5f62\u6210\u8def\u5f91\u4e4b\u908a\u6578\uff0c\u6216\u662f\u8def\u5f91\u4e0a\u6b0a\u91cd\u4e4b\u548c\u3002</li> </ul> <ul> <li> <p>\u7236\u7bc0\u9ede (parent)\u3001\u5b50\u7bc0\u9ede (child\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u5169\u500b\u76f8\u9023\u7684\u7bc0\u9ede\uff0c\u8f03\u63a5\u8fd1\u6a39\u6839\u7684\u70ba\u7236\u7bc0\u9ede\uff0c\u53e6\u4e00\u500b\u70ba\u5b50\u7bc0\u9ede\u3002</p> </li> <li> <p>\u7956\u5148 (ancestor)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e2d\uff0c\u6240\u6709\u7684\u7bc0\u9ede\u7686\u70ba\u7956\u5148\u3002\u4f9d\u984c\u76ee\u6240\u9700\uff0c\u6709\u6642\u81ea\u5df1\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\uff08\u5c24\u5176\u662f\u6839\u6700\u5e38\u9019\u6a23\u5b9a\u7fa9\uff09\u3002</p> </li> <li> <p>\u5144\u5f1f (siblings)\uff1a\u76f8\u540c\u7236\u89aa\u7684\u7bc0\u9ede\u3002</p> </li> <li> <p>\u5f8c\u4ee3 (descendant)\uff1a\u6240\u6709\u8996\u81ea\u5df1\u70ba\u7956\u5148\u7684\u9ede\uff08\u4e0d\u5305\u542b\u81ea\u5df1\uff09\u3002</p> </li> <li> <p></p> </li> </ul> <ul> <li>\u6df1\u5ea6 (depth)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u6839\u7d50\u9ede\u4e4b\u8ddd\u96e2\u3002</li> <li>\u9ad8\u5ea6 (height)\uff1a\u6709\u6839\u6a39\u4e2d\uff0c\u7bc0\u9ede\u5230\u8207\u5b83\u8ddd\u96e2\u6700\u5927\u7684\u8449\u7bc0\u9ede\u7684\u8ddd\u96e2\u7a31\u70ba\u9ad8\u5ea6\u3002\u6839\u7684\u9ad8\u5ea6\u7a31\u70ba\u9019\u6574\u9846\u6a39\u7684\u9ad8\u5ea6\u3002</li> </ul> <ul> <li>\u5b50\u6a39 (subtree)\uff1a\u5982\u679c  \u70ba  \u7684\u5b50\u6a39\uff0c\u5247  \uff0c  \u3002</li> <li>\u68ee\u6797 (Forest)\uff1a\u7531\u7121\u6578\u500b\u4e92\u4e0d\u9023\u901a\u7684\u6a39\u6240\u5f62\u7684\u5716\u70ba\u68ee\u6797\u3002</li> </ul>"},{"location":"graph/tree/#_3","title":"\u4e8c\u5143\u6a39","text":"<ul> <li> <p>  \u5143\u6a39\uff1a\u6bcf\u500b\u7bc0\u9ede\u6700\u591a\u6709  \u500b\u5b50\u7bc0\u9ede\uff0c\u7a31\u70ba  \u5143\u6a39\u3002</p> </li> <li> <p>\u6700\u5e38\u898b\u662f\u4e8c\u5143\u6a39\uff0c\u4e8c\u5143\u6a39\u5169\u500b\u5b50\u7bc0\u9ede\u5206\u5225\u7a31\u70ba\u5de6\u5b50\u7bc0\u9ede (left node) \u53ca\u53f3\u5b50\u7bc0\u9ede (right node)\uff0c\u8acb\u898b\u8cc7\u6599\u7d50\u69cb\u7684 \u4e8c\u5143\u641c\u5c0b\u6a39 \u548c \u63a8 \u3002</p> </li> <li> <p>\u7279\u6b8a\u4e8c\u5143\u6a39</p> <ul> <li>Full Binary Tree\uff1a\u9664\u8449\u7bc0\u9ede\u5916\uff0c\u6bcf\u500b\u7bc0\u9ede\u90fd\u6709\u5169\u500b\u5b50\u7bc0\u9ede\u3002</li> <li>Complete Binary Tree\uff1a\u6bcf\u5c64\u7bc0\u9ede\u5168\u6eff\uff0c\u9664\u4e86\u6700\u5f8c\u4e00\u5c64\uff0c\u6700\u5f8c\u4e00\u5c64\u7bc0\u9ede\u9760\u5de6\u3002</li> <li>Perfect Binary Tree\uff1a\u6bcf\u5c64\u7bc0\u9ede\u5168\u6eff\uff0cperfect binary tree \u4e5f\u662f full binary tree \u548c complete binary tree\u3002</li> </ul> </li> </ul> <p></p>"},{"location":"graph/tree/#_4","title":"\u5132\u5b58","text":"<p>\u6a39\u4e5f\u662f\u4e00\u7a2e\u5716\uff0c\u4e5f\u53ef\u4ee5\u7528 Adjacency Matrix \u6216 Adjacency List\uff0c\u6bcf\u500b\u9ede\u8a18\u9304\u81ea\u5df1\u7684\u7236\u7bc0\u9ede\u548c\u5b50\u7bc0\u9ede\uff0c\u4e5f\u53ef\u4ee5\u53ea\u8a18\u9304\u5176\u4e00\uff0c\u53ea\u6709\u7d00\u9304\u7236\u7bc0\u9ede\u7684\u6a39\uff0c\u53ef\u4ee5\u7528\u4e00\u7dad\u9663\u5217\u5132\u5b58\u3002</p> <pre><code>int par[MXV];\n</code></pre> <p>\u4e8c\u5143\u6a39\u6700\u591a\u53ea\u6709\u5169\u500b\u7bc0\u9ede\uff08\u5de6\u5b50\u7bc0\u9ede\u548c\u53f3\u5b50\u7bc0\u9ede\uff09\uff0c\u53ef\u4ee5\u958b\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u4e8c\u7dad\u9663\u5217\uff0c\u6216\u5169\u500b\u9577\u5ea6\u70ba  \u7684\u4e00\u7dad\u9663\u5217\u3002</p> <pre><code>int Lc[MXV], Rc[MXV];\n// or\nint chlid[MXV][2];\n</code></pre> <p>Complete Binary Tree \u53ef\u7528\u4e00\u7dad\u9663\u5217\u5132\u5b58\uff0c\u5c07 Complete Binary Tree \u7684\u7bc0\u9ede\u5f9e\u4e0a\u5230\u4e0b\uff0c\u5f9e\u5de6\u5230\u53f3\u4f9d\u5e8f\u7de8\u865f\uff0c\u6839\u7bc0\u9ede\u70ba  \u6216  \uff1a</p> <ul> <li> <p>\u7576\u6839\u70ba  \u6642\uff0c\u5de6\u5b50\u7bc0\u9ede\u662f  \uff0c\u53f3\u5b50\u7bc0\u9ede\u662f  </p> </li> <li> <p>\u7576\u6839\u70ba  \u6642\uff0c\u5de6\u5b50\u7bc0\u9ede\u662f  \uff0c\u53f3\u5b50\u7bc0\u9ede\u662f  </p> </li> </ul> <p>\u9084\u6709\u4e00\u4e9b\u6a39\u7684\u5132\u5b58\u6d89\u53ca\u6307\u6a19\uff0c\u4ee5\u4e0b\u70ba\u5e38\u898b\u7a2e\u985e\uff0c\u9019\u88e1\u4e0d\u63d0\u5982\u4f55\u5be6\u4f5c\uff1a</p> <ul> <li>\u4e8c\u5143\u641c\u5c0b\uff08\u5e73\u8861\uff09\u6a39<ul> <li>\u6a39\u7684\u65cb\u8f49</li> </ul> </li> <li>\u7dda\u6bb5\u6a39\u53ca\u76f8\u95dc\u53ef\u652f\u63f4\u5340\u9593\u67e5\u8a62\u7684\u6a39<ul> <li>\u5340\u9593\u522a\u9664</li> <li>\u5340\u9593\u642c\u79fb</li> </ul> </li> </ul>"},{"location":"graph/tree/#_5","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>Codeforces 913B - Christmas Spruce </li> <li>\u6a39\u7684\u524d\u4e2d\u5f8c\u5e8f<ul> <li>UVa 00548 - Tree </li> </ul> </li> </ul>"},{"location":"math/euler/","title":"\u6b50\u62c9\u51fd\u6578","text":""},{"location":"math/euler/#_2","title":"\u5b9a\u7fa9","text":"<p>\u6b50\u62c9\u51fd\u6578\u8a08\u7b97\u5c0d\u65bc\u4e00\u500b\u6574\u6578 N\uff0c\u5c0f\u65bc\u7b49\u65bc N \u7684\u6b63\u6574\u6578\u4e2d\uff0c\u6709\u5e7e\u500b\u548c N \u4e92\u8cea\u3002\u901a\u5e38\u7528  \u8868\u793a\u3002</p>"},{"location":"math/euler/#_3","title":"\u6027\u8cea","text":"<ul> <li>\u6b50\u62c9\u51fd\u6578\u662f\u4e00\u500b\u7a4d\u6027\u51fd\u6578\uff1a\u5982\u679c  </li> <li>\u5982\u679c  \u662f\u8cea\u6578\uff1a  </li> <li>\u5982\u679c  \u662f\u8cea\u6578\uff1a  </li> </ul>"},{"location":"math/euler/#_4","title":"\u8a08\u7b97","text":"<p>\u6839\u64da\u4e0a\u8ff0\u6027\u8cea\uff0c\u53ef\u6574\u7406\u51fa\u4e00\u500b\u516c\u5f0f\uff1a  \u3002</p> <p>\u8981\u8a08\u7b97  \uff0c\u53ef\u4ee5\u5229\u7528\u8cea\u56e0\u6578\u5206\u89e3\u6c42\u5f97\u3002</p> <p>\u53e6\u4e00\u7a2e\u8fa6\u6cd5\u662f\u5229\u7528\u8cea\u6578\u7be9\u6cd5\u3002</p> <pre><code>void phi_table(int n)\n{\nphi[1] = 1;\nfor (int i = 2; i &lt;= n; i++)\n{\nif (phi[i])\ncontinue;\nfor (int j = i; j &lt; n; j += i)\n{\nif (!phi[j])\nphi[j] = j;\nphi[j] = phi[j] / i * (i - 1);\n}\n}\n}\n</code></pre>"},{"location":"math/euler/#_5","title":"\u76f8\u95dc\u5b9a\u7406","text":""},{"location":"math/euler/#_6","title":"\u8cbb\u99ac\u5c0f\u5b9a\u7406","text":"<p>\u7d66\u5b9a\u4e00\u500b\u8cea\u6578  \u53ca\u4e00\u500b\u6574\u6578  \uff0c\u90a3\u9ebc\uff1a  \u5982\u679c  \uff0c\u5247\uff1a  </p>"},{"location":"math/euler/#_7","title":"\u6b50\u62c9\u5b9a\u7406","text":"<p>\u6b50\u62c9\u5b9a\u7406\u662f\u6bd4\u8f03 general \u7248\u672c\u7684\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002\u7d66\u5b9a\u5169\u500b\u6574\u6578  \u548c  \uff0c\u5982\u679c  \uff0c\u5247  \u5982\u679c  \u662f\u8cea\u6578\uff0c  \uff0c\u4e5f\u5c31\u662f\u8cbb\u99ac\u5c0f\u5b9a\u7406\u3002</p>"},{"location":"math/euler/#wilsons-theorem","title":"Wilson's theorem","text":"<p>\u7d66\u5b9a\u4e00\u500b\u8cea\u6578  \uff0c\u5247\uff1a  </p>"},{"location":"math/euler/#_8","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u6b50\u62c9\u51fd\u6578<ul> <li>UVa 10820 - Send a Table </li> </ul> </li> </ul>"},{"location":"math/mod/","title":"\u6a21","text":"<p>\u53d6\u9918\u6578\u3002</p>"},{"location":"math/mod/#_2","title":"\u6027\u8cea","text":"<ul> <li>\u52a0\u6cd5\uff1a  </li> <li>\u6e1b\u6cd5\uff1a  </li> <li>\u4e58\u6cd5\uff1a  </li> <li>\u6b21\u65b9\uff1a  </li> <li>\u52a0\u6cd5\u7d50\u5408\u5f8b\uff1a  </li> <li>\u4e58\u6cd5\u7d50\u5408\u5f8b\uff1a  </li> <li>\u52a0\u6cd5\u4ea4\u63db\u5f8b\uff1a  </li> <li>\u4e58\u6cd5\u4ea4\u63db\u5f8b\uff1a  </li> <li>\u7d50\u5408\u5f8b\uff1a  </li> </ul>"},{"location":"math/mod/#_3","title":"\u540c\u9918","text":"<p>\u5982\u679c  \uff0c\u6211\u5011\u6703\u8aaa  \u5728\u6a21  \u4e0b\u540c\u9918\u3002</p> <p>\u4ee5\u4e0b\u70ba\u6027\u8cea\uff1a</p> <ul> <li>\u6574\u9664\u6027\uff1a  </li> <li>\u905e\u79fb\u6027\uff1a\u82e5  </li> <li>\u4fdd\u6301\u57fa\u672c\u904b\u7b97\uff1a      </li> <li>\u653e\u5927\u7e2e\u5c0f\u6a21\u6578\uff1a  </li> </ul>"},{"location":"math/mod/#_4","title":"\u5feb\u901f\u51aa","text":"<p>\u6211\u5011\u5e38\u5e38\u9047\u5230\u6c42  \u70ba\u591a\u5c11\u7684\u984c\u76ee\uff0c\u6700\u7c21\u55ae\u7684\u4f5c\u6cd5\u662f\u7528\u8ff4\u5708\u82b1  \u6b21\u7b97\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5728  \u5f88\u5927\u6642\u5c31\u7121\u6cd5\u5feb\u901f\u7b97\u51fa\u3002\u9019\u6642\u5982\u679c\u62c6\u6210  \uff0c\u5148\u5206\u5225\u8a08\u7b97\u5728\u4e58\u8d77\u4f86\uff0c\u9019\u6a23\u53ea\u8981\u82b1\u8cbb  \u7684\u6642\u9593\u5373\u53ef\u3002</p> \u8a73\u7d30\u60f3\u6cd5 <p>\u6b21\u65b9\u53ef\u62c6\u89e3\uff1a </p> <p>\u5982\u679c\u6b21\u65b9\u662f  \u7684\u51aa\u6b21\uff0c\u53ef\u5728  \u7b97\u51fa\uff1a </p> <p>\u6839\u64da\u4e0a\u9762\u5169\u9ede\uff0c\u5c07  \u62c6\u89e3\u6210\u7684  \u7684\u51aa\u6b21\u65b9\u76f8\u4e58\uff1a\u3002</p> <p>\u6839\u64da\u6a21\u904b\u7b97\u7684\u6027\u8cea\uff0c\u5169\u6578\u76f8\u4e58\u53d6\u9918\u6578\uff0c\u7b49\u65bc\u5169\u6578\u5404\u81ea\u53d6\u9918\u6578\u518d\u76f8\u4e58\uff0c\u518d\u53d6\u7b2c\u4e8c\u6b21\u9918\u6578\uff1a\u3002</p> <pre><code>T pow(int a, int b, int c)\n{ // calculate a^b%c\nT res = 1, tmp = a;\nfor (; b; b &gt;&gt;= 1)\n{\nif (b &amp; 1)\nres = res * tmp % c;\ntmp = tmp * tmp % c;\n}\nreturn res;\n}\n</code></pre>"},{"location":"math/mod/#_5","title":"\u6a21\u9006\u5143","text":"<p>\u6a21\u9006\u5143\u662f\u53d6\u6a21\u4e0b\u7684\u53cd\u5143\u7d20\uff0c\u5373\u70ba\u627e\u5230  \u4f7f\u5f97  \u3002</p> <p>\u6574\u6578  \u5728  \u4e0b\u8981\u6709\u6a21\u53cd\u5143\u7d20\u7684\u5145\u5206\u5fc5\u8981\u689d\u4ef6\u70ba  \u4e92\u8cea\u3002</p> <p>\u6a21\u9006\u5143\u5982\u679c\u5b58\u5728\u6703\u6709\u7121\u9650\u500b\uff0c\u4efb\u610f\u5169\u76f8\u9130\u6a21\u9006\u5143\u76f8\u5dee  \u3002</p>"},{"location":"math/mod/#_6","title":"\u65b9\u6cd5\u4e00\uff1a\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5","text":"\u8c9d\u7956\u5b9a\u7406 <p>\u4ee4  \u70ba\u975e  \u6574\u6578\uff0c\u5b58\u5728\u6574\u6578\u89e3  \u4f7f\u5f97  </p> <p>\u5f9e\u4e0a\u6587\u53ef\u5f97\u77e5\uff0c\u5982\u679c  \uff0c\u5247  \u5728  \u4e0b\u6709\u6a21\u53cd\u5143\u7d20\uff0c\u53c8\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\u53ef\u77e5\u5b58\u5728\u6574\u6578  \uff0c\u4f7f\u5f97  \uff0c\u9019\u88e1\u7684  \u5373\u70ba  \u7684\u53cd\u5143\u7d20\u3002\u6211\u5011\u53ef\u4ee5\u4fee\u6539\u627e\u6700\u5927\u516c\u56e0\u6578\u7684\u8fa6\u6cd5\uff0c\u627e\u51fa  \u7684\u6a21\u9006\u5143\uff0c\u9019\u500b\u7b97\u6cd5\u7a31\u70ba\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5\u3002\u9019\u500b\u6f14\u7b97\u6cd5\u53ef\u4ee5\u63a8\u5ee3\u5230  </p> <pre><code>// ax+by=c\nint extgcd(int a, int b, int c, int &amp;x, int &amp;y)\n{\nint d = a;\nif (b)\n{\nd = extgcd(b, a % b, c, y, x);\ny -= (a / b) * x;\n}\nelse\n{\nx = c;\ny = 0;\n}\nreturn d;\n}\n</code></pre>"},{"location":"math/mod/#_7","title":"\u65b9\u6cd5\u4e8c\uff1a\u5feb\u901f\u51aa","text":"<p>\u6839\u64da\u6b50\u62c9\u5b9a\u7406\uff0c\u5982\u679c  \uff0c\u5247  \uff0c\u5c07\u5f0f\u5b50\u7a0d\u5fae\u6539\u8b8a\u4e00\u4e0b\uff0c\u6211\u5011\u5f97\u51fa  \uff0c  \u662f  \u5728  \u4e0b\u7684\u4e00\u500b\u6a21\u9006\u5143\u3002\u53ef\u4ee5\u5229\u7528\u5feb\u901f\u51aa\u8a08\u7b97  \u7b97\u51fa\u6a21\u9006\u5143\u3002</p>"},{"location":"math/mod/#chinese-remainder-theorem","title":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406 (Chinese Remainder Theorem)","text":"<p>\u4e2d\u570b\u5269\u9918\u5b9a\u7406\uff0c\u53c8\u7a31\u4e2d\u570b\u9918\u6578\u5b9a\u7406\uff0c\u662f\u6578\u8ad6\u4e2d\u7684\u4e00\u500b\u95dc\u65bc\u4e00\u5143\u7dda\u6027\u540c\u9918\u65b9\u7a0b\u7d44\u7684\u5b9a\u7406\u3002\u7528\u4f86\u89e3\u6c7a\u50cf\u4e0b\u9762\u9019\u7a2e\u554f\u984c\uff1a</p> <p>\"\u6709\u7269\u4e0d\u77e5\u5176\u6578\uff0c\u4e09\u4e09\u6578\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6578\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6578\u4e4b\u5269\u4e8c\u3002\u554f\u7269\u5e7e\u4f55\uff1f\"\uff0c\u9019\u984c\u7b54\u6848\u70ba  </p> <p>\u5217\u51fa\u9019\u7a2e\u554f\u984c\u7684\u5f0f\u5b50\uff08\u8a2d  \u5169\u5169\u4e92\u8cea\uff09\uff1a</p> <p> </p> <p>\u89e3\u6c7a\u9019\u985e\u554f\u984c\u6700\u7c21\u55ae\u662f\u7528\u679a\u8209\u4f86\u6c42\u89e3\uff0c\u4e0d\u904e\u5982\u679c\u7bc4\u570d\u592a\u5927\u5c31\u6703\u5403 TLE \u4e86\u3002\u56e0\u6b64\u6211\u5011\u5148\u5217\u51fa  \u500b\u6578\u5b57  :</p> <p> </p> <p> </p> <p> </p> <p> </p> <p>\u5206\u5225\u7b97\u51fa\u7b54\u6848\u5f8c\uff0c\u6839\u64da\u52a0\u6cd5\u5728\u6a21\u904b\u7b97\u4e0b\u7684\u6027\u8cea\uff0c  \u500b\u6578\u5b57\u7684\u548c\uff0c\u6b63\u662f\u6211\u5011\u60f3\u8981\u7684\u7b54\u6848\u3002</p> <p>\u5c07\u984c\u76ee\u5206\u6210  \u500b\u5f0f\u5b50\u5f8c\uff0c\u96e3\u5ea6\u4e00\u4e0b\u964d\u4f4e\u8a31\u591a\uff0c\u73fe\u5728\u6211\u5011\u53ea\u8981\u6703\u89e3\u958b\u6bcf\u500b\u5f0f\u5b50\u5c31\u884c\u4e86\u3002\u4ee5\u4e0b\u4ee5  \u70ba\u4f8b\uff1a</p> <p>  \u986f\u7136\u6574\u9664  \uff0c\u4ee4  \uff0c\u53ef\u5217\u51fa\u5f0f\u5b50  \u3002\u65bc\u662f\u539f\u5f0f\u5c31\u8b8a\u6210\u627e\u6a21\u9006\u5143\u7684\u554f\u984c\u3002</p> <pre><code>LL P = 1, ans = 0;\nfor (int i = 0; i &lt; n; ++i)\nP *= m[i];\nfor (int i = 0; i &lt; n; ++i)\n{\nLL a = P / m[i], x, y;\nextgcd(a, m[i], x, y);\nans = (ans + r[i] * a * x) % P;\n}\ncout &lt;&lt; (ans + P) % P &lt;&lt; '\\n';\n</code></pre>"},{"location":"math/mod/#_8","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u5feb\u901f\u51aa<ul> <li>UVa 11609 - Teams </li> </ul> </li> <li>\u6a21\u9006\u5143<ul> <li>Zerojudge a289: Modular Multiplicative Inverse </li> </ul> </li> <li>\u4e2d\u570b\u5269\u9918\u5b9a\u7406<ul> <li>Zerojudge c641: \u6eff\u6eff\u7684\u7cd6\u679c\u5c4b #2 \uff08\u5099\u8a3b\uff1a\u9019\u4e00\u984c\u738b\u8001\u5e2b\u5e36\u7684\u9322\u5fc5\u5b9a\u80fd\u8cb7\u81f3\u5c11\u4e00\u9846\u7cd6\u679c\uff09</li> </ul> </li> </ul> <ol> <li> <p>Discrete mathematics - Chinese Remainder Theorem \u21a9</p> </li> </ol>"},{"location":"math/primeandfactor/","title":"\u8cea\u6578\u8207\u56e0\u6578","text":""},{"location":"math/primeandfactor/#_2","title":"\u8cea\u6578","text":"<p>\u8cea\u6578\u70ba\u56e0\u6578\u53ea\u6709  \u548c\u81ea\u5df1\u7684\u6578\uff0c\u8cea\u6578\u554f\u984c\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u5e38\u5e38\u9047\u5230\uff0c\u901a\u6703\u5efa\u7acb\u8cea\u6578\u8868\u4f86\u67e5\u8a62\u8cea\u6578\u3002</p>"},{"location":"math/primeandfactor/#_3","title":"\u4e00\u822c\u7be9\u6cd5","text":"<p>\u6bcf\u627e\u5230\u4e00\u500b\u8cea\u6578  \uff0c\u5c31\u77e5\u9053  \u90fd\u4e0d\u662f\u8cea\u6578\uff0c\u628a\u4ed6\u5011\u5f9e\u5019\u9078\u540d\u55ae\u5243\u9664\u3002</p> <pre><code>vector&lt;int&gt; p;\nbitset&lt;MAXN&gt; is_notp;\nvoid PrimeTable(int n)\n{\nis_notp.reset();\nis_notp[0] = is_notp[1] = 1;\nfor (int i = 2; i &lt;= n; i++)\n{\nif (is_notp[i])\ncontinue;\np.push_back(i);\nfor (int j = i * i; j &lt;= n; j += i)\n{\nis_notp[j] = 1;\n}\n}\n}\n</code></pre> <p>\u8907\u96dc\u5ea6\u53ef\u5230  \uff0c\u5982\u679c\u4e0d\u5f9e\u5e73\u65b9\u958b\u59cb\u5243\u9664\uff0c\u5247\u6703\u9000\u5316\u81f3  </p>"},{"location":"math/primeandfactor/#_4","title":"\u7dda\u6027\u7be9\u6cd5","text":"<p>\u6bcf\u500b\u5408\u6578\u90fd\u53ea\u88ab\u5176\u6700\u5c0f\u8cea\u56e0\u6578\u5254\u9664\uff0c\u6b64\u7b97\u6cd5\u6642\u9593\u8907\u96dc\u5ea6\u70ba  \u3002</p> <pre><code>vector&lt;int&gt; p;\nbitset&lt;MAXN&gt; is_notp;\nvoid PrimeTable(int n)\n{\nis_notp.reset();\nis_notp[0] = is_notp[1] = 1;\nfor (int i = 2; i &lt;= n; ++i)\n{\nif (!is_notp[i])\np.push_back(i);\nfor (int j = 0; j &lt; (int)p.size(); ++j)\n{\nif (i * p[j] &gt; n)\nbreak;\nis_notp[i * p[j]] = 1;\nif (i % p[j] == 0)\nbreak;\n}\n}\n}\n</code></pre> <p>\u7a0b\u5f0f\u78bc\u95dc\u9375\u5728\u65bc <code>if (i % p[j] == 0)</code> \uff0c\u7531\u65bc  \u88e1\u9762\u7684\u5143\u7d20\u90fd\u662f\u905e\u589e\u7684\uff0c\u7576\u9019\u884c\u6210\u7acb\uff0c\u4ee3\u8868  \u7684  \u6700\u5c0f\u8cea\u6578\uff0c  \u90fd\u662f  \u7684\u500d\u6578\uff0c\u90fd\u5df2\u7d93\u88ab  \u5254\u9664\uff08\u4f8b\u5982\uff1a  \u7684\u6700\u5c0f\u8cea\u56e0\u6578\u70ba  \uff0c  \u90fd\u662f  \u7684\u500d\u6578\uff0c\u4ed6\u5011\u6703\u88ab  \u5254\u9664\uff09\uff0c\u56e0\u6b64\u4e0d\u5fc5\u518d\u7be9\u4e0b\u53bb\u3002</p>"},{"location":"math/primeandfactor/#_5","title":"\u56e0\u6578","text":"<p>\u6211\u5011\u80fd\u5c07\u4efb\u610f\u4e00\u500b\u6b63\u6574\u6578\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u5f62\u5f0f\u70ba  \uff0c\u6839\u64da\u6b64\u5f62\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u6c42\u51fa\u4efb\u4e00\u6b63\u6574\u6578\u7684\u56e0\u6578\u500b\u6578\u53ca\u56e0\u6578\u7e3d\u548c</p> <ul> <li>\u56e0\u6578\u500b\u6578\uff1a  </li> <li>\u56e0\u6578\u7e3d\u548c\uff1a  </li> </ul>"},{"location":"math/primeandfactor/#_6","title":"\u6700\u5927\u516c\u56e0\u6578","text":"<p>\u6700\u5927\u516c\u56e0\u6578 (Greatest Common Divisor, GCD)\uff0c\u53ef\u4ee5\u7528\u8f3e\u8f49\u76f8\u9664\u6cd5\u6c42\u5f97\u3002</p> <pre><code>int GCD(int a, int b)\n{\nif (b == 0)\nreturn a;\nreturn GCD(b, a % b);\n}\n</code></pre> <p>\u8907\u96dc\u5ea6\u70ba  \uff0c\u6700\u6158\u72c0\u6cc1\u767c\u751f\u5728\u5169\u6578\u70ba\u8cbb\u5f0f\u6578\u5217\u76f8\u9130\u9805\u6642\uff0c <code>C++&lt;algorithm&gt;</code> \u6709\u5167\u5efa\u7684 <code>__gcd</code> \u53ef\u4ee5\u7528\u3002</p> <p>\u6700\u5c0f\u516c\u500d\u6578 (Least Common Multiple,LCM)\uff0c\u5247\u70ba\u5169\u6578\u76f8\u4e58\u518d\u9664\u4ee5\u4ed6\u5011\u7684 GCD\uff0c\u70ba\u907f\u514d\u6ea2\u4f4d\u72c0\u6cc1\uff0c\u53ef\u5148\u5c07\u4e00\u6578\u9664\u4ee5 GCD\uff0c\u518d\u4e58\u4ee5\u53e6\u5916\u4e00\u6578\u3002</p>"},{"location":"math/primeandfactor/#_7","title":"\u8cea\u56e0\u6578\u5206\u89e3","text":"\u8cea\u56e0\u6578\u5206\u89e3 <p>\u7d66\u5b9a\u4e00\u500b\u6578\u5b57  \uff0c\u8acb\u5217\u51fa\u4ed6\u7684\u6240\u6709\u8cea\u6578\u3002</p> <p>\u8cea\u56e0\u6578\u662f\u4e00\u9053\u5e38\u898b\u7684\u984c\u76ee\uff0c\u4ee5\u4e0b\u6709\u5e7e\u500b\u8981\u9ede\uff1a</p> <ul> <li>\u53ea\u8981\u679a\u8209\u6240\u6709  \u7684\u8cea\u6578\u3002</li> <li>  \u5728\u8cea\u56e0\u6578\u5206\u89e3\u7684\u904e\u7a0b\u4e2d\u6703\u4e00\u76f4\u88ab\u66f4\u65b0\uff0c\u7576\u627e\u5230  \u7684\u4e00\u500b\u8cea\u6578  \uff0c\u8acb\u5c07  \u9664\u4ee5  \u5f97\u5230\u65b0\u7684  \uff0c\u7e2e\u5c0f\u641c\u5c0b\u7bc4\u570d\uff0c\u82e5\u662f\u65b0\u7684  \u9084\u53ef\u88ab  \u6574\u9664\uff0c\u91cd\u8907\u4e0a\u8ff0\u52d5\u4f5c\uff0c\u76f4\u5230  \u7121\u6cd5\u88ab  \u6574\u9664\u3002</li> <li>\u6700\u5f8c\u518d\u6aa2\u67e5  \u662f\u5426\u70ba  \uff0c\u82e5\u4e0d\u662f\uff0c\u5247  \u4e5f\u662f\u8cea\u6578\u3002</li> </ul> <pre><code>void primeFactorization(int n)\n{\nfor (int i = 0; i &lt; (int)p.size(); ++i)\n{\nif (p[i] * p[i] &gt; n)\nbreak;\nif (n % p[i])\ncontinue;\ncout &lt;&lt; p[i] &lt;&lt; ' ';\nwhile (n % p[i] == 0)\n{\nn /= p[i];\n}\n}\nif (n != 1)\n{\ncout &lt;&lt; n &lt;&lt; ' ';\n}\ncout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"math/primeandfactor/#_8","title":"\u6b4c\u5fb7\u5df4\u8d6b\u731c\u60f3","text":"<ul> <li>\u5f37\u6b4c\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u4f55  \u7684\u5076\u6578\u90fd\u53ef\u4ee5\u5beb\u6210\u5169\u500b\u8cea\u6578\u7684\u548c\u3002</li> <li>\u5f31\u6b4c\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u4f55  \u7684\u5947\u6578\u90fd\u53ef\u4ee5\u5beb\u6210\u4e09\u500b\u8cea\u6578\u7684\u548c\u3002</li> </ul> UVa 00543 - Goldbach's Conjecture <p>\u628a\u5076\u6578  \u5beb\u6210\u5169\u500b\u8cea\u6578\u7684\u548c\u3002</p> <p>\u6b4c\u5fb7\u5df4\u8d6b\u731c\u60f3\u57fa\u672c\u7df4\u7fd2\uff0c\u5efa\u7acb\u8cea\u6578\u8868\uff0c\u5f9e\u982d\u958b\u59cb\u679a\u8209\u5947\u6578 \uff0c\u5224\u65b7  \u548c  \u662f\u5426\u7686\u70ba\u8cea\u6578\u3002</p> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n#define N 20000000\nint ox[N], p[N], pr;\n\nvoid PrimeTable(){\nox[0] = ox[1] = 1;\npr = 0;\nfor (int i = 2; i &lt; N; i++){\nif (!ox[i]) p[pr++] = i;\nfor (int j = 0;i*p[j]&lt;N&amp;&amp;j &lt; pr; j++)\nox[i*p[j]] = 1;\n}\n}\n\nint main(){\nPrimeTable();\nint n; while (cin&gt;&gt;n,n){\nint x;\nfor (x = 1;; x += 2)\nif (!ox[x] &amp;&amp; !ox[n - x])break;\nprintf(\"%d = %d + %d\\n\", n, x, n - x);\n}\n}\n</code></pre> CodeForces 735D - Taxes <p>\u7d66\u5b9a\u6574\u6578 \uff0c\u6c42  \u6700\u5c11\u53ef\u4ee5\u62c6\u6210\u591a\u5c11\u500b\u8cea\u6578\u7684\u548c\u3002</p> <ul> <li>\u5982\u679c  \u662f\u8cea\u6578\uff0c\u5247\u7b54\u6848\u70ba \u3002</li> <li>\u5982\u679c  \u662f\u5076\u6578(\u4e0d\u5305\u542b )\uff0c\u5247\u7b54\u6848\u70ba (\u5f37\u6b4c\u5fb7\u5df4\u8d6b\u731c\u60f3)\u3002</li> <li>\u5982\u679c  \u662f\u5947\u6578\u4e14  \u662f\u8cea\u6578\uff0c\u5247\u7b54\u6848\u70ba (2 + \u8cea\u6578)\u3002</li> <li>\u5176\u4ed6\u72c0\u6cc1\u7b54\u6848\u70ba (\u5f31\u6b4c\u5fb7\u5df4\u8d6b\u731c\u60f3)\u3002</li> </ul> \u53c3\u8003\u7a0b\u5f0f\u78bc <pre><code>#pragma GCC optimize(\"O2\")\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define FOR(i, L, R) for (int i = L; i &lt; (int)R; ++i)\n#define FORD(i, L, R) for (int i = L; i &gt; (int)R; --i)\n#define IOS                                                                    \\\n    cin.tie(nullptr);                                                          \\\n    cout.tie(nullptr);                                                         \\\n    ios_base::sync_with_stdio(false);\n\nbool isPrime(int n)\n{\nFOR(i, 2, n)\n{\nif (i * i &gt; n)\nreturn true;\nif (n % i == 0)\nreturn false;\n}\nreturn true;\n}\n\nint main()\n{\nIOS;\nint n;\ncin &gt;&gt; n;\nif (isPrime(n))\ncout &lt;&lt; \"1\\n\";\nelse if (n % 2 == 0 || isPrime(n - 2))\ncout &lt;&lt; \"2\\n\";\nelse\ncout &lt;&lt; \"3\\n\";\n}\n</code></pre>"},{"location":"math/primeandfactor/#_9","title":"\u4f8b\u984c\u7df4\u7fd2","text":"<ul> <li>\u8cea\u6578\u7be9\u6cd5<ul> <li>UVa 406 - Prime Cuts </li> <li>\u53ea\u8981\u5148\u6c42\u51fa\u6700\u5927\u6578\u7684\u5e73\u65b9\u6839\u5167\u7684\u8cea\u6578\uff1a UVa 10140 - Prime Distance </li> </ul> </li> <li>\u8cea\u56e0\u6578\u5206\u89e3<ul> <li>Zerojudge a010: \u56e0\u6578\u5206\u89e3 </li> </ul> </li> </ul>"},{"location":"syntax/algorithm/","title":"<code>algorithm</code> \u51fd\u5f0f\u5eab","text":"<p><code>C++</code> \u7684 <code>algorithm</code> \u51fd\u5f0f\u5eab\u63d0\u4f9b\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u5c24\u5176\u662f\u5340\u9593\uff08\u5e8f\u5217\u7684\u4e00\u6bb5\u7bc4\u570d\uff09\u64cd\u4f5c\uff0c\u5305\u542b\u6700\u5927\u6700\u5c0f\u503c\uff0c\u6392\u5e8f\u3002</p> \u5f15\u5165 <p><code>C++</code> : <code>algorithm</code> </p> <ul> <li><code>min</code> \uff1a\u53d6\u6700\u5c0f\u503c\u3002</li> <li><code>min(a, b)</code> </li> <li><code>min(list)</code> </li> <li><code>max</code> \uff1a\u53d6\u6700\u5927\u503c\u3002</li> <li><code>max(a, b)</code> </li> <li> <p><code>max(list)</code> </p> </li> <li> <p><code>min_element</code> \uff1a\u627e\u5c0b\u6700\u5c0f\u5143\u7d20</p> </li> <li><code>min_element(first, last)</code> </li> <li><code>max_element</code> \uff1a\u627e\u5c0b\u6700\u5927\u5143\u7d20</li> <li> <p><code>max_element(first, last)</code> </p> </li> <li> <p><code>sort</code> \uff1a\u6392\u5e8f\uff0c\u9810\u8a2d\u7531\u5c0f\u6392\u5230\u5927\u3002</p> </li> <li><code>sort(first, last)</code> </li> <li><code>sort(first, last, comp)</code> \uff1a\u53ef\u81ea\u884c\u5b9a\u7fa9\u6bd4\u8f03\u904b\u7b97\u5b50 <code>Comp</code> \u3002</li> <li><code>find</code> \uff1a\u5c0b\u627e\u5143\u7d20\u3002</li> <li><code>find(first, last, val)</code> </li> <li><code>lower_bound</code> \uff1a\u5c0b\u627e\u7b2c\u4e00\u500b  \u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5247\u56de\u50b3 <code>last</code> \u3002</li> <li><code>lower_bound(first, last, val)</code> </li> <li><code>upper_bound</code> \uff1a\u5c0b\u627e\u7b2c\u4e00\u500b  \u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5247\u56de\u50b3 <code>last</code> \u3002</li> <li><code>upper_bound(first, last, val)</code> </li> <li><code>next_permutation</code> \uff1a\u5c07\u5e8f\u5217\u9806\u5e8f\u8f49\u63db\u6210\u4e0b\u4e00\u500b\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u56de\u50b3 <code>true</code> \uff0c\u53cd\u4e4b\u56de\u50b3 <code>false</code> \u3002</li> <li><code>next_permutation(first, last)</code> </li> <li><code>prev_permutation</code> \uff1a\u5c07\u5e8f\u5217\u9806\u5e8f\u8f49\u63db\u6210\u4e0a\u4e00\u500b\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u56de\u50b3 <code>true</code> \uff0c\u53cd\u4e4b\u56de\u50b3 <code>false</code> \u3002</li> <li><code>prev_permutation(first, last)</code> </li> </ul>"},{"location":"syntax/algorithm/#_1","title":"\u7bc4\u4f8b","text":"<ul> <li>\u6700\u5c0f\uff08\u5927\uff09\u503c</li> </ul> <pre><code>int main()\n{\nprintf(\"Min(1,2): %d\\n\", min(1, 2));\nprintf(\"max(1,2): %d\\n\", max(1, 2));\nprintf(\"Min({2,7,5}): %d\\n\", min({2, 7, 5}));\nprintf(\"max({2,7,5}): %d\\n\", max({2, 7, 5}));\nvector&lt;int&gt; a = {4, 6, 9, 3};\nprintf(\"Min_element(a): %d\\n\", *min_element(a.begin(), a.end()));\nprintf(\"max_element(a): %d\\n\", *max_element(a.begin(), a.end()));\n}\n\n/*\nMin(1,2): 1\nmax(1,2): 2\nMin({2,7,5}): 2\nmax({2,7,5}): 7\nMin_element(a): 3\nmax_element(a): 9\n*/\n</code></pre> <ul> <li>\u6392\u5e8f\u5143\u7d20</li> </ul> <pre><code>int cmp(int a, int b) { return a &gt; b; }\n\nint main()\n{\nint arr[5] = {2, 9, 6, 5, 7};\nprintf(\"Before sorting:\\n\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nprintf(\"%d \", arr[i]);\n}\nprintf(\"\\n\");\nsort(arr, arr + 5);\nprintf(\"After sorting:\\n\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nprintf(\"%d \", arr[i]);\n}\nprintf(\"\\n\");\nsort(arr, arr + 5, cmp);\nprintf(\"After sorting with user-defined function:\\n\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nprintf(\"%d \", arr[i]);\n}\nprintf(\"\\n\");\n}\n\n/*\nBefore sorting:\n2 9 6 5 7\nAfter sorting:\n2 5 6 7 9\nAfter sorting with user-defined function:\n9 7 6 5 2\n*/\n</code></pre> <ul> <li>\u5c0b\u627e\u5143\u7d20</li> </ul> <pre><code>int main()\n{\nvector&lt;int&gt; a = {4, 6, 9, 3};\nfor (int i = 0; i &lt; 5; ++i)\n{\nif (find(a.begin(), a.end(), i) != a.end())\n{\nprintf(\"%d is find at %d\\n\", i,\n(int)(find(a.begin(), a.end(), i) - a.begin()));\n}\n}\nsort(a.begin(), a.end());\nprintf(\"The lower_bound of %d is at %d\\n\", 5,\n(int)(lower_bound(a.begin(), a.end(), 5) - a.begin()));\nprintf(\"The upper_bound of %d is at %d\\n\", 5,\n(int)(upper_bound(a.begin(), a.end(), 5) - a.begin()));\n}\n\n/*\n3 is find at 3\n4 is find at 0\nThe lower_bound of 5 is at 2\nThe upper_bound of 5 is at 2\n*/\n</code></pre> <ul> <li>\u4e0b\uff08\u4e0a\uff09\u4e00\u500b\u5b57\u5178\u5e8f</li> </ul> <pre><code>int main()\n{\nvector&lt;int&gt; a1 = {4, 2, 7, 5};\nvector&lt;int&gt; a2(a1);\nif (next_permutation(a1.begin(), a1.end()))\n{\nfor (int i = 0; i &lt; (int)a1.size(); ++i)\n{\nprintf(\"%d%c\", a1[i], \" \\n\"[i == (int)a1.size() - 1]);\n}\n}\nif (prev_permutation(a2.begin(), a2.end()))\n{\nfor (int i = 0; i &lt; (int)a2.size(); ++i)\n{\nprintf(\"%d%c\", a2[i], \" \\n\"[i == (int)a2.size() - 1]);\n}\n}\n}\n\n/*\n4 5 2 7\n4 2 5 7\n*/\n</code></pre> <ol> <li> <p>algoruthm \u51fd\u5f0f\u5eab in cplusplus \u21a9</p> </li> </ol>"},{"location":"syntax/array/","title":"\u9663\u5217 (Array)","text":"<p>\u8003\u616e\u4ee5\u4e0b\u60c5\u6cc1\uff1a\u9700\u8981\u5ba3\u544a\u5b58\u653e  \u9846\u6a39\u7684\u9ad8\u5ea6\uff0c\u4e00\u7a2e\u65b9\u5f0f\u70ba\u5ba3\u544a  \u500b\u8b8a\u6578\uff0c\u9019\u7a2e\u65b9 <code>C/C++</code> \u652f\u63f4\u9663\u5217\uff0c\u53ef\u4ee5\u5c07\u540c\u6027\u8cea\u7684\u8b8a\u6578\uff0c\u5229\u7528\u7d22\u5f15\u503c\u9032\u884c\u5b58\u53d6\u3002</p>"},{"location":"syntax/array/#_1","title":"\u5ba3\u544a\u548c\u521d\u59cb\u5316","text":"<p>\u5ba3\u544a\u8a9e\u6cd5\u70ba <code>type var[size]</code> </p> <ul> <li>type\uff1a\u8cc7\u6599\u7684\u578b\u614b\uff0c\u53ef\u70ba <code>C/C++</code> \u63d0\u4f9b\u7684 \u57fa\u790e\u8cc7\u6599\u578b\u614b \u6216\u662f \u81ea\u5b9a\u7fa9\u7684\u7d50\u69cb \u3002</li> <li>var\uff1a\u8b8a\u6578\u540d\u7a31</li> <li>size\uff1a\u9663\u5217\u5927\u5c0f\uff0c\u5fc5\u9808\u662f\u6578\u5b57\u6216\u5e38\u6578\uff08 <code>C++</code> \u7684 <code>const</code> )\uff0c\u4e0d\u53ef\u662f\u8b8a\u6578\uff0c\u5426\u5247\u6703\u5728\u57f7\u884c\u6642\u767c\u751f\u932f\u8aa4\u3002</li> </ul> <p>\u5728\u5ba3\u544a\u6642\u671f\uff0c\u9663\u5217\u5167\u7684\u5143\u7d20\u662f\u672a\u88ab\u521d\u59cb\u5316\u7684\uff0c\u5728\u5ba3\u544a\u7684\u968e\u6bb5\uff0c\u53ef\u4ee5\u5229\u7528 <code>initializer_list</code> \u521d\u59cb\u5316\uff0c <code>initializer_list</code> \u7684\u683c\u5f0f\u70ba <code>{val1, val2, val3, ...}</code> \u3002\u4f7f\u7528\u9019\u7a2e\u65b9\u5f0f\uff0c\u4e00\u958b\u59cb\u6240\u6709\u5143\u7d20\u7684\u503c\u90fd\u6703\u5148\u8a2d\u70ba  \uff0c\u518d\u5c07 <code>initializer_list</code> \u7684\u503c\u4f9d\u5e8f\u653e\u5165\u9663\u5217\uff0c <code>initializer_list</code> \u7684\u5143\u7d20\u53ef\u4ee5\u5c0f\u65bc\u9663\u5217\u9577\u5ea6\uff0c\u672a\u88ab\u66f4\u52d5\u7684\u5143\u7d20\u6703\u4fdd\u6301\u70ba  \u3002 <code>initializer_list</code> \u53ea\u53ef\u4ee5\u7528\u5728\u5ba3\u544a\u6642\uff0c\u4e0d\u53ef\u5728\u5ba3\u544a\u5f8c\u4f7f\u7528\uff1a</p> <pre><code>const int SIZE = 100;\nint num;\nint arr1[100];            // OK\nint arr2[SIZE];           // OK\nint arr3[num];            // \u932f\u8aa4\uff0c\u4e0d\u53ef\u4f7f\u7528\u8b8a\u6578\u8a2d\u5b9a\u5927\u5c0f\u3002\nint arr4[10] = {1, 2, 3}; // \u4f7f\u7528 initializer_list\u3002\narr1 = {1, 2, 3}; // \u932f\u8aa4\uff0c\u53ea\u53ef\u5728\u5ba3\u544a\u6642\u4f7f\u7528 initializer_list\u3002\n</code></pre>"},{"location":"syntax/array/#_2","title":"\u5b58\u53d6","text":"<p>\u9663\u5217\u5b58\u53d6\u9808\u5229\u7528\u4e0b\u6a19\u904b\u7b97\u5b50 <code>[]</code> \uff0c <code>[]</code> \u9700\u653e\u7d22\u5f15\u503c\uff08Index)\uff0c\u7d22\u5f15\u503c\u70ba\u6574\u6578\uff0c\u5f9e  \u958b\u59cb\uff0c\u4e00\u500b\u9577\u5ea6\u70ba  \u7684\u9663\u5217\uff0c\u5b83\u7684\u7d22\u5f15\u503c\u662f\u5f9e  \u5230  (  )\u3002\u5982\u679c\u7d22\u5f15\u503c\u8d85\u904e\u7bc4\u570d\uff0c\u6703\u767c\u751f\u932f\u8aa4\u6216\u610f\u60f3\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\u8a18\u61b6\u9ad4\u5340\u6bb5\u932f\u8aa4 (Segmentation fault)\uff0c\u4fee\u6539\u5230\u5176\u4ed6\u8b8a\u6578\u3002</p> <pre><code>int arr[100];\nfor (int i = 0; i &lt; 100; ++i)\n{\narr[i] = i;\n}\n</code></pre>"},{"location":"syntax/array/#_3","title":"\u591a\u7dad\u9663\u5217","text":"<p><code>C/C++</code> \u652f\u6301\u591a\u7dad\u9663\u5217\uff0c\u5373\u9663\u5217\u88e1\u6709\u9663\u5217\uff0c\u4ee5\u4e8c\u7dad\u9663\u5217\u70ba\u4f8b\uff1a</p> <pre><code>int arr[10][10];             // \u5ba3\u544a\nfor (int i = 0; i &lt; 10; ++i) // i \u4ee3\u8868\u7b2c\u4e00\u7dad\u7684\u7d22\u5f15\u503c\n{\nfor (int j = 0; j &lt; 10; ++j) // j \u4ee3\u8868\u7b2c\u4e8c\u7dad\u7684\u7d22\u5f15\u503c\n{\narr[i][j] = i * 10 + j;\n}\n}\n</code></pre>"},{"location":"syntax/array/#_4","title":"\u9663\u5217\u5e38\u898b\u554f\u984c\uff1a\u8a18\u61b6\u9ad4\u904e\u5927","text":"<p><code>C/C++</code> \u6703\u9047\u5230\u9663\u5217\u958b\u5728 <code>main</code> \u88e1\u9762\u8a18\u61b6\u9ad4\u6703\u904e\u5927\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u7121\u6cd5\u60c5\u5f62\uff0c\u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u89e3\u6c7a\uff1a</p> <ul> <li>\u5c07\u9663\u5217\u958b\u5728\u5168\u57df</li> <li>\u5728\u8b8a\u6578\u524d\u52a0\u5165 <code>static</code> \u95dc\u9375\u5b57</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint arr1[100000]; // OK\uff0c\u958b\u5728\u5168\u57df\n\nint main()\n{\nint arr2[100000];        // \u932f\u8aa4\uff0c\u8a18\u61b6\u9ad4\u904e\u5927\nstatic int arr3[100000]; // OK\uff0c\u52a0\u4e0a static \u95dc\u9375\u5b57\n}\n</code></pre>"},{"location":"syntax/cctype/","title":"<code>cctype</code> \u51fd\u5f0f\u5eab","text":"<p><code>cctype</code> \u51fd\u5f0f\u5eab\u662f <code>C</code> \u7684\u51fd\u5f0f\u5eab\uff0c\u4e3b\u8981\u662f\u7528\u4f86\u5224\u65b7\u5b57\u5143\u7a2e\u985e\u548c\u8f49\u63db\u5b57\u5143\uff0c\u4ee5\u4e0b\u6558\u8ff0\u70ba\u7af6\u8cfd\u5e38\u7528\u7684\u51fd\u5f0f\uff1a</p> \u5f15\u5165 <ul> <li><code>C</code>: <code>ctype.h</code></li> <li><code>C++</code>: <code>cctype</code></li> </ul> <ul> <li><code>isalnum</code> : \u5224\u65b7\u662f\u5426\u70ba\u6578\u5b57\u6216\u82f1\u6587\u3002</li> <li><code>isalnum(int c)</code> </li> <li><code>isalpha</code> : \u5224\u65b7\u662f\u5426\u70ba\u82f1\u6587\u3002</li> <li><code>isalpha(int c)</code> </li> <li><code>isdigit</code> : \u5224\u65b7\u662f\u5426\u70ba\u6578\u5b57\u3002</li> <li><code>isdigit(int c)</code> </li> <li><code>islower</code> : \u5224\u65b7\u662f\u5426\u70ba\u5c0f\u5beb\u5b57\u6bcd\u3002</li> <li><code>islower(int c)</code> </li> <li><code>isupper</code> : \u5224\u65b7\u662f\u5426\u70ba\u5927\u5beb\u5b57\u6bcd\u3002</li> <li><code>isupper(int c)</code> </li> <li><code>tolower</code> : \u5c07\u5b57\u6bcd\u8f49\u4e58\u5c0f\u5beb\u5b57\u6bcd</li> <li><code>islower(int c)</code> </li> <li><code>toupper</code> : \u5c07\u5b57\u6bcd\u8f49\u4e58\u5927\u5beb\u5b57\u6bcd</li> <li><code>toupper(int c)</code> </li> </ul>"},{"location":"syntax/cctype/#_1","title":"\u5be6\u4f8b","text":"<ul> <li>\u5c07\u6240\u6709\u82f1\u6587\u5b57\u6bcd\u8f49\u6210\u5c0f\u5beb\u5b57\u6bcd\u5f8c\u8f38\u51fa</li> </ul> <pre><code>char str[] = \"Cats Like Chatching The Mouses.\";\nfor (int i = 0; i != (int)strlen(str); ++i)\n{\nif (isalpha(str[i]))\n{\nstr[i] = tolower(str[i]);\n}\n}\nprintf(\"%s\\n\", str);\n\n/*\ncats like chatching the mouses.\n*/\n</code></pre> <ol> <li> <p>cctype \u51fd\u5f0f\u5eab in cplusplus \u21a9</p> </li> </ol>"},{"location":"syntax/conditionandloop/","title":"\u689d\u4ef6\u5224\u65b7 (Condition) \u8207\u8ff4\u5708 (Loop)","text":""},{"location":"syntax/conditionandloop/#if","title":"<code>if</code> \u689d\u4ef6\u5224\u65b7","text":"<p>\u70ba\u4e86\u61c9\u4ed8\u4e0d\u540c\u689d\u4ef6\u4e0b\u80fd\u505a\u51fa\u4e0d\u540c\u6307\u4ee4\uff0c <code>C/C++</code> \u63d0\u4f9b\u4e86 <code>if</code> \u689d\u4ef6\u53e5\u5224\u65b7\u3002</p> <p>\u689d\u4ef6\u53e5\u9700\u8981\u4f7f\u7528\u689d\u4ef6\u904b\u7b97\u5b50\uff0c\u689d\u4ef6\u53e5\u6709\u5169\u7a2e\u7d50\u679c\uff0cTrue (1) \u548c False (0)\u3002\u7576 <code>if</code> \u689d\u4ef6\u53e5\u7b26\u5408\u6642\uff0c\u6703\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\uff0c\u5426\u5247\u6703\u7121\u8996\u9673\u8ff0\u53e5\uff0c\u57f7\u884c\u4e4b\u5f8c\u7684\u7a0b\u5f0f\u78bc\u3002\u9673\u8ff0\u53e5\u70ba\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u53ef\u6709  \u5230\u591a\u53e5\uff0c\u7528 <code>{}</code> \u5305\u8d77\u4f86\uff0c\u53ea\u6709  \u53e5\u6642\u53ef\u7701\u7565\uff0c\u4f46\u70ba\u7dad\u8b77\u53ca\u53ef\u8b80\u6027\uff0c\u5efa\u8b70\u4e0d\u8981\u7701\u7565\uff0c</p> <p>\u5982\u679c\u6709\u5169\u7a2e\uff08\u542b\uff09\u4ee5\u4e0a\u7684\u689d\u4ef6\uff0c\u53ef\u4f7f\u7528\u8907\u5408\u9673\u8ff0\u53e5\uff0c\u7576 <code>if</code> \u689d\u4ef6\u4e0d\u7b26\u5408\u6642\uff0c\u6703\u57f7\u884c <code>else if</code> \uff0c\u5982\u679c <code>else if</code> \u518d\u4e0d\u7b26\u5408\uff0c\u6703\u518d\u57f7\u884c\u4e0b\u4e00\u500b <code>else if</code> \uff0c\u76f4\u5230\u9047\u5230\u7b26\u5408\u7684\u689d\u4ef6\u53e5\uff0c\u5c31\u6703\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\uff0c\u5982\u679c\u57f7\u884c\u5230 <code>else</code> \u5247\u6703\u7121\u689d\u4ef6\u7684\u57f7\u884c\u5c0d\u61c9\u7684\u9673\u8ff0\u53e5\u3002\u5728\u8907\u5408\u9673\u8ff0\u53e5\u4e2d\uff0c\u53ef\u4ee5\u6709  \u5230\u591a\u500b <code>else if</code> \uff0c\u4ee5\u53ca  \u6216  \u500b <code>else</code> \u3002</p> <p><code>if</code> \u689d\u4ef6\u5224\u65b7\u652f\u6301\u5de2\u72c0\u7d50\u69cb\uff0c\u610f\u601d\u70ba\u53ef\u4ee5\u5728 <code>if</code> \u689d\u4ef6\u5224\u65b7\u88e1\u9762\u653e <code>if</code> \u689d\u4ef6\u5224\u65b7\u3002</p> <pre><code>// \u57fa\u672c\u8a9e\u6cd5\nif (\u689d\u4ef6_1)\n{\n\u9673\u8ff0_1;\n}\n\n// \u8907\u5408\u9673\u8ff0\u53e5\nif (\u689d\u4ef6_1)\n{\n\u9673\u8ff0_1;\n}\nelse if (\u689d\u4ef6_2)\n{\n\u9673\u8ff0_2;\n}\n... else if (\u689d\u4ef6_(n - 1)) { \u9673\u8ff0_(n - 1); }\nelse { \u9673\u8ff0n; }\n\n// \u5de2\u72c0 if\nif (\u689d\u4ef6_1)\n{\nif (\u689d\u4ef6_a)\n{\n\u9673\u8ff0_a;\n}\n}\n\n// \u7bc4\u4f8b\uff0c\u5224\u65b7 i \u662f\u5426\u70ba\u5947\u6578\nscanf(\"%d\", &amp;i);\nif (i % 2 == 0)\n{\nprintf(\"%d is odd\\n\", i);\n}\nelse\n{\nprintf(\"%d is even\\n\", i);\n}\n</code></pre> <p><code>if</code> \u689d\u4ef6\u5224\u65b7\u53ea\u80fd\u57f7\u884c\u55ae\u6b21\uff0c\u5982\u8981\u91cd\u8907\u57f7\u884c\uff0c\u9700\u4f7f\u7528\u8ff4\u5708\uff0c\u8ff4\u5708\u6709\u5169\u7a2e\uff1a <code>while</code> \u548c <code>for</code> \u3002</p>"},{"location":"syntax/conditionandloop/#while","title":"<code>while</code> \u8ff4\u5708","text":"<p><code>while</code> \u8ff4\u5708\u7528\u5728\u7d42\u6b62\u689d\u4ef6\u672a\u77e5\u7684\u60c5\u6cc1\u4e0b\u3002</p> <p>\u57f7\u884c\u9806\u5e8f\u70ba\uff1a <code>\u689d\u4ef6\u90e8</code> \uff08\u7b26\u5408\uff09-&gt; <code>\u9673\u6558</code> -&gt; <code>\u689d\u4ef6\u90e8</code> \uff08\u7b26\u5408\uff09-&gt; <code>\u9673\u6558</code> -&gt;...-&gt; <code>\u689d\u4ef6\u90e8</code> \uff08\u7b26\u5408\uff09-&gt; <code>\u9673\u6558</code> -&gt; <code>\u689d\u4ef6\u90e8</code> \uff08\u4e0d\u7b26\u5408\uff09-&gt; \u8df3\u51fa\u3002</p> <p>\u7576\u689d\u4ef6\u90e8\u7684\u689d\u4ef6\u7b26\u5408\uff0c\u624d\u6703\u57f7\u884c\u9673\u6558\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u53ea\u6709\u7576\u689d\u4ef6\u90e8\u7684\u689d\u4ef6\u4e0d\u7b26\u5408\uff0c\u9019\u500b\u8ff4\u5708\u624d\u6703\u7d42\u6b62\u3002</p> <p>\u6709\u500b\u548c <code>while</code> \u8ff4\u5708\u76f8\u4f3c\u7684\u8ff4\u5708\u53eb\u505a <code>do-while</code> \u8ff4\u5708\uff0c\u5dee\u5225\u5728\u65bc <code>do-while</code> \u6703\u5148\u57f7\u884c\u9673\u6558\uff0c\u518d\u5224\u65b7\u662f\u5426\u8981\u96e2\u958b\u8ff4\u5708\u3002</p> <pre><code>// while \u8a9e\u6cd5\nwhile (\u689d\u4ef6\u90e8)\n{\n\u9673\u6558;\n}\n\n// \u7bc4\u4f8b\uff0c1 \u5230 100 \u7684\u7e3d\u548c\nint i = 1, ans = 0;\nwhile (i &lt;= 100)\n{\nans += 1;\ni += 1;\n}\n\n// do-while \u8a9e\u6cd5\ndo\n{\n\u9673\u6558;\n} while (\u689d\u4ef6\u90e8); // &lt;- \u9019\u88e1\u6709\u5206\u865f\uff0c\u8981\u6ce8\u610f\n</code></pre> <p>\u689d\u4ef6\u90e8\u53ef\u642d\u914d\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u6ce8\u610f\u4f7f\u7528\u524d\u7db4\u548c\u5f8c\u7db4\u3002</p> <pre><code>#include &lt;iostream&gt;\n\nint main()\n{\nint n = 5, m = 5;\nprintf(\"prefix:\");\nwhile (--n)\n{\nprintf(\" %d\", n);\n}\nprintf(\"\\n\");\n\nprintf(\"postfix:\");\nwhile (m--)\n{\nprintf(\" %d\", m);\n}\nprintf(\"\\n\");\n}\n\n/*\nprefix: 4 3 2 1\npostfix: 4 3 2 1 0\n*/\n</code></pre>"},{"location":"syntax/conditionandloop/#for","title":"<code>for</code> \u8ff4\u5708","text":"<p><code>for</code> \u8ff4\u5708\u7528\u5728\u7d42\u6b62\u689d\u4ef6\u5df2\u77e5\u7684\u60c5\u6cc1\u4e0b\uff0c\u6703\u8a2d\u7acb\u4e00\u500b\u63a7\u5236\u8b8a\u6578 (Control Variable) \u4f86\u63a7\u5236\u8ff4\u5708\u57f7\u884c\u7684\u6b21\u6578\u3002</p> <p><code>for</code> \u8ff4\u5708\u5206\u6210\u521d\u59cb\u90e8\u3001\u689d\u4ef6\u90e8\u3001\u66f4\u65b0\u90e8\u4e09\u90e8\u5206</p> <ul> <li> <p>\u521d\u59cb\u90e8\u3001\u689d\u4ef6\u90e8\u3001\u66f4\u65b0\u90e8\u9019\u4e09\u90e8\u5206\u7686\u53ef\u7701\u7565\u3002</p> </li> <li> <p>\u521d\u59cb\u90e8\uff1a\u7528\u4f86\u5ba3\u544a\u548c\u521d\u59cb\u5316\u63a7\u5236\u8b8a\u6578\uff08 <code>C99</code> \u524d\u4e0d\u80fd\u5ba3\u544a\uff09\uff0c\u8b8a\u6578\u5ba3\u544a\u53ea\u80fd\u662f\u540c\u7a2e\u5f62\u614b\uff0c\u5982\u679c\u6709\u5169\u7a2e\uff08\u542b\uff09\u4ee5\u4e0a\u7684\u5f62\u614b\u8981\u5ba3\u544a\uff0c\u5176\u4e2d\u4e00\u7a2e\u8981\u5ba3\u544a\u5916\u90e8\u3002</p> </li> <li> <p>\u689d\u4ef6\u90e8\uff1a\u5224\u65b7\u662f\u5426\u8981\u7e7c\u7e8c\u8ff4\u5708\uff0c\u540c <code>while</code> \u8ff4\u5708\u7684\u689d\u4ef6\u90e8\u3002</p> </li> <li> <p>\u66f4\u65b0\u90e8\uff1a\u66f4\u65b0\u63a7\u5236\u8b8a\u6578\uff0c\u66f4\u65b0\u90e8\u7684\u503c\u5982\u679c\u662f\u8981 <code>+1</code> \u6216 <code>-1</code> \uff0c\u901a\u5e38\u6703\u4f7f\u7528\u905e\u589e\u904b\u7b97\u5b50\u3002</p> </li> <li> <p>\u524d\u7db4\u5f8c\u7db4\u904b\u7b97\u5b50\uff0c\u5728\u66f4\u65b0\u90e8\u6548\u679c\u76f8\u540c\u3002\u5728\u8ffd\u6c42\u6548\u7387\u7684\u7a0b\u5f0f\u7af6\u8cfd\uff0c\u6703\u4f7f\u7528\u524d\u7db4\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u56e0\u70ba\u524d\u7db4\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50\uff0c\u53ea\u6703\u6539\u8b8a\u6578\u7684\u503c\uff0c\u800c\u5f8c\u7db4\u904b\u7b97\u5b50\uff0c\u6703\u5148\u8907\u88fd\u4e00\u500b\u8b8a\u6578\u7528\u65bc\u56de\u50b3\uff0c\u518d\u6539\u8b8a\u6578\u7684\u503c\uff0c\u6548\u7387\u6703\u4f4e\u65bc\u524d\u7db4\u904b\u7b97\u5b50\u3002</p> </li> <li> <p><code>for</code> \u8ff4\u5708\u57f7\u884c\u9806\u5e8f\uff1a <code>\u521d\u59cb\u90e8</code> -&gt; <code>\u689d\u4ef6\u90e8</code> \uff08\u7b26\u5408\uff09-&gt; <code>\u9673\u6558</code> -&gt; <code>\u66f4\u65b0\u90e8</code> -&gt; <code>\u689d\u4ef6\u90e8</code> \uff08\u7b26\u5408\u689d\u4ef6\uff09-&gt; <code>\u9673\u6558</code> -&gt; <code>\u66f4\u65b0\u90e8</code> -&gt;... <code>\u689d\u4ef6\u90e8</code> \uff08\u7b26\u5408\uff09-&gt; <code>\u9673\u6558</code> -&gt; <code>\u66f4\u65b0\u90e8</code> -&gt; <code>\u689d\u4ef6\u90e8</code> \uff08\u4e0d\u7b26\u5408\uff09-&gt; \u8df3\u51fa\u3002</p> </li> </ul> <pre><code>// for \u8a9e\u6cd5\nfor (\u521d\u59cb\u90e8; \u689d\u4ef6\u90e8; \u66f4\u65b0\u90e8)\n{\n\u9673\u6558;\n}\n\n// \u7bc4\u4f8b\uff0c1 \u5230 100 \u7684\u7e3d\u548c\nint ans = 0;\nfor (int i = 1; i &lt;= 100; ++i)\n{\nans += 1;\n}\n</code></pre> <p><code>while</code> \u548c <code>for</code> \u5169\u7a2e\u5beb\u6cd5\u53ef\u4ee5\u8f49\u63db\uff0c\u7686\u652f\u6301\u5de2\u72c0\u7d50\u69cb\uff0c\u53ef\u4ee5\u548c <code>if</code> \u642d\u914d\u3002</p> <pre><code>// 0~100 \u4e2d\u7684\u5947\u6578\u548c\nint sum = 0;\nfor (int i = 0; i &lt;= 100; i += 1)\n{\nif (i % 2 != 0)\n{\nsum += i;\n}\n}\n</code></pre>"},{"location":"syntax/conditionandloop/#break-continue","title":"<code>break</code> \u548c <code>continue</code>","text":"<ul> <li><code>break</code> \uff1a\u8df3\u51fa\u8ff4\u5708\u3002</li> <li><code>continue</code> \uff1a\u76f4\u63a5\u7e7c\u7e8c\u4e0b\u4e00\u6b21\u8ff4\u5708\u57f7\u884c\uff0c\u8df3\u904e\u9019\u6b21\u8ff4\u5708\u5f8c\u7e8c\u7684\u7a0b\u5f0f\u78bc\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n\nint main()\n{\nprintf(\"break:\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nif (i == 2)\n{\nbreak;\n}\nprintf(\" %d\", i);\n}\nprintf(\"\\n\");\n\nprintf(\"continue:\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nif (i == 2)\n{\ncontinue;\n}\nprintf(\" %d\", i);\n}\nprintf(\"\\n\");\n}\n\n/*\nbreak: 0 1\ncontinue: 0 1 3 4\n*/\n</code></pre>"},{"location":"syntax/conditionandloop/#_1","title":"\u5e38\u898b\u7684\u8f38\u5165\u689d\u4ef6","text":"<p>\u6bd4\u8cfd\u4e2d\u6703\u6709\u4e00\u4e9b\u8f38\u5165\u689d\u4ef6\uff0c\u5e38\u898b\u6709 EOF \u7248\u3001  \u884c\u7248\u3001X \u5c3e\u7248\uff0c\u4ee5\u4e0b\u4e00\u4e00\u4ecb\u7d39\u3002</p>"},{"location":"syntax/conditionandloop/#t","title":"\u884c\u7248","text":"<p>\u9019\u7a2e\u984c\u76ee\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>\u7b2c\u4e00\u884c\u7d66\u4e00\u500b\u6578\u5b57 T\uff0c\u4ee3\u8868\u6709 T \u7b46\u6e2c\u8cc7...\n</code></pre> <p>\u7528 <code>while</code> \u548c <code>for</code> \u8ff4\u5708\u53ef\u4ee5\u9019\u6a23\u5beb\uff1a</p> <pre><code>int T;\ncin &gt;&gt; T;\nwhile (T--)\n{\n}\nfor (int i = 0; i &lt; T; ++i)\n{\n}\n</code></pre>"},{"location":"syntax/conditionandloop/#eof","title":"EOF \u7248","text":"<p>\u9019\u7a2e\u984c\u76ee\u901a\u5e38\u6c92\u6709\u660e\u78ba\u7684\u7d42\u6b62\u689d\u4ef6\uff0c\u6216\u662f\u76f4\u63a5\u544a\u8a34\u4f60\u300c\u4ee5 EOF \u7d50\u5c3e\u300d\u3002</p> <p>\u6a94\u6848\u7d50\u5c3e (End of File, EOF)\uff0c\u662f\u6307\u4f5c\u696d\u7cfb\u7d71\u7121\u6cd5\u5f9e\u8cc7\u6599\u4f86\u6e90\u8b80\u53d6\u66f4\u591a\u8cc7\u6599\u7684\u60c5\u5f62\uff0c\u4e5f\u5c31\u662f\u4e00\u500b\u7a0b\u5f0f\u8b80\u8cc7\u6599\u8b80\u5230\u6a94\u5c3e\uff0c\u7a0b\u5f0f\u9047\u5230\u6a94\u5c3e\u6703\u56de\u50b3\u503c\uff0c\u4e0b\u5217\u5217\u51fa\u5e38\u7528\u8f38\u5165\u51fd\u5f0f\uff08\u51fd\u5f0f\u8acb\u53c3\u8003 \u51fd\u5f0f\u8207\u905e\u8ff4\u7ae0\u7bc0 )\uff1a</p> \u5982\u4f55\u6a21\u64ec EOF <ul> <li>\u5728 windows \u7684\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u6309 <code>Crtl + Z</code> </li> <li>\u985e Linux \u7cfb\u7d71\u6309 <code>Crtl + D</code> </li> <li>\u4e5f\u53ef\u4ee5\u7528 command line \u7de8\u8b6f\u7a0b\u5f0f\uff0c\u91cd\u65b0\u5c0e\u5411\u8f38\u5165\u8f38\u51fa</li> </ul> <p>\u7576\u8b80\u5230\u6a94\u5c3e\u6642\uff0c <code>scanf</code> \u6703\u56de\u50b3 <code>-1</code> \uff0c\u5229\u7528 <code>scanf</code> \u7684\u56de\u50b3\u503c\u5224\u65b7\u662f\u5426\u7368\u5230\u6a94\u5c3e\u3002</p> \u932f\u8aa4\u89c0\u5ff5 <ul> <li>\u932f\u8aa4\uff1a\u8b80\u4e0d\u5230\u6578\u5b57\u6703\u8b8a\u6210 -1</li> <li>\u6b63\u78ba\uff1a\u8b80\u4e0d\u5230 <code>scanf()</code> \u6703\u56de\u50b3 -1\uff0c\u4e5f\u53ea\u6709 C \u7684 <code>scanf</code> \u6703\u56de\u50b3 -1</li> </ul> <p><code>cin</code> \u6709\u5169\u7a2e\u5beb\u6cd5\uff0c\u4e00\u7a2e\u662f\u5229\u7528\u51fd\u5f0f <code>eof</code> \u5224\u65b7\u662f\u5426\u9084\u6709\u8cc7\u6599\u8f38\u5165\u3002\u7b2c\u4e8c\u7a2e\u662f\u5229\u7528 <code>cin</code> \u7684\u56de\u50b3\u503c\uff0c\u7576\u8b80\u5230\u6a94\u5c3e\u6642\uff0c <code>cin</code> \u6703\u56de\u50b3\u7a7a\u7269\u4ef6\u3002\u7a7a\u7269\u4ef6\u5728 <code>C++</code> \u8f49\u63db\u6210 <code>bool</code> \u503c\u6703\u662f <code>false</code> \uff0c\u53ef\u5c07\u7d50\u679c\u8f49\u63db\u81f3 <code>bool</code> \u503c\u5728\u5224\u65b7\uff0c\u5728\u689d\u4ef6\u53e5\u88e1\u9762\uff0c\u6240\u6709\u56de\u50b3\u503c\u90fd\u6703\u8b8a\u6210 <code>bool</code> \u503c\uff0c\u4e0d\u7528\u7279\u5225\u8f49\u63db\u3002</p> <pre><code>int x;\n// scanf\nwhile (scanf(\"%d\", &amp;x) != -1)\n{\n}\n// `EOF` \u662f `C/C++` \u8a9e\u8a00\u7684\u4e00\u500b\u5e38\u6578\uff0c\u70ba `-1` \uff0c\u53ef\u4ee5\u7528 `EOF` \u4ee3\u66ff `-1`\n// \uff0c\u589e\u52a0\u53ef\u8b80\u6027\u3002\nwhile (scanf(\"%d\", &amp;x) != EOF)\n{\n}\n\n// cin\nwhile (cin.eof())\n{\ncin &gt;&gt; x;\n}\nwhile ((bool)cin &gt;&gt; x)\n{\n}\nwhile (cin &gt;&gt; x)\n{\n}\n</code></pre> <p>\u53e6\u5916\u9644\u4e0a <code>JAVA</code> \u548c <code>python</code> \u7684 EOF \u5beb\u6cd5\uff1a</p> <pre><code>Scanner sc = new Scanner(System.in);\nwhile(sc.hasNext())\n</code></pre> <pre><code>import sys\n\nfor s in sys.stdin:\n</code></pre>"},{"location":"syntax/conditionandloop/#x","title":"<code>X</code> \u5c3e\u7248","text":"<pre><code>... \u6700\u5f8c\u8f38\u5165 X \u7d50\u675f\u3002\n</code></pre> <p>X \u53ef\u4ee5\u662f\u4efb\u610f\u578b\u614b\u7684\u4efb\u610f\u503c\uff0c\u4f8b\u5982\u6578\u5b57\u7684 <code>-1</code> \uff0c\u5b57\u5143\u7684 <code>e</code> \u3002</p> <p>\u9019\u7a2e\u8f38\u5165\u6709\u5169\u7a2e\u5beb\u6cd5\uff0c\u4e00\u7a2e\u662f\u4f7f\u7528 <code>break</code> \uff0c\u53e6\u4e00\u7a2e\u662f\u4f7f\u7528 <code>C++</code> \u7684\u9017\u865f\u904b\u7b97\u5b50\u3002</p> <pre><code>int x;\n// \u4f7f\u7528 break\nwhile (scanf(\"%d\", &amp;x))\n{\nif (x == -1)\n{\nbreak;\n}\n}\nwhile (cin &gt;&gt; x)\n{\nif (x == -1)\n{\nbreak;\n}\n}\n\n// \u4f7f\u7528 C++ \u7684\u9017\u865f\u904b\u7b97\u5b50\nwhile (scanf(\"%d\", &amp;x), x != -1)\n{\n}\nwhile (cin &gt;&gt; x, x != -1)\n{\n}\n</code></pre>"},{"location":"syntax/cstring/","title":"<code>cstring</code> \u51fd\u5f0f\u5eab","text":"<p><code>cstring</code> \u51fd\u5f0f\u5eab\u662f <code>C</code> \u7684\u51fd\u5f0f\u5eab\uff0c\u5b9a\u7fa9\u64cd\u4f5c\u9663\u5217\u7684\u51fd\u5f0f\u5eab\uff0c\u4ee5\u4e0b\u6558\u8ff0\u70ba\u7af6\u8cfd\u5e38\u7528\u7684\u51fd\u5f0f\uff1a</p> \u5f15\u5165 <ul> <li><code>C</code>: <code>string.h</code></li> <li><code>C++</code>: <code>cstring</code></li> </ul> <ul> <li> <p><code>memcpy</code> : \u5f9e <code>source</code> \u8907\u88fd <code>num</code> bytes \u8a18\u61b6\u9ad4\u5230 <code>destination</code> \u3002</p> </li> <li> <p><code>memcpy (destination, source, num)</code> </p> </li> <li> <p><code>strcpy</code> : \u5f9e <code>source</code> \u8907\u88fd C \u5f0f\u5b57\u4e32\u5230 <code>destination</code> \u3002</p> </li> <li> <p><code>strcpy(destination, source)</code> </p> </li> <li> <p><code>strncpy</code> : \u5f9e <code>source</code> \u8907\u88fd <code>num</code> \u500b\u5b57\u5143\u8a18\u61b6\u9ad4\u5230 <code>destination</code> \u3002</p> </li> <li> <p><code>strncpy(destination, source, num)</code> </p> </li> <li> <p><code>srtcat</code> : \u5c07 <code>source</code> \u63a5\u5230 <code>destination</code> \u5f8c\u9762\u3002</p> </li> <li> <p><code>strcat(destination, source)</code> </p> </li> <li> <p><code>strncat</code> : \u5c07 <code>source</code> \u7684\u524d <code>num</code> \u500b\u5b57\u5143\u63a5\u5230 <code>destination</code> \u5f8c\u9762\u3002</p> </li> <li> <p><code>strncat(destination, source, num)</code> </p> </li> <li> <p><code>memcmp</code> : \u6bd4\u8f03\u5169\u8a18\u61b6\u9ad4\u524d <code>num</code> bytes\u3002</p> </li> <li> <p><code>memcmp(ptr1, ptr2, num)</code> </p> </li> <li> <p><code>strcmp</code> : \u6bd4\u8f03\u5169\u5b57\u4e32\u3002</p> </li> <li> <p><code>strcmp(str1, str2)</code> </p> </li> </ul> \u6bd4\u8f03\u51fd\u6578\u7d50\u679c \u7d50\u679c \u8aaa\u660e &lt;0 \u524d\u8005&lt;\u5f8c\u8005 =0 \u524d\u8005 = \u5f8c\u8005 &gt;0 \u524d\u8005 &gt; \u5f8c\u8005 <ul> <li> <p><code>memset</code> : \u8a2d\u5b9a <code>ptr</code> \u524d <code>num</code> bytes \u70ba <code>value</code> </p> </li> <li> <p><code>memset(ptr, value, num)</code> </p> </li> <li> <p><code>memset</code> \u61c9\u8a72\u662f\u8981\u8a2d\u5b9a\u5b57\u5143\uff0c\u7136\u800c\u6574\u6578\u578b\u614b\u7684  \u548c  \uff0c\u7684\u6bcf\u500b bytes \u525b\u597d\u4e5f\u662f  \u548c  \uff0c\u6240\u4ee5 <code>memset</code> \u4e5f\u53ef\u7528\u4f86\u8a2d\u5b9a\u6574\u6578\u9663\u5217\u5168\u70ba  \u548c  \u3002</p> </li> <li> <p><code>srtlen</code> : \u56de\u50b3 C \u5f0f\u5b57\u4e32\u7684\u9577\u5ea6</p> </li> <li> <p><code>strlen(str)</code> </p> </li> </ul>"},{"location":"syntax/cstring/#_1","title":"\u7bc4\u4f8b","text":"<ul> <li>\u8907\u88fd\u5b57\u4e32</li> </ul> <pre><code>char str1[] = \"This is an apple.\";\nchar str2[] = \"That is a banana.\";\nprintf(\"Before strcpy:\\n\");\nprintf(\"%s\\n\", str2);\nstrcpy(str2, str1);\nprintf(\"\\nAfter strcpy:\\n\");\nprintf(\"%s\\n\", str2);\n\n/*\nBefore strcpy:\nThat is a banana.\n\nAfter strcpy:\nThis is an apple.\n\n*/\n</code></pre> <ul> <li>\u4e32\u63a5\u5b57\u4e32</li> </ul> <pre><code>char str[] = \"Ha!\";\nprintf(\"Before strcpy:\\n\");\nprintf(\"%s\\n\", str);\nstrcat(str, \" Hello!\");\nprintf(\"\\nAfter strcpy:\\n\");\nprintf(\"%s\\n\", str);\n\n/*\nBefore strcpy:\nHa!\n\nAfter strcpy:\nHa! Hello!\n\n*/\n</code></pre> <ul> <li>\u6bd4\u8f03\u5b57\u4e32\u5927\u5c0f\uff08\u5b57\u5178\u5e8f\uff09</li> </ul> <pre><code>char str1[] = \"This is an apple.\";\nchar str2[] = \"That is a banana.\";\nint res = memcmp(str1, str2, sizeof(str1));\nif (res &gt; 0)\n{\nprintf(\"'%s' is greater than '%s'.\\n\", str1, str2);\n}\nelse if (res &lt; 0)\n{\nprintf(\"'%s' is less than '%s'.\\n\", str1, str2);\n}\nelse\n{\nprintf(\"'%s' is the same as '%s'.\\n\", str1, str2);\n}\n\n/*\n'This is an apple.' is greater than 'That is a banana.'.\n\n*/\n</code></pre> <ul> <li>\u8a2d\u5b9a\u5b57\u5143\u9663\u5217</li> </ul> <pre><code>char str[5];\nprintf(\"Before memeset:\\n\");\nfor (int i = 0; i &lt; (int)strlen(str); ++i)\n{\nprintf(\"%c\", str[i]);\n}\nmemset(str, '+', sizeof(str));\nprintf(\"\\nAfter memeset:\\n\");\nfor (int i = 0; i &lt; (int)strlen(str); ++i)\n{\nprintf(\"%c\", str[i]);\n}\n\n/*\nBefore memeset:\n\nAfter memeset:\n+++++\n*/\n</code></pre> <ul> <li>\u8a2d\u5b9a\u6574\u6578\u9663\u5217</li> </ul> <pre><code>int arr[5];\nprintf(\"Before memeset:\\n\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nprintf(\"%d \", arr[i]);\n}\nmemset(arr, -1, sizeof(arr));\nprintf(\"\\nAfter memeset:\\n\");\nfor (int i = 0; i &lt; 5; ++i)\n{\nprintf(\"%d \", arr[i]);\n}\n\n/*\nBefore memeset:\n8 0 2 0 7480496\nAfter memeset:\n-1 -1 -1 -1 -1\n*/\n</code></pre> <ol> <li> <p>cstring \u51fd\u5f0f\u5eab in cplusplus \u21a9</p> </li> </ol>"},{"location":"syntax/cstylestring/","title":"C \u5f0f\u5b57\u4e32 (C-Style String)","text":"<p>C \u5f0f\u5b57\u4e32\u5373\u662f\u5b57\u5143\u9663\u5217\uff0c\u76f8\u8f03\u4e00\u822c\u9663\u5217\uff0c\u5b57\u5143\u9663\u5217\u6709\u4e00\u4e9b\u7368\u6709\u7684\u7528\u6cd5\uff0c\u4ee5\u4e0b\u4f86\u4ecb\u7d39\uff1a</p> \u6ce8\u610f <p>\u9019\u88e1\u662f\u6307 C \u5f0f\u5b57\u4e32(\u5b57\u5143\u9663\u5217)\uff0c\u4e0d\u662f C++ \u7684 STL \u5bb9\u5668 String</p>"},{"location":"syntax/cstylestring/#_1","title":"\u5ba3\u544a","text":"<p>C \u5f0f\u5b57\u4e32\u662f\u9663\u5217\uff0c\u6240\u6709\u9663\u5217\u5ba3\u544a\u65b9\u6cd5\u4e5f\u9069\u7528\u5728 C \u5f0f\u5b57\u4e32\uff0c\u552f\u8981\u6ce8\u610f\u6700\u5f8c\u8981\u7d66\u4e00\u500b <code>\\0</code> \uff0c\u8868\u793a\u5b57\u4e32\u7d50\u5c3e\u3002C \u5f0f\u5b57\u4e32\u53ef\u4ee5\u4e0d\u7d66\u5927\u5c0f\uff08\u9577\u5ea6\uff09\uff0c\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528\u5b57\u4e32\u5e38\u6578\u5ba3\u544a\uff0c\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u5ba3\u544a\uff0c\u4e0d\u7528\u5728\u5f8c\u9762\u52a0\u4e0a <code>\\0</code> \uff0c\u4f46\u7a0b\u5f0f\u81ea\u52d5\u6703\u88dc <code>\\0</code> \u3002</p> <pre><code>char str1[6];\nchar str2[6] = {'a', 'p', 'p', 'l', 'e', '\\0'};\nchar str3[] = {'a', 'p', 'p', 'l', 'e', '\\0'};\nchar str4[] = \"apple\";\n</code></pre>"},{"location":"syntax/cstylestring/#_2","title":"\u8f38\u5165\u8f38\u51fa","text":"<p>C \u5f0f\u5b57\u4e32\u53ef\u4ee5\u4e00\u500b\u5b57\u5143\u4e00\u500b\u5b57\u5143\u6162\u6162\u8f38\u5165\uff0c\u4e5f\u53ef\u4ee5\u4e00\u6b21\u8f38\u5165\u6574\u500b\u5b57\u4e32\u3002\uff1a</p> <p><code>scanf</code> \u6703\u8f38\u5165\u76f4\u5230\u9047\u898b\u63db\u884c\u5b57\u5143\uff0c\u8f38\u5165\u7684\u9577\u5ea6\u6709\u53ef\u80fd\u5927\u65bc\u8b8a\u6578\u9577\u5ea6\uff0c\u53ef\u80fd\u9020\u6210\u5b89\u5168\u4e0a\u7684\u7591\u616e\uff08\u7a0b\u5f0f\u7af6\u8cfd\u4e2d\u7d66\u7684\u8cc7\u6599\u90fd\u662f\u6709\u9577\u5ea6\u9650\u5236\uff0c\u6c92\u6709\u9019\u500b\u554f\u984c\uff09\uff0c <code>scanf</code> \u53ef\u4ee5\u8a2d\u5b9a <code>width</code> \u4f86\u63a7\u5236\u8f38\u5165\u9577\u5ea6\u3002</p> <p>\u8f38\u51fa\u7528 <code>printf</code> \uff0c <code>printf</code> \u6703\u4e00\u76f4\u8f38\u51fa\uff0c\u76f4\u5230\u9047\u898b <code>\\0</code> \u3002</p> <pre><code>scanf(\"%s\", str1);  // \u4e0d\u5b89\u5168\uff0c\u4f46\u5728\u7a0b\u5f0f\u7af6\u8cfd\u4e0a OK\nscanf(\"%9s\", str1); // \u6bd4\u8f03\u5b89\u5168\u7684\u5beb\u6cd5\nprintf(\"%s\\n\", str1);\n</code></pre>"},{"location":"syntax/cstylestring/#_3","title":"\u5b57\u5178\u5e8f","text":"<p>\u5b57\u5178\u5e8f\u662f\u6307\u6309\u7167\u55ae\u8a5e\u51fa\u73fe\u5728\u5b57\u5178\u7684\u9806\u5e8f\u9032\u884c\u6392\u5e8f\u7684\u65b9\u6cd5<sup>1</sup>\uff0c\u53ef\u7528\u4f86\u898f\u7bc4\u5b57\u4e32\u4e4b\u9593\u7684\u9806\u5e8f\u3002\u5169\u500b\u76f8\u7570\u5b57\u4e32\u9593\u7684\u5b57\u5178\u5e8f\u6bd4\u8f03\uff1a</p> <ul> <li>\u5f9e\u7b2c  \u500b\u5b57\u5143\u958b\u59cb\u6bd4\u5c0d\u3002<ul> <li>\u5982\u679c\u5b57\u5143\u76f8\u540c\uff0c\u6bd4\u8f03\u4e0b\u4e00\u500b\u5b57\u5143\u3002</li> <li>\u5426\u5247\u8f49\u63db\u6210 ASCII \u7de8\u865f\uff0c\u6bd4\u8f03\u7de8\u865f\u5927\u5c0f\uff0c\u7de8\u865f\u5c0f\u7684\u5b57\u5178\u5e8f\u8f03\u5c0f\u3002</li> <li>\u5982\u679c\u9047\u5230\u5176\u4e2d\u4e00\u65b9\u5b57\u4e32\u5df2\u7d93\u6bd4\u8f03\u5b8c\u6240\u6709\u5b57\u5143\uff0c\u5247\u5b57\u4e32\u9577\u5ea6\u8f03\u77ed\u8005\uff0c\u5176\u5b57\u5178\u5e8f\u8f03\u5c0f\u3002</li> </ul> </li> </ul> \u7bc4\u4f8b 1 <ul> <li> </li> <li>\u5728\u7b2c  \u500b\u5b57\u5143 \uff0c\u56e0\u6b64  </li> </ul> \u7bc4\u4f8b 2 <ul> <li> </li> <li>\u5728\u7b2c  \u500b\u5b57\u5143 \uff0c\u56e0\u6b64  </li> </ul> \u7bc4\u4f8b 3 <ul> <li> </li> <li>\u524d\u7b2c  \u500b\u5b57\u5143\u90fd\u76f8\u7b49\uff0c\u56e0\u70ba  \u5df2\u7d93\u6bd4\u8f03\u5b8c\u6240\u6709\u5b57\u5143\uff0c\u56e0\u6b64  </li> </ul>"},{"location":"syntax/cstylestring/#scan-set","title":"Scan Set","text":"<p>Scan Set \u53ef\u4ee5\u8a2d\u5b9a\u5b57\u4e32\u8f38\u5165\u53ea\u5305\u542b\u54ea\u4e9b\u5b57\u5143\uff0c\u4e3b\u8981\u7528\u65bc\u8f38\u5165\u683c\u5f0f\u8f03\u8907\u96dc\u7684\u984c\u76ee\u3002\u8209\u4f8b\u5982\u4e0b\uff1a</p> <ul> <li><code>%[abc]s</code> \uff1a\u8f38\u5165\u5305\u542b <code>abc</code> \u7684\u5b57\u4e32</li> <li><code>%[^abc]s</code> \uff1a\u8f38\u5165\u4e0d\u5305\u542b <code>abc</code> \u7684\u5b57\u4e32</li> </ul> <pre><code>scanf(\"%[abc]s\", s);\nprintf(\"%s\\n\", s);\n\n/*\n\u8f38\u5165\uff1aabcdef\n\u8f38\u51fa\uff1aabc\n*/\n\nscanf(\"%[^abc]s\", s);\nprintf(\"%s\\n\", s);\n\n/*\n\u8f38\u5165\uff1afedcba\n\u8f38\u51fa\uff1acba\n*/\n</code></pre> <ol> <li> <p>\u5b57\u5178\u5e8f in \u7dad\u57fa\u767e\u79d1 \u21a9</p> </li> </ol>"},{"location":"syntax/functionandrecursive/","title":"\u51fd\u5f0f\u8207\u905e\u8ff4","text":""},{"location":"syntax/functionandrecursive/#_2","title":"\u51fd\u5f0f","text":"<p>\u5982\u679c\u7a0b\u5f0f\u88e1\u6709\u4e00\u6bb5\u6703\u91cd\u8907\u51fa\u73fe\u7684\u7a0b\u5f0f\u78bc\uff0c\u53ef\u4ee5\u5c07\u9019\u6bb5\u7a0b\u5f0f\u78bc\u5beb\u6210\u4e00\u500b\u51fd\u5f0f\uff0c\u9019\u6a23\u53ef\u4ee5\u6e1b\u5c11\u7a0b\u5f0f\u7684\u9577\u5ea6\uff0c\u53ca\u964d\u4f4e\u7dad\u8b77\u7684\u96e3\u5ea6\uff0c\u4ee5\u4e0b\u70ba\u5176\u8a9e\u6cd5\uff1a</p> <pre><code>return_type function_name(parameter list) {\n\\\\ Do something... return data; }\n</code></pre> <ul> <li><code>function_name</code> : \u51fd\u5f0f\u7684\u540d\u7a31</li> <li><code>parameter</code> : \u51fd\u5f0f\u7684\u53c3\u6578</li> <li><code>return_type</code> : \u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\uff0c\u53ef\u70ba <code>C/C++</code> \u63d0\u4f9b\u7684 \u57fa\u790e\u8cc7\u6599\u578b\u614b \u6216\u662f \u81ea\u5b9a\u7fa9\u7684\u7d50\u69cb \uff0c\u5982\u679c\u4e0d\u9700\u6709\u56de\u50b3\u503c\uff0c\u53ef\u8a2d\u70ba <code>void</code> \uff0c</li> <li><code>return</code> \u662f <code>C/C++</code> \u95dc\u9375\u5b50\uff0c\u56de\u50b3\u51fd\u5f0f\u7d50\u679c\uff0c\u9700\u8207\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\u76f8\u7b26\u3002\u7576\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u578b\u614b\u70ba <code>void</code> \uff0c\u53ef\u4ee5\u7701\u7565\u3002</li> </ul> <pre><code>int sum(int x, int y)\n{\nint sum = 0;\nsum += x;\nsum += y;\nreturn x + y;\n}\n\nvoid print_hello()\n{\ncout &lt;&lt; \"Hello\\n\";\nreturn; // \u53ef\u7701\u7565\n}\n</code></pre> <p><code>main</code> \u662f <code>C/C++</code> \u7a0b\u5f0f\u7684\u5165\u53e3\u51fd\u5f0f\uff0c\u63a5\u53d7\u547d\u4ee4\u5217\u7684\u53c3\u6578\uff0c\u6b63\u5e38\u60c5\u6cc1\u6703\u56de\u50b3  \u4ee3\u8868\u6b63\u5e38\u904b\u4f5c\u3002</p>"},{"location":"syntax/functionandrecursive/#scope-lifttime","title":"\u8b8a\u6578\u7bc4\u570d (Scope) \u548c\u751f\u547d\u9031\u671f (Lifttime)","text":"<p>\u5728 <code>C++</code> \u4e2d\uff0c\u4e00\u500b\u8b8a\u6578\u53ef\u88ab\u4f7f\u7528\u7684\u5340\u57df\uff0c\u7a31\u70ba\u7bc4\u570d (Scope)\uff0c\u6bcf\u7a2e\u8b8a\u6578\u90fd\u6709\u81ea\u5df1\u7684\u751f\u547d\u9031\u671f (Lifttime)\uff0c\u7bc4\u570d\u53ef\u5206\u70ba\u5f88\u591a\u7a2e\uff0c\u9019\u88e1\u6211\u5011\u53ea\u8ac7\u4e09\u7a2e\uff0c\u5305\u542b\u5168\u57df\u8b8a\u6578 (Global variable)\u3001\u5340\u57df\u8b8a\u6578 (Local variable) \u8207\u5340\u584a\u8b8a\u6578 (Block variable)\u3002</p> <ul> <li>\u5168\u57df\u8b8a\u6578\uff1a\u5168\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u51fd\u5f0f\u5916\u90e8\u7684\u8b8a\u6578\uff0c\u6574\u500b\u7a0b\u5f0f\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u5168\u57df\u8b8a\u6578\u901a\u5e38\u70ba\u5e38\u6578\uff0c\u6216\u662f\u591a\u500b\u51fd\u5f0f\u5171\u7528\u7684\u8b8a\u6578\u3002\u5168\u57df\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u7a0b\u5f0f\u958b\u59cb\uff0c\u7d42\u65bc\u7a0b\u5f0f\u7d50\u675f\u3002</li> <li>\u5340\u57df\u8b8a\u6578\uff1a\u5340\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u51fd\u5f0f\u5167\u90e8\u7684\u8b8a\u6578\uff0c\u53ea\u9650\u8a72\u51fd\u5f0f\u4f7f\u7528\uff0c\u5340\u57df\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u51fd\u5f0f\u958b\u59cb\uff0c\u7d42\u65bc\u51fd\u5f0f\u7d50\u675f\u3002</li> <li>\u5340\u584a\u8b8a\u6578\uff1a\u5340\u57df\u8b8a\u6578\u662f\u6307\u5b9a\u7fa9\u5728\u5340\u584a\u5167\u90e8\u7684\u8b8a\u6578\uff0c\u53ea\u9650\u8a72\u5340\u584a\u4f7f\u7528\uff0c\u5340\u584a\u5305\u542b <code>if</code> \u3001 <code>while</code> \u3001 <code>for</code> \u5340\u584a\uff0c\u5340\u584a\u8b8a\u6578\u7684\u751f\u547d\u9031\u671f\u59cb\u65bc\u5340\u584a\u958b\u59cb\uff0c\u7d42\u65bc\u5340\u584a\u7d50\u675f\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100; // \u5168\u57df\u8b8a\u6578\nint var1 = 1;      // \u5168\u57df\u8b8a\u6578\n\nvoid print_var1() { cout &lt;&lt; var1 &lt;&lt; '\\n'; }\n\nint main()\n{\nint var2 = N;                  // \u5340\u57df\u8b8a\u6578\nfor (int i = 0; i &lt; var2; ++i) // \u5340\u584a\u8b8a\u6578\n{\n++var1;\nprint_var1();\n}\n}\n</code></pre> \u6ce8\u610f <p>\u5c07\u6240\u6709\u8b8a\u6578\u90fd\u8a2d\u70ba\u5168\u57df\u8b8a\u6578\u56fa\u7136\u65b9\u4fbf\uff0c\u4f46\u6703\u7522\u751f\u540d\u7a31\u7a7a\u9593\u91cd\u758a\u7684\u554f\u984c\uff08\u4e0b\u9762\u5169\u500b\u7bc4\u4f8b\u7a0b\u5f0f\uff0c\u56e0\u70ba\u8b8a\u6578\u5b9a\u7fa9\u4f4d\u7f6e\u4e0d\u540c\uff0c\u9020\u6210\u4e0d\u540c\u7d50\u679c\uff09\uff0c\u9020\u6210\u7dad\u8b77\u4e0a\u7684\u56f0\u96e3\uff0c\u61c9\u5c0f\u5fc3\u4f7f\u7528\uff0c\u80fd\u64fa\u653e\u5230\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\uff0c\u4e0d\u61c9\u8a72\u8a2d\u70ba\u5168\u57df\u8b8a\u6578\uff0c\u80fd\u64fa\u653e\u5230\u5340\u584a\u5167\u7684\u8b8a\u6578\uff0c\u4e0d\u61c9\u8a72\u8a2d\u70ba\u5340\u57df\u8b8a\u6578\u3002</p> \u7bc4\u4f8b 1(\u540d\u7a31\u7a7a\u9593\u91cd\u758a) <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint i;\n\nvoid print_var()\n{\nfor (i = 0; i &lt; 3; ++i)\n{\ncout &lt;&lt; i &lt;&lt; '\\n';\n}\n}\n\nint main()\n{\nfor (i = 0; i &lt; 3; ++i)\n{\nprint_var();\n}\n}\n\n/*\n0\n1\n2\n*/\n</code></pre> \u7bc4\u4f8b 2 <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid print_var()\n{\nfor (int i = 0; i &lt; 3; ++i)\n{\ncout &lt;&lt; i &lt;&lt; '\\n';\n}\n}\n\nint main()\n{\nfor (int i = 0; i &lt; 3; ++i)\n{\nprint_var();\n}\n}\n\n/*\n0\n1\n2\n0\n1\n2\n0\n1\n2\n*/\n</code></pre>"},{"location":"syntax/functionandrecursive/#_3","title":"\u8986\u84cb","text":"<p>\u7576\u7bc4\u570d\u4e0d\u540c\u7684\u8b8a\u6578\u540c\u540d\u6642\uff0c\u7bc4\u570d\u5c0f\u7684\u6703\u8986\u84cb\u7bc4\u570d\u5927\u7684\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\nint num = 5;\nfor (int i = 0; i &lt; 1; ++i)\n{\nint num = 10;\ncout &lt;&lt; num &lt;&lt; '\\n';\n}\n}\n\n/*\n10\n*/\n</code></pre>"},{"location":"syntax/functionandrecursive/#static","title":"<code>static</code> \u95dc\u9375\u5b57","text":"<p>\u5982\u679c\u4e00\u500b\u51fd\u5f0f\u5167\u90e8\u7684\u8b8a\u6578\u524d\u9762\u52a0\u4e0a <code>static</code> \u95dc\u9375\u5b57\uff0c\u90a3\u9ebc\u9019\u500b\u8b8a\u6578\u5c31\u6703\u5728\u7a0b\u5f0f\u4e00\u958b\u59cb\u5c31\u6703\u653e\u5728\u8a18\u61b6\u9ad4\u56fa\u5b9a\u7684\u4f4d\u7f6e\u4e0a\uff0c\u53ea\u5230\u7a0b\u5f0f\u7d50\u675f\u624d\u6d88\u5931\uff0c\u800c\u4e0d\u662f\u96a8\u8457\u51fd\u5f0f\u7d50\u675f\u800c\u6d88\u5931\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid addSum(int i)\n{\nstatic int sum = 0;\nsum += i;\ncout &lt;&lt; \"The current sum is: \" &lt;&lt; sum &lt;&lt; '\\n';\n}\n\nint main()\n{\nfor (int i = 1; i &lt;= 5; ++i)\n{\naddSum(i);\n}\n}\n\n/*\nThe current sum is: 1\nThe current sum is: 3\nThe current sum is: 6\nThe current sum is: 10\nThe current sum is: 15\n*/\n</code></pre>"},{"location":"syntax/functionandrecursive/#_4","title":"\u905e\u8ff4","text":"<p>\u905e\u8ff4\u662f\u6307\u4e00\u7a2e\u89e3\u6c7a\u554f\u984c\u7684\u8fa6\u6cd5\uff0c\u905e\u8ff4\u6703\u5148\u5c07\u554f\u984c\u62c6\u89e3\u6210\u6578\u500b\u76f8\u4f3c\u7684\u5b50\u554f\u984c\uff0c\u89e3\u6c7a\u5b50\u554f\u984c\u5f8c\uff0c\u518d\u900f\u904e\u5b50\u554f\u984c\u7684\u7d50\u679c\u5c07\u554f\u984c\u89e3\u6c7a\u3002\u5728\u51fd\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u547c\u53eb\u76f8\u540c\u7684\u51fd\u5f0f\u5e36\u6709\u4e0d\u540c\u7684\u53c3\u6578\uff0c\u9019\u500b\u7279\u6027\u53ef\u4ee5\u61c9\u7528\u5728\u905e\u8ff4\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u51fd\u5f0f\u5be6\u4f5c\u905e\u8ff4\u3002\u905e\u8ff4\u6709\u5169\u500b\u8981\u4ef6\uff1a</p> <ul> <li>\u7d42\u6b62\u689d\u4ef6</li> <li>\u7e2e\u5c0f\u554f\u984c\u7684\u65b9\u5f0f</li> </ul> <p>\u4ee5\u968e\u4e58\u70ba\u4f8b\uff1a  </p> <pre><code>int factorial(int i)\n{\nif (i &lt;= 1)\n{\nreturn 1;\n}\nint ans;\nans = factorial(i - 1);\nans *= i;\nreturn ans;\n}\n</code></pre> <p>\u9664\u4e86\u968e\u4e58\u4e4b\u5916\uff0c\u9084\u6709\u8a31\u591a\u905e\u8ff4\u7684\u57fa\u790e\u984c</p> <ul> <li>\u8cbb\u5f0f\u6578\u5217</li> <li>\u6cb3\u5167\u5854</li> <li>\u6700\u5927\u516c\u56e0\u6578</li> </ul> <ol> <li> <p>\u5982\u4f55\u64b0\u5beb\u51fd\u5f0f (Function) - Michael Chen \u7684\u6280\u8853\u6587\u4ef6 \u21a9</p> </li> <li> <p>\u51fd\u5f0f\u7c21\u4ecb - openhome.cc \u21a9</p> </li> <li> <p>\u905e\u8ff4 - openhome.cc \u21a9</p> </li> <li> <p>\u8b8a\u6578\u7bc4\u570d - openhome.cc \u21a9</p> </li> </ol>"},{"location":"syntax/inputoutput/","title":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa","text":""},{"location":"syntax/inputoutput/#_2","title":"\u6a19\u6e96\u8f38\u5165\u8f38\u51fa\u3001\u6587\u4ef6\u8f38\u5165\u8f38\u51fa","text":"<p>\u6a19\u6e96\u8f38\u5165\uff1a\u7531\u9375\u76e4\u8f38\u5165\u3002 \u6a19\u6e96\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u87a2\u5e55\u3002 \u6587\u4ef6\u8f38\u5165\uff1a\u7531\u6587\u4ef6\u8f38\u5165\u3002 \u6587\u4ef6\u8f38\u51fa\uff1a\u8f38\u51fa\u5230\u6587\u4ef6\u3002 \u6a19\u6e96/\u6587\u4ef6\u8f38\u51fa\u8f38\u5165\u53ef\u4ee5\u6df7\u7528\u3002</p>"},{"location":"syntax/inputoutput/#c","title":"C \u6a19\u6e96\u8f38\u5165\u8f38\u51fa","text":"<p><code>scanf</code> \u548c <code>printf</code> \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 <code>stdio.h</code> \u3002</p> <p><code>scanf</code> \u548c <code>printf</code> \u6703\u7d66\u5b9a\u4e00\u500b\u7531\u683c\u5f0f\u78bc\u7684\u5b57\u4e32\uff0c\u4e26\u6839\u64da\u683c\u5f0f\u78bc\uff0c\u5728\u5f8c\u9762\u63a5\u4e0a\u76f8\u5c0d\u61c9\u500b\u6578\u7684\u53c3\u6578\u3002</p>"},{"location":"syntax/inputoutput/#scanf","title":"<code>scanf</code>","text":"<p><code>scanf</code> \u7684\u683c\u5f0f\u78bc\u683c\u5f0f\u70ba\uff1a <code>%[*][width][length]specifier</code> </p> <ul> <li><code>*</code> \u53ef\u4ee5\u6307\u5b9a\u8b80\u5165\u7684\u8cc7\u6599\u88ab\u5ffd\u7565\u3002</li> <li><code>width</code> \u8a2d\u5b9a\u6700\u5927\u53ef\u8f38\u5165\u5b57\u5143\u7684\u500b\u6578\uff0c\u8acb\u53c3\u8003 C \u5f0f\u5b57\u4e32\u7ae0\u7bc0 \u3002</li> <li><code>length</code> \u8a2d\u5b9a\u8f38\u5165\u578b\u614b\u5927\u5c0f\uff0c\u548c\u683c\u5f0f\u78bc\u642d\u914d\u3002</li> <li><code>specifier</code> \u70ba\u683c\u5f0f\u78bc\uff0c\u662f\u7528\u4f86\u6307\u5b9a\u8f38\u5165\u7684\u578b\u614b\u3002</li> </ul> \u5e38\u898b\u683c\u5f0f\u78bc \u8aaa\u660e d signed decimal u unsigned decimal f float c character \u683c\u5f0f\u78bc length d i u o x f e g a c s[][^] p n (none) int* unsigned int* float* char* void** int* hh signed char* unsigned char* signed char* h short int* unsigned short int* short int* l long int* unsigned long int* double* wchar_t* long int* ll long long int* unsigned long long int* long long int* j intmax_t* uintmax_t* intmax_t* z size_t* size_t* size_t* t ptrdiff_t* ptrdiff_t* ptrdiff_t* L long double* <pre><code>scanf(\"%d\", &amp;i);     // \u8b80\u5165\u4e00\u500b int\nscanf(\"%*d %d\", &amp;i); // \u8b80\u5165\u5169\u500b int\uff0c\u7b2c\u4e00\u500b\u6574\u6578\u6703\u88ab\u5ffd\u7565\nscanf(\"%lld\", &amp;i);   // \u8b80\u5165\u4e00\u500b long long int\n</code></pre> <p><code>scanf</code> \u7684\u53c3\u6578\u524d\u9762\u9700\u8981\u52a0\u4e00\u500b <code>&amp;</code> \uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f <code>scanf</code> \u7684\u53c3\u6578\u662f\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u8981\u66f4\u8a73\u7d30\u7406\u89e3\u8981\u5148\u5b78\u5b8c\u6307\u6a19\u3002\uff08\u7de8\u8005\u8a8d\u70ba\u9019\u662f\u7576\u521d\u8a2d\u8a08\u6c92\u60f3\u5230\u7684\u4e00\u500b bug)\u3002</p>"},{"location":"syntax/inputoutput/#printf","title":"<code>printf</code>","text":"<p><code>printf</code> \u7684\u683c\u5f0f\u78bc\u683c\u5f0f\u70ba\uff1a <code>%[flags][width][.precision][length]specifier</code> </p> <ul> <li><code>flags</code> \u9019\u88e1\u4e0d\u8a73\u7d30\u63d0\uff0c\u53ef\u53c3\u8003 cplusplus \u3002</li> <li><code>width</code> \u5728 <code>printf</code> \u7684\u7528\u9014\u70ba\u5c0d\u53f3\u9760\u9f4a\uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\uff0c\u5c0d\u6d6e\u9ede\u6578\u4e5f\u7121\u6548\u3002\u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u5bec\u5ea6\uff0c\u53ef\u7528 <code>*</code> \u4ee3\u66ff\u3002</li> <li><code>precision</code> \u5728 <code>printf</code> \u7684\u7528\u9014\u70ba\u6307\u5b9a\u8f38\u51fa\u9577\u5ea6\u3002\u6574\u6578\u90e8\u5206\uff0c\u5982\u679c\u662f\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u88dc  \uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u9577\u5ea6\uff0c\u5247\u7121\u6548\u3002\u6d6e\u9ede\u6578\u90e8\u5206\uff0c\u6240\u8b02\u7684\u8f38\u51fa\u9577\u5ea6\u6307\u7684\u662f\u5c0f\u6578\u9ede\u5f8c\u7684\u4f4d\u6578\u3002\u82e5\u7121\u6cd5\u4e8b\u5148\u77e5\u9053\u9577\u5ea6\uff0c\u4ea6\u53ef\u7528 <code>*</code> \u4ee3\u66ff\u3002</li> <li><code>length</code> \u548c <code>specifier</code> \u540c <code>scanf</code> \u3002</li> </ul> <pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\nint i = 100;\ndouble d = 3.14;\n\nprintf(\"%4d\\n\", i);\nprintf(\"%.4d\\n\", i);\nprintf(\"%.4f\\n\", d);\n\nprintf(\"\\nuse *\\n\");\nprintf(\"%*d\\n\", 4, i);\nprintf(\"%.*d\\n\", 4, i);\nprintf(\"%.*f\\n\", 4, d);\n}\n\n/*\n 100\n0100\n3.1400\n\nuse *\n 100\n0100\n3.1400\n*/\n</code></pre>"},{"location":"syntax/inputoutput/#c-cin-cout","title":"C++ \u8f38\u5165\u8f38\u51fa\uff0ccin \u548c cout","text":"<p><code>cin</code> \u548c <code>cout</code> \u5b9a\u7fa9\u5728\u6a19\u982d\u6a94 <code>iostream</code> \u3002</p> <p><code>cin</code> \u548c <code>cout</code> \u4e26\u4e0d\u9700\u8981\u5148\u7d66\u51fa\u683c\u5f0f\uff0c\u76f4\u63a5\u8f38\u51fa/\u8f38\u5165\u8b8a\u6578\u540d\u7a31\u5373\u53ef\u3002</p> <p><code>endl</code> \u7684\u4f5c\u7528\u662f\u8f38\u51fa\u63db\u884c\uff0c\u642d\u914d <code>cout</code> \u4f7f\u7528\uff0c <code>\\n</code> \u53ef\u4ee5\u53d6\u4ee3\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\nint i;\ncin &gt;&gt; i;\ncout &lt;&lt; i &lt;&lt; endl;\n}\n</code></pre>"},{"location":"syntax/inputoutput/#iomanip","title":"iomanip","text":"<p>C++ \u7684 cout \u4e5f\u6709\u8a2d\u5b9a\u5bec\u5ea6\u548c\u9577\u5ea6\u7684\u529f\u80fd\uff0c\u9700\u4f7f\u7528\u5230\u6a19\u982d\u6a94 <code>iomanip</code> \u3002</p> <ul> <li>\u5bec\u5ea6\uff1a <code>setw</code> \uff0c\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5c0f\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u4e0d\u8db3\u90e8\u5206\u6703\u7528\u7a7a\u767d\u586b\u6eff\uff0c\u6216\u4f7f\u7528 <code>setfill</code> \u6539\u7528\u5176\u4ed6\u5b57\u5143\u88dc\u6eff\uff1b\u5982\u679c\u8f38\u51fa\u7684\u5b57\u5143\u6578\u5927\u65bc\u6240\u8a2d\u5bec\u5ea6\uff0c\u5247\u7121\u6548\u3002</li> <li>\u9577\u5ea6\uff1a <code>setprecision</code> \uff0c\u53ea\u5c0d\u6d6e\u9ede\u6578\u6709\u6548\u3002cout \u6709\u5169\u7a2e\u8868\u793a\u65b9\u5f0f\uff0c <code>scientific</code> \u548c <code>fixed</code> \uff0c <code>scientific</code> \u53ea\u6703\u8f38\u51fa\u6709\u6548\u4f4d\u6578\uff0c <code>fixed</code> \u6703\u5c07\u6240\u6709\u4f4d\u6578\u5370\u51fa\u3002</li> </ul> <pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\nint a = 100;\ndouble d = 1.414;\n\nint x = 4; // \u53ef\u66f4\u6539\u4e26\u89c0\u5bdf\u7d50\u679c\n\n// \u6574\u6578\u7bc4\u4f8b\ncout &lt;&lt; setw(x) &lt;&lt; a &lt;&lt; '\\n';\ncout &lt;&lt; setfill('x') &lt;&lt; setw(x) &lt;&lt; a &lt;&lt; '\\n';\ncout &lt;&lt; setprecision(x) &lt;&lt; a &lt;&lt; '\\n';\ncout &lt;&lt; fixed &lt;&lt; setprecision(x) &lt;&lt; a &lt;&lt; '\\n';\ncout &lt;&lt; scientific &lt;&lt; setprecision(x) &lt;&lt; a &lt;&lt; '\\n';\ncout &lt;&lt; '\\n';\n\n// \u6d6e\u9ede\u6578\u7bc4\u4f8b\ncout &lt;&lt; setw(x) &lt;&lt; d &lt;&lt; '\\n';\ncout &lt;&lt; setfill('x') &lt;&lt; setw(d) &lt;&lt; a &lt;&lt; '\\n';\ncout &lt;&lt; setprecision(x) &lt;&lt; d &lt;&lt; '\\n';\ncout &lt;&lt; fixed &lt;&lt; setprecision(x) &lt;&lt; d &lt;&lt; '\\n';\ncout &lt;&lt; scientific &lt;&lt; setprecision(x) &lt;&lt; d &lt;&lt; '\\n';\n}\n\n/*\n 100\nx100\n100\n100\n100\n\n1.4140e+00\n100\n1.4140e+00\n1.4140\n1.4140e+00\n*/\n</code></pre>"},{"location":"syntax/inputoutput/#_3","title":"\u8f38\u5165\u8f38\u51fa\u512a\u5316","text":"<p>\u6709\u6642\u5019\u4f7f\u7528 <code>cin/cout</code> \u6703\u9020\u6210\u8d85\u6642\u7684\u7d50\u679c\uff0c\u63db\u6210 <code>scanf/printf</code> \u5c31\u6703\u6b63\u78ba\u3002\u9020\u6210 <code>cin/cout</code> \u904e\u6162\u7684\u539f\u56e0\u7c21\u55ae\u4f86\u8aaa\u53ef\u5217\u51fa\u4ee5\u4e0b\u5e7e\u9ede\uff1a</p> <ul> <li>\u70ba\u4e86\u548c <code>stdin/stdout</code> \u540c\u6b65\u3002</li> <li>\u4f7f\u7528 <code>endl</code> \u6703\u5f37\u5236\u6e05\u7a7a\u7de9\u885d\u5340\u3002</li> <li><code>cin</code> \u7d81\u4f4f\u4e86 <code>cout</code> \uff0c\u5728\u8f38\u5165\u7684\u6642\u5019\u8f38\u51fa\u4e5f\u6703\u88ab\u5f37\u5236\u6e05\u7a7a\u7de9\u885d\u5340\u3002</li> </ul> <p>\u89e3\u6c7a\u8fa6\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u7528 <code>\\n</code> \u53d6\u4ee3 <code>endl</code> \u3002</li> <li>\u5728\u7a0b\u5f0f\u958b\u982d\u52a0\u5165\u9019\u4e09\u884c\uff1a</li> </ul> <pre><code>cin.tie(nullptr);\ncout.tie(nullptr);\nios_base::sync_with_stdio(false);\n</code></pre> <p>\u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u8003\uff1a C++ \u7684\u8f38\u51fa\u5165 cin/cout \u548c scanf/printf \u8ab0\u6bd4\u8f03\u5feb\uff1f </p>"},{"location":"syntax/operator/","title":"\u904b\u7b97\u5b50","text":"<p>\u4e0b\u6587\u4e2d\u7684\u6240\u6709\u8a9e\u6cd5\uff0c <code>a</code> , <code>b</code> , <code>c</code> , <code>condition1</code> , <code>condition2</code> \u90fd\u662f\u8b8a\u6578\u540d\u7a31\u3002</p>"},{"location":"syntax/operator/#_2","title":"\u7b97\u8853\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u6b63\u865f\uff08\u4e00\u5143\uff09 <code>+a</code> \u8ca0\u865f\uff08\u4e00\u5143\uff09 <code>-a</code> \u52a0\u6cd5\uff08\u4e8c\u5143\uff09 <code>a+b</code> \u6e1b\u6cd5\uff08\u4e8c\u5143\uff09 <code>a-b</code> \u4e58\u6cd5\uff08\u4e8c\u5143\uff09 <code>a*b</code> \u9664\u6cd5\uff08\u4e8c\u5143\uff09 <code>a/b</code> \u6a21\u6578\uff08\u4e8c\u5143\uff09 <code>a%b</code> \u53d6\u9918\u6578"},{"location":"syntax/operator/#_3","title":"\u905e\u589e/\u905e\u6e1b\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u524d\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 <code>++a</code> \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 <code>a++</code> \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u524d\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 <code>--a</code> \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u5f8c\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 <code>a--</code> \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b"},{"location":"syntax/operator/#_4","title":"\u4f4d\u5143\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u4f4d\u5143 AND\uff08\u4e00\u5143\uff09 <code>a&amp;b</code> \u4f4d\u5143 XOR\uff08\u4e00\u5143\uff09 <code>a^b</code> \u4f4d\u5143 OR\uff08\u4e00\u5143\uff09 `a b` \u4f4d\u5143 \u4e00\u7684\u88dc\u6578\uff08\u4e00\u5143\uff09 <code>~a</code> \u4f4d\u5143\u5de6\u79fb\uff08\u4e8c\u5143\uff09 <code>a&lt;&lt;b</code> \u4f4d\u5143\u53f3\u79fb\uff08\u4e8c\u5143\uff09 <code>a&gt;&gt;b</code>"},{"location":"syntax/operator/#_5","title":"\u8ce6\u503c\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a=b</code> <p>\u7b97\u6578/\u4f4d\u5143\u904b\u7b97\u5b50\u7686\u53ef\u4ee5\u548c\u8ce6\u503c\u904b\u7b97\u5b50\u5408\u4f75\uff0c\u5982\u4e0b\u8868\uff1a</p> \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u52a0\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a+=b</code> \u540c <code>a=a+b</code> \u6e1b\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a-=b</code> \u540c <code>a=a-b</code> \u4e58\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a*=b</code> \u540c <code>a=a*b</code> \u9664\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a/=b</code> \u540c <code>a=a/b</code> \u53d6\u6a21 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a%=b</code> \u540c <code>a=a%b</code> \u4f4d\u5143 AND + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a&amp;=b</code> \u540c <code>a=a&amp;b</code> \u4f4d\u5143 OR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 `a =b` \u540c`a=a b` \u4f4d\u5143 XOR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a^=b</code> \u540c <code>a=a^b</code> \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a&lt;&lt;=b</code> \u540c <code>a=a&lt;&lt;b</code> \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a&gt;&gt;=b</code> \u540c <code>a=a&gt;&gt;b</code>"},{"location":"syntax/operator/#_6","title":"\u6bd4\u8f03\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u5c0f\u65bc\uff08\u4e8c\u5143\uff09 <code>a&lt;b</code> \u5c0f\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a&lt;=b</code> \u5927\u65bc\uff08\u4e8c\u5143\uff09 <code>a&gt;b</code> \u5927\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a&gt;=b</code> \u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a==b</code> \u4e0d\u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a!=b</code>"},{"location":"syntax/operator/#_7","title":"\u908f\u8f2f\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u908f\u8f2f AND\uff08\u4e8c\u5143\uff09 <code>condition1 &amp;&amp; condition2</code> \u908f\u8f2f OR\uff08\u4e8c\u5143\uff09 `condition1 condition2` \u908f\u8f2f \u975e\uff08\u4e00\u5143\uff09 <code>!condition1</code>"},{"location":"syntax/operator/#_8","title":"\u9017\u865f\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u9017\u865f\u904b\u7b97\u5b50\uff08\u4e8c\u5143\uff09 <code>a,b</code> \u4e1f\u68c4\u5de6\u503c\uff0c\u56de\u50b3\u53f3\u908a\u7684\u503c"},{"location":"syntax/operator/#_9","title":"\u689d\u4ef6\u904b\u7b97\u5b50","text":"\u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u689d\u4ef6\u904b\u7b97\u5b50\uff08\u4e09\u5143\uff09 <code>a?b:c</code> \u76f8\u7576\u65bc <code>if(a){b}else{c}</code>"},{"location":"syntax/operator/#_10","title":"\u512a\u5148\u9806\u5e8f","text":"<p>\u8aaa\u660e</p> <ol> <li>\u512a\u5148\u7d1a\u8d8a\u9ad8\uff08\u6578\u5b57\u8d8a\u5c0f\uff09\uff0c\u6703\u8d8a\u5148\u57f7\u884c\u3002</li> <li>\u5982\u679c\u5169\u500b\u904b\u7b97\u5b50\u512a\u5148\u7d1a\u76f8\u540c\uff0c\u4f9d\u7167\u7d50\u5408\u6027\u7684\u65b9\u5411\u57f7\u884c\u3002</li> <li>\u591a\u8f09\u6027\u53ea\u6a19\u8a3b\u5426\u7684\u904b\u7b97\u5b50\uff0c\u672a\u6a19\u8a18\u7684\u904b\u7b97\u5b50\u90fd\u662f\u53ef\u591a\u8f09\u7684\u3002</li> </ol> \u540d\u7a31 \u8a9e\u6cd5 \u5099\u8a3b \u591a\u8f09\u6027 \u7d50\u5408\u6027 \u512a\u5148\u7d1a 1 <code>::</code> \u4f5c\u7528\u57df\u89e3\u6790\uff08C++ \u5c08\u6709\uff09 \u5426 \u512a\u5148\u7d1a 2 \u5de6\u5230\u53f3 \u5f8c\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 <code>a++</code> \u56de\u50b3\u503c\u5f8c\u518d\u905e\u589e \u5f8c\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 <code>a--</code> \u56de\u50b3\u503c\u5f8c\u518d\u905e\u6e1b <code>()</code> \u51fd\u793a\u547c\u53eb <code>[]</code> \u9663\u5217\u5b58\u53d6 <code>a.b</code> \u4ee5\u7269\u4ef6\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 \u5426 <code>a-&gt;b</code> \u4ee5\u6307\u6a19\u65b9\u5f0f\u5b58\u53d6\u6210\u54e1 <code>dynamic_cast</code> \u57f7\u884c\u6642\u6aa2\u67e5\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 <code>static_cast</code> \u672a\u7d93\u6aa2\u67e5\u7684\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 <code>reinterpret_cast</code> \u91cd\u5b9a\u7fa9\u985e\u578b\u8f49\u63db\uff08C++ \u5c08\u6709\uff09 \u5426 <code>const_cast</code> \u66f4\u6539\u975e\u5e38\u6578\u5c6c\u6027\uff08C++ \u5c08\u6709\uff09 \u5426 <code>typeid</code> \u53d6\u5f97\u985e\u578b\u8cc7\u8a0a\uff08C++ \u5c08\u6709\uff09 \u5426 \u512a\u5148\u7d1a 3 \u53f3\u81f3\u5de6 \u524d\u7db4\u905e\u589e\uff08\u4e00\u5143\uff09 <code>++a</code> \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u524d\u7db4\u905e\u6e1b\uff08\u4e00\u5143\uff09 <code>--a</code> \u5148\u905e\u589e\u518d\u56de\u50b3\u503c \u6b63\u865f\uff08\u4e00\u5143\uff09 <code>+a</code> \u8ca0\u865f\uff08\u4e00\u5143\uff09 <code>-a</code> \u908f\u8f2f \u975e\uff08\u4e00\u5143\uff09 <code>!condition1</code> \u4f4d\u5143 \u4e00\u7684\u88dc\u6578\uff08\u4e00\u5143\uff09 <code>~a</code> \u9593\u63a5 <code>int val=*ptr</code> \u900f\u904e\u6307\u6a19\u9593\u63a5\u64cd\u4f5c\u8b8a\u6578 \u50b3\u5740 <code>int *ptr=&amp;a</code> \u53d6\u5f97\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e <code>sizeof(a)</code> \u53d6\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u5927\u5c0f \u5426 <code>new</code> , <code>new[]</code> \u52d5\u614b\u8a18\u61b6\u9ad4\u5206\u914d\uff08C++ \u5c08\u6709\uff09 <code>delete</code> , <code>delete[]</code> \u52d5\u614b\u8a18\u61b6\u9ad4\u91cb\u653e\uff08C++ \u5c08\u6709\uff09 \u512a\u5148\u7d1a 4 \u5de6\u5230\u53f3 <code>.*</code> \u6210\u54e1\u7269\u4ef6\u9078\u64c7\uff08C++ \u5c08\u6709\uff09 <code>-&gt;*</code> \u6210\u54e1\u6307\u6a19\u9078\u64c7\uff08C++ \u5c08\u6709\uff09 \u512a\u5148\u7d1a 5 \u5de6\u5230\u53f3 \u4e58\u6cd5\uff08\u4e8c\u5143\uff09 <code>a*b</code> \u9664\u6cd5\uff08\u4e8c\u5143\uff09 <code>a/b</code> \u6a21\u6578\uff08\u4e8c\u5143\uff09 <code>a%b</code> \u53d6\u9918\u6578 \u512a\u5148\u7d1a 6 \u5de6\u5230\u53f3 \u52a0\u6cd5\uff08\u4e8c\u5143\uff09 <code>a+b</code> \u6e1b\u6cd5\uff08\u4e8c\u5143\uff09 <code>a-b</code> \u512a\u5148\u7d1a 7 \u5de6\u5230\u53f3 \u4f4d\u5143\u5de6\u79fb\uff08\u4e8c\u5143\uff09 <code>a&lt;&lt;b</code> \u4f4d\u5143\u53f3\u79fb\uff08\u4e8c\u5143\uff09 <code>a&gt;&gt;b</code> \u512a\u5148\u7d1a 8 \u5de6\u5230\u53f3 \u5c0f\u65bc\uff08\u4e8c\u5143\uff09 <code>a&lt;b</code> \u5c0f\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a&lt;=b</code> \u5927\u65bc\uff08\u4e8c\u5143\uff09 <code>a&gt;b</code> \u5927\u65bc\u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a&gt;=b</code> \u512a\u5148\u7d1a 9 \u5de6\u5230\u53f3 \u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a==b</code> \u4e0d\u7b49\u65bc\uff08\u4e8c\u5143\uff09 <code>a!=b</code> \u512a\u5148\u7d1a 10 \u5de6\u5230\u53f3 \u4f4d\u5143 AND\uff08\u4e00\u5143\uff09 <code>a&amp;b</code> \u512a\u5148\u7d1a 11 \u5de6\u5230\u53f3 \u4f4d\u5143 XOR\uff08\u4e00\u5143\uff09 <code>a^b</code> \u512a\u5148\u7d1a 12 \u5de6\u5230\u53f3 \u4f4d\u5143 OR\uff08\u4e00\u5143\uff09 `a b` \u512a\u5148\u7d1a 13 \u5de6\u5230\u53f3 \u908f\u8f2f AND\uff08\u4e8c\u5143\uff09 <code>condition1 &amp;&amp; condition2</code> \u512a\u5148\u7d1a 14 \u5de6\u5230\u53f3 \u908f\u8f2f OR\uff08\u4e8c\u5143\uff09 `condition1 condition2` \u512a\u5148\u7d1a 15 \u53f3\u81f3\u5de6 \u689d\u4ef6\u904b\u7b97\u5b50\uff08\u4e09\u5143\uff09 <code>a?b:c</code> \u76f8\u7576\u65bc <code>if(a){b}else{c}</code> \u5426 \u512a\u5148\u7d1a 16 \u53f3\u81f3\u5de6 \u52a0\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a+=b</code> \u540c <code>a=a+b</code> \u6e1b\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a-=b</code> \u540c <code>a=a-b</code> \u4e58\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a*=b</code> \u540c <code>a=a*b</code> \u9664\u6cd5 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a/=b</code> \u540c <code>a=a/b</code> \u53d6\u6a21 + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a%=b</code> \u540c <code>a=a%b</code> \u4f4d\u5143 AND + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a&amp;=b</code> \u540c <code>a=a&amp;b</code> \u4f4d\u5143 OR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 `a =b` \u540c`a=a b` \u4f4d\u5143 XOR + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a^=b</code> \u540c <code>a=a^b</code> \u4f4d\u5143\u5de6\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a&lt;&lt;=b</code> \u540c <code>a=a&lt;&lt;b</code> \u4f4d\u5143\u53f3\u79fb + \u8ce6\u503c\uff08\u4e8c\u5143\uff09 <code>a&gt;&gt;=b</code> \u540c <code>a=a&gt;&gt;b</code> \u512a\u5148\u7d1a 17 \u53f3\u81f3\u5de6 \u4e1f\u64f2\u7570\u5e38 <code>throw</code> \u5426 \u512a\u5148\u7d1a 18 \u5de6\u5230\u53f3 \u9017\u865f\u904b\u7b97\u5b50\uff08\u4e8c\u5143\uff09 <code>a,b</code> \u4e1f\u68c4\u5de6\u503c"},{"location":"syntax/other/","title":"\u5176\u4ed6\u8a9e\u6cd5","text":""},{"location":"syntax/other/#define","title":"<code>define</code>","text":"<p>\u985e\u4f3c excel \u4e2d\u7684\u5de8\u96c6\uff0c\u7528\u65bc\u53d6\u4ee3\u7a0b\u5f0f\u4e2d\u51fa\u73fe\u7684\u7279\u5b9a\u5b57\u5143(\u53ef\u5e36\u53c3\u6578)\uff0c\u53ef\u5efa\u7acb\u7e2e\u5beb\u6216\u5b9a\u7fa9\u5e38\u6578\uff0c\u5f8c\u8005\u8f03\u9069\u5408\u7528 <code>const</code> \u5be6\u73fe\u3002\u70ba\u4e86\u8981\u8b93\u7d50\u679c\u4fdd\u6301\u6b63\u78ba\uff0c\u8acb\u5c07\u53d6\u4ee3\u5f8c\u7684\u5b57\u5143\u62ec\u865f\u8d77\u4f86\uff0c\u5426\u5247\u6703\u8f38\u51fa\u975e\u9810\u671f\u7684\u7d50\u679c\u3002</p> <pre><code>#define PI 3.1426\n#define Pow2(x) (1 &lt;&lt; (x))\n#define F first\n#define S second\n#define all(x) ((x).begin(),(x).end())\n#define sum(x,y) 2*x+y\n\nint a = sum(1,2) * 10; // expect 40, but 22\n</code></pre>"},{"location":"syntax/other/#const","title":"<code>const</code>","text":"<p>\u7528\u65bc\u5efa\u7acb\u5e38\u6578\u3002</p> <pre><code>const double PI = acos(-1.0);\n</code></pre>"},{"location":"syntax/other/#range-based-for","title":"range based <code>for</code>","text":"<p>\u4e0d\u7528\u7d66\u51fa\u660e\u78ba\u7684\u958b\u555f\u548c\u7d50\u675f\u689d\u4ef6\uff0c\u5c31\u80fd\u904d\u6b77\u6574\u500b\u5bb9\u5668\u3002\u5982\u679c\u8981\u4fee\u6539\u5143\u7d20\uff0c\u8b8a\u6578\u9700\u5ba3\u544a\u6210\u53c3\u8003\u578b\u614b\u3002</p> <pre><code>vector&lt;int&gt; v={1,2,3,4,5};\n\nfor(int i = 0; i &lt; (int)v.size();++v)\ncout &lt;&lt; v[i] &lt;&lt; '\\n';\n\nfor(vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); ++it)\ncout &lt;&lt; *it &lt;&lt; '\\n';\n\nfor(int x: v)\ncout &lt;&lt; x &lt;&lt; '\\n';\n\nfor(int &amp;x: v)\n++x;\n\nfor(int x: v)\ncout &lt;&lt; x &lt;&lt; '\\n';\n</code></pre>"},{"location":"syntax/other/#auto","title":"<code>auto</code>","text":"<p>\u53ef\u4ee5\u81ea\u52d5\u5224\u5225\u8b8a\u6578\u578b\u614b\uff0c\u4f46\u5fc5\u9808\u7d66\u4ed6\u521d\u59cb\u503c\uff0c\u5426\u5247\u4ed6\u7121\u6cd5\u5224\u5225\u578b\u614b\uff0c<code>C++14</code> \u958b\u59cb\uff0c\u53ef\u7528\u5728\u51fd\u5f0f\u56de\u50b3\u503c\u3002</p> <pre><code>auto i; // error\nauto j = 1;\nauto f(){return 1;} // from C++14\n\nvector&lt;int&gt; v={1,2,3,4,5};\n\nfor(auto it = v.begin(); it != v.end(); ++it)\ncout &lt;&lt; *it &lt;&lt; '\\n';\n\nfor(auto x: v)\ncout &lt;&lt; x &lt;&lt; '\\n';\n</code></pre>"},{"location":"syntax/other/#typedef-using","title":"<code>typedef</code> \u548c <code>using</code>","text":"<p><code>typedef</code> \u53ef\u4ee5\u70ba\u578b\u614b\u53d6\u5225\u540d\uff0c\u5728\u4e4b\u5f8c\u7528\u5230\u8981\u5ba3\u544a\u8a72\u578b\u614b\u7684\u6642\u5019\uff0c\u53ef\u4ee5\u6253\u8a72\u578b\u614b\u4e4b\u5225\u540d\u3002<code>C++11</code> \u958b\u59cb\u53ef\u4ee5\u7528 <code>using</code> \u4f86\u9054\u5230\u76f8\u540c\u7684\u4e8b\u3002</p> <pre><code>typedef long long LL;\nusing LL = long long; // from C++11\n</code></pre>"},{"location":"syntax/other/#lambda","title":"lambda","text":"<p>\u5b9a\u7fa9\u533f\u540d\u51fd\u5f0f\u3002</p> <ul> <li>lambda-introducer\uff1a\u4e5f\u53eb Capture clause\uff0c\u5ba3\u544a\u5916\u90e8\u8b8a\u6578(\u5728\u53ef\u8996\u7bc4\u570d(scope)\u5167)\u50b3\u5165\u6b64\u51fd\u5f0f\u5167\u7684\u65b9\u6cd5\u3002</li> </ul> \u65b9\u6cd5 <ul> <li><code>[]</code>\uff1a\u5b8c\u5168\u4e0d\u6293\u53d6\u5916\u90e8\u7684\u8b8a\u6578\u3002</li> <li><code>[=]</code>\uff1a\u6240\u6709\u7684\u8b8a\u6578\u90fd\u4ee5\u50b3\u503c (call by value) \u7684\u65b9\u5f0f\u6293\u53d6\u3002</li> <li><code>[&amp;]</code>\uff1a\u6240\u6709\u7684\u8b8a\u6578\u90fd\u4ee5\u50b3\u53c3\u8003 (call by reference) \u7684\u65b9\u5f0f\u6293\u53d6\u3002</li> <li><code>[x,&amp;y]</code>\uff1a<code>x</code> \u8b8a\u6578\u4f7f\u7528\u50b3\u503c\uff0c<code>y</code> \u8b8a\u6578\u4f7f\u7528\u50b3\u53c3\u8003\u3002</li> <li><code>[=,&amp;y]</code>\uff1a\u9664\u4e86 <code>y</code> \u8b8a\u6578\u4f7f\u7528\u50b3\u53c3\u8003\u4ee5\u5916\uff0c\u5176\u9918\u7684\u8b8a\u6578\u7686\u4f7f\u7528\u50b3\u503c\u7684\u65b9\u5f0f\u3002</li> <li><code>[&amp;,x]</code>\uff1a\u9664\u4e86 <code>x</code> \u8b8a\u6578\u4f7f\u7528\u50b3\u503c\u4ee5\u5916\uff0c\u5176\u9918\u7684\u8b8a\u6578\u7686\u4f7f\u7528\u50b3\u53c3\u8003\u7684\u65b9\u5f0f\u3002</li> </ul> <ul> <li>lambda declarator\uff1a\u4e5f\u53eb\u53c3\u6578\u6e05\u55ae\uff0c\u50b3\u5165\u6b64\u51fd\u5f0f\u5c0d\u61c9\u8cc7\u6599\u3002</li> <li>mutable specification\uff1a\u6307\u5b9a\u4ee5\u50b3\u503c\u65b9\u5f0f\u6293\u53d6\u9032\u4f86\u7684\u5916\u90e8\u8b8a\u6578\uff0c\u53ef\u7701\u7565\u3002</li> </ul> \u9650\u5236 <ul> <li>\u4e0d\u53ef\u6307\u5b9a\u53c3\u6578\u7684\u9810\u8a2d\u503c\u3002</li> <li>\u4e0d\u53ef\u4f7f\u7528\u53ef\u8b8a\u9577\u5ea6\u7684\u53c3\u6578\u5217\u8868\u3002</li> <li>\u53c3\u6578\u5217\u8868\u4e0d\u53ef\u4ee5\u5305\u542b\u6c92\u6709\u547d\u540d\u7684\u53c3\u6578\u3002</li> </ul> <ul> <li>\u4f8b\u5916\u72c0\u6cc1\u898f\u683c\uff1a\u6307\u5b9a\u8a72\u51fd\u793a\u6703\u4e1f\u51fa\u7684\u4f8b\u5916\uff0c\u5176\u4f7f\u7528\u7684\u65b9\u6cd5\u8ddf\u4e00\u822c\u51fd\u6578\u7684\u4f8b\u5916\u6307\u5b9a\u65b9\u5f0f\u4e00\u6a23\uff0c\u53ef\u7701\u7565\u3002</li> <li>\u50b3\u56de\u503c\u578b\u5225\uff1a\u6307\u5b9a lambda expression \u50b3\u56de\u578b\u5225\uff0c\u5982\u679c lambda expression \u6240\u5b9a\u7fa9\u7684\u51fd\u6578\u5f88\u55ae\u7d14\uff0c\u53ea\u6709\u5305\u542b\u4e00\u500b\u50b3\u56de\u9673\u8ff0\u5f0f\uff08statement\uff09\u6216\u662f\u6839\u672c\u6c92\u6709\u50b3\u56de\u503c\u7684\u8a71\uff0c\u53ef\u7701\u7565\u3002</li> <li>compound-statement\uff1a\u4ea6\u7a31\u70ba Lambda \u4e3b\u9ad4(lambda body)\uff0c\u8ddf\u4e00\u822c\u7684\u51fd\u6578\u5167\u5bb9\u4e00\u6a23\u3002</li> </ul>"},{"location":"syntax/other/#bitsstdch","title":"<code>&lt;bits/stdc++.h&gt;</code>","text":"<p><code>&lt;bits/stdc++.h&gt;</code> \u662f C++ \u4e00\u500b include \u6240\u6709\u5176\u4ed6\u51fd\u5f0f\u5eab\u7684\u4e00\u500b\u51fd\u5f0f\u5eab\u3002</p> <p>\u512a\u9ede\u662f\u65b9\u4fbf\uff0c\u4e0d\u7528\u53e6\u5916 include \u5176\u4ed6\u51fd\u5f0f\u5eab\u3002</p> <p>\u4f46\u6709\u5e7e\u500b\u7f3a\u9ede\uff0c\u53ef\u4ee5\u53c3\u8003 \u9019\u7bc7\uff0c\u5176\u4e2d\u63d0\u5230 \u7576\u7528\u9019\u500b\u51fd\u5f0f\u5eab\uff0c<code>y1</code> \u53ef\u80fd\u5728\u67d0\u4e9b OJ \u6703\u9047\u5230 <code>Compilation Error</code>\u3002</p>"},{"location":"syntax/pointer/","title":"\u6307\u6a19 (Pointer)","text":""},{"location":"syntax/pointer/#pointer_1","title":"\u6307\u6a19 (Pointer) \u8207\u76f8\u95dc\u904b\u7b97\u5b50","text":"<p>\u4e00\u500b\u8b8a\u6578\u9664\u4e86\u5c0d\u61c9\u4e00\u7a2e\u8cc7\u6599\u578b\u614b\u3001\u4e00\u500b\u503c\uff0c\u9084\u5c0d\u61c9\u4e86\u4e00\u500b\u4f4d\u5740\uff08\u5132\u5b58\u8a72\u8b8a\u6578\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff09\u3002\u8981\u77e5\u9053\u4e00\u500b\u8b8a\u6578\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u7528\u50b3\u5740\u904b\u7b97\u5b50 <code>&amp;</code> \uff0c\u4e26\u9644\u503c\u7d66\u4e00\u500b\u8b8a\u6578\uff0c\u5b58\u653e\u4f4d\u7f6e\u7684\u8b8a\u6578\u7a31\u70ba\u300c\u6307\u6a19\u300d\u3002</p> <p>\u5728\u8b8a\u6578\u524d\u9762\u52a0\u4e0a <code>*</code> \uff0c\u5c31\u6210\u70ba\u6307\u6a19\uff0c\u6ce8\u610f <code>*</code> \u8981\u653e\u5728\u6bcf\u500b\u8b8a\u6578\u4e4b\u524d\uff0c\u6307\u6a19\u4e0d\u5fc5\u5728\u5ba3\u544a\u6642\u8ce6\u503c\u3002</p> <p>\u6307\u6a19\u6709\u7dad\u5ea6\u7684\u6982\u5ff5\uff0c\u4e00\u7dad\u6307\u6a19\u5b58\u653e\u4e00\u822c\u8b8a\u6578\u4e4b\u4f4d\u7f6e\uff0c\u4e8c\u7dad\u6307\u6a19\u5b58\u653e\u4e00\u7dad\u6307\u6a19\u4e4b\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u985e\u63a8\u3002</p> <p>\u5229\u7528\u9593\u63a5\u904b\u7b97\u5b50 <code>*</code> \uff0c\u900f\u904e\u6307\u6a19\u9593\u63a5\u64cd\u4f5c\u8b8a\u6578\u3002</p> * \u7684\u4e0d\u540c\u529f\u80fd <p>\u4e0b\u9762\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u6709\u5169\u6b21\u51fa\u73fe <code>*ptr</code> \uff0c\u4f46\u610f\u7fa9\u4e0d\u540c\u3002</p> <p>\u7b2c\u4e00\u6b21\u51fa\u73fe\u662f\u7528\u4f86\u5ba3\u544a <code>ptr</code> \u662f\uff08\u4e00\u7dad\uff09\u6307\u6a19\u3002</p> <p>\u5f8c\u9762\u51fa\u73fe\u7684\u90fd\u662f\u900f\u904e <code>ptr</code> \u6307\u6a19\u64cd\u4f5c <code>a</code> \u3002</p> <pre><code>int *a, b; // \u53ea\u6709 a \u662f\u6307\u6a19\u3002\n\nint val = 5;\nint *ptr = &amp;val;   // \u4e00\u7dad\u6307\u6a19 ptr\nint **ptr2 = &amp;ptr; // \u4e8c\u7dad\u6307\u6a19 ptr2\n\n// \u8a18\u61b6\u9ad4\u70ba\u52d5\u614b\u914d\u7f6e\uff0c\u6bcf\u6b21\u8dd1\u51fa\u7684\u7b54\u6848\u4e0d\u76e1\u76f8\u540c\u3002\n// \u8f38\u51fa\u70ba\u4e00\u500b 16 \u9032\u4f4d\u7684\u6578\u5b57\uff0c\u958b\u982d\u70ba `0x` \uff08\u4ee3\u8868 16 \u9032\u4f4d\uff09\u3002\ncout &lt;&lt; ptr &lt;&lt; '\\n';\n\ncout &lt;&lt; (*ptr) &lt;&lt; ' ' &lt;&lt; val &lt;&lt; '\\n';\n++(*ptr);\ncout &lt;&lt; (*ptr) &lt;&lt; ' ' &lt;&lt; val &lt;&lt; '\\n';\n</code></pre> <p>\u6307\u6a19\u6709\u4ee5\u4e0b\u512a\u9ede\uff1a</p> <ul> <li>\u50b3\u905e\u53c3\u6578\u6642\uff0c\u4e0d\u6703\u8907\u88fd\u53c3\u6578\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002</li> <li>\u5728\u57f7\u884c\u7a0b\u5f0f\u6642\uff0c\u8a18\u61b6\u9ad4\u662f\u6211\u5011\u6240\u9700\u8003\u91cf\u7684\u9ede\u4e4b\u4e00\uff0c\u4efb\u4f55\u8b8a\u6578\u53ef\u80fd\u6703\u5728\u4efb\u4f55\u6642\u523b\uff0c\u6210\u70ba\u4e0d\u9700\u8981\u7684\u8cc7\u8a0a\uff0c\u6210\u52d5\u614b\u8a18\u61b6\u9ad4\u53ef\u5728\u7a0b\u5f0f\u57f7\u884c\u904e\u7a0b\u6dfb\u52a0\u6216\u522a\u9664\u4efb\u4f55\u8a18\u61b6\u9ad4\uff0c\u6e1b\u5c11\u8a18\u61b6\u9ad4\u8cc7\u6e90\u3002</li> <li>\u76f8\u8f03\u9663\u5217\uff0c\u6307\u6a19\u53ef\u4ee5\u7c21\u6f54\u5730\u8868\u793a\u5404\u7a2e\u5716\u3001\u6a39\u7b49\u975e\u7dda\u6027\u8cc7\u6599\u7d50\u69cb\uff0c\u964d\u4f4e\u7dad\u8b77\u6210\u672c\u3002</li> </ul>"},{"location":"syntax/pointer/#reference","title":"\u53c3\u8003 (Reference)","text":"<p>\u53c3\u8003\u4ee3\u8868\u4e00\u500b\u8b8a\u6578\u7684\u5225\u540d\uff0c\u53ef\u76f4\u63a5\u53d6\u5f97\u8b8a\u6578\u7684\u4f4d\u5740\uff0c\u4e26\u9593\u63a5\u900f\u904e\u53c3\u8003\u5225\u540d\u4f86\u64cd\u4f5c\u7269\u4ef6\uff0c\u4f5c\u7528\u985e\u4f3c\u65bc\u6307\u6a19\uff0c\u4f46\u4e0d\u5fc5\u4f7f\u7528\u6307\u6a19\u8a9e\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e0d\u5fc5\u4f7f\u7528 <code>*</code> \u904b\u7b97\u5b50\u4f86\u64cd\u4f5c\u8b8a\u6578\u3002</p> <p>\u53c3\u8003\u5fc5\u9808\u5728\u5ba3\u544a\u6642\u8a2d\u521d\u59cb\u503c\u3002</p> <pre><code>int a = 5;\nint &amp;r = a;\n++r;\ncout &lt;&lt; r &lt;&lt; '\\n'; // 5\nint &amp;r2;           // Complier error\n</code></pre> <p>\u53c3\u8003\u6709\u4ee5\u4e0b\u512a\u9ede\uff1a</p> <ul> <li>\u50b3\u905e\u53c3\u6578\u6642\uff0c\u4e0d\u6703\u8907\u88fd\u53c3\u6578\uff0c\u964d\u4f4e\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002</li> <li>\u53ef\u53d6\u4ee3\u592a\u9577\u7684\u8b8a\u6578\uff08\u5982\uff1a <code>a[x][y][z]</code> )\uff0c\u589e\u52a0\u53ef\u8b80\u6027\u3002</li> </ul>"},{"location":"syntax/pointer/#_1","title":"\u51fd\u5f0f\u50b3\u5165\u53c3\u6578","text":"<p>\u51fd\u5f0f\u50b3\u5165\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u662f\u4e00\u822c\u3001\u6307\u6a19\u6216\u662f\u53c3\u8003\u578b\u614b\uff0c\u4ee5\u4e0b\u4ee5 Swap \u4f86\u4ecb\u7d39\uff1a</p> <p>Call by value\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u4e00\u822c\u578b\u614b\uff0c\u6703 \"\u8907\u88fd\" \u4e00\u4efd\u5230\u51fd\u5f0f\uff0c\u539f\u672c\u7684\u8b8a\u6578\u4e0d\u6703\u6709\u4efb\u4f55\u6539\u8b8a\u3002</p> <pre><code>void swap(int x, int y)\n{\ncout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; '\\n'; // 1 2\nint t = x;\nx = y;\ny = t;\ncout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; '\\n'; // 2 1\n}\n\nint main()\n{\nint a = 1, b = 2;\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\\n'; // 1 2\nswap(a, b);\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\\n'; // 1 2\n}\n</code></pre> <p>Call by address (value of pointer)\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u6307\u6a19\u578b\u614b\uff0c\u51fd\u5f0f\u5167\u7684\u8b8a\u6578\u6539\u8b8a\uff0c\u662f\u5c0d\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff0c\u6240\u4ee5\u539f\u672c\u7684\u6578\u5b57\u4e5f\u6703\u8ddf\u8457\u6539\u8b8a\u3002</p> <pre><code>void swap(int *x, int *y)\n{\ncout &lt;&lt; *x &lt;&lt; ' ' &lt;&lt; *y &lt;&lt; '\\n'; // 1 2\nint t = *x;\n*x = *y;\n*y = t;\ncout &lt;&lt; *x &lt;&lt; ' ' &lt;&lt; *y &lt;&lt; '\\n'; // 2 1\n}\n\nint main()\n{\nint a = 1, b = 2;\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\\n'; // 1 2\nswap(&amp;a, &amp;b);\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\\n'; // 2 1\n}\n</code></pre> <p>Call by reference\uff1a\u50b3\u5165\u7684\u8b8a\u6578\u70ba\u53c3\u8003\u578b\u614b\uff0c\u51fd\u6578\u5167\u7684\u8b8a\u6578\u662f\u539f\u672c\u8b8a\u6578\u7684\u5206\u8eab\uff0c\u6240\u4ee5\u51fd\u6578\u5167\u8b8a\u6578\u6539\u8b8a\u6642\uff0c\u539f\u672c\u8b8a\u6578\u4e5f\u6703\u8ddf\u8005\u6539\u8b8a\u3002</p> <pre><code>void swap(int &amp;x, int &amp;y)\n{\ncout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; '\\n'; // 1 2\nint t = x;\nx = y;\ny = t;\ncout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; '\\n'; // 2 1\n}\n\nint main()\n{\nint a = 1, b = 2;\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\\n'; // 1 2\nswap(a, b);\ncout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\\n'; // 2 1\n}\n</code></pre> <ol> <li> <p>\u6307\u6a19\u8207\u4f4d\u5740 in openhome.cc \u21a9</p> </li> </ol>"},{"location":"syntax/structure/","title":"\u81ea\u5b9a\u7fa9\u7d50\u69cb","text":"<p>\u81ea\u5b9a\u7fa9\u7d50\u69cb\u70ba\u4e00\u4e9b\u6210\u54e1\u5143\u7d20\uff08\u8cc7\u6599\uff09\u7684\u7d44\u5408\u9ad4\uff0c\u5728 <code>C</code> \u6709 <code>struct</code> \uff0c <code>C++</code> \u6709 <code>struct</code> \u548c <code>class</code> \uff0c <code>C</code> \u548c <code>C++</code> \u7684 <code>struct</code> \u662f\u4e0d\u540c\u7684\uff0c\u4ee5\u4e0b\u8b1b\u89e3\uff1a</p>"},{"location":"syntax/structure/#c-struct","title":"<code>C</code> \u7684 <code>struct</code>","text":"<ul> <li>\u5b9a\u7fa9\uff1a <code>{}</code> \u4e4b\u9593\u5b58\u653e\u6210\u54e1\u5143\u7d20\uff0c\u6210\u54e1\u5143\u7d20\u53ef\u4ee5\u793a\u6307\u6a19\u6216\u9663\u5217\uff0c <code>}</code> \u4e4b\u5f8c\u8981\u52a0\u4e0a <code>;</code> \u3002</li> <li>\u5ba3\u544a\uff1a\u5ba3\u544a\u53ef\u5728\u5b9a\u7fa9\u6642\u5ba3\u544a\uff08 <code>Line 6</code> )\uff0c\u4e5f\u53ef\u4ee5\u7368\u7acb\u5ba3\u544a\u4e00\u884c ( <code>Line 8-10</code> )\uff0c\u76f8\u4f3c\u5730\uff0c\u53ef\u4ee5\u5ba3\u544a\u70ba\u6307\u6a19\u6216\u662f\u9663\u5217\u3002</li> </ul> <pre><code>// struct\nstruct Item\n{\nint price;\nint weight;\n} apple;\n\nstruct Item banana1, banana2;\nstruct Item cake[10];\nstruct Item *itemPointer;\n\n// class\nclass Item\n{\npublic:\nint price, weight;\nint getPrice() { return price; }\n} apple;\n\nItem banana;\n</code></pre>"},{"location":"syntax/structure/#c-struct-class","title":"<code>C++</code> \u7684 <code>struct</code> \u548c <code>class</code>","text":"<p><code>C++</code> \u7684 <code>struct</code> \u548c <code>class</code> \u5c0e\u5165\u7269\u4ef6\u5c0e\u5411\u7684\u6982\u5ff5\uff0c\u9664\u4e86\u6210\u54e1\u5143\u7d20\uff0c\u9084\u53ef\u5b9a\u7fa9\u6210\u54e1\u51fd\u5f0f\u3002\u7368\u7acb\u5ba3\u544a\u6642\uff0c\u4e0d\u7528\u5728\u524d\u9762\u52a0\u4e0a <code>struct</code> \u548c <code>class</code> \u3002</p> <p><code>C++</code> \u7684 <code>struct</code> \u548c <code>class</code> \u7684\u5dee\u7570\u5728\u65bc\u6210\u54e1\u7684\u9810\u8a2d\u5b58\u53d6\u6b0a\u9650\uff0c\u6709 <code>public</code> \u3001 <code>protected</code> \u3001 <code>private</code> \u4e09\u7a2e\u6b0a\u9650\uff0c <code>strcut</code> \u6210\u54e1\u9810\u8a2d\u70ba <code>public</code> \uff0c <code>class</code> \u5247\u662f <code>private</code> \u3002</p> <ul> <li><code>public</code> : \u6240\u6709\u51fd\u5f0f\u53ef\u5b58\u53d6\u3002</li> <li><code>protected</code> : \u6210\u54e1\u51fd\u5f0f\u3001 <code>friend</code> \u985e\u5225\u6210\u54e1\u6216\u51fd\u5f0f\uff0c\u4ee5\u53ca\u884d\u751f\u985e\u5225\u53ef\u5b58\u53d6\u3002</li> <li><code>private</code> : \u6210\u54e1\u51fd\u5f0f\u53ca <code>friend</code> \u985e\u5225\u6210\u54e1\u6216\u51fd\u5f0f\u53ef\u5b58\u53d6\u3002</li> </ul> <pre><code>struct Item\n{\nint price, weight;\nint getPrice() { return price; }\n} apple;\n\nItem banana;\n</code></pre> friend \u95dc\u9375\u5b57 <p>\u6bcf\u500b\u4eba\u793e\u7fa4\u4e2d\u7684\u597d\u53cb\uff0c\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u767c\u4f48\u7684\u79c1\u4eba\u6587\u7ae0\uff0c <code>friend</code> \u5c31\u540c\u5982\u793e\u7fa4\u4e2d\u7684\u597d\u53cb\uff0c\u63d0\u4f9b <code>friend</code> \u985e\u5225\u6216\u51fd\u5f0f\u5b58\u53d6\u8a72\u7d50\u69cb\u7684\u5143\u7d20\u3002</p> <pre><code>struct Circle\n{\nprivate:\ndouble radius;\nfriend double area(Circle &amp;);\n};\n\ndouble area(Circle &amp;c) { return c.radius * c.radius * 3.14; }\n</code></pre> \u884d\u751f\u985e\u5225 <p>\u884d\u751f\u985e\u5225\u662f\u7269\u4ef6\u5c0e\u5411\u7684\u6982\u5ff5\uff0c\u5982\u679c <code>B</code> \u662f\u4e00\u7a2e <code>A</code> \uff0c <code>B</code> \u5c31\u662f <code>A</code> \u7684\u884d\u751f\u985e\u5225\uff0c <code>A</code> \u5c31\u662f <code>B</code> \u7684\u57fa\u790e\u985e\u5225\u3002</p> <p>\u4f8b\u5982\u300c\u6c7d\u8eca\u300d\u662f\u4e00\u7a2e\u300c\u4ea4\u901a\u5de5\u5177\u300d\uff0c\u90a3\u9ebc\u300c\u6c7d\u8eca\u300d\u5c31\u662f\u300c\u4ea4\u901a\u5de5\u5177\u300d\u7684\u884d\u751f\u985e\u5225\uff0c\u300c\u4ea4\u901a\u5de5\u5177\u300d\u5c31\u662f\u300c\u6c7d\u8eca\u300d\u7684\u57fa\u790e\u985e\u5225\u3002</p>"},{"location":"syntax/structure/#_2","title":"\u8a2a\u554f\u5143\u7d20","text":"<p>\u5c0d\u65bc\u4e00\u822c\u8b8a\u6578 <code>var</code> \uff0c\u7528 <code>var.name</code> \u3002 \u5c0d\u65bc\u6307\u6a19\u8b8a\u6578 <code>ptr</code> \uff0c\u7528 <code>ptr-&gt;name</code> \u6216 <code>(*ptr).name</code> \u3002</p>"},{"location":"syntax/structure/#override-overload","title":"\u8986\u8f09 (Override) \u548c\u591a\u8f09 (Overload)","text":"<p>\u8986\u8f09 (Override) \u662f\u6307\u5728\u884d\u751f\u985e\u5225\u91cd\u65b0\u6539\u5beb\u540c\u540d\u5beb\u300c\u53c3\u6578\u76f8\u540c\u300d\u7684\u51fd\u5f0f\u3002</p> <p>\u591a\u8f09 (Overload) \u662f\u6307\u5728\u91cd\u65b0\u6539\u5beb\u540c\u540d\u5beb\u300c\u53c3\u6578\u4e0d\u540c\u300d\u7684\u51fd\u5f0f\u3002</p> <pre><code>struct Transportation\n{\nstring color;\nvoid printColor()\n{\ncout &lt;&lt; \"The transportation's color is \" + color + \".\\n\";\n}\nvoid printColor(int year) // overload\n{\ncout &lt;&lt; \"These transportation was made in\" + year + \".\\n\";\ncout &lt;&lt; \"These transportation's color is \" + color + \".\\n\";\n}\n};\n\nstruct Car : Transportation\n{\nvoid printColor() // override\n{\ncout &lt;&lt; \"The car's color is \" + color + \".\\n\";\n}\n};\n</code></pre>"},{"location":"syntax/structure/#constructor-destructor","title":"\u5efa\u69cb\u51fd\u5f0f (Constructor)\u3001\u89e3\u69cb\u51fd\u5f0f (Destructor)","text":"<p>\u5efa\u69cb\u51fd\u5f0f\u7d50\u69cb\u7684\u540d\u7a31\u76f8\u540c\uff0c\u662f\u7528\u4f86\u521d\u59cb\u5316\u7d50\u69cb\u88e1\u7684\u8cc7\u6599\uff0c\u5982\u679c\u6c92\u6709\u4efb\u4f55\u5efa\u69cb\u51fd\u5f0f\uff0c\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7121\u53c3\u6578\u7684\u9810\u8a2d\u5efa\u69cb\u51fd\u5f0f\u3002\u7136\u800c\uff0c\u5982\u679c\u6709\u4e00\u500b\u5e36\u53c3\u6578\u7684\u5efa\u69cb\u51fd\u5f0f\uff0c\u5c31\u4e0d\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7121\u53c3\u6578\u7684\u9810\u8a2d\u5efa\u69cb\u51fd\u5f0f\uff0c\u9019\u6642\u5019\u8981\u5beb\u4e00\u500b\u4e0d\u5e36\u4efb\u4f55\u53c3\u6578\u7684\u904b\u7b97\u51fd\u5f0f\uff0c\u5426\u5247\u53ef\u80fd\u5c0e\u81f4\u7a0b\u5f0f\u5728\u7de8\u8b6f\u6642\u767c\u751f\u932f\u8aa4\u3002</p> <p>\u89e3\u69cb\u51fd\u5f0f\u7684\u540d\u5b57\u5f62\u5f0f\u70ba <code>~\u7d50\u69cb\u7684\u540d\u7a31</code> \uff0c\u5728\u8b8a\u6578\u96e2\u958b\u4f5c\u7528\u57df\u6642\u904b\u4f5c\uff0c\u4e0d\u5beb\u7684\u8a71\u4e5f\u662f\u6703\u6709\u9810\u8a2d\u89e3\u69cb\u51fd\u5f0f\uff0c\u5728\u7a0b\u5f0f\u6bd4\u8cfd\u4e2d\u7d55\u5927\u90e8\u5206\u7684\u72c0\u6cc1\uff0c\u4e0d\u7528\u7279\u5225\u5beb\u89e3\u69cb\u51fd\u5f0f\u3002</p> <p>\u5efa\u69cb\u51fd\u5f0f\u548c\u89e3\u69cb\u51fd\u5f0f\u7684\u5b58\u53d6\u6b0a\u9650\u5fc5\u70ba <code>public</code> \u3002</p>"},{"location":"syntax/structure/#operator-overloading","title":"\u591a\u8f09\u904b\u7b97\u5b50\uff08Operator overloading)","text":"<p><code>C/C++</code> \u5b9a\u7fa9\u4e86\u5404\u7a2e\u904b\u7b97\u5b50\uff0c\u81ea\u5b9a\u7fa9\u7d50\u69cb\u6839\u64da\u9700\u6c42\u53ef\u4ee5\u591a\u8f09\u904b\u7b97\u5b50\u3002\u5728\u7af6\u8cfd\u4e2d\uff0c\u5e38\u9700\u8981\u4f5c\u6392\u5e8f\u800c\u9700\u8981\u591a\u8f09\u5c0f\u65bc\u904b\u7b97\u5b50\uff08 <code>&lt;</code> )\u3002</p> <pre><code>struct Plane\n{\nint x, y;\n// Constructor\nPlane(){};\nPlane(int _x, int _y) : x(_x), y(_y) {}\n// Operator overloading\nbool operator&lt;(const Plane &amp;rhs) const\n{\nif (x != rhs.x)\nreturn x &lt; rhs.x;\nreturn y &lt; rhs.y;\n}\n// Destructor\n~Plane(){};\n};\n\nint main()\n{\nPlane p1;\nPlane p2(1, 2);\nPlane p3 = Plane();\nPlane p4 = Plane(0, 0);\n}\n</code></pre>"},{"location":"syntax/structure/#_3","title":"\u9577\u5ea6","text":"<p>\u7d50\u69cb\u7684\u9577\u5ea6\uff0c\u4e26\u975e\u70ba\u6240\u6709\u5143\u7d20\u76f8\u52a0\uff0c <code>C/C++</code> \u7684\u7d50\u69cb\u9577\u5ea6\u914d\u7f6e\u6703\u9032\u884c\u300c\u5c0d\u9f4a\u7684\u6700\u4f73\u5316\u300d\u3002struct \u6703\u5206\u6210\u5f88\u591a\u584a\u5b58\u653e\uff0c\u6bcf\u4e00\u584a\u6703\u662f\u6700\u5927\u5143\u7d20\u7684\u9577\u5ea6\u70ba\u5c0d\u9f4a\u57fa\u6e96\uff0c\u5143\u7d20\u6703\u4f9d\u5ba3\u544a\u7684\u9806\u5e8f\u64fa\u653e\uff0c\u9023\u7e8c\u7684\u5143\u7d20\u6703\u653e\u5728\u540c\u4e00\u584a\uff0c\u5982\u679c\u4e0d\u5920\u7a7a\u9593\u64fa\u653e\u624d\u6703\u653e\u5728\u4e0b\u4e00\u584a\u3002</p> <p>\u4ee5\u4e0b\u4f8b\u5b50\u4f5c\u70ba\u8aaa\u660e\uff0c\u5728\u9019\u88e1\uff0c\u6211\u5011 <code>sizeof</code> \u9019\u500b\u904b\u7b97\u5b50\u6c42\u51fa\u7d50\u69cb\u7684\u9577\u5ea6\u3002</p> <pre><code>struct Data1\n{\nchar ch1;\nint i;\nchar ch2;\n};\n\nstruct Data2\n{\nchar ch1;\nchar ch2;\nint i;\n};\n\nint main()\n{\ncout &lt;&lt; sizeof(Data1) &lt;&lt; '\\n';\ncout &lt;&lt; sizeof(Data2) &lt;&lt; '\\n';\n}\n\n/*\n12\n8\n*/\n</code></pre> <p><code>Data1</code> \u548c <code>Data2</code> \u7576\u4e2d\u6700\u5927\u5143\u7d20\u9577\u5ea6\u70ba 4 ( <code>int</code> )\u3002 <code>Data1</code> \uff0c\u7528\u4e86  \u584a\u4f86\u5b58  \u500b <code>struct</code> \uff0c\u7b2c\u4e00\u584a\u5b58 <code>char ch1</code> \uff0c\u7b2c\u4e8c\u584a\u5b58 <code>int i</code> \uff0c\u7b2c\u4e09\u584a\u5b58 <code>char ch2</code> \uff0c\u56e0\u6b64\u9577\u5ea6\u70ba  \uff1b <code>Data2</code> \uff0c\u7528\u4e86  \u584a\u4f86\u5b58  \u500b <code>struct</code> \uff0c\u7b2c\u4e00\u584a\u5b58 <code>char ch1</code> \u548c <code>char ch2</code> \uff0c\u7b2c\u4e8c\u584a\u5b58 <code>int i</code> \uff0c\u56e0\u6b64\u9577\u5ea6\u70ba  \u3002</p>"},{"location":"syntax/structure/#_4","title":"\u70ba\u4ec0\u9ebc\u8981\u7528\u81ea\u5b9a\u7fa9\u7d50\u69cb","text":"<p>\u8cc7\u6599\u5b58\u653e\u6709\u5f88\u591a\u7a2e\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u958b\u591a\u500b\u9663\u5217\u4f86\u53d6\u4ee3\u81ea\u5b9a\u7fa9\u7d50\u69cb\uff0c\u4f46\u6709\u4e9b\u64cd\u4f5c\u6703\u76f4\u63a5\u5c07\u8cc7\u6599\u79fb\u52d5\uff0c\u5305\u542b\u6392\u5e8f\u548c\u522a\u9664\uff0c\u5982\u679c\u7528\u591a\u500b\u9663\u5217\u5132\u5b58\uff0c\u9700\u8981\u78ba\u4fdd\u6bcf\u500b\u9663\u5217\u7684\u8cc7\u6599\u90fd\u88ab\u6b63\u78ba\u7684\u79fb\u52d5\uff1b\u4f7f\u7528\u7d50\u69cb\uff0c\u5c31\u4e0d\u7528\u53bb\u7dad\u8b77\u9019\u4ef6\u4e8b\u60c5\u3002</p> <p>\u518d\u4f86\u662f\u591a\u500b\u7d50\u69cb\u53ef\u80fd\u6703\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u5143\u7d20\u3002\u4f8b\u5982 apple \u548c banana\uff0c\u5b83\u5011\u90fd\u6709\u4e00\u500b\u6210\u54e1\u5143\u7d20 price\uff0c\u5982\u679c\u7528\u591a\u500b\u9663\u5217\u5132\u5b58\uff0c\u5b83\u5011\u4e0d\u80fd\u5171\u7528\u540c\u4e00\u500b\u9663\u5217 <code>price[]</code> \uff0c\u8981\u5beb\u6210 <code>priceOfApple</code> \u548c <code>priceOfBanana</code> \uff1b\u5982\u679c\u7528\u7d50\u69cb\uff0c\u5c31\u53ef\u4ee5\u8b93\u4e0d\u540c\u7d50\u69cb\u64c1\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u5143\u7d20\uff08\u4f8b\u5982 <code>a.price</code> \u548c <code>b.price</code> ) \u4f86\u5340\u5206\u3002</p> <ol> <li> <p>Override \u8207 Overload \u7684\u5dee\u5225 - \u6a58\u5b50\u4e82\u8aaa\u8a71 \u21a9</p> </li> <li> <p>\u5b9a\u7fa9\u7d50\u69cb - openhome.cc \u21a9</p> </li> <li> <p>How To Calculate Size Of Structure And Class in C &amp; C++ - CppNuts in Youtube \u21a9</p> </li> <li> <p>\u7ed3\u6784\u4f53 - OI Wiki \u21a9</p> </li> </ol>"},{"location":"syntax/type/","title":"\u57fa\u790e\u8cc7\u6599\u578b\u614b\u578b\u5225","text":""},{"location":"syntax/type/#_2","title":"\u5132\u5b58\u8cc7\u6599","text":"<p>\u96fb\u8166\u662f\u4ee5\u4e8c\u9032\u4f4d\u5132\u5b58\u8cc7\u6599\uff0c\u4e8c\u9032\u4f4d\u662f\u6307\u6578\u5b57\u662f\u7531  \u7d44\u6210\uff0c\u76f8\u8f03\u65bc\u5e38\u898b\u7684\u5341\u9032\u4f4d\u662f\u7531  \u7d44\u6210\uff0c\u4e00\u500b  \u6216  \u7a31\u70ba\u4f4d\u5143 (bit)\uff0c8 bits \u7a31\u70ba byte\uff08\u4f4d\u5143\u7d44\uff09\uff0cbyte \u662f\u96fb\u8166\u57fa\u672c\u5132\u5b58\u55ae\u4f4d\uff0c\u4e0b\u8868\u70ba\u5404\u7a2e\u5e38\u898b\u96fb\u8166\u5132\u5b58\u55ae\u4f4d\u3002</p> \u55ae\u4f4d \u5099\u8a3b 1B 1 byte 1KB 1024 bytes 1MB 1024 KBs 1GB 1024 MBs <p>\u5728 C/C++ \u88e1\uff0c\u5c07\u6240\u6709\u7684\u57fa\u790e\u8cc7\u6599\u578b\u614b\u5206\u6210\u56db\u985e\u8aaa\u660e\uff0c\u4f9d\u5e8f\u662f\u6574\u6578\u3001\u6d6e\u9ede\u6578\u3001\u5b57\u5143\u3001\u5e03\u6797\u503c\u3002</p>"},{"location":"syntax/type/#_3","title":"\u6574\u6578","text":"<p>\u6574\u6578\u5206\u6210\u5169\u500b\u90e8\u5206\uff0c\u6700\u5de6\u908a\u7684\u4f4d\u5143\u8868\u793a\u6b63\u8ca0\u865f\uff08  : \u6b63\uff0c  : \u8ca0\uff09\uff0c\u5176\u9918\u8868\u793a\u6578\u5b57\u3002 \u901a\u5e38\u6703\u4ee5 int \u4f5c\u70ba\u6574\u6578\u578b\u614b\uff0cint \u517c\u9867\u7bc4\u570d\u5927\u5c0f\u548c\u8a18\u61b6\u9ad4\u5927\u5c0f\u3002\u5982\u679c\u5b58\u7684\u6578\u5b57\u4fdd\u8b49\u4e0d\u6703\u7528\u5230\u8ca0\u6578\u7684\u8a71\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a unsigned\uff0c\u9019\u6a23\u6700\u5de6\u908a\u7684\u4f4d\u5143\u4e5f\u6703\u7528\u4f86\u8868\u793a\u6578\u5b57\u3002</p>"},{"location":"syntax/type/#_4","title":"\u6ea2\u4f4d","text":"<p>\u4e0a\u8868\u6709\u7d66\u51fa\u6bcf\u7a2e\u578b\u614b\u7684\u7bc4\u570d\u3002\u5047\u8a2d\u5169\u500b\u76f8\u540c\u578b\u614b\u52a0\u7e3d\u5f8c\u8d85\u904e\u7bc4\u570d\uff0c\u90a3\u9ebc\u6700\u9ad8\u4f4d\uff08\u6700\u5de6\u908a\uff09\u9032\u4f4d\u5f8c\u6703\u88ab\u6368\u53bb\uff0c\u9020\u6210\u7d50\u679c\u548c\u6b63\u78ba\u503c\u4e0d\u540c\uff0c\u9019\u500b\u72c0\u6cc1\u7a31\u4e4b\u70ba\u6ea2\u4f4d\u3002</p> <pre><code>#include &lt;cstdio&gt;\n\nint main()\n{\nint a = 1000000000, b = 2000000000;\nprintf(\"%d\\n\", a + b);\n}\n\n/*\n-1294967296\n*/\n</code></pre> <p></p> \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d short short int, signed short int  to  unsigned short unsigned short int  to  int signed, signed int  to  unsigned int unsigned  to  long long long long int, signed long long  to  unsigned long long unsigned long long int  to"},{"location":"syntax/type/#_5","title":"\u6d6e\u9ede\u6578","text":"<p>\u6d6e\u9ede\u6578\u5206\u6210  \u500b\u90e8\u5206\uff0csign bit\uff08\u7b26\u865f\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b63\u8ca0\u865f\u3001exponent\uff08\u6307\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u6b21\u65b9\u6578\u3001mantissa\uff08\u5c3e\u6578\uff09\uff1a\u7528\u4f86\u8868\u793a\u7cbe\u78ba\u5ea6\u3002</p> \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d \u7cbe\u5ea6 float \u7121 4 3.4E +/- 38 7 digits double long double 8 1.7E +/- 308 15 digits <p>\u6d6e\u9ede\u6578\u5132\u5b58\u4e5f\u6703\u6709\u9650\u5236\uff0c\u5982\u679c\u5c0f\u6578\u9ede\u5f8c\u500b\u4f4d\u6578\u904e\u591a\uff0c\u6703\u88ab\u6368\u53bb\u9020\u6210\u8aa4\u5dee\uff0cfloat \u4fdd\u8b49\u4ee5 10 \u9032\u4f4d\u8868\u793a\u6642\uff0c\u5c0f\u6578\u9ede\u5f8c 7 \u4f4d\u5167\u6703\u662f\u6b63\u78ba\uff0cdouble \u5247\u662f 15 \u4f4d\u3002</p>"},{"location":"syntax/type/#_6","title":"\u5b57\u5143","text":"<p>C/C++ \u63a1\u7528 ASCII \u5b57\u5143\u96c6\uff0c\u4e00\u500b\u6578\u5b57\u5c0d\u61c9\u4e00\u500b\u5b57\u6bcd\uff0c\u4f46\u9019\u4efd\u5b57\u5143\u96c6\u53ea\u6709\u82f1\u6587\u5b57\u6bcd\u3001\u6578\u5b57\u3001\u5e38\u898b\u7684\u7b26\u865f\uff0c\u5176\u4ed6\u570b\u5bb6\u7684\u6587\u5b57\u5247\u7121\u3002</p> <p></p> \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d char \u7121 1 -128 to 127 unsigned char \u7121 1 0 to 255 wchar \u7121 2 0 to 65,535"},{"location":"syntax/type/#c","title":"\u5e03\u6797\u503c\uff08C++)","text":"<p>\u5e03\u6797\u503c\u53ea\u6709\u5169\u7a2e\u690d Ture (1 \u6216\u662f\u8aaa \u975e 0)\u3001False (0)\uff0c\u7576\u4f5c\u908f\u8f2f\u8b8a\u6578\uff0c\u76f8\u8f03\u5229\u7528\u6574\u6578\u578b\u614b\uff0c\u6709\u5169\u500b\u6709\u512a\u52e2\uff0c\u4e00\u500b\u662f\u7bc0\u7701\u8a18\u61b6\u9ad4\uff0c\u4e8c\u662f\u53ef\u4ee5\u660e\u78ba\u8868\u793a\u662f\u7528\u4f86\u8a18\u9304 True/False \u72c0\u614b\u3002</p> \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d bool \u7121 1 0 to 1"},{"location":"syntax/type/#_7","title":"\u5f8c\u8a18","text":"<p>\u9084\u6709\u4e00\u500b\u578b\u614b enum\uff0c\u9019\u88e1\u5148\u4e0d\u63d0\u3002</p> \u540d\u7a31 \u5225\u7a31 \u4f4d\u5143\u7d44 \u7bc4\u570d enum \u7121 varies TBA"},{"location":"tool/cmd/","title":"\u547d\u4ee4\u5217 (Command Line)","text":""},{"location":"tool/cmd/#mingw","title":"MinGW","text":"<p>\u8981\u5728\u96fb\u8166\u7de8\u8b6f C \u6216 C++ \u7684\u6a94\u6848\u9700\u5b89\u88dd MinGW </p> <ul> <li> <p>\u8f09\u9ede\uff1a https://sourceforge.net/projects/mingw/ </p> </li> <li> <p>\u5176\u4ed6\u8a2d\u5b9a\u90fd\u4e0d\u7528\u6539\uff0c\u76f4\u5230\u9019\u908a\u9078 Mark All Upgrade</p> <ul> <li></li> </ul> </li> <li> <p>\u518d\u9078 Apply Change</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"tool/cmd/#_1","title":"\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff1a","text":"<ul> <li>\u5c0d\u672c\u6a5f\u9ede\u53f3\u9375\u9078\u5167\u5bb9<ul> <li></li> </ul> </li> <li>\u9032\u968e\u7cfb\u7d71\u8a2d\u5b9a<ul> <li></li> </ul> </li> <li>\u74b0\u5883\u8b8a\u6578<ul> <li></li> </ul> </li> <li>\u9ede\u958b\u7cfb\u7d71\u8b8a\u6578\u4e2d\u7684 PATH<ul> <li></li> </ul> </li> <li>\u65b0\u589e <code>C:\\MinGW\\bin</code> \uff08\u9810\u8a2d\u5728\u9019\u500b path \u4e0b\uff09<ul> <li></li> </ul> </li> <li>\u6253\u958b cmd<ul> <li></li> </ul> </li> <li>\u8f38\u5165 <code>gcc --version</code> \uff08\u6216 <code>g++ --version</code> ) \u6aa2\u67e5\u662f\u5426\u5b89\u88dd\u6210\u529f<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/cmd/#_2","title":"\u683c\u5f0f","text":"<ul> <li>C: <code>gcc*.c -o*.exe</code> </li> <li>C++: <code>g++*.cpp -o*.exe</code> </li> <li>Note: <code>-o</code> \u662f\u8b93\u81ea\u5df1\u53ef\u4ee5\u9078\u64c7 exe \u6a94\u8981\u53eb\u4ec0\u9ebc\u540d\u5b57\uff0c\u4e0d\u7136\u9810\u8a2d\u90fd\u6703\u70ba <code>a.exe</code> </li> </ul>"},{"location":"tool/cmd/#_3","title":"\u7bc4\u4f8b","text":"<p>\u524d\u63d0\uff1a <code>a.cpp</code> \u5b58\u5728\u684c\u9762</p> <ul> <li>\u6253\u958b cmd</li> <li>\u5230 <code>a.cpp</code> \u6a94\u6848\u8def\u5f91\uff1a <code>cd C:\\\\Users\\\\User_name\\\\Desktop</code> \uff08\u82e5\u5b58\u5728\u684c\u9762\u901a\u5e38\u6253\u958b cmd\uff0c\u53ef\u4ee5\u76f4\u63a5 <code>cd Desktop</code> )</li> <li>\u7de8\u8b6f\uff1a <code>g++ a.cpp -o a.exe</code> </li> <li>\u57f7\u884c\uff1a <code>a.exe</code> <ul> <li></li> </ul> </li> <li>\u8f38\u5165\u548c\u8f38\u51fa\uff1a <code>a.exe&amp;lt;in.in&gt; out.out</code> </li> </ul>"},{"location":"tool/codeblocks/","title":"Code::Blocks","text":"<ul> <li>\u8f09\u9ede\uff1a http://www.codeblocks.org/downloads </li> </ul>"},{"location":"tool/codeblocks/#ccpp","title":"\u5efa\u7acb c/cpp \u6a94","text":"<ul> <li>Create a new project<ul> <li></li> </ul> </li> <li>Console application<ul> <li></li> </ul> </li> <li>Select C/C++<ul> <li></li> </ul> </li> <li>\u8f38\u5165 Project title, \u9078\u60f3\u653e\u7684\u8def\u5f91<ul> <li></li> </ul> </li> <li>Finished<ul> <li></li> </ul> </li> <li>\u9ede\u958b Sources, \u5373\u53ef\u627e\u5230 c/cpp \u6a94<ul> <li></li> </ul> </li> <li>\u5728\u525b\u525b\u9078\u64c7\u5b58\u653e\u7684\u8def\u5f91\u4e5f\u53ef\u4ee5\u627e\u5230 Project Folder<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/codeblocks/#_1","title":"\u5e38\u7528\u71b1\u9375","text":"\u6307\u4ee4 \u529f\u80fd Ctrl + F9 \u7de8\u8b6f Ctrl + F10 \u904b\u884c\u4e0a\u6b21\u6210\u529f\u7de8\u8b6f\u7684\u6a94\u6848 F9 \u7de8\u8b6f\u4e26\u57f7\u884c\u6a94\u6848\uff08\u5982\u6709 Error \u5247\u6703\u5831\u932f\uff09 Shift + F2 \u95dc\u9589/\u958b\u555f\u5de6\u5074\u8cc7\u8a0a\u6b04"},{"location":"tool/codebook/","title":"Codebook \u6e96\u5099","text":"<p>\u9019\u88e1\u63d0\u4f9b\u5e38\u898b\u653e\u5230 Codebook \u7684\u4e3b\u984c\uff0c\u6bcf\u652f\u968a\u4f0d\u4f9d\u64da\u7a0b\u5ea6\u9078\u64c7\u653e\u4e0d\u540c\u7684\u7a0b\u5f0f\u78bc\uff0c\u7a0b\u5f0f\u78bc\u53d6\u6368\u539f\u5247\u5982\u4e0b\uff1a</p> <ul> <li>\u4e0d\u77e5\u9053\u8981\u600e\u9ebc\u7528\u7684\u7a0b\u5f0f\u78bc\u512a\u5148\u5ea6\u6700\u4f4e</li> <li>\u96e3\u8a18\u7684\u7a0b\u5f0f\u78bc\u512a\u5148\u5ea6\u6bd4\u597d\u8a18\u7684\u7684\u7a0b\u5f0f\u78bc\u9ad8</li> <li>\u5e38\u898b\u7684\u7a0b\u5f0f\u78bc\u512a\u5148\u5ea6\u9ad8</li> </ul>"},{"location":"tool/codebook/#_1","title":"\u6a21\u677f","text":"<p>\u6a21\u677f\u5728\u958b\u5c40\u7684\u6642\u5019\u7531\u4e00\u4f4d\u968a\u54e1\u64b0\u5beb\uff0c\u4e4b\u5f8c\u6bcf\u984c\u984c\u76ee\u5148\u8907\u88fd\u4e00\u4efd\u6a21\u677f\u518d\u4f7f\u7528\uff0c\u6a21\u677f\u88e1\u6703\u653e\u4e00\u4e9b\u5e38\u898b\u7684\u7e2e\u5beb\uff0c\u901a\u5e38\u7528 <code>define</code>, <code>using</code> \u5b9a\u7fa9\u3002</p> <p>\u4f7f\u7528 vimrc \u53ef\u4ee5\u653e\u5165 <code>.vimrc</code>\uff0c\u9084\u53ef\u4ee5\u653e\u7de8\u8b6f\u7684\u57f7\u884c\u7684\u8173\u672c\u3002</p>"},{"location":"tool/codebook/#_2","title":"\u57fa\u790e","text":"<ul> <li>\u5404\u7a2e\u8f38\u5165\u3001\u8f38\u51fa<ul> <li><code>getline</code></li> <li><code>stringstream</code></li> </ul> </li> <li><code>algorithm</code> \u51fd\u5f0f\u5eab<ul> <li><code>sort</code></li> <li><code>next_permutation</code>,<code>prev_permutation</code></li> <li>Binary search \u76f8\u95dc</li> </ul> </li> </ul> <pre><code>lower_bound(a, a + n, k);     //\u6700\u5de6\u908a \u2265 k \u7684\u4f4d\u7f6e\nupper_bound(a, a + n, k);     //\u6700\u5de6\u908a &gt; k \u7684\u4f4d\u7f6e\nupper_bound(a, a + n, k) - 1; //\u6700\u53f3\u908a \u2264 k \u7684\u4f4d\u7f6e\nlower_bound(a, a + n, k) - 1; //\u6700\u53f3\u908a &lt; k \u7684\u4f4d\u7f6e\n[lower_bound, upper_bound) //\u7b49\u65bc k \u7684\u7bc4\u570d\nequal_range(a, a+n, k);\n</code></pre>"},{"location":"tool/codebook/#stl","title":"STL","text":"<ul> <li><code>priority_queue</code></li> <li><code>map</code></li> <li><code>set</code></li> <li><code>vector</code></li> <li><code>string</code></li> </ul>"},{"location":"tool/codebook/#_3","title":"\u5716\u8ad6","text":"<ul> <li>\u4e26\u67e5\u96c6</li> <li>\u6700\u5c0f\u751f\u6210\u6a39</li> <li>\u6700\u77ed\u8def<ul> <li>Floyd-Warshall</li> <li>Bellman-Ford</li> <li>SPFA</li> <li>Dijkstra\u2019s</li> </ul> </li> <li>\u6700\u4f4e\u5171\u540c\u7956\u5148</li> <li>\u9023\u901a\u6027<ul> <li>Tarjan</li> <li>Kosaraju's</li> </ul> </li> <li>\u6b50\u62c9\u8ff4\u8def</li> </ul>"},{"location":"tool/codebook/#_4","title":"\u4e8c\u5206\u5716\u548c\u6d41","text":"<ul> <li>\u4e8c\u5206\u5716\u5224\u5b9a</li> <li>\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d</li> <li>\u4e8c\u5206\u5716\u6700\u5927\u6b0a\u91cd\u5339\u914d</li> <li>Dinic \u6700\u5927\u6d41\u6f14\u7b97\u6cd5</li> <li>\u8cbb\u7528\u6d41\u6f14\u7b97\u6cd5</li> </ul>"},{"location":"tool/codebook/#_5","title":"\u6578\u5b78","text":"<ul> <li>\u8cea\u56e0\u6578\u5206\u89e3</li> <li>\u6b50\u62c9\u5b9a\u7406  </li> <li>\u64f4\u5c55\u6b50\u57fa\u91cc\u5fb7\u6f14\u7b97\u6cd5</li> <li>\u5feb\u901f\u51aa</li> <li>\u4e2d\u570b\u5269\u9918\u5b9a\u7406</li> <li>\u4e00\u4e9b\u6578\u5b78\u5b9a\u7406</li> </ul>"},{"location":"tool/codebook/#python","title":"Python","text":"<ul> <li>\u4e00\u4e9b\u7528\u6709\u7684\u51fd\u5f0f(\u8981\u78ba\u5b9a\u5167\u5efa)</li> <li>eof \u5beb\u6cd5</li> <li>eval</li> </ul>"},{"location":"tool/contesttool/","title":"Contest Tool","text":"<p>\u5c08\u6848\u9023\u7d50</p> <p>\u672c\u7bc7\u6587\u4ecb\u7d39\u6b64\u5c08\u6848\u7684\u529f\u80fd\uff0c\u5305\u542b\uff1a</p> <ul> <li>\u88fd\u4f5c\u984c\u672c</li> <li>\u5c07\u984c\u76ee\u6253\u5305\u6210\u58d3\u7e2e\u6a94</li> <li>\u751f\u6210\u6e2c\u8cc7</li> <li>\u532f\u51fa Domjudge \u7a0b\u5f0f\u78bc\u4e26\u4f9d Team ID \u5132\u5b58\u548c\u58d3\u7e2e</li> <li>\u5bc4\u51fa\u7a0b\u5f0f\u78bc</li> </ul>"},{"location":"tool/contesttool/#_1","title":"\u984c\u76ee\u8cc7\u6599\u593e","text":"<p>\u6bcf\u9053\u984c\u76ee\u90fd\u7528\u4e00\u500b\u8cc7\u6599\u593e\u5b58\u653e\uff0c\u88e1\u9762\u7684\u8cc7\u6599\u5982\u4e0b\uff1a</p> <ul> <li><code>data</code>\uff1a\u6e2c\u8cc7\u3002<ul> <li><code>sample</code> \u70ba\u7bc4\u4f8b\u6e2c\u8cc7\uff0c<code>secret</code> \u70ba\u96b1\u85cf\u6e2c\u8cc7\u3002</li> <li>\u8f38\u5165\u70ba <code>in</code> \u6a94\uff0c\u8f38\u51fa\u70ba <code>ans</code> \u6a94\u3002</li> </ul> </li> <li><code>domjudge-problem.ini</code>\uff1a Domjudge \u8a2d\u5b9a\u6a94\u3002</li> <li><code>*.tex</code>\uff1a\u984c\u672c <code>tex</code> \u6a94\u3002<ul> <li><code>statment</code>\uff1a\u984c\u76ee\u6558\u8ff0\u3002</li> <li><code>input</code>\uff1a\u8f38\u5165\u8aaa\u660e\u3002</li> <li><code>output</code>\uff1a\u8f38\u51fa\u8aaa\u660e\u3002</li> <li><code>spec</code>\uff1a\u6e2c\u8cc7\u7bc4\u570d\u8aaa\u660e\u3002</li> <li><code>hint</code>\uff1a\u63d0\u793a\u3002</li> </ul> </li> <li><code>generate.py</code>\uff1a\u751f\u6e2c\u8cc7\u5de5\u5177\u3002</li> <li><code>problem.{pdf,html,txt}</code>\uff1a\u984c\u672c\u3002</li> <li><code>submissions</code>\uff1a\u7bc4\u4f8b\u7a0b\u5f0f\uff0c\u7a0b\u5f0f\u78bc\u7684\u547d\u540d\u4e0d\u62d8\uff0c\u5b50\u8cc7\u6599\u593e\u540d\u7a31\u5982\u4e0b\uff1a<ul> <li><code>accecpted</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>AC</code>\u3002</li> <li><code>wrong_answer</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>WA</code>\u3002</li> <li><code>time_limit_exceeded</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>TLE</code>\u3002</li> <li><code>run_time_error</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>RE</code>\u3002</li> </ul> </li> </ul> \u8a73\u7d30\u7d50\u69cb <pre><code>|-- data\n|   |-- sample\n|   |   |-- 1.ans\n|   |   |-- 1.in\n|   |   |-- 2.ans\n|   |   |-- 2.in\n|   |   `-- ....\n|   `-- secret\n|       |-- 1.ans\n|       |-- 1.in\n|       |-- 2.ans\n|       |-- 2.in\n|       `-- ....\n|-- domjudge-problem.ini\n|-- generate.py\n|-- hint.tex\n|-- input.tex\n|-- output.tex\n|-- problem.{pdf,html,txt}\n|-- spec.tex\n|-- statment.tex\n`-- submissions\n    `-- accepted\n        |-- 1.cpp\n        |-- 1.py\n        |-- Main.java\n        `-- ...\n</code></pre> <p>\u8a73\u7d30\u8acb\u53c3\u8003 <code>sample</code> \u8cc7\u6599\u593e\uff0c<code>script/folderGenerator.py</code> \u53ef\u4ee5\u8907\u88fd\u4e00\u500b\u984c\u76ee\u8cc7\u6599\u593e\u4ee5\u4f9b\u4f7f\u7528\u3002</p> <pre><code>python script/folderGenerator.py test # \u751f\u6210 test \u984c\u76ee\u8cc7\u6599\u593e\n</code></pre>"},{"location":"tool/contesttool/#_2","title":"\u88fd\u4f5c\u984c\u672c","text":"<p><code>tex</code> \u6a94\u7528\u4f86\u88fd\u4f5c\u984c\u672c\uff0c\u9700\u8981\u5b78\u7fd2\u57fa\u672c <code>latex</code> \u8a9e\u6cd5\uff0c\u7576\u6e96\u5099\u597d\u984c\u76ee\u8cc7\u6599\u593e\uff0c\u8acb\u5230 <code>main.tex</code>\uff0c\u627e\u5230\u8a3b\u89e3\u8d77\u4f86\u7684 <code>problemList</code> \u548c <code>problem</code> \u6307\u4ee4\uff0c\u53d6\u6d88\u8a3b\u89e3\u4e26\u4f7f\u7528\u3002</p> <pre><code>% \\problemList{folder_name}{problem_name}{time_limit}{memory_limit}\n% \\problem{folder_name}{problem_name}{time_limit}{memory_limit}\n\\problemList{test}{test}{1}{256}\n\\problem{test}{test}{1}{256}\n</code></pre> <p>\u5176\u4ed6\u53ef\u4ee5\u8abf\u6574\u8a2d\u5b9a\u6a19\u984c\u7684 <code>title</code>\uff0c\u8a2d\u5b9a\u9801\u9996\u8207\u9801\u5c3e\u7684 <code>fancypagestyle</code>\uff0c\u9084\u6709\u5c01\u9762\u7684\u5167\u5bb9\uff0c\u8abf\u6574\u597d\u5f8c\u5c31\u53ef\u751f\u6210 pdf \u6a94\u3002</p> <p>\u4f7f\u7528 <code>GNU make</code> \u751f\u6210\uff0c\u8981\u78ba\u8a8d\u5728\u4e3b\u6a5f\u4e0a\u5b89\u88dd\u597d <code>xelatex</code> \u4ee5\u53ca\u76f8\u95dc\u5957\u4ef6\u3002</p> <pre><code>make\n</code></pre> <p>\u4f7f\u7528 <code>docker-compose</code> \u751f\u6210\uff0c\u53ea\u8981\u4f7f\u7528 <code>pdfMaker</code> \u9019\u500b\u670d\u52d9\u5373\u53ef\u3002</p> <pre><code>docker-compose up -d # \u53ea\u4f7f\u7528 pdfMaker\nsh script/makePdf.sh\n</code></pre>"},{"location":"tool/contesttool/#_3","title":"\u5c07\u984c\u76ee\u6253\u5305\u6210\u58d3\u7e2e\u6a94","text":"<p><code>script/folderCompressor.py</code> \u8ca0\u8cac\u5c07\u984c\u76ee\u8cc7\u6599\u593e\u58d3\u7e2e\uff0c\u9810\u8a2d\u6703\u5c07\u6240\u6709\u6a94\u6848\u58d3\u7e2e\uff0c<code>-d</code> \u5247\u9810\u8a2d\u58d3\u7e2e\u6210 <code>domjudge</code> \u683c\u5f0f\u7684\u58d3\u7e2e\u6a94\uff0c\u5305\u542b <code>data</code>\u3001<code>domjudge-problem.ini</code> \u548c <code>submissions</code>\u3002</p> <pre><code>python script/folderCompressor.py test # \u58d3\u7e2e test \u984c\u76ee\u8cc7\u6599\u593e\npython script/folderCompressor.py -d test # \u5c07 test \u8cc7\u6599\u593e\u58d3\u7e2e\u6210 `domjudge` \u683c\u5f0f\n</code></pre>"},{"location":"tool/contesttool/#_4","title":"\u751f\u6210\u6e2c\u8cc7","text":"<p><code>script/testdataGenerator.py</code> \u63d0\u4f9b\u7684\u8fa6\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u7bc4\u4f8b\u7a0b\u5f0f\u5b58\u5728 <code>submissions/accepted/1.cpp</code>\u3002</li> <li>\u751f\u6e2c\u8cc7\u6a94\u6848\u5b58\u5728 <code>generate.py</code>\uff0c<code>generate.py</code> \u53ef\u5229\u7528 CYaRon\u3002</li> <li>\u6e2c\u8cc7\u6703\u5728 <code>data/secret</code>\u3002</li> </ul> <pre><code>python script/folderCompressor.py test # \u58d3\u7e2e test \u984c\u76ee\u8cc7\u6599\u593e\npython script/folderCompressor.py -d test # \u5c07 test \u8cc7\u6599\u593e\u58d3\u7e2e\u6210 `domjudge` \u683c\u5f0f\n</code></pre>"},{"location":"tool/contesttool/#domjudge-team-id","title":"\u532f\u51fa Domjudge \u7a0b\u5f0f\u78bc\u4e26\u4f9d Team ID \u5132\u5b58\u548c\u58d3\u7e2e","text":"<p>\u5728 <code>script/domjudgeExportSubmissions.py</code> \u8a2d\u5b9a\u4ee5\u4e0b\u53c3\u6578\u3002</p> <pre><code>server = \"\" # server ip\nadminName = \"\"\nadminPassword = \"\"\ncid = 0 # contest id\n</code></pre> <p>\u8a2d\u5b9a\u5b8c\u8acb\u57f7\u884c\u3002</p> <pre><code>python script/domjudgeExportSubmissions.py\n</code></pre> <p>\u6210\u529f\u5f8c\u6703\u751f\u6210\u4e00\u500b\u8cc7\u6599\u593e\u540d\u7a31\u70ba <code>submit</code>\uff0c\u6bcf\u500b\u6709\u7e73\u4ea4\u7d00\u9304\u7684 Team \u6709\u4e00\u500b\u5c0d\u61c9 ID \u7684\u8cc7\u6599\u593e\u548c\u58d3\u7e2e\u6a94\u3002</p>"},{"location":"tool/contesttool/#_5","title":"\u5bc4\u51fa\u7a0b\u5f0f\u78bc","text":"<p>\u5c07\u6536\u4ef6\u4eba\u8cc7\u8a0a\u6574\u7406\u5728 <code>maillist.csv</code>\uff0c\u5305\u542b\u96fb\u5b50\u90f5\u4ef6\u3001\u59d3\u540d\u548c\u767b\u5165\u5e33\u865f\u5bc6\u78bc\u3002</p> <p>\u5728 <code>script/sendEmail.py</code> \u5efa\u7acb class \u6642\u53ef\u8a2d\u5b9a port\u3001SMTP Server Domain\u3001\u5bc4\u4ef6\u4eba\u96fb\u5b50\u90f5\u4ef6\u3001\u96fb\u5b50\u90f5\u4ef6\u5bc6\u78bc\u548c\u6a19\u984c\u3002</p> <pre><code>if __name__ == '__main__':\n    data = [s.split(\",\") for s in sys.stdin]\n    mail = Mail() # \u8a2d\u5b9a\u8cc7\u8a0a\n    mail.send(data)\n</code></pre> <p>\u5e38\u7528 SMTP server\uff1a</p> <ul> <li>smtp.gmail.com\uff0cport \u70ba 465\u3002</li> <li>smtp.office365.com\uff0cport \u70ba 587\u3002</li> </ul> <p><code>send</code> \u51fd\u5f0f\u6709\u5e7e\u8655\u9700\u8981\u4fee\u6539\uff0c<code>text_template</code> \u548c <code>html_template</code> \u8a2d\u5b9a\u4fe1\u4ef6\u5167\u5bb9\uff0c\u524d\u8005\u70ba\u7d14\u6587\u5b57\uff0c\u5f8c\u8005\u70ba html \u683c\u5f0f\uff0c\u5982\u679c\u4fe1\u4ef6\u5305\u542b\u9644\u4ef6\uff0c\u5728 <code>file_path_set</code> \u586b\u5165\u9644\u4ef6\u8def\u5f91\u3002</p> <p>\u8a2d\u5b9a\u5b8c\u4e4b\u5f8c\uff0c\u8acb\u57f7\u884c\u4e0b\u9762\u6307\u4ee4\u3002</p> <pre><code>python script/sendEmail.py &lt; maillist.csv\n</code></pre> <p>\u5982\u679c\u4e00\u6b21\u5bc4\u592a\u591a\u4fe1\uff0c\u53ef\u80fd\u6703\u9047\u5230\u90e8\u5206\u4fe1\u4ef6\u7121\u6cd5\u5bc4\u51fa\uff0c\u8acb\u7a0d\u5f8c\u518d\u5bc4\u3002</p>"},{"location":"tool/domjudgeadmin/","title":"Domjudge Admin","text":""},{"location":"tool/domjudgeadmin/#server","title":"\u555f\u52d5 server","text":"\u74b0\u5883 <p>\u8acb\u5148\u78ba\u8a8d\u6709\u5b89\u88dd docker \u548c docker-compose</p> <ul> <li><code>generate.py</code> \u751f\u6210 <code>docker-compose.yml</code>\uff0c<code>-j</code> \u8abf\u6574 <code>Judgehost</code> \u7684\u6578\u91cf\uff08\u9810\u8a2d\u70ba \uff09\u3002</li> </ul> <pre><code>git clone https://github.com/FjuOnlineJudge/domjudge-setup\ncd domjudge-setup/\npython generate.py -j {number of judgehost}\nsudo docker-compose up -d\n</code></pre> <ul> <li>\u6aa2\u67e5\u662f\u5426\u6210\u529f\u958b\u555f\uff0c\u9019\u6642\u5019 <code>domjudge/judgehost:latest</code> \u958b\u555f\u5931\u6557\u662f\u6b63\u78ba\u7684</li> </ul> <pre><code>&gt; sudo docker ps -a\nCONTAINER ID   IMAGE                       COMMAND                  CREATED             STATUS                     PORTS                                         NAMES\n73d206ecc5f8   domjudge/judgehost:latest   \"/usr/bin/dumb-init \u2026\"   7 seconds ago       Exited (1) 5 seconds ago                                                 judgedaemon-0\nbd34e340e120   domjudge/domserver:latest   \"/scripts/start.sh\"      About an hour ago   Up 6 seconds               0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp             domserver\n09962ae62b21   mariadb                     \"docker-entrypoint.s\u2026\"   About an hour ago   Up 6 seconds               0.0.0.0:13306-&gt;3306/tcp, :::13306-&gt;3306/tcp   dj-mariadb\n</code></pre> <ul> <li>\u53d6\u5f97 <code>admin</code> \u5bc6\u78bc</li> </ul> <pre><code>sudo docker exec -it domserver cat /opt/domjudge/domserver/etc/initial_admin_password.secret\n</code></pre> <ul> <li>\u767b\u5165 domjudge\uff0c\u53ef\u770b\u5230 <code>jury</code> \u9801\u9762\u3002</li> </ul>"},{"location":"tool/domjudgeadmin/#judgehost","title":"\u8a2d\u5b9a judgehost","text":"<ul> <li>\u9019\u6642\u5019 <code>.docker-compose.yml</code> \u4e2d\u7684 judgehost \u5bc6\u78bc\u548c domjudge \u7684 judgehost \u5bc6\u78bc\u4e0d\u540c\uff0c\u5fc5\u9808\u4e00\u81f4 judgehost container \u624d\u6703\u6b63\u78ba\u555f\u52d5\u3002\u5230 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Users</code> \u9032\u5165\u5e33\u865f\u7ba1\u7406\u9801\u9762\uff0c\u7de8\u8f2f <code>judgehost</code> \u7684\u5e33\u865f\uff0c\u5c07\u5bc6\u78bc\u6539\u6210 <code>.docker-compose.yml</code> \u4e2d\u7684 judgehost \u5bc6\u78bc\u3002</li> </ul> <ul> <li>\u91cd\u555f judgehost\uff0c\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Judgehosts</code> \u9032\u5165 judgehost \u7ba1\u7406\u9801\u9762\uff0c\u53ef\u4ee5\u770b\u5230 judgehost \u6b63\u5e38\u958b\u555f\uff08status \u70ba\u7da0\u8272\u52fe\u52fe\uff09\u3002</li> </ul> <pre><code>sudo docker-compose up -d\n</code></pre>"},{"location":"tool/domjudgeadmin/#_1","title":"\u7ba1\u7406\u5e33\u865f","text":"<p>\u5728 jury \u4ecb\u9762\u6709 <code>Users</code> \u548c <code>Teams</code> \u5169\u500b\u9078\u9805\uff0c<code>Users</code> \u662f\u767b\u5165\u7684\u5e33\u865f\uff0c<code>Teams</code> \u662f\u63d0\u4ea4 submission \u7684\u968a\u4f0d\u3002</p>"},{"location":"tool/domjudgeadmin/#_2","title":"\u65b0\u589e\u5e33\u865f","text":"<p>\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Users</code> \u9032\u5165\u5e33\u865f\u7ba1\u7406\u9801\u9762\uff0c\u9ede\u64ca <code>Add new user</code> \u6309\u9215\u9032\u5165\u65b0\u589e\u5e33\u865f\u9801\u9762\uff0c\u4e3b\u8981\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a</p> <p></p> <ul> <li>Username\uff1a\u767b\u5165\u5e33\u865f\u3002</li> <li>Full name\uff1a\u540d\u7a31\uff0c\u53ea\u6709\u7ba1\u7406\u54e1\u770b\u7684\u5230\uff0c\u7528\u4f86\u8b58\u5225\u5e33\u865f\u6301\u6709\u4eba\u3002</li> <li>Email\uff1a\u96fb\u5b50\u90f5\u4ef6\u3002</li> <li>Password\uff1a\u767b\u5165\u5bc6\u78bc\u3002</li> <li>IP address\uff1a\u9650\u5b9a\u767b\u5165 IP\uff08\u4e0d\u78ba\u5b9a\uff09\u3002</li> <li>Enabled\uff1a\u4f7f\u5426\u555f\u7528\u5e33\u865f\u3002</li> <li>Team\uff1a\u5e33\u865f\u5c0d\u61c9\u7684 Team\u3002</li> <li>Roles\uff1a\u5e33\u865f\u6b0a\u9650\uff0c\u4e00\u500b\u5e33\u865f\u53ef\u4ee5\u6709\u591a\u500b Role\u3002<ul> <li>Administrative User\uff1a\u7ba1\u7406\u6240\u6709\u6b0a\u9650\uff0c\u9664\u4e86\u4e0d\u80fd\u63d0\u4ea4 Submission\u3002</li> <li>Jury User\uff1a\u7ba1\u7406 Submission\u3002</li> <li>Team Member\uff1a\u63d0\u4ea4 Submission\u3002</li> </ul> </li> </ul> <p>\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Teams</code> \u9032\u5165\u968a\u4f0d\u7ba1\u7406\u9801\u9762\uff0c\u9ede\u64ca <code>Add new team</code> \u6309\u9215\u9032\u5165\u65b0\u589e\u5e33\u865f\u9801\u9762\uff0c\u4e3b\u8981\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a</p> <p></p> <ul> <li>Team name\uff1a\u968a\u4f0d\u540d\u7a31</li> <li>Category\uff1a\u968a\u4f0d\u985e\u5225\uff0c\u4e00\u822c\u5982\u679c\u6c92\u7279\u5225\u9700\u6c42\uff0c\u8a2d\u6210 <code>Participants</code> \u5373\u53ef\u3002</li> <li>Enabled\uff1a\u662f\u5426\u555f\u7528\u968a\u4f0d\u3002</li> <li>Add user to this team\uff1ateam \u5c0d\u61c9\u7684\u5e33\u865f\u3002</li> </ul>"},{"location":"tool/domjudgeadmin/#tsv","title":"\u532f\u5165 <code>.tsv</code> \u6a94","text":"<p>\u9700\u8981\u4e00\u6b21\u65b0\u589e\u5927\u91cf <code>user</code> \u548c <code>teams</code>\uff0c\u53ef\u4ee5\u5c07\u8cc7\u6599\u6574\u7406\u6210 <code>.tsv</code> \u6a94 <sup>1</sup> <sup>2</sup>\uff0c\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Import / export</code> \u9032\u5165\u532f\u5165\u532f\u51fa\u9801\u9762\uff0c\u627e\u5230 <code>Teams &amp; groups</code> \u5340\u584a\u532f\u5165 <code>.tsv</code> \u6a94\uff0c\u5148\u532f\u5165 <code>teams.tsv</code>\uff0c\u518d\u532f\u5165 <code>accounts.tsv</code>\u3002</p> <ul> <li> <p><code>teams.tsv</code> \u683c\u5f0f <pre><code>teams    1\nteam number    external_ID    group_id    team_name    institution_name    institution_short_name    country_code\n</code></pre></p> <ul> <li><code>team number</code>: team \u7684\u7de8\u865f\uff0c\u7cfb\u7d71\u5df2\u7d93\u9810\u8a2d\u5169\u500b\u5e33\u865f\uff0c\u6240\u4ee5\u8981\u5f9e  \u958b\u59cb\u7de8\u865f\uff0c\u53ef\u4ee5\u7a7a\u865f\u3002</li> <li><code>external_ID</code>: ICPC \u5340\u57df\u8cfd\u3001 World Final \u4f7f\u7528\u7684\u968a\u4f0d\u7de8\u865f\u3002</li> <li><code>group_id</code>: \u5c0d\u61c9 <code>jury/categories</code> \u7684 ID\uff0c\u4e00\u822c\u53c3\u8cfd\u8005\u8a2d \u3002</li> <li><code>team_name</code>: \u8a18\u5206\u677f\u986f\u793a\u7684\u540d\u7a31\u3002</li> <li><code>institution_name</code>: \u968a\u4f0d\u6240\u5c6c\u55ae\u4f4d\u3002</li> <li><code>institution_short_name</code>: \u968a\u4f0d\u6240\u5c6c\u55ae\u4f4d\u7e2e\u5beb\u3002</li> <li><code>country_code</code>: \u968a\u4f0d\u6240\u5c6c\u570b\u5bb6\u4ee3\u78bc\u3002</li> </ul> </li> <li> <p><code>accounts.tsv</code> \u683c\u5f0f <pre><code>accounts    1\naccount_type    fullname    username    password\n</code></pre></p> <ul> <li><code>account_type</code>: \u5e33\u865f\u8eab\u5206 <code>team</code>, <code>judge</code>, <code>admin</code>, <code>analyst</code>\uff0c\u7e73\u4ea4\u984c\u76ee\u7684\u5e33\u865f\u8a2d <code>team</code>\u3002</li> <li><code>fullname</code>: \u5e33\u865f\u540d\u7a31\uff0c\u7528\u4f86\u8b58\u5225\u5e33\u865f\u6240\u6709\u4eba\uff0c\u53ea\u6709\u7ba1\u7406\u8005\u770b\u5f97\u5230\u3002</li> <li><code>username</code>: \u767b\u5165\u5e33\u865f\uff0c\u5982\u679c\u8a2d Role \u70ba <code>team</code> \u7684\u5e33\u865f\uff0c\u5176 <code>username</code> \u70ba <code>team-{tid}</code>\uff0c \u90a3\u9ebc\u7cfb\u7d71\u6703\u81ea\u52d5\u9023\u7d50 ID \u70ba <code>tid</code> \u7684 <code>team</code>\uff0c\u4f8b\u5982\u5e33\u865f\u8a2d team3\uff0c\u5c31\u6703\u9023\u7d50\u7de8\u865f\u70ba  \u7684 team\u3002</li> <li><code>password</code>: \u767b\u5165\u5bc6\u78bc\uff0c\u53ef\u4ee5\u5230 <code>/users/generate-passwords</code> \u8b93\u7cfb\u7d71\u751f\u6210\u5bc6\u78bc\u3002</li> </ul> </li> </ul>"},{"location":"tool/domjudgeadmin/#_3","title":"\u958b\u653e\u81ea\u884c\u8a3b\u518a","text":"<p>\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Team Categories</code> \u9032\u5165\u968a\u4f0d\u985e\u5225\u7ba1\u7406\u9801\u9762\uff0c\u53ef\u8abf\u6574\u968a\u4f0d\u5206\u985e\uff0c\u968a\u4f0d\u6709\u4e00\u500b\u5c6c\u6027\u70ba <code>Allow self-registration</code>\uff0c\u8a2d\u6210 <code>Yes</code> \u53ef\u958b\u653e\u7d66\u4f7f\u7528\u8005\u81ea\u884c\u8a3b\u518a\u7528\u3002</p>"},{"location":"tool/domjudgeadmin/#_4","title":"\u7ba1\u7406\u6bd4\u8cfd","text":"<p>\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Contests</code> \u9032\u5165\u6bd4\u8cfd\u7ba1\u7406\u9801\u9762\uff0c\u53ef\u4ee5\u770b\u5230\u76ee\u524d\u9032\u884c\u6bd4\u8cfd\u72c0\u614b\uff0c\u4ee5\u53ca\u6240\u6709\u6bd4\u8cfd\u7e3d\u89bd\uff0c\u9ede\u64ca <code>Add new contest</code> \u6309\u9215\u9032\u5165\u65b0\u589e\u5e33\u865f\u9801\u9762\uff0c\u4e3b\u8981\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a</p> <ul> <li>Shortname\uff1a\u6bd4\u8cfd\u7e2e\u5beb\uff0c\u7528\u65bc\u53f3\u4e0a\u89d2\u7684\u5207\u63db\u9078\u55ae\u3002</li> <li>Name\uff1a\u6bd4\u8cfd\u540d\u7a31\u3002</li> <li>Activate time\uff1a\u6bd4\u8cfd\u53ef\u4ee5\u88ab <code>team</code> \u770b\u898b\u7684\u6642\u9593\uff0c\u8981\u65e9\u65bc jury submission \u63d0\u4ea4\u7684\u6642\u9593\u3002</li> <li>Start time\u3001End time\uff1a\u6bd4\u8cfd\u958b\u59cb\u7684\u6642\u9593\u3002</li> <li>Scoreboard freeze time\u3001Scoreboard unfreeze time\uff1a\u8a18\u5206\u677f\u505c\u6b62\u66f4\u65b0\u548c\u89e3\u9664\u505c\u6b62\u66f4\u65b0\u7684\u6642\u9593\uff0c\u975e\u5fc5\u586b\u3002</li> <li>Deactivate time\uff1a\u6bd4\u8cfd\u96b1\u85cf\u7684\u6642\u9593\uff0c\u975e\u5fc5\u586b\u3002</li> <li>Enable public scoreboard\uff1a\u662f\u5426\u8981\u516c\u958b\u8a18\u5206\u677f\uff0c\u8981\u662f\u4e0d\u60f3\u8981\u5728\u6e96\u5099\u7684\u6642\u5019(\u4f8b\u5982\u6e2c\u8a66\u8cfd)\u88ab\u77e5\u9053\u984c\u76ee\u5167\u5bb9\uff0c\u9078\u64c7 <code>No</code>\u3002</li> <li>Enable contest\uff1a\u4f7f\u5426\u555f\u7528\u6bd4\u8cfd\uff0c\u7576\u4e0d\u8d77\u7528\u7684\u6642\u5019\uff0c\u6240\u6709 <code>team</code> \u7121\u6cd5\u770b\u5230\u6bd4\u8cfd\uff0cjudgeing \u4e5f\u6703\u505c\u6b62\u3002</li> <li>\u984c\u76ee\u5217\u8868\uff1a\u6309\u5217\u8868\u53f3\u908a\u7684 <code>+</code>\uff0c\u4e3b\u8981\u6b04\u4f4d\u5982\u4e0b\uff1a<ul> <li>Problem\uff1a\u65b0\u589e\u5df2\u6709\u984c\u76ee\u3002</li> <li>Short name\uff1a\u984c\u76ee\u7e2e\u5beb\u3002</li> <li>Colour\uff1a\u984c\u76ee\u4ee3\u8868\u984f\u8272\uff0c\u975e\u5fc5\u586b\u3002</li> </ul> </li> </ul>"},{"location":"tool/domjudgeadmin/#_5","title":"\u7ba1\u7406\u984c\u76ee","text":"<p>\u6709\u5169\u7a2e\u8fa6\u6cd5\uff0c\u624b\u52d5\u8f38\u5165\u548c\u532f\u5165\u58d3\u7e2e\u6a94\uff0c\u5169\u7a2e\u65b9\u5f0f\u53ef\u4ea4\u4e92\u4f7f\u7528\u3002</p> <p></p>"},{"location":"tool/domjudgeadmin/#_6","title":"\u624b\u52d5\u8f38\u5165","text":"<p>\u5728 <code>jury</code> \u9801\u9762\u9ede\u64ca <code>Problems</code> \u9032\u5165\u984c\u76ee\u7ba1\u7406\u9801\u9762\uff0c\u9ede\u9078 <code>Add new problem</code> \u9032\u5165\u65b0\u589e\u984c\u76ee\u9801\u9762\uff0c\u4e3b\u8981\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a</p> <ul> <li>Name\uff1a\u984c\u76ee\u540d\u7a31\u3002</li> <li>Timelimit\uff1a\u7a0b\u5f0f\u57f7\u884c\u6642\u9593\u9650\u5236\u3002</li> <li>Memlimit\uff1a\u7a0b\u5f0f\u57f7\u884c\u8a18\u61b6\u9ad4\u9650\u5236\u3002</li> <li>Outputlimit\uff1a\u8f38\u51fa\u5927\u5c0f\u9650\u5236\u3002</li> <li>Problem text\uff1a\u984c\u76ee\u8aaa\u660e\u6a94(pdf,html,txt)\u3002</li> <li>Run script\uff1a\uff08\u7de8\u8b6f\u548c\uff09\u57f7\u884c\u7a0b\u5f0f\u78bc\u7684\u8173\u672c\u3002</li> <li>Compare script\uff1a\u5224\u65b7\u8f38\u51fa\u662f\u5426\u6b63\u78ba\u7684\u8173\u672c\uff0c\u9700\u8981 Special Judge \u8981\u81ea\u5df1\u5beb\u8173\u672c\u3002</li> <li>Compare script arguments\uff1aCompare script \u7684\u53c3\u6578 <sup>4</sup>\u3002<ul> <li><code>float_tolerance E</code>\uff1a\u5bb9\u8a31\u8ddf\u7b54\u6848\u76f8\u5dee \uff0c \u662f\u5408\u6cd5\u7684\u6d6e\u9ede\u6578\u8868\u793a\uff0c\u4f8b\u5982\uff1a\u3002</li> <li><code>case_sensitive</code>\uff1a\u5927\u5c0f\u5beb\u8981\u4e00\u81f4\uff0cDomjudge \u662f\u5bec\u9b06\u6bd4\u5c0d\uff0c\u9810\u8a2d\u8f38\u51fa\u5927\u5beb\u6216\u5c0f\u5beb\u4e0d\u6703\u5f71\u97ff\u7b54\u6848\u3002</li> <li><code>space_change_sensitive</code>\uff1a\u7a7a\u683c\u6578\u91cf\u8981\u4e00\u81f4\uff0cDomjudge \u662f\u5bec\u9b06\u6bd4\u5c0d\uff0c\u9810\u8a2d\u662f\u591a\u6216\u5c11\u8f38\u51fa\u7a7a\u767d\u7121\u7570\u3002</li> </ul> </li> </ul> <p>\u8a2d\u5b9a\u597d\u984c\u76ee\uff0c\u6703\u8f49\u79fb\u5230\u984c\u76ee\u8cc7\u8a0a\u9801\uff0c\u6703\u986f\u793a\u984c\u76ee\u8a2d\u5b9a\u3001\u88ab\u54ea\u4e9b\u6bd4\u8cfd\u4f7f\u7528\u3001\u76f8\u95dc\u9644\u4ef6\u4ee5\u53ca\u63d0\u4ea4\u7d00\u9304\u3002</p> <p></p> <p>\u9ede\u64ca <code>Testcases</code> \u6b04\u4f4d\u7684 <code>details / edit</code> \u9801\u9762\u9032\u5165\u4e0a\u50b3\u6e2c\u8cc7\u9801\u9762\u3002</p> <p></p> <p>\u6bcf\u6b21\u53ef\u4ee5\u9078\u64c7\u65b0\u589e\u4e00\u7b46\u6e2c\u8cc7\u6216\u66f4\u65b0\u73fe\u6709\u6e2c\u8cc7\uff0c\u6e2c\u8cc7\u6709\u4e94\u7a2e\u5c6c\u6027\uff1a\u8f38\u5165\u6a94\u3001\u8f38\u51fa\u6a94\u3001\u662f\u5426\u70ba\u7bc4\u4f8b\u6e2c\u8cc7\u3001\u63cf\u8ff0\u3001\u5716\u7247\u3002\u9078\u64c7\u597d\u8981\u66f4\u65b0\u7684\u6a94\u6848\u5f8c\uff0c\u9ede\u64ca <code>Submit all changes</code> \u4e0a\u50b3\uff0c\u8f38\u5165\u8f38\u51fa\u6a94\u6709\u5404\u81ea\u7684 MD5 \u503c\uff0c\u53ef\u7528\u4f86\u5224\u65b7\u662f\u5426\u70ba\u4e0d\u4e00\u6a23\u7684\u6a94\u6848\u3002</p>"},{"location":"tool/domjudgeadmin/#_7","title":"\u532f\u5165\u984c\u76ee","text":"<p>\u5c07\u6240\u6709\u6a94\u6848\u58d3\u7e2e\u6210\u58d3\u7e2e\u6a94\uff0c\u5728\u984c\u76ee\u9801\u9762\u9ede\u64ca <code>Import problem</code>\uff0c\u9078\u64c7\u58d3\u7e2e\u6a94\u4ee5\u53ca\u6bd4\u8cfd\uff0c\u5982\u679c\u6709\u9078\u64c7\u5176\u4e2d\u4e00\u5834\u6bd4\u8cfd\uff0c\u9664\u4e86\u984c\u76ee\u6703\u81ea\u52d5\u52a0\u5165\u8a72\u5834\u6bd4\u8cfd\uff0c\u58d3\u7e2e\u6a94\u5167\u7684\u7bc4\u4f8b\u7a0b\u5f0f\u4e5f\u6703\u81ea\u52d5\u63d0\u4ea4\uff0c\u8a73\u7d30\u8aaa\u660e\u8acb\u53c3\u8003 \u9019\u88e1\uff0c</p> <p>\u5982\u679c\u58d3\u7e2e\u6a94\u5167\u5305\u542b\u7bc4\u4f8b\u7a0b\u5f0f\uff0c\u5e33\u865f\u5fc5\u9808\u6307\u5b9a\u4e00\u500b Team\uff0c\u7bc4\u4f8b\u6e2c\u8cc7\u624d\u6703\u63d0\u4ea4\u5230\u76f8\u5c0d\u61c9\u7684\u6bd4\u8cfd\u3002</p> <p><code>problem.ini</code> \u7684\u683c\u5f0f\u70ba <code>key=value</code>\uff0c\u5305\u542b\u4e0b\u65b9\u5217\u51fa\u7684\u9805\u76ee <sup>3</sup>\uff0c\u6700\u57fa\u672c\u7684\u5beb\u6cd5\u5305\u542b <code>name</code> \u548c <code>timelimit</code> <sup>2</sup>\u3002</p> <ul> <li><code>name</code>\uff1a\u984c\u76ee\u540d\u7a31\u3002</li> <li><code>allow_submit</code>\uff1a\u662f\u5426\u958b\u653e\u63d0\u4ea4\u3002</li> <li><code>allow_judge</code>\uff1a\u63d0\u5426\u958b\u653e Judge\u3002</li> <li><code>timelimit</code>\uff1a\u7a0b\u5f0f\u57f7\u884c\u6642\u9593\u9650\u5236\u3002</li> <li><code>special_run</code>\uff1aSpecial run script \u7684 ID\u3002</li> <li><code>special_compare</code>\uff1aSpecial compare script \u7684 ID\u3002</li> <li><code>points</code>\uff1a\u5206\u6578\uff0c\u9810\u8a2d\u70ba \u3002</li> <li><code>color</code>\uff1a\u984c\u76ee\u4ee3\u8868\u984f\u8272 (CSS)\u3002</li> </ul> <p>\u7bc4\u4f8b\u7a0b\u5f0f\u653e\u5728\u8cc7\u6599\u593e <code>submissions</code> \u76f8\u5c0d\u61c9\u7684\u5b50\u8cc7\u6599\u593e <sup>4</sup>\uff1a</p> <ul> <li><code>accecpted</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>correct</code> \u7684\u7a0b\u5f0f\u3002</li> <li><code>wrong_answer</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>wrong-answer</code> \u7684\u7a0b\u5f0f\u3002</li> <li><code>time_limit_exceeded</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>time-limit</code> \u7684\u7a0b\u5f0f\u3002</li> <li><code>run_time_error</code>\uff1a\u9810\u8a2d\u7d50\u679c <code>runtime-error</code> \u7684\u7a0b\u5f0f\u3002</li> </ul> <p>\u4f8b\u5982\uff1a<code>1.cpp</code> \u9810\u8a2d\u7d50\u679c\u662f <code>correct</code>\uff0c\u8def\u5f91\u70ba <code>submissions/accecpted/1.cpp</code>\u3002</p> <p>\u85c9\u7531\u58d3\u7e2e\u6a94\u4e0a\u50b3\u7684\u7bc4\u4f8b\u7a0b\u5f0f\u7a31\u70ba jury solution\uff0cjury solution \u7528\u4f86\u6aa2\u67e5\u6e2c\u8cc7\u662f\u5426\u6b63\u78ba\uff0c\u5230 <code>jury</code> \u9801\u9762\u9ede\u9078 <code>Judging verifier</code>\uff0c\u8b93\u7cfb\u7d71\u81ea\u52d5\u5224\u65b7 jury solution \u7684\u7d50\u679c\u662f\u5426\u548c\u9810\u671f\u7684\u4e00\u6a23\uff0c\u518d\u5230 <code>jury</code> \u9801\u9762\u9ede\u9078 <code>Submissions</code>\uff0c\u67e5\u770b <code>verified</code> \u6b04\u4f4d\uff0c\u5982\u679c\u7b26\u5408\u9810\u671f\u7d50\u679c\u6703\u986f\u793a <code>yes</code>\u3002</p> <p>\u6e2c\u8cc7\u653e\u5728 <code>data</code> \u8cc7\u6599\u593e\uff0c\u5206\u6210\u516c\u958b\u6e2c\u8cc7\u548c\u96b1\u85cf\u6e2c\u8cc7\uff0c\u5206\u5225\u653e\u5728 <code>data/sample</code> \u548c <code>data/secret</code>\uff0c\u8f38\u5165\u8f38\u51fa\u6a94\u540c\u540d\uff0c\u8f38\u5165\u6a94\u70ba <code>.in</code>\uff0c\u8f38\u51fa\u6a94\u70ba <code>.out</code>\u3002</p>"},{"location":"tool/domjudgeadmin/#_8","title":"\u4fee\u6539\u984c\u76ee","text":"<p>\u5728\u984c\u76ee\u9801\u9762\uff0c\u9ede\u64ca\u5c0d\u61c9\u984c\u76ee\u7684\u925b\u7b46\u6309\u9215\uff0c\u9032\u5165\u7de8\u8f2f\u984c\u76ee\u9801\u9762\uff0c\u7de8\u8f2f\u984c\u76ee\u9801\u9762\u548c\u65b0\u589e\u984c\u76ee\u9801\u9762\u76f8\u4f3c\uff0c\u5927\u81f4\u4e0a\u591a\u4e86\u984c\u76ee ID\u3001\u7de8\u8f2f\u6e2c\u8cc7\u548c\u532f\u5165\u58d3\u7e2e\u6a94\u4e09\u500b\u90e8\u5206\u3002</p> <p>\u5982\u679c\u9078\u64c7\u532f\u5165\u58d3\u7e2e\u6a94\u65b9\u5f0f\u66f4\u65b0\u984c\u76ee\uff0c\u6e2c\u8cc7\u548c\u7bc4\u4f8b\u7a0b\u5f0f\u6703\u65b0\u589e\u800c\u975e\u8986\u84cb\u3002</p> <ol> <li> <p>CCS System Requirements \u21a9</p> </li> <li> <p>\u6a21\u677f \u21a9\u21a9</p> </li> <li> <p>DOMjudge Problem format specification \u21a9</p> </li> <li> <p>ICPC Problem Package Format \u21a9\u21a9</p> </li> </ol>"},{"location":"tool/domjudgeteam/","title":"Domjudge Team","text":""},{"location":"tool/domjudgeteam/#_1","title":"\u8a3b\u518a\u53ca\u767b\u5165","text":"<p>\u4e00\u822c\u4f86\u8aaa\uff0c\u4e3b\u8fa6\u65b9\u6703\u8a2d\u5b9a\u597d\u5e33\u865f\u548c\u5bc6\u78bc\uff0c\u5229\u7528\u5bc6\u78bc\u767b\u5165\u5373\u53ef\uff0c\u4e00\u4e9b\u6bd4\u8cfd\u6703\u63d0\u4f9b\u4f7f\u7528\u8005\u8a3b\u518a\u5e33\u865f\uff0c\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a</p> <ul> <li><code>username</code> \u548c <code>password</code>\uff1a\u767b\u5165\u5e33\u865f\u548c\u5bc6\u78bc\u3002</li> <li><code>teamname</code>\uff1a\u8a18\u5206\u677f\u986f\u793a\u7684\u968a\u4f0d\u540d\u7a31\u3002</li> <li><code>email</code>\uff1a\u96fb\u5b50\u90f5\u4ef6\uff0c\u9078\u586b\u3002</li> <li><code>affiliation</code>\uff1a\u4ee3\u8868\u6a5f\u69cb\uff0c\u9078\u586b\u3002</li> </ul> <p> </p> <p>\u767b\u5165\u6210\u529f\u5f8c\u6703\u4f86\u5230\u9996\u9801\uff0c\u53ef\u4ee5\u770b\u5230\u89e3\u984c\u72c0\u6cc1\u3001\u7e73\u4ea4\u7d00\u9304\u53ca\u8a62\u554f\u7d00\u9304\u3002</p> <p></p>"},{"location":"tool/domjudgeteam/#_2","title":"\u67e5\u770b\u984c\u76ee","text":"<p>\u9ede\u64ca\u5de6\u4e0a\u65b9\u7684 <code>problemset</code>\uff0c\u53ef\u4ee5\u770b\u5230\u6bcf\u4e00\u984c\u7684\u984c\u76ee\u548c\u6e2c\u8cc7\u3002</p> <p></p>"},{"location":"tool/domjudgeteam/#_3","title":"\u63d0\u4ea4","text":"<p>\u9ede\u64ca\u53f3\u4e0a\u65b9\u7684 <code>Submit</code>\uff0c\u6703\u770b\u5230\u4e09\u500b\u6b04\u4f4d\uff0c\u5206\u5225\u662f\u6a94\u6848\u4f86\u6e90\u3001\u7e73\u4ea4\u984c\u76ee\u548c\u7e73\u4ea4\u8a9e\u8a00\u3002\u6a94\u6848\u4f86\u6e90\u53ef\u4ee5\u591a\u9078\uff0c\u5982\u679c\u53ea\u6709\u4e00\u500b\u6a94\u6848\uff0c\u7cfb\u7d71\u6703\u4f9d\u64da\u6a94\u540d\u548c\u526f\u6a94\u540d\uff0c\u81ea\u52d5\u9078\u64c7\u7e73\u4ea4\u984c\u76ee\u548c\u7e73\u4ea4\u8a9e\u8a00\uff08\u5982\u679c\u6c92\u6709\u5339\u914d\u7684\u5247\u7121\u5f71\u97ff\uff09\uff0c\u4f8b\u5982\u7e73\u4ea4 <code>A.cpp</code> \u7684\u6a94\u6848\uff0c\u7cfb\u7d71\u6703\u81ea\u52d5\u9078\u64c7 <code>Short name</code> \u70ba <code>A</code> \u7684\u984c\u76ee\uff0c\u8a9e\u8a00\u9078\u64c7 <code>.cpp</code>\u3002</p> <p></p> <p>\u63d0\u4ea4\u5f8c\uff0c\u6703\u5728\u5de6\u65b9\u986f\u793a\u7d50\u679c\uff0c\u6839\u64da\u7cfb\u7d71\u7684\u8a2d\u5b9a\uff0c\u53ef\u80fd\u6709\u63d0\u4f9b\u4e0b\u5217\u670d\u52d9\uff1a</p> <ul> <li>\u770b\u5230\u7bc4\u4f8b\u6e2c\u8cc7\u7684\u7d50\u679c</li> <li>\u4e0b\u8f09\u7a0b\u5f0f\u78bc</li> </ul> <p></p>"},{"location":"tool/domjudgeteam/#domjudge","title":"Domjudge \u63d0\u4ea4\u7d50\u679c","text":"<p>\u6e2c\u8cc7\u5305\u542b\u7bc4\u4f8b\u6e2c\u8cc7\u548c\u96b1\u85cf\u6e2c\u8cc7\uff0c\u984c\u76ee\u53ea\u6703\u7d66\u7bc4\u4f8b\u6e2c\u8cc7\uff0c\u7bc4\u4f8b\u6e2c\u8cc7\u6e2c\u8a66\u904e\u4e0d\u4fdd\u8b49\u63d0\u4ea4\u5728 Domjudge \u6703\u5c0d\u3002</p> <p>\u4e0b\u9762\u4ecb\u7d39\u5e7e\u7a2e\u63d0\u4ea4\u7d50\u679c\uff1a</p> <ul> <li><code>Correct</code>\uff1a\u4f60\u7684\u7a0b\u5f0f\u78bc\u901a\u904e\u6240\u6709\u6e2c\u8cc7\uff0c\u606d\u559c!!!</li> <li><code>Compile Error</code>\uff1a\u7a0b\u5f0f\u7de8\u8b6f\u932f\u8aa4\uff0c\u672c\u6a5f\u5982\u679c\u7de8\u8b6f\u6210\u529f\u53ef\u8a62\u554f\u6211</li> <li><code>Wrong Answer</code>\uff1a\u7a0b\u5f0f\u57f7\u884c\u6210\u529f\uff0c\u4f46\u8f38\u51fa\u7d50\u679c\u8ddf\u6b63\u78ba\u89e3\u7b54\u6709\u51fa\u5165\uff0c\u6709\u53ef\u80fd\u4f46\u4e0d\u50c5\u9650\u65bc\u4e0b\u5217\u60c5\u6cc1<ul> <li>\u7b54\u6848\u7bc4\u570d\u5230 <code>long long</code>\uff0c\u7a0b\u5f0f\u78bc\u53ea\u7528 <code>int</code></li> <li>\u60f3\u6cd5\u6709\u8aa4</li> <li>\u8f38\u51fa\u4e86\u5176\u4ed6\u6771\u897f</li> </ul> </li> <li><code>Runtime Error</code>\uff1a\u7a0b\u5f0f\u57f7\u884c\u5230\u4e00\u534a\u7576\u6a5f\uff0c\u6709\u53ef\u80fd\u4f46\u4e0d\u50c5\u9650\u65bc\u4e0b\u5217\u60c5\u6cc1<ul> <li>\u9663\u5217\u7684 index \u8d85\u904e\u7bc4\u570d\u3001\u9663\u5217\u958b\u592a\u5c0f</li> <li>\u9664\u4ee5  </li> </ul> </li> <li><code>Time Limit</code>\uff1a\u6642\u9593\u8d85\u904e\u9650\u5236\uff0c\u6709\u53ef\u80fd\u4f46\u4e0d\u50c5\u9650\u65bc\u4e0b\u5217\u60c5\u6cc1<ul> <li>\u7121\u9650\u8ff4\u5708\u7684\u60c5\u6cc1</li> <li>\u7a0b\u5f0f\u78bc\u6307\u4ee4\u57f7\u884c\u6b21\u6578\u904e\u9ad8\uff1a\u7a0b\u5f0f\u4e00\u79d2\u5927\u7d04\u57f7\u884c  \u6b21\uff0c\u5982\u679c\u767c\u73fe\u7a0b\u5f0f\u57f7\u884c\u7684\u6b21\u6578\u6703\u8d85\u904e\u9650\u5236\u79d2\u6578\u4e58\u4e0a \uff0c\u90a3\u9ebc\u5f88\u6709\u6a5f\u6703\u6703\u51fa\u73fe <code>TimeLimit</code></li> </ul> </li> <li><code>Meomery Limit</code>\uff1a\u8a18\u61b6\u9ad4\u4f7f\u7528\u8d85\u904e\u9650\u5236\uff0c\u5e7e\u4e4e\u4e0d\u6703\u51fa\u73fe\uff0c\u9047\u5230\u5c31\u76f4\u63a5\u63d0\u554f</li> <li><code>Output Limit</code>\uff1a\u7a0b\u5f0f\u8f38\u51fa\u5927\u5c0f\u8d85\u904e\u9650\u5236\uff0c\u5e7e\u4e4e\u4e0d\u6703\u51fa\u73fe\uff0c\u9047\u5230\u5c31\u76f4\u63a5\u63d0\u554f</li> <li><code>No Output</code>\uff1a\u7a0b\u5f0f\u6c92\u6709\u51fa\u73fe\u4efb\u4f55\u6771\u897f\uff0c\u5076\u723e\u6703\u51fa\u73fe\uff0c\u6709\u53ef\u80fd\u662f\u60f3\u6cd5\u932f\u8aa4(\u53ef\u4ee5\u7576\u6210 <code>Wrong Answer</code> \u7684\u4e00\u7a2e)\uff0c\u6216\u8005\u662f\u6e2c\u8cc7\u6709\u554f\u984c\uff0c\u9047\u5230\u6642\u5019\u53ef\u4ee5\u6211\u6211\u662f\u4e0d\u662f\u6e2c\u8cc7\u7684\u554f\u984c</li> </ul>"},{"location":"tool/domjudgeteam/#_4","title":"\u63d0\u554f","text":"<p>\u9ede\u64ca\u53f3\u65b9 <code>request clarification</code>\uff0c\u9078\u64c7\u6240\u8981\u554f\u7684\u554f\u984c\u4ee5\u53ca\u8f38\u5165\u5167\u5bb9\uff0c\u9ede\u64ca\u767c\u9001\uff0c\u7b49\u5f85\u4e3b\u8fa6\u65b9\u56de\u61c9\uff0c\u4e3b\u8fa6\u65b9\u4e5f\u53ef\u80fd\u6703\u767c\u5e03\u516c\u544a\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u8a0a\u606f\u4ee5\u514d\u932f\u904e\u3002</p> <p></p>"},{"location":"tool/domjudgeteam/#_5","title":"\u81ea\u8fa6\u8cfd\u63d0\u554f\u4e8b\u5b9c","text":"<ul> <li>\u53ef\u4ee5\u63d0\u554f<ul> <li>\u984c\u672c\u7f3a\u5931\u3001\u52d8\u8aa4</li> <li>\u984c\u610f\u554f\u984c</li> <li>\u672c\u6a5f\u7de8\u8b6f\u6210\u529f\u3001\u4e0a\u50b3\u7de8\u8b6f\u5931\u6557</li> <li>\u51fa\u73fe <code>Meomery Limit</code>\u3001<code>Output Limit</code></li> <li>\u8a62\u554f\u6e2c\u8cc7\u662f\u5426\u6709\u8aa4</li> </ul> </li> <li>\u4e0d\u884c\u63d0\u554f<ul> <li>\u51fa\u73fe <code>Wrong Answer</code>\u3001<code>Runtime Error</code>\u3001<code>Time Limit</code> \u8a62\u554f\u54ea\u88e1\u6709\u932f\u3002</li> <li>\u70ba\u4ec0\u9ebc\u7bc4\u4f8b\u6e2c\u8cc7\u90fd\u5c0d\uff0c\u4e0a\u50b3\u6c92\u6709\u7b54\u5c0d\u3002</li> </ul> </li> </ul>"},{"location":"tool/domjudgeteam/#_6","title":"\u5207\u63db\u6bd4\u8cfd","text":"<p>\u5982\u679c\u6709\u591a\u5834\u6bd4\u8cfd\uff0c\u53ef\u9ede\u64ca\u53f3\u4e0a\u89d2\u7684\u51a0\u8ecd\u734e\u76c3\u5207\u63db\u3002</p> <p></p>"},{"location":"tool/icpcregistration/","title":"ICPC \u8a3b\u518a\u4e8b\u5b9c","text":""},{"location":"tool/icpcregistration/#_1","title":"\u8a3b\u518a","text":"<ul> <li>\u5b98\u7db2</li> <li>\u628a\u8a3b\u518a\u7684 email \u4ea4\u7d66\u8001\u5e2b(\u6559\u7df4)\uff0c\u7528\u65bc\u8a3b\u518a\u968a\u4f0d\u3002</li> </ul>"},{"location":"tool/icpcregistration/#_2","title":"\u67e5\u770b\u662f\u5426\u5b8c\u6210\u968a\u4f0d\u8a3b\u518a","text":"<p>\u6bcf\u6b21\u4e3b\u8fa6\u55ae\u4f4d\u90fd\u6703\u8981\u6c42\u7684\u8cc7\u6599\u4e0d\u76e1\u76f8\u540c\uff0c\u518d\u8a3b\u518a\u5b8c\u968a\u4f0d\u5f8c\u5fc5\u9808\u67e5\u770b\u662f\u5426\u6709\u628a\u6240\u6709\u8cc7\u6599\u586b\u5b8c\u3002</p> <ul> <li>\u6309 Dashboard<ul> <li></li> </ul> </li> <li>\u9ede team \u9023\u7d50(\u6ce8\u610f\u662f\u5426\u70ba\u9019\u6b21\u6bd4\u8cfd)<ul> <li></li> </ul> </li> <li>\u6309\u6309\u9215\u770b\u770b\u662f\u4ec0\u9ebc\u554f\u984c<ul> <li></li> </ul> </li> <li>\u586b\u597d\u4e86\u6309 Revlidate \u6aa2\u67e5<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/icpcregistration/#_3","title":"\u88dc\u4e0a\u8cc7\u6599","text":"<ul> <li>\u6309 Profile<ul> <li></li> </ul> </li> <li>\u908a\u6b04\u4e0a\u6709 <code>*</code> \u4ee3\u8868\u6c92\u586b\u597d<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/makecodebook/","title":"\u88fd\u4f5c CodeBook","text":"<p>\u9019\u662f\u4e00\u500b\u8d85\u7d1a\u61f6\u4eba\u5305\u5efa\u8b70\u4f60\u5b78\u7fd2 <code>git</code> \u7684\u64cd\u4f5c\u65b9\u6cd5</p>"},{"location":"tool/makecodebook/#a-github","title":"A. GitHub","text":"<ul> <li>\u8a3b\u518a\u4e00\u500b github \u5e33\u865f<ul> <li>https://github.com/ </li> </ul> </li> </ul>"},{"location":"tool/makecodebook/#b","title":"B. \u5efa\u7acb\u4f60\u7684\u5009\u5eab","text":"<ul> <li>\u7bc4\u4f8b\u9801\u9762\uff1a https://github.com/HJackH/CodeBook-Sample </li> <li> <p>\u6709\u5169\u7a2e\u65b9\u6cd5\uff08\u9078\u64c7\u4e00\u7a2e\u5c31\u53ef\u4ee5\uff09</p> </li> <li> <p>fork</p> <ul> <li></li> </ul> </li> <li> <p>import</p> <ul> <li>\u5148\u8907\u88fd\u7bc4\u4f8b\u9801\u9762 git \u7684\u9023\u7d50<ul> <li></li> </ul> </li> <li>\u9ede\u64ca <code>Import repository</code> <ul> <li></li> </ul> </li> <li>\u8cbc\u4e0a\u525b\u525b\u8907\u88fd\u7684\u9023\u7d50<ul> <li></li> </ul> </li> </ul> </li> </ul>"},{"location":"tool/makecodebook/#c-codespace","title":"C. \u6253\u958b\u7db2\u9801\u7de8\u8f2f\u9801\u9762 (codespace)","text":"<p>\u5982\u679c\u4f60\u6703\u4f7f\u7528 git\uff0c\u4e5f\u53ef\u4ee5 clone \b\b\b\u5230\u672c\u5730\u7de8\u8f2f</p> <ul> <li> <p>\u5148\u5230\u525b\u525b\u4f60\u5efa\u7acb\u7684\u5009\u5eab</p> <ul> <li></li> </ul> </li> <li> <p>\u9ede\u9375\u76e4\u4e0a\u7684 <code>.</code> </p> </li> <li> <p>\u6216\u662f\u6539\u8b8a\u7db2\u5740</p> <ul> <li>\u539f\u672c\uff1a https://github.com/YOUR_NAME/mycodebook </li> <li>\u4fee\u6539\uff1a https://github.dev/YOUR_NAME/mycodebook </li> <li></li> </ul> </li> </ul>"},{"location":"tool/makecodebook/#d-codebook","title":"D. \u5c07\u4f60\u7684\u7a0b\u5f0f\u78bc\u52a0\u5230 codebook \u4e2d","text":"<ol> <li> <p>\u5c07\u7a0b\u5f0f\u78bc\u5148\u653e\u5230\u8cc7\u6599\u593e\u4e2d</p> <ul> <li>\u53ef\u4ee5\u662f <code>.cpp</code> \uff08\u7a0b\u5f0f\u78bc\uff09\u3001 <code>.tex</code> (latex) \u6216\u5176\u4ed6\u6587\u5b57\u6a94\u6848</li> <li></li> </ul> </li> <li> <p>\u66f4\u6539 <code>content.tex</code> </p> <ul> <li>\u7a0b\u5f0f\u78bc\u6a94\u6848\u7528 <code>lstinputisting</code> </li> <li>latex \u6a94\u6848\u7528 <code>input</code> </li> <li></li> </ul> </li> </ol>"},{"location":"tool/makecodebook/#e-codebooktex","title":"E. <code>codebook.tex</code> \u4e2d\u53ef\u8a2d\u5b9a\u7684\u5730\u65b9","text":"<ul> <li>\u4fee\u6539\u500b\u4eba\u3001\u968a\u4f0d\u8cc7\u8a0a<ul> <li><code>\\fancyhead[C]</code> \u662f\u4e2d\u9593\u7684\u6a19\u984c</li> <li><code>\\fancyhead[L]</code> \u662f\u5de6\u908a\u7684\u6a19\u984c</li> <li></li> </ul> </li> </ul>"},{"location":"tool/makecodebook/#f-github","title":"F. \u4e0a\u50b3\u5230 GitHub","text":"<ol> <li>git add<ul> <li></li> </ul> </li> <li>git commit<ul> <li>\u53ef\u4ee5\u6253\u4e00\u4e9b commit \u8a0a\u606f\uff08\u4f8b\u5982\uff1aadd kruskal's algorithm)</li> <li></li> </ul> </li> <li>git push\uff08\u7db2\u9801\u7de8\u8f2f\u5668\u4e0d\u9700\u8981 push)</li> </ol>"},{"location":"tool/makecodebook/#g","title":"G. \u67e5\u770b\u7d50\u679c","text":"<ul> <li>\u7b49\u5f85 1 \u5206\u9418\u5de6\u53f3</li> <li>\u5207\u63db\u5230 <code>pdf</code> branch<ul> <li></li> <li></li> </ul> </li> </ul>"},{"location":"tool/pc2/","title":"\u5982\u4f55\u4f7f\u7528 PC^2","text":"<p>PC2 \u66fe\u662f\u8a31\u591a\u8cfd\u4e8b\u5305\u542b ICPC Final \u6240\u4f7f\u7528\u7684\u8a55\u6e2c\u7cfb\u7d71\uff0c\u73fe\u591a\u88ab Domjudge \u53d6\u4ee3\u3002</p>"},{"location":"tool/pc2/#_1","title":"\u63d0\u4ea4","text":"<ul> <li>\u9078\u64c7\u984c\u76ee\u3001\u8a9e\u8a00\u3001\u7a0b\u5f0f\u78bc<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/pc2/#_2","title":"\u6e2c\u8a66","text":"<ul> <li>addititonal files \u6839\u672c\u6c92\u7528</li> <li>\u9078\u64c7\u8981\u6e2c\u8a66\u7684\u7a0b\u5f0f\uff0c\u6309 Test<ul> <li></li> </ul> </li> <li>\u9078\u64c7\u6e2c\u8a66 \u81ea\u88fd\u8f38\u5165\u6a94 <ul> <li></li> </ul> </li> <li>\u67e5\u770b\u8f38\u51fa\u7d50\u679c<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/pc2/#_3","title":"\u67e5\u770b\u7d50\u679c","text":"<ul> <li>\u9ede\u64ca View Runs<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/resources/","title":"\u76f8\u95dc\u8cc7\u6e90","text":""},{"location":"tool/resources/#online-judge-oj","title":"\u5728\u7dda\u8a55\u6e2c\u7cfb\u7d71 (Online Judge, OJ)","text":"<p>\u5728\u7dda\u8a55\u91cf\u7cfb\u7d71\u63d0\u4f9b\u7df4\u7fd2\u8005\u5728\u5beb\u5b8c\u984c\u76ee\u5f8c\uff0c\u5373\u6642\u4e0a\u50b3\u4e26\u7372\u5f97\u7d50\u679c\u3002</p> <ul> <li>Zerojudge \uff1a\u4e2d\u6587\uff0c\u6709\u5927\u91cf\u7c21\u55ae\u984c\u76ee\u3002</li> <li>TIOJ \uff1a\u4e2d\u6587\uff0c\u984c\u76ee\u504f\u96e3\u3002</li> <li>Atcoder \uff1a\u56fa\u5b9a\u9031\u672b\u665a\u4e0a\u6709\u6bd4\u8cfd\u3002</li> <li>Atcoder Problem </li> <li>Codeforces \uff1a\u6709\u6bd4\u8cfd\u4f46\u6642\u9593\u4e0d\u56fa\u5b9a\u3002</li> <li>Virtual Judge \uff1a\u63d0\u4f9b\u63d0\u4ea4\u7a0b\u5f0f\u78bc\u5230\u5404\u5927 OJ \u7684\u5e73\u53f0\u3002</li> <li>Uva \uff1a\u6700\u53e4\u8001\u7684 OJ\uff0c\u6709 ICPC \u984c\u76ee\u3002</li> <li>Algorithmist </li> <li>Uva toolkit </li> <li>UvaLive \uff1aICPC \u984c\u76ee\u3002</li> <li>\u6d1b\u8c37 </li> <li>neoj \uff1a\u53f0\u5927\u8cc7\u8a0a\u4e4b\u82bd\u3002</li> </ul>"},{"location":"tool/resources/#_2","title":"\u5b78\u7fd2\u7db2\u7ad9","text":"<ul> <li>oi wiki </li> <li>\u8cc7\u8a0a\u4e4b\u82bd </li> <li>menyf </li> <li>openhome \uff1a\u7a0b\u5f0f\u8a9e\u8a00\u5b78\u7fd2\u3002</li> <li>\u53f0\u5927\u5289\u90a6\u5cf0 C \u8a9e\u8a00\u8ab2\u7a0b\uff0c\u66f4\u4e45\u4ee5\u524d\u7684\u53ef\u4ee5\u53c3\u8003 Judgegirl\u3002</li> <li>\u7a0b\u5f0f\u8a9e\u8a00\u6559\u5b78\u8a8c</li> </ul>"},{"location":"tool/resources/#ap325","title":"AP325","text":"<ul> <li>AP325 \u8b1b\u7fa9\u7db2\u5740\uff1a\u8acb\u7559\u610f\u4fee\u6539\u6b77\u7a0b\u8207\u52d8\u8aa4\u3002</li> <li>PythAPCS123 \u7684 YouTube \u64ad\u653e\u6e05\u55ae</li> <li>PythAPCS123 \u8b1b\u7fa9\u6240\u5728\u4f4d\u7f6e</li> <li>PyAPCS45 \u56db\u4e94\u7d1a\u984c\u76ee\u7684 Python \u984c\u89e3\u6559\u5b78\u5f71\u7247\u64a5\u653e\u6e05\u55ae</li> </ul>"},{"location":"tool/resources/#_3","title":"\u8996\u89ba\u5316\u5b78\u7fd2","text":"<ul> <li>visualgo </li> <li>U.S. Fencing Coaches Association </li> </ul>"},{"location":"tool/resources/#codebook","title":"Codebook \u53c3\u8003","text":"<ul> <li>Hrbust ACM Book </li> <li>\u65e5\u6708\u5366\u9577\u7684\u6a21\u677f\u5eab </li> <li>wiwiho </li> <li>soulmachine</li> <li>menyf\uff1aJAVA \u8a9e\u8a00\u3002</li> </ul>"},{"location":"tool/resources/#_4","title":"\u7dda\u4e0a\u8cbc\u7a0b\u5f0f\u78bc","text":"<p>\u7576\u60f3\u8981\u900f\u904e\u7db2\u8def\u554f\u5176\u4ed6\u4eba\u6709\u95dc\u7a0b\u5f0f\u7684\u554f\u984c\uff0c\u5229\u7528\u4e0b\u5217\u7db2\u7ad9\uff0c\u56de\u8986\u8005\u80fd\u5bb9\u6613\u95b1\u8b80\u7a0b\u5f0f\u78bc\uff0c\u66f4\u5feb\u89e3\u6c7a\u554f\u984c\u3002</p> <ul> <li>replit</li> <li>ideone</li> <li>gist</li> </ul>"},{"location":"tool/resources/#_5","title":"\u5176\u4ed6\u5de5\u5177","text":"<ul> <li>A2 \uff1a\u984c\u55ae\u6574\u7406\u3002</li> <li>CS Academy - Graph tool </li> <li>CS Academy - Geometry tool </li> <li>CS Academy - Diff tool </li> <li>Visualize Code Execution \uff1a\u900f\u904e\u8996\u89ba\u5316\u5716\u5f0f\u4f86\u4e86\u89e3\u7a0b\u5f0f\u78bc\u57f7\u884c\u904e\u7a0b(https://hackmd.io/@wuhunghsiang/BkVV54Wrt)</li> <li>\u6d1b\u8c37\u751f\u6e2c\u8cc7</li> </ul>"},{"location":"tool/resources/#_6","title":"\u66f4\u591a","text":"<ul> <li>Awesome Competitive Programming \uff1a\u4e00\u500b\u8a73\u7d30\u7684\u8cc7\u6e90\u6574\u7406\u5217\u8868\u3002</li> </ul>"},{"location":"tool/sublimetext/","title":"Subblime Text 3","text":"<ul> <li>\u8f09\u9ede\uff1a https://www.sublimetext.com/ </li> </ul>"},{"location":"tool/sublimetext/#_1","title":"\u5e38\u7528\u7248\u9762\u914d\u7f6e","text":"<ol> <li><code>View -&gt; Layout -&gt; Column: 2</code></li> <li><code>View -&gt; Groups -&gt; New Group</code></li> </ol>"},{"location":"tool/sublimetext/#_2","title":"\u5e38\u7528\u71b1\u9375","text":"\u6307\u4ee4 \u529f\u80fd Ctrl + X \u522a\u9664\u884c Ctrl + D \u9078\u53d6\u55ae\u5b57\uff08\u53ef\u91cd\u8907\u9078\u53d6\u76f8\u540c\u7684\uff09 Ctrl + Y \u56de\u5fa9\u4e0a\u4e00\u6b65 Ctrl + B \u7de8\u8b6f C/C++ Alt + F3 \u9078\u53d6\u6240\u6709\u5df2\u9078\u53d6\u7684\u55ae\u5b57 Ctrl + Shift + V \u8cbc\u4e0a\u4e26\u7b26\u5408\u7e2e\u6392 Ctrl + Shift + T \u9084\u539f\u6700\u5f8c\u95dc\u9589\u7684\u5206\u9801 Ctrl + Shift + P \u547d\u4ee4\u63d0\u793a\u7b26\uff08\u5305\u542b\u6240\u6709\u547d\u4ee4\uff09"},{"location":"tool/sublimetext/#_3","title":"\u7de8\u8b6f","text":"<ul> <li>\u7528 Command Line \u7de8\u8b6f\uff08gcc/g++)</li> </ul>"},{"location":"tool/uva/","title":"UVa Online Judge","text":"<p>UVa \u70ba\u7b2c\u4e00\u500b Online Judge\uff0c\u539f\u70ba\u897f\u73ed\u7259 UVa \u5927\u5b78\u71df\u904b\uff0c\u73fe\u5df2\u7368\u7acb\u51fa\u4f86\uff0c\u7db2\u7ad9\u540d\u7a31\u4e5f\u4e0d\u6703\u518d\u51fa\u73fe UVa \u5b57\u6a23\u3002</p>"},{"location":"tool/uva/#_1","title":"\u8a3b\u518a","text":"<p>\u9996\u9801\u5de6\u908a\u6709\u500b login \u908a\u6b04\uff0c\u9ede\u64ca <code>register</code> \uff0c\u6703\u8df3\u8f49\u81f3\u8a3b\u518a\u9801\u9762\u3002</p> <p>\u5404\u6b04\u4f4d\u8aaa\u660e\u5982\u4e0b\uff1a</p> <ul> <li><code>name</code> , <code>Email</code> , <code>username</code> , <code>password</code> , <code>verify password</code> \u5fc5\u586b\u3002</li> <li><code>former UVa ID</code> \uff1a\u5982\u679c\u4f60\u4e4b\u524d\u6709 UVa \u5e33\u865f\u53ef\u4ee5\u5408\u4f75\uff0c\u6c92\u6709\u8fa6\u904e\u5c31\u8df3\u904e\u3002</li> <li><code>Result Email</code> \uff1a\u770b\u8981\u4e0d\u8981\u628a\u4e0a\u50b3\u7684\u7d50\u679c\u5bc4\u5230\u4f60\u7684 email\u3002</li> <li><code>Virtual judge</code> \uff1a\u662f\u5426\u70ba\u4ee3\u7406\u7e73\u4ea4\u7a0b\u5f0f\u78bc\u7684\u5e33\u865f\uff0c\u4e0d\u8981\u52fe\u9078\u3002</li> </ul>"},{"location":"tool/uva/#_2","title":"\u627e\u984c\u76ee","text":"<ul> <li>\u7528\u641c\u5c0b\u5f15\u64ce\u3002</li> <li>\u4f7f\u7528 UHunt \u3002</li> <li>\u9ede\u5de6\u908a\u908a\u6b04 <code>Browse Problems</code> \uff0c\u627e\u5c0b\u76f8\u5c0d\u61c9\u984c\u76ee\u3002</li> </ul>"},{"location":"tool/uva/#_3","title":"\u63d0\u4ea4\u984c\u76ee","text":"<p>\u984c\u76ee\u9801\u9762\u53f3\u4e0a\u89d2\u6709  \u500b\u6309\u9215\uff0c\u6309 <code>Submit</code> \uff0c\u6703\u8df3\u8f49\u7e73\u4ea4\u9801\u9762\u3002</p> <p>\u9078\u64c7\u8a9e\u8a00\uff0c\u7e73\u4ea4\u7a0b\u5f0f\u78bc\uff08\u8cbc\u4e0a\u7a0b\u5f0f\u78bc\u6216\u662f\u4e0a\u50b3\u6a94\u6848\uff09\uff0c\u6309 <code>Submit</code> \u3002</p>"},{"location":"tool/uva/#_4","title":"\u67e5\u770b\u7d50\u679c","text":"<ul> <li>\u9ede\u5de6\u908a\u908a\u6b04 <code>My Submissions</code> <ul> <li></li> </ul> </li> <li>\u9ede\u5de6\u908a\u908a\u6b04 <code>My uHunt with Virtual Contest Service</code> \uff08\u5efa\u8b70\uff09<ul> <li></li> </ul> </li> </ul>"},{"location":"tool/uva/#udebug","title":"uDebug","text":"<p>\u5728\u984c\u76ee\u9801\u9762\u6709\u9846 <code>Debug</code> \u6309\u9215\uff0c\u6709\u4eba\u6703\u63d0\u4f9b Debug \u7684\u6e2c\u8cc7\uff0c\u7d55\u5927\u90e8\u5206\u90fd\u662f\u53ef\u7528\u7684\uff0c\u57fa\u672c\u4e0a\u770b\u6309\u8b9a\u7684\u4eba\u6578 &gt; 0 \u5c31\u80fd\u4f7f\u7528</p>"},{"location":"tool/vscode/","title":"Visual Studio Code","text":"<ul> <li> <p>\u8f09\u9ede\uff1a https://code.visualstudio.com/ </p> </li> <li> <p>C/C++ Extension</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"tool/vscode/#_1","title":"\u5167\u5efa\u7d42\u7aef\u6a5f","text":"<ul> <li>\u547c\u53eb\u7d42\u7aef\u6a5f\uff1aCtrl +`<ul> <li></li> </ul> </li> <li>\u9810\u8a2d\u662f powershell\uff0c\u5efa\u8b70\u8abf\u6210 <code>cmd</code><ul> <li></li> </ul> </li> <li>\u9078 Command Prompt \u6309 <code>+</code> \u6253\u958b\u5373\u662f <code>cmd</code><ul> <li></li> </ul> </li> </ul>"},{"location":"tool/vscode/#_2","title":"\u5e38\u7528\u71b1\u9375","text":"\u6307\u4ee4 \u529f\u80fd Ctrl + X \u522a\u9664\u884c Ctrl + D \u9078\u53d6\u55ae\u5b57\uff08\u53ef\u91cd\u8907\u9078\u53d6\u76f8\u540c\u7684\uff09 Ctrl + Y \u56de\u5fa9\u4e0a\u4e00\u6b65 Shift + Alt + F \u81ea\u52d5\u6392\u7248"},{"location":"tool/vscode/#_3","title":"\u7de8\u8b6f","text":"<ul> <li>\u7528 Command Line \u7de8\u8b6f\uff08gcc/g++)</li> </ul>"}]}